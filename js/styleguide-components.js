!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=119)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(30));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.services.dom",[]).service("TwDomService",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(31)),o=s(n(32)),r=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.focusable",[r.default]).directive("twFocusable",a.default).directive("formControl",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(95));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.services.date",[]).service("TwDateService",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(36)),o=s(n(1)),r=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.select",[o.default,r.default]).component("twSelect",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(105));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.services.requirements",[]).service("TwRequirementsService",a.default).name},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var a=(r=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),o=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(o).concat([a]).join("\n")}var r;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},a=0;a<this.length;a++){var o=this[a][0];"number"==typeof o&&(i[o]=!0)}for(a=0;a<e.length;a++){var r=e[a];"number"==typeof r[0]&&i[r[0]]||(n&&!r[2]?r[2]=n:n&&(r[2]="("+r[2]+") and ("+n+")"),t.push(r))}},t}},function(e,t,n){var i,a,o={},r=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=i.apply(this,arguments)),a}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var i=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),l=null,c=0,u=[],d=n(44);function f(e,t){for(var n=0;n<e.length;n++){var i=e[n],a=o[i.id];if(a){a.refs++;for(var r=0;r<a.parts.length;r++)a.parts[r](i.parts[r]);for(;r<i.parts.length;r++)a.parts.push(y(i.parts[r],t))}else{var s=[];for(r=0;r<i.parts.length;r++)s.push(y(i.parts[r],t));o[i.id]={id:i.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],i={},a=0;a<e.length;a++){var o=e[a],r=t.base?o[0]+t.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};i[r]?i[r].parts.push(s):n.push(i[r]={id:r,parts:[s]})}return n}function p(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=s(e.insertAt.before,n);n.insertBefore(t,a)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return n.nc}();i&&(e.attrs.nonce=i)}return v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,i,a,o;if(t.transform&&e.css){if(!(o="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=o}if(t.singleton){var r=c++;n=l||(l=m(t)),i=w.bind(null,n,r,!1),a=w.bind(null,n,r,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),i=function(e,t,n){var i=n.css,a=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||o)&&(i=d(i));a&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var r=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(r),s&&URL.revokeObjectURL(s)}.bind(null,n,t),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),a=function(){g(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=r()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return f(n,t),function(e){for(var i=[],a=0;a<n.length;a++){var r=n[a];(s=o[r.id]).refs--,i.push(s)}e&&f(h(e,t),t);for(a=0;a<i.length;a++){var s;if(0===(s=i[a]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete o[s.id]}}}};var b,$=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,i){var a=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=$(t,a);else{var o=document.createTextNode(a),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(o,r[t]):e.appendChild(o)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(60));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.loading.process",[]).component("twProcess",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=t[0],a=n.getClosestParentByClassName(i,"form-group");a&&i&&(i.addEventListener("focus",function(){a.classList.add("focus")}),i.addEventListener("blur",function(){a.classList.remove("focus")}))};i.$inject=["$element","TwDomService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(33)),o=s(n(1)),r=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.radio",[o.default,r.default]).component("twRadio",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=d(n(0)),a=d(n(52)),o=d(n(54)),r=d(n(56)),s=d(n(57)),l=d(n(58)),c=d(n(18)),u=d(n(8));function d(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.processing",[c.default,r.default,s.default,l.default,u.default]).component("twUploadProcessing",a.default).component("twUploadProcessingMini",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=t,this.AsyncFileReader=n,this.AsyncFileSaver=i,this.AsyncTasksConfig=a,this.FileValidation=o,this.processingState=null}return i(e,[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&this.onFileCapture(e.file.currentValue)}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");if(this.reset(),this.file=e,this.isProcessing=!0,this.processingState=null,this.onStart({file:e}),!this.FileValidation.isSmallerThanMaxSize(e,this.maxSize))return this.validationMessages=[this.tooLargeMessage],void r({status:413,statusText:"Request Entity Too Large"},null,this);this.httpOptions?this.asyncFileRead(e).then(function(n){return t.asyncFileSave(e).then(function(e){return o(e,n,t)})}).catch(function(e){return r(e,null,t)}):this.asyncFileRead(e).then(function(e){return o(null,e,t)}).catch(function(e){return r(e,null,t)})}}},{key:"asyncFileSave",value:function(e){var t=this.AsyncTasksConfig.extendHttpOptions(this.httpOptions);return this.AsyncFileSaver.save(t.param||this.name,e,t)}},{key:"asyncFileRead",value:function(e){return this.AsyncFileReader.read(e)}},{key:"reset",value:function(){this.processingState=0,this.isProcessing=!1,this.isSuccess=!1,this.isError=!1}},{key:"onRemove",value:function(){this.onCancel()}}]),e}();function o(e,t,n){n.processingState=1;var i=null,a=n.file,o=n.httpOptions;return o&&o.idProperty&&e&&e.data&&e.data[o.idProperty]&&(i=e.data[o.idProperty]),n.$timeout(function(){n.isProcessing=!1,n.isSuccess=!0,n.onSuccess({file:a,dataUrl:t,id:i,response:e})},3600),t}function r(e,t,n){return n.processingState=-1,n.$timeout(function(){n.isProcessing=!1,n.isError=!0},3600),n.$timeout(function(){n.onFailure({error:e})},4100),e}a.$inject=["$timeout","AsyncFileReader","AsyncFileSaver","AsyncTasksConfig","FileValidationService"],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={name:"<",file:"<",onStart:"&",onSuccess:"&",onFailure:"&",onCancel:"&",maxSize:"<",accept:"<",httpOptions:"<",processingMessage:"<",successMessage:"<",errorMessage:"<",tooLargeMessage:"<",validationMessages:"<",cancelText:"<"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(89)),o=s(n(90)),r=s(n(91));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.drag-and-drop",[]).directive("twDrop",a.default).directive("twDragEnter",o.default).directive("twDragLeave",r.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(128));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.services.currency",[]).service("TwCurrencyService",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(27)),o=s(n(1)),r=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.checkbox",[o.default,r.default]).component("twCheckbox",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=g(n(0)),a=g(n(39)),o=g(n(45)),r=g(n(49)),s=g(n(11)),l=g(n(63)),c=g(n(67)),u=g(n(76)),d=g(n(80)),f=g(n(84)),h=g(n(85)),p=g(n(14));function g(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload",[o.default,r.default,s.default,l.default,c.default,u.default,d.default,h.default,p.default]).directive("twFileInput",f.default).component("twUpload",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(59));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.services.async-tasks-config",[]).service("AsyncTasksConfig",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=c(n(0)),a=c(n(92)),o=c(n(3)),r=c(n(20)),s=c(n(4)),l=c(n(2));function c(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.date",[o.default,r.default,s.default,l.default]).component("twDate",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(96)),o=s(n(98)),r=s(n(3));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.formatting.date",[r.default]).component("twDateFormat",a.default).filter("twDateFormat",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=u(n(0)),a=u(n(4)),o=u(n(10)),r=u(n(16)),s=u(n(19)),l=u(n(17)),c=u(n(99));function u(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.form-control",[a.default,o.default,r.default,s.default,l.default]).component("twFormControl",c.default).component("twDynamicFormControl",c.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=l(n(0)),a=l(n(21)),o=l(n(102)),r=l(n(5)),s=l(n(23));function l(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.field",[a.default,r.default,s.default]).component("twField",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(106)),o=r(n(1));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.stylguide.validation.control",[o.default]).directive("twValidation",a.default).name},function(e,t,n){"use strict";!function(){if("function"==typeof window.CustomEvent)return!1;function e(e,t){var n=document.createEvent("CustomEvent");return t=t||{bubbles:!1,cancelable:!1,detail:void 0},n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}e.prototype=window.Event.prototype,window.CustomEvent=e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(158));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.services.locale",[]).service("TwLocaleService",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=u(n(0)),a=u(n(18)),o=u(n(3)),r=u(n(15)),s=u(n(25)),l=u(n(1)),c=u(n(5));function u(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.services",[a.default,o.default,r.default,s.default,l.default,c.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(28)),a=o(n(29));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:{$ngModel:"ngModel"},bindings:{name:"@",ngModel:"=",ngTrueValue:"<",ngFalseValue:"<",ngRequired:"<",ngDisabled:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=n.controller("ngModel");this.dom=i,this.$element=n,this.element=n[0],this.addLabelHandler(),this.addWatchers(t,n,a),this.checkboxContainer=this.dom.getClosestParentByClassName(this.element,"checkbox"),this.label=!!this.checkboxContainer&&this.checkboxContainer.getElementsByTagName("label")[0]}return i(e,[{key:"$onInit",value:function(){this.checked=this.isChecked()}},{key:"isChecked",value:function(){return this.ngTrueValue&&this.ngTrueValue===this.ngModel||!this.ngTrueValue&&this.ngModel||!1}},{key:"buttonClick",value:function(e){this.checked?(this.checked=!1,this.$ngModel.$setViewValue(this.ngFalseValue||!1)):(this.checked=!0,this.$ngModel.$setViewValue(this.ngTrueValue||!0)),this.$ngModel.$setTouched(),e&&e.stopPropagation(),o(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur")),this.$ngModel.$setTouched(),o(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"addLabelHandler",value:function(){var e=this,t=this.dom.getClosestParentByTagName(this.element,"label");t&&t.addEventListener("click",function(n){t.getAttribute("disabled")||e.element.getElementsByTagName("button")[0].dispatchEvent(new CustomEvent("click"));n.preventDefault(),n.stopPropagation()})}},{key:"addWatchers",value:function(e,t,n){var i=this;e.$watch("$ctrl.ngModel",function(e,a){e!==a&&(n.$setDirty(),o(i.checked,t,n,i.ngRequired,i.dom),i.checked=i.isChecked())}),e.$watch("$ctrl.ngDisabled",function(e,n){var a=t[0],o=i.dom.getClosestParentByClassName(a,"checkbox"),r=i.dom.getClosestParentByTagName(a,"label");o&&(e&&!n?(o.classList.add("disabled"),r.setAttribute("disabled","true")):!e&&n&&(o.classList.remove("disabled"),r.removeAttribute("disabled")))}),e.$watch("$ctrl.ngRequired",function(e,a){e!==a&&o(i.checked,t,n,i.ngRequired,i.dom)})}}],[{key:"hiddenClick",value:function(e){e.stopPropagation()}}]),e}();function o(e,t,n,i,a){if(n.$touched){var o=t[0],r=o.getElementsByClassName("tw-checkbox-button")[0],s=a.getClosestParentByClassName(o,"checkbox"),l=a.getClosestParentByClassName(o,"form-group");!e&&i?(n.$setValidity("required",!1),r.classList.add("has-error"),s&&s.classList.add("has-error"),l&&l.classList.add("has-error")):(n.$setValidity("required",!0),r.classList.remove("has-error"),s&&s.classList.remove("has-error"),l&&l.classList.remove("has-error"))}}a.$inject=["$scope","$element","TwDomService"],t.default=a},function(e,t){e.exports='<input type=hidden class=sr-only name={{$ctrl.name}} ng-model=$ctrl.ngModel ng-click=$ctrl.hiddenClick($event) ng-disabled=$ctrl.ngDisabled /> <button type=button class=tw-checkbox-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{\'checked\': $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class="tw-checkbox-check glyphicon glyphicon-ok"></span> </button> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){this.getClosestParentByTagName=function(e,t){for(var n=t.toUpperCase(),i=e;i;)if((i=i.parentNode)&&i.tagName&&i.tagName.toUpperCase()===n)return i;return null},this.getClosestParentByClassName=function(e,t){for(var n=e;n;)if((n=n.parentNode)&&n.classList&&n.classList.contains(t))return n;return null},this.getPreviousSiblingWithClassName=function(e,t){for(var n=e.previousElementSibling;n;){if(n.classList.contains(t))return n;n=n.previousElementSibling}return null},this.getNextSiblingWithClassName=function(e,t){for(var n=e.nextElementSibling;n;){if(n.classList.contains(t))return n;n=n.nextElementSibling}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(9),o=(i=a)&&i.__esModule?i:{default:i};t.default=function(){return{restrict:"A",controller:o.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(9),o=(i=a)&&i.__esModule?i:{default:i};t.default=function(){return{restrict:"C",controller:o.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(34)),a=o(n(35));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:{$ngModel:"ngModel"},bindings:{name:"@",value:"@",ngModel:"=",ngValue:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=n.controller("ngModel");this.dom=i,this.$element=n,this.element=n[0],this.checked=this.isChecked(),this.label=this.dom.getClosestParentByTagName(this.element,"label"),n[0].addEventListener("blur",function(){a.$setTouched()}),this.addWatchers(t,this.element)}return i(e,[{key:"isChecked",value:function(){return this.ngValue&&this.ngModel===this.ngValue||this.value===this.ngModel}},{key:"buttonClick",value:function(){this.ngDisabled||(this.checked=!0,this.$ngModel.$setViewValue(this.ngValue||this.value))}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"hiddenInputChange",value:function(){this.$ngModel.$setViewValue(this.ngValue||this.value)}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.ngModel",function(e,t){e!==t&&n.$ngModel.$setDirty(),n.checked=n.isChecked()}),e.$watch("$ctrl.ngDisabled",function(e,i){var a=n.dom.getClosestParentByClassName(t,"radio");a&&(e&&!i?(a.classList.add("disabled"),a.setAttribute("disabled","true")):!e&&i&&(a.classList.remove("disabled"),a.removeAttribute("disabled")))})}}]),e}();a.$inject=["$scope","$element","TwDomService"],t.default=a},function(e,t){e.exports='<input type=radio class=sr-only name={{$ctrl.name}} ng-value="$ctrl.ngValue || $ctrl.value" ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.hiddenInputChange() tabindex=-1 /> <button type=button class=tw-radio-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{checked: $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class=tw-radio-check></span> </button> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(37)),a=o(n(38));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:"ngModel",transclude:!0,bindings:{ngModel:"=",ngRequired:"<",ngDisabled:"<",options:"<",name:"@",placeholder:"@",filter:"@",size:"@",dropdownRight:"@",dropdownUp:"@",dropdownWidth:"@",inverse:"<",hideNote:"@",hideSecondary:"@",hideIcon:"@",hideCurrency:"@",hideCircle:"@",hideLabel:"@"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(0),r=(i=o)&&i.__esModule?i:{default:i};var s=function(){function e(t,n,i,a,o,r){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModel=t.controller("ngModel"),this.$element=t,this.$attrs=a,this.$timeout=i,this.$transclude=n,this.dom=o,this.element=t[0],r.$watch("$ctrl.ngModel",function(e,t){return s.onModelChange(e,t)})}return a(e,[{key:"$onInit",value:function(){var e,t,n,i,a,o,r,s,l;this.button=this.element.getElementsByClassName("btn")[0],this.search="",p(this.$ngModel,this),m(this.$ngModel,this,this.$element,this.$attrs),e=this,t=this.$element,n=this.$ngModel,this.options,i=this.$timeout,a=t[0],o=a.getElementsByClassName("btn")[0],r=a.getElementsByClassName("btn-group")[0],s=a.getElementsByClassName("dropdown-menu")[0],l=function(){i(function(){o===document.activeElement||r.classList.contains("open")||a.dispatchEvent(new CustomEvent("blur"))},150)},a.addEventListener("blur",function(){n.$setTouched()}),o.addEventListener("keypress",function(t){e.optionKeypress(t)}),o.addEventListener("click",function(){i(function(){e.shouldShowSearch()?a.getElementsByClassName("tw-select-filter")[0].focus():f(a)})}),o.addEventListener("focusout",l),s.addEventListener("focusout",l),s.addEventListener("keypress",function(t){"a"===t.target.tagName.toLowerCase()&&e.optionKeypress(t)}),function(e,t){e(function(e){(e.length>1||""!==e.text().trim())&&(t.hasTranscluded=!0)})}(this.$transclude,this),this.responsiveClasses=M,this.optionsPageSize=300,this.numberOfOptionsRevealed=this.optionsPageSize,this.hasMoreOptionsToReveal=!1,this.filterString="",this.filteredOptions=this.getFilteredOptions()}},{key:"$onChanges",value:function(e){e.options&&this.onOptionsChange(e.options.currentValue,e.options.previousValue)}},{key:"onModelChange",value:function(e,t){if(e!==t){(e||t)&&this.$ngModel.$setDirty();var n=g(this.options,e);this.selected=n||null}}},{key:"onOptionsChange",value:function(e,t){e!==t&&(p(this.$ngModel,this),m(this.$ngModel,this,this.$element,this.$attrs),this.filteredOptions=this.getFilteredOptions())}},{key:"circleClasses",value:function(e){var t=M(e),n=M(this.hideSecondary);return this.selected.secondary&&0===n.length?t+=" circle-sm":t+=" circle-xs",t}},{key:"buttonFocus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"optionClick",value:function(e,t){e.disabled?t.stopPropagation():(v(this.$ngModel,this,e),this.button.focus())}},{key:"optionFocus",value:function(e){v(this.$ngModel,this,e)}},{key:"optionKeypress",value:function(e){if(!e.target.classList.contains("tw-select-filter"))if(8!==h(e)){var t=function(e){return String.fromCharCode(h(e))}(e);!function(e,t,n,i){var a=b(e,t,n,t.search+i);a?t.search+=i:(t.search=i,a=b(e,t,n,t.search))}(this.$ngModel,this,this.options,t),f(this.element)}else e.preventDefault()}},{key:"placeholderClick",value:function(){y(this.$ngModel,this),this.button.focus()}},{key:"placeholderFocus",value:function(){y(this.$ngModel,this)}},{key:"getFilteredOptions",value:function(){if(this.hasMoreOptionsToReveal=!1,!this.options||!this.options.filter)return[];for(var e=this.filterString&&this.filterString.toLowerCase().replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),t=Object.create(null),n=[],i=0;i<this.options.length;++i){var a=this.options[i];if(!a.header||a.value||a.label){var o=!1,s=t[a.label],f=r.default.isArray(s);if(f)for(var h=0;h<s.length;h++)if(r.default.equals(s[h],a.value)){o=!0;break}if(!o&&(!e||l(a,e)||c(a,e)||u(a,e)||d(a,e))){if(n.length>=this.numberOfOptionsRevealed){this.hasMoreOptionsToReveal=!0;break}f?s.push(a.value):t[a.label]=[a.value],n.push(a)}}else n.push(a)}return n}},{key:"focusOnFilterInput",value:function(){var e=this.element.getElementsByClassName("tw-select-filter")[0];e&&e.focus()}},{key:"filterChange",value:function(){this.numberOfOptionsRevealed=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions(),!function(e,t){if(!r.default.isArray(e))return;var n=void 0;return e.forEach(function(e){t&&r.default.equals(t.value,e.value)&&(n=t)}),n}(this.filteredOptions,this.selected)&&this.filteredOptions.length&&v(this.$ngModel,this,this.filteredOptions[0])}},{key:"filterKeydown",value:function(e){var t=e.which||e.charCode||e.keyCode,n=this.element.querySelector(".active"),i=!!n&&n.querySelector("a"),a=this.element.getElementsByClassName("tw-select-option-link");return t===C.down?(this.moveDownOneOption(n,i,a),e.preventDefault()):t===C.up?(this.moveUpOneOption(n,i,a),e.preventDefault()):t===C.return&&(n&&(n.click(),this.button.focus()),e.preventDefault()),!0}},{key:"selectOptionUsingLink",value:function(e){var t=this.filteredOptions[e.getAttribute("index")];v(this.$ngModel,this,t)}},{key:"moveUpOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[0]){var i=this.dom.getPreviousSiblingWithClassName(e,"tw-select-option");if(i){var a=i.getElementsByTagName("a")[0];this.selectOptionUsingLink(a)}}}else this.selectOptionUsingLink(n[n.length-1])}},{key:"moveDownOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[n.length-1]){var i=this.dom.getNextSiblingWithClassName(e,"tw-select-option");if(i){var a=i.getElementsByTagName("a")[0];return void this.selectOptionUsingLink(a)}}var o=this.element.getElementsByClassName("tw-select-transcluded");o.length&&o[0].getElementsByTagName("a")[0].focus()}else this.selectOptionUsingLink(n[0])}},{key:"shouldShowSearch",value:function(){return this.filter||this.options&&this.options.length>12}},{key:"revealMoreOptions",value:function(e){e.stopPropagation(),this.numberOfOptionsRevealed+=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions()}}]),e}();function l(e,t){return e.label&&e.label.toLowerCase().search(t)>=0}function c(e,t){return e.note&&e.note.toLowerCase().search(t)>=0}function u(e,t){return e.secondary&&e.secondary.toLowerCase().search(t)>=0}function d(e,t){return e.searchable&&e.searchable.toLowerCase().search(t)>=0}function f(e){var t=e.getElementsByClassName("active")[0];t&&t.getElementsByTagName("a")[0].focus()}function h(e){return e.which||e.charCode||e.keyCode}function p(e,t){if(w(t.ngModel)){var n=g(t.options,t.ngModel);n&&v(e,t,n)}}function g(e,t){var n=!1;return e.forEach(function(e){r.default.equals(e.value,t)&&(n=e)}),n}function m(e,t,n,i){if((t.ngRequired||i.required)&&!w(t.ngModel)&&!t.placeholder)for(var a=0;a<t.options.length;a++)if(w(t.options[a].value)){v(e,t,t.options[a]);break}}function v(e,t,n){n.disabled||(e.$setViewValue(n.value),e.$commitViewValue(),t.selected=n)}function y(e,t){e.$setViewValue(null),e.$commitViewValue(),t.selected=!1}function b(e,t,n,i){var a=!1,o=i.toLowerCase();return n.forEach(function(n){a||($(n.label,o)||$(n.note,o)||$(n.secondary,o)||$(n.searchable,o))&&(v(e,t,n),a=!0)}),a}function $(e,t){return e&&0===e.toLowerCase().indexOf(t)}function w(e){return e||0===e||!1===e}function M(e){var t="",n=[],i={xs:!0,sm:!0,md:!0,lg:!0,xl:!0};return"boolean"==typeof e&&e?"hidden":e&&e.toLowerCase&&"true"===e.toLowerCase()?"hidden":(e&&(n=e.split(",")),n.forEach(function(e){i[e]&&(t+="hidden-"+e+" ")}),t)}var C={up:38,down:40,return:13};s.$inject=["$element","$transclude","$timeout","$attrs","TwDomService","$scope"],t.default=s},function(e,t){e.exports='<div class="btn-group btn-block tw-select" ng-class="{\n    dropdown: !$ctrl.dropdownUp,\n    dropup: $ctrl.dropdownUp\n  }" aria-hidden=false> <button type=button class="btn btn-input dropdown-toggle" ng-class="{\n      \'btn-input-inverse\': $ctrl.inverse,\n      \'btn-addon\': $ctrl.inverse,\n      \'btn-sm\': $ctrl.size === \'sm\',\n      \'btn-lg\': $ctrl.size === \'lg\'\n    }" data-toggle=dropdown aria-expanded=false ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.buttonFocus() tw-focusable> <span class=tw-select-selected ng-if=$ctrl.selected> <span class="circle circle-inverse pull-xs-left circle-sm" ng-if="$ctrl.selected && $ctrl.selected.icon && $ctrl.selected.secondary"> <span class="icon {{$ctrl.selected.icon}}"></span> </span> <span class="circle circle-inverse pull-xs-left" ng-class=$ctrl.circleClasses($ctrl.hideCircle) ng-if="($ctrl.selected.circleText || $ctrl.selected.circleImage || $ctrl.selected.circleIcon)"> <span ng-if=$ctrl.selected.circleText>{{$ctrl.selected.circleText}}</span> <img alt={{$ctrl.selected.label}} ng-if=$ctrl.selected.circleImage src="data:image/png;base64,\n            iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{$ctrl.selected.circleImage}} /> <span ng-if=$ctrl.selected.circleIcon class="icon {{$ctrl.selected.circleIcon}}"></span> </span> <span class=text-ellipsis> <span class="currency-flag currency-flag-{{$ctrl.selected.currency | lowercase}}" ng-if="$ctrl.selected && $ctrl.selected.currency" ng-class=$ctrl.responsiveClasses($ctrl.hideCurrency)></span> <span class="icon {{$ctrl.selected.icon}}" ng-if="$ctrl.selected && $ctrl.selected.icon && !$ctrl.selected.secondary" ng-class=$ctrl.responsiveClasses($ctrl.hideIcon)></span> <span class=tw-select-label ng-class=$ctrl.responsiveClasses($ctrl.hideLabel)> {{$ctrl.selected.label}} </span> <span ng-if=$ctrl.selected.note ng-class=$ctrl.responsiveClasses($ctrl.hideNote) class="tw-select-note small m-l-1"> {{$ctrl.selected.note}} </span> <span ng-if=$ctrl.selected.secondary ng-class=$ctrl.responsiveClasses($ctrl.hideSecondary) class="tw-select-secondary small secondary text-ellipsis"> {{$ctrl.selected.secondary}} </span> </span> </span> <span class=form-control-placeholder ng-if=!$ctrl.selected>{{$ctrl.placeholder}}</span> <span class=caret></span> </button> <ul class=dropdown-menu role=menu ng-class="{\n      \'dropdown-menu-xs-right\': $ctrl.dropdownRight === \'xs\',\n      \'dropdown-menu-sm-right\': $ctrl.dropdownRight === \'sm\',\n      \'dropdown-menu-md-right\': $ctrl.dropdownRight === \'md\',\n      \'dropdown-menu-lg-right\': $ctrl.dropdownRight === \'lg\',\n      \'dropdown-menu-xl-right\': $ctrl.dropdownRight === \'xl\',\n      \'dropdown-menu-sm\': $ctrl.dropdownWidth === \'sm\',\n      \'dropdown-menu-md\': $ctrl.dropdownWidth === \'md\',\n      \'dropdown-menu-lg\': $ctrl.dropdownWidth === \'lg\'\n    }"> <li ng-if=$ctrl.shouldShowSearch()> <a href="" class="tw-select-filter-link p-a-0" tabindex=-1 ng-focus=$ctrl.focusOnFilterInput()> <div class=input-group> <span class=input-group-addon><span class="icon icon-search"></span> </span> <input type=text class="form-control tw-select-filter" placeholder={{$ctrl.filter}} ng-model=$ctrl.filterString ng-change=$ctrl.filterChange() ng-keydown=$ctrl.filterKeydown($event) /> </div> </a> </li> <li ng-class="{active: !$ctrl.selected}" ng-if="$ctrl.placeholder && !$ctrl.ngRequired && !$ctrl.filter"> <a href="" tabindex=-1 ng-click=$ctrl.placeholderClick() ng-focus=$ctrl.placeholderFocus() class=tw-select-placeholder tw-focusable> {{$ctrl.placeholder}} </a> </li> <li ng-if="($ctrl.placeholder && !$ctrl.ngRequired) || $ctrl.filter" class=divider></li> <li ng-repeat="option in $ctrl.filteredOptions" ng-class="{\n        \'active\': $ctrl.ngModel === option.value,\n        \'disabled\': option.disabled,\n        \'dropdown-header\': option.header,\n        \'tw-select-option\': !option.header && !option.disabled\n      }"> <span ng-if=option.header class=text-ellipsis ng-click=$event.stopPropagation()>{{option.header}}</span> <a href="" ng-if=!option.header ng-click="$ctrl.optionClick(option, $event)" ng-focus=$ctrl.optionFocus(option) ng-class="{\'tw-select-option-link\': !option.disabled}" index={{$index}} tabindex=-1 tw-focusable> <div ng-if="option.icon && option.secondary" class="circle circle-inverse pull-xs-left circle-sm"> <span class="icon {{option.icon}}"></span> </div> <span ng-if="option.icon && !option.secondary" class="icon {{option.icon}} pull-xs-left"> </span> <span ng-if=option.currency class="currency-flag currency-flag-{{option.currency | lowercase}} pull-xs-left"> </span> <span class="circle circle-inverse pull-xs-left" ng-class="{\n            \'circle-sm\': option.secondary,\n            \'circle-xs\': !option.secondary\n          }" ng-if="option.circleText || option.circleImage || option.circleIcon"> <span class=tw-select-circle-text ng-if=option.circleText>{{option.circleText}}</span> <img alt={{option.label}} ng-if=option.circleImage src="data:image/png;base64,\n              iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{option.circleImage}} /> <span ng-if=option.circleIcon class="icon {{option.circleIcon}}"></span> </span>{{option.label}}<span ng-if=option.note class="tw-select-note small m-l-1">{{option.note}}</span><span ng-if=option.secondary class="tw-select-secondary small text-ellipsis">{{option.secondary}}</span> </a> </li> <li ng-if=$ctrl.hasMoreOptionsToReveal> <a href="" ng-click=$ctrl.revealMoreOptions($event) class=tw-select-load-more tabindex=-1 tw-focusable> ... </a> </li> <li ng-if=$ctrl.hasTranscluded class=divider></li> <li ng-transclude ng-if=$ctrl.hasTranscluded class=tw-select-transcluded></li> </ul> </div> <input type=hidden class=tw-select-hidden name={{$ctrl.name}} value={{$ctrl.ngModel}} ng-disabled=$ctrl.ngDisabled /> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(40)),a=o(n(41));function o(e){return e&&e.__esModule?e:{default:e}}n(42);var r={controller:i.default,template:a.default,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",icon:"@",helpImage:"@",label:"@",placeholder:"@",buttonText:"@",cancelText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",size:"@",accept:"@",httpOptions:"<",onStart:"=",onSuccess:"=",onFailure:"=",onCancel:"=",maxSize:"<",source:"<",cameraOverlay:"@",cameraDirection:"@",description:"@",instructions:"@"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=i,this.FileValidationService=a,this.isProcessing=!1}return i(e,[{key:"$onChanges",value:function(e){e.source&&(this.isLiveCameraUpload="CAMERA_ONLY"===e.source.currentValue)}},{key:"onFileCapture",value:function(e){if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");this.file=e}}},{key:"reset",value:function(){this.isProcessing=!1,this.isDone=!1,this.clearHtmlInput(),this.setNgModel(null),this.onCancel&&this.onCancel()}},{key:"clearHtmlInput",value:function(){this.$element[0].querySelectorAll("input")&&this.$element[0].querySelectorAll("input").forEach(function(e){e.value=null})}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"isDropEligible",value:function(){return"CAMERA_ONLY"!==this.source}},{key:"onDragEnter",value:function(){this.isDroppable=this.isDropEligible()}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e[0])}},{key:"onProcessStart",value:function(e){this.isDone=!1,this.isProcessing=!0,this.onStart&&this.onStart({file:e})}},{key:"onProcessSuccess",value:function(e,t,n,i){this.isDone=!0,this.isProcessing=!1,this.dataUrl=t,this.isImage=this.FileValidationService.isImage(e),this.httpOptions&&n?this.setNgModel(n):this.setNgModel(t),this.onSuccess(e,i)}},{key:"onProcessFailure",value:function(e){this.onFailure&&this.onFailure({error:e})}}]),e}();a.$inject=["$element","$scope","$attrs","FileValidationService"],t.default=a},function(e,t){e.exports="<div class=droppable tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() tw-drop=$ctrl.onDrop(files) ng-class=\"{\n    'droppable-sm': $ctrl.size ==='sm',\n    'droppable-md': $ctrl.size ==='md' || !$ctrl.size,\n    'droppable-lg': $ctrl.size ==='lg',\n    'droppable-dropping': $ctrl.isDroppable && !$ctrl.ngDisabled,\n    'droppable-processing': !$ctrl.isDone && ($ctrl.isProcessing || $ctrl.isSuccess),\n    'droppable-complete': $ctrl.isDone\n  }\"> <div class=droppable-default-card aria-hidden=\"{{$ctrl.isDone || $ctrl.isProcessing}}\"> <tw-upload-capture label=$ctrl.label icon=$ctrl.icon accept=$ctrl.accept input-file=$ctrl.inputFile help-image=$ctrl.helpImage button-text=$ctrl.buttonText ng-disabled=$ctrl.ngDisabled placeholder=\"$ctrl.placeholder || $ctrl.description\" is-live-camera-upload=$ctrl.isLiveCameraUpload camera-overlay=$ctrl.cameraOverlay camera-direction=$ctrl.cameraDirection on-file-capture=$ctrl.onFileCapture(file)></tw-upload-capture> </div> <div class=\"droppable-processing-card droppable-card\" aria-hidden={{!$ctrl.isProcessing}}> <tw-upload-processing name=$ctrl.name file=$ctrl.file on-start=$ctrl.onProcessStart(file) on-success=\"$ctrl.onProcessSuccess(file, dataUrl, id, response)\" on-failure=$ctrl.onProcessFailure(error) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-processing> </div> <div class=\"droppable-complete-card droppable-card\" aria-hidden={{!$ctrl.isDone}}> <tw-upload-success label=$ctrl.label is-image=$ctrl.isImage file=$ctrl.file data=$ctrl.dataUrl success-message=$ctrl.successText cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-success> </div> <div class=\"droppable-dropping-card droppable-card\"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> </div> "},function(e,t,n){var i=n(43);"string"==typeof i&&(i=[[e.i,i,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(7)(i,a);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,"div.transparent-area{background-color:hsla(0,0%,98%,.9)}.icon-circle-shadow{background:#fff;box-shadow:0 4px 16px rgba(0,0,0,.08);padding:12px;box-sizing:border-box;border-radius:99px}.icon-circle-shadow svg{top:4px;position:relative}.inline-svg{top:.35em;position:relative}@media (min-width:576px){p.first-error{min-height:72px}}@media only screen and (max-width:575px){.empty-processing-list{height:130px}.processing-list{min-height:130px}}@media only screen and (min-width:575px){.multi-upload{height:375px}.multi-upload .empty-screen{padding-top:40px}.empty-processing-list,.processing-list{height:290px}}.processing-list{overflow:auto}.processing-list,.processing-list .processing-item .media-body,.processing-list .processing-item .media-right{border-bottom:1px solid #e2e6e8}.processing-list .last-item .processing-item .media-body,.processing-list .last-item .processing-item .media-right{border-bottom:0}.processing-list .processing-item{position:relative;width:100%}.processing-list .processing-item .vertical-center{align-self:center}.empty-processing-list{display:flex;justify-content:center}.empty-processing-list .circle{background-color:#d8f1fa}.empty-processing-list .empty-screen{align-self:center}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var a,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(a=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:i+o.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(46));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.capture",[]).component("twUploadCapture",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(47)),a=o(n(48));function o(e){return e&&e.__esModule?e:{default:e}}var r={template:i.default,controller:a.default,bindings:{label:"<",icon:"<",accept:"<",buttonText:"<",ngDisabled:"<",placeholder:"<",inputFile:"<",helpImage:"<",isLiveCameraUpload:"<",cameraOverlay:"<",cameraDirection:"<",onFileCapture:"&"}};t.default=r},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <img ng-show=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-show=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 class=m-b-1 ng-if="$ctrl.label || $ctrl.description"> {{$ctrl.label || $ctrl.description}} </h4> <p class=m-b-2 ng-if="$ctrl.placeholder || $ctrl.instructions"> {{$ctrl.placeholder || $ctrl.instructions}} </p> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label=$ctrl.buttonText accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onButtonCapture(files)> </tw-upload-button> <tw-camera-button ng-if=$ctrl.isLiveCameraUpload label=$ctrl.buttonText disabled=$ctrl.ngDisabled on-click=$ctrl.onCameraButtonClick()> </tw-camera-button> <tw-camera-capture ng-if="$ctrl.isLiveCameraUpload && $ctrl.showLiveCaptureScreen" overlay={{$ctrl.cameraOverlay}} direction={{$ctrl.cameraDirection}} on-cancel=$ctrl.onCameraCancel() on-capture=$ctrl.onCameraCapture(file)> </tw-camera-capture> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.showLiveCaptureScreen=!1}return i(e,[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onCameraCancel",value:function(){this.showLiveCaptureScreen=!1}},{key:"onCameraCapture",value:function(e){this.showLiveCaptureScreen=!1,this.onFileCapture({file:e})}},{key:"onCameraButtonClick",value:function(){this.showLiveCaptureScreen=!0}},{key:"onButtonCapture",value:function(e){var t=e[0];this.onFileCapture({file:t})}}]),e}();a.$inject=["$element"],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(50));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.dropping",[]).component("twUploadDropping",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(51);var o={template:((i=a)&&i.__esModule?i:{default:i}).default,bindings:{droppingText:"<"}};t.default=o},function(e,t){e.exports='<div class=droppable-card-content> <div class="circle circle-sm m-b-3"> <span class="icon icon-add"></span> </div> <h4> {{ $ctrl.droppingText || \'Drop file to start upload\' }} </h4> <p class="m-t-2 m-b-0"></p> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(12)),a=r(n(53)),o=r(n(13));function r(e){return e&&e.__esModule?e:{default:e}}var s={controller:i.default,template:a.default,bindings:o.default};t.default=s},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <tw-process size=sm state=$ctrl.processingState></tw-process> </div> <h4 class=m-b-2> <span ng-if="$ctrl.isProcessing && $ctrl.processingMessage" class=upload-processing-message> {{$ctrl.processingMessage}} </span> <span ng-if="$ctrl.isError && $ctrl.errorMessage" class=upload-failure-message> {{$ctrl.errorMessage}} </span> </h4> <ul ng-if="$ctrl.isError && $ctrl.validationMessages" class="text-xs-left m-b-2"> <li ng-if=$ctrl.validationMessages[0]>{{ $ctrl.validationMessages[0] }}</li> <li ng-if=$ctrl.validationMessages[1]>{{ $ctrl.validationMessages[1] }}</li> <li ng-if=$ctrl.validationMessages[2]>{{ $ctrl.validationMessages[2] }}</li> </ul> <a href="" ng-if=$ctrl.isError class="btn btn-primary" ng-click=$ctrl.onRemove() role=button> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(12)),a=r(n(55)),o=r(n(13));function r(e){return e&&e.__esModule?e:{default:e}}var s={controller:i.default,template:a.default,bindings:o.default};t.default=s},function(e,t){e.exports='<div class=processing-item> <div class=media> <div class="media-left vertical-center p-r-2 p-y-1"> <tw-process size=xs state=$ctrl.processingState></tw-process> </div> <div class="media-body text-xs-left p-y-1" style=overflow:auto> <div> <small class="m-b-0 text-ellipsis file-name"><strong>{{ $ctrl.file.name }}</strong></small> <small class="m-b-0 text-ellipsis tiny"> <span ng-if=$ctrl.isProcessing>{{ $ctrl.processingMessage }}</span> <span ng-if=$ctrl.isError>{{ $ctrl.errorMessage }}</span> <span ng-if=$ctrl.isSuccess>{{ $ctrl.successMessage }}</span> </small> </div> </div> <div class="media-right p-l-2 p-y-2"> <a href="" ng-if=!$ctrl.isProcessing class=close ng-click=$ctrl.onRemove() role=button>&times;</a> </div> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$q=t}return i(e,[{key:"read",value:function(e){var t=new FileReader,n=this.$q.defer();return t.onload=function(e){n.resolve(e.target.result)},t.onerror=function(e){n.reject(e)},t.readAsDataURL(e),n.promise}}]),e}();a.$inject=["$q"],t.default=angular.module("tw.styleguide.forms.upload.file-reader",[]).service("AsyncFileReader",a).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$http=t}return i(e,[{key:"save",value:function(e,t,n){if(!n)throw new Error("You must supply httpOptions");var i=new FormData,a=n.param||e;i.append(a,t);var o=function(e){var t=angular.copy(e);if(!t.url)throw new Error("You must supply a URL to post image data asynchronously");t.headers||(t.headers={});return t.headers["Content-Type"]=void 0,t.transformRequest=angular.identity,t}(n);return delete o.method,this.$http.post(o.url,i,o)}}]),e}();a.$inject=["$http"],t.default=angular.module("tw.styleguide.forms.upload.file-saver",[]).service("AsyncFileSaver",a).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(0),r=(i=o)&&i.__esModule?i:{default:i};var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return a(e,[{key:"isImage",value:function(e){return e.type&&e.type.indexOf("image")>-1}},{key:"isSmallerThanMaxSize",value:function(e,t){return!r.default.isNumber(t)||e.size<=t}}]),e}();t.default=r.default.module("tw.styleguide.forms.upload.validation-service",[]).service("FileValidationService",s).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl="",this.headers={}}return a(e,[{key:"setBaseUrl",value:function(e){this.baseUrl=e}},{key:"setHeader",value:function(e,t){this.headers[e]=t}},{key:"extendHttpOptions",value:function(e){var t=angular.copy(e);return t.headers=t.headers?i({},t.headers,this.headers):this.headers,t.url&&(t.url=""+this.baseUrl+t.url),t}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(61)),a=o(n(62));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{state:"<",size:"@",onStop:"&",promise:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$interval=n,this.$timeout=i,this.interval=null,this.processing=this.state,this.onStateChange()}return i(e,[{key:"$onChanges",value:function(e){e.state&&this.onStateChange(),e.state&&this.onSizeChange()}},{key:"onStateChange",value:function(){o(this.processing)&&(this.processing=null,this.startProcess())}},{key:"onSizeChange",value:function(){switch(this.stopProcess(),this.startProcess(),this.size||(this.size="sm"),this.size){case"xs":this.radius="11";break;case"sm":this.radius="22";break;case"xl":this.radius="61";break;default:this.radius="46%"}}},{key:"startProcess",value:function(){var e=this;this.interval||(this.interval=this.$interval(function(){e.processing=e.state,o(e.state)&&(e.stopProcess(),e.notifyConsumers())},1500))}},{key:"stopProcess",value:function(){this.interval&&(this.$interval.cancel(this.interval),this.interval=null)}},{key:"notifyConsumers",value:function(){this.onStop&&(0===this.state?this.onStop():this.$timeout(this.onStop,1800))}}]),e}();function o(e){return-1===e||0===e||1===e}a.$inject=["$scope","$interval","$timeout"],t.default=a},function(e,t){e.exports="<span class=process ng-class=\"{\n    'process-success': $ctrl.processing === 1,\n    'process-danger': $ctrl.processing === -1,\n    'process-stopped': $ctrl.processing === 0,\n    'process-xs': $ctrl.size === 'xs',\n    'process-sm': $ctrl.size === 'sm',\n    'process-md': $ctrl.size === 'md',\n    'process-lg': $ctrl.size === 'lg',\n    'process-xl': $ctrl.size === 'xl'\n  }\"> <span class=process-icon-container> <span class=process-icon-horizontal></span> <span class=process-icon-vertical></span> </span> <svg version=1.1 xmlns=http://www.w3.org/2000/svg xml:space=preserve> <circle class=process-circle cx=50% cy=50% ng-attr-r={{$ctrl.radius}} fill-opacity=0.0 /> </svg> </span> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(64));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.success",[]).component("twUploadSuccess",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(65)),a=o(n(66));function o(e){return e&&e.__esModule?e:{default:e}}var r={template:i.default,controller:a.default,bindings:{label:"<",file:"<",data:"<",isImage:"<",successMessage:"<",cancelText:"<",onCancel:"&"}};t.default=r},function(e,t){e.exports='<div class=droppable-card-content> <h4 ng-if="$ctrl.successMessage || $ctrl.label" class="m-b-2 upload-success-message"> {{ $ctrl.successMessage || $ctrl.label }} </h4> <img ng-if="$ctrl.isImage && $ctrl.data" src="data:image/png;base64,\n      iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src="{{ $ctrl.data }}" alt=OK class="thumbnail m-b-3"/> <span class="icon icon-pdf icon-xxl" ng-if="!$ctrl.isImage || !$ctrl.data"></span> <p class="m-b-2 text-ellipsis">{{ $ctrl.fileName }}</p> <p class="m-t-2 m-b-0"> <a href="" ng-click=$ctrl.onCancel()> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </p> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.FileValidationService=n}return i(e,[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&(this.fileName=e.file.currentValue.name)}},{key:"onManualReupload",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input-reupload").files[0];this.onFileCapture(e)}}]),e}();a.$inject=["$element","FileValidationService"],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(68)),o=s(n(74)),r=s(n(75));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.camera-capture",[]).service("CameraCaptureScreenHandler",o.default).service("CameraOverlayHandler",r.default).component("twCameraCapture",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(69)),a=o(n(71));function o(e){return e&&e.__esModule?e:{default:e}}n(72);var r={controller:i.default,template:a.default,bindings:{overlay:"@",direction:"@",onCancel:"&",onCapture:"&",testMode:"@"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(70),r=(i=o)&&i.__esModule?i:{default:i};var s=function(){function e(t,n,i,a,o,r,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=o,this.$scope=n,this.$log=r,this.$q=a,this.$window=i,this.CameraCaptureScreenHandler=s}return a(e,[{key:"$onInit",value:function(){var e;this.showVideoPreview=!1,this.showVideoInPreview=!0,this.showCaptureInPreview=!1,this.mediaStream=null,this.captureButtonDisabled=!0,this.screenHeight=0,this.screenWidth=0,this.videoResHeight=0,this.videoResWidth=0,this.overlayWidth=0,this.overlayHeight=0,this.overlayXOffset=0,this.overlayYOffset=0,this.displayCanvasXOffset=0,this.displayCanvasYOffset=0,this.videoXOffset=0,this.videoHeight=100,this.videoWidth=100,this.isVideoHorizontallyFlipped=!1,this.hasGetUserMedia()||this.$log.warn("getUserMedia() is not supported by your browser"),this.overlayLoaded=!1,this.overlayElement=this.$element[0].querySelector("#video-preview #overlay"),this.displayCanvas=this.$element[0].querySelector("#video-preview #display-canvas"),this.uploadCanvas=this.$element[0].querySelector("#video-preview #upload-canvas"),this.videoPreviewElement=this.$element[0].querySelector("#video-preview"),this.video=this.$element[0].querySelector("#video-preview #video"),this.video.addEventListener("play",(e=this,function(){var t=this;function n(t){e.videoResHeight=t.videoHeight,e.videoResWidth=t.videoWidth,e.$log.debug("playing updated video : "+e.videoResHeight+" x "+e.videoResWidth);var n=e.CameraCaptureScreenHandler.getVideoSpecifications(e.screenHeight,e.screenWidth,e.videoResHeight,e.videoResWidth),i=n.videoHeightInPercentage,a=n.videoWidthInPercentage;e.isVideoHorizontallyFlipped&&a>100&&(e.videoXOffset=100-a),e.videoHeight=i,e.videoWidth=a}e.captureButtonDisabled=!1,this&&(0===this.videoHeight||0===this.videoWidth?this.addEventListener("playing",function t(){var i=this;e.$scope.$applyAsync(function(){e.videoPlaying=!0,n(i)}),this.removeEventListener("playing",t)}):e.$scope.$applyAsync(function(){e.videoPlaying=!0,n(t)}))})),this.$window.addEventListener("orientationchange",function(e){return function(){e.$window.addEventListener("resize",function t(){e.showVideoPreview&&(e.$log.debug("Orientation change detected, recompute screen"),e.startLiveCamFlow()),e.$window.removeEventListener("resize",t)})}}(this),!1),this.testMode&&"true"===this.testMode.toLowerCase()||this.startLiveCamFlow()}},{key:"startLiveCamFlow",value:function(){var e=this;this.$log.debug("----- Live cam flow start -----"),this.captureButtonDisabled=!0,this.videoPlaying=!1,this.video.pause(),this.tryAcquireFullScreen().then(function(){e.$log.debug("Acquired full screen.")}).catch(function(){e.$log.warn("Failed to acquire full screen.")}).finally(function(){e.setScreenDimensions(),e.overlayLoaded||(0===e.overlayElement.naturalHeight||0===e.overlayElement.naturalWidth?(e.$log.debug("Overlay has not loaded after full screen is acquired"),e.overlayElement.addEventListener("load",l(e))):(e.$log.debug("Overlay has loaded before full screen is acquired"),l(e).call())),e.tryAcquireMediaStream().then(function(t){e.onVideoStreamAcquisition(t)}).catch(function(t){e.$log.error(t),e.onCancelBtnClick()})})}},{key:"tryAcquireFullScreen",value:function(){return r.default.enabled?r.default.isFullscreen?this.$q.resolve():r.default.request(this.videoPreviewElement):this.$q.reject()}},{key:"onVideoStreamAcquisition",value:function(e){this.mediaStream=e,this.video.srcObject!==this.mediaStream&&(this.video.srcObject=this.mediaStream),this.showVideoPreview=!0,this.showVideoInPreview=!0,this.showCaptureInPreview=!1,this.video.play()}},{key:"tryAcquireMediaStream",value:function(){var e=this;return this.mediaStream?this.$q.resolve(this.mediaStream):this.$window.navigator.mediaDevices.enumerateDevices().then(function(t){var n=t.filter(function(e){return"videoinput"===e.kind}).length;return e.$log.debug("Found "+n+" video devices."),1!==n&&e.direction?e.direction=e.direction.toLowerCase():e.direction="user","user"===e.direction&&(e.$log.debug("Changed user video to mirror"),e.video.classList.add("display-mirror"),e.overlayElement.classList.add("display-mirror"),e.isVideoHorizontallyFlipped=!0),e.cameraConstraints={video:{width:{min:640,ideal:1280,max:1280},facingMode:{ideal:e.direction}},audio:!1},e.$window.navigator.mediaDevices.getUserMedia(e.cameraConstraints)})}},{key:"setScreenDimensions",value:function(){this.$log.debug("screen : "+this.$window.screen.height+" x "+this.$window.screen.width),this.$log.debug("screen available : "+this.$window.screen.availHeight+" x "+this.$window.screen.availWidth),this.$log.debug("screen inner : "+this.$window.innerHeight+" x "+this.$window.innerWidth),this.screenHeight=this.$window.innerHeight,this.screenWidth=this.$window.innerWidth,this.$log.debug("**screen resolved** : "+this.screenHeight+" x "+this.screenWidth)}},{key:"closeVideoStream",value:function(){r.default.enabled&&r.default.exit(),this.video.srcObject=null,this.mediaStream&&(this.mediaStream.getTracks().forEach(function(e){return e.stop()}),this.mediaStream=null),this.showVideoPreview=!1,this.captureButtonDisabled=!0}},{key:"onCancelBtnClick",value:function(){this.closeVideoStream(),this.onCancel()}},{key:"onCaptureBtnClick",value:function(){var e=this.CameraCaptureScreenHandler.getCanvasSpecifications(this.videoHeight,this.videoWidth,this.screenHeight,this.screenWidth,this.videoResHeight,this.videoResWidth),t=e.height,n=e.width,i=e.yOffset,a=e.xOffset,o=e.paintHeight,r=e.paintWidth;this.displayCanvasYOffset=i,this.displayCanvasXOffset=a,this.displayCanvas.width=n,this.displayCanvas.height=t;var s=this.displayCanvas.getContext("2d");s.resetTransform(),s.drawImage(this.video,0,0,r,o,0,0,n,t),this.showCaptureInPreview=!0,this.showVideoInPreview=!1}},{key:"onRecaptureBtnClick",value:function(){this.startLiveCamFlow()}},{key:"onUploadBtnClick",value:function(){var e;this.uploadCanvas.width=this.displayCanvas.width,this.uploadCanvas.height=this.displayCanvas.height,this.uploadCanvas.getContext("2d").drawImage(this.displayCanvas,0,0,this.displayCanvas.width,this.displayCanvas.height),this.uploadCanvas.toBlob((e=this,function(t){r.default.enabled&&r.default.exit(),e.showVideoPreview=!1,e.closeVideoStream(),e.$scope.$applyAsync(function(){e.onCapture({file:t})})}),"image/png",1)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"hasGetUserMedia",value:function(){return!(!this.$window.navigator.mediaDevices||!this.$window.navigator.mediaDevices.getUserMedia)}},{key:"getOverlayStyles",value:function(){return{left:this.overlayXOffset+"px",top:this.overlayYOffset+"px",width:this.overlayWidth+"px",height:this.overlayHeight+"px"}}},{key:"getVideoStyles",value:function(){return{left:this.videoXOffset+"%",height:this.videoHeight+"%",width:this.videoWidth+"%"}}},{key:"getCanvasStyles",value:function(){return{left:this.displayCanvasXOffset+"px",top:this.displayCanvasYOffset+"px"}}}]),e}();function l(e){return function(){if(e.overlay){var t=e.CameraCaptureScreenHandler.getOverlaySpecifications(e.screenHeight,e.screenWidth,e.overlayElement.naturalHeight,e.overlayElement.naturalWidth),n=t.height,i=t.width,a=t.yOffset,o=t.xOffset;e.$scope.$applyAsync(function(){e.overlayYOffset=a,e.overlayXOffset=o,e.overlayHeight=n,e.overlayWidth=i,e.overlayLoaded=!0})}}}s.$inject=["$element","$scope","$window","$q","$attrs","$log","CameraCaptureScreenHandler"],t.default=s},function(e,t,n){
/*!
* screenfull
* v4.2.0 - 2019-04-01
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,i="undefined"!=typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,a=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],i=0,a=n.length,o={};i<a;i++)if((e=n[i])&&e[1]in t){for(i=0;i<e.length;i++)o[n[0][i]]=e[i];return o}return!1}(),o={change:a.fullscreenchange,error:a.fullscreenerror},r={request:function(e){return new Promise(function(n){var o=a.requestFullscreen,r=function(){this.off("change",r),n()}.bind(this);e=e||t.documentElement,/ Version\/5\.1(?:\.\d+)? Safari\//.test(navigator.userAgent)?e[o]():e[o](i?Element.ALLOW_KEYBOARD_INPUT:{}),this.on("change",r)}.bind(this))},exit:function(){return new Promise(function(e){if(this.isFullscreen){var n=function(){this.off("change",n),e()}.bind(this);t[a.exitFullscreen](),this.on("change",n)}else e()}.bind(this))},toggle:function(e){return this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var i=o[e];i&&t.addEventListener(i,n,!1)},off:function(e,n){var i=o[e];i&&t.removeEventListener(i,n,!1)},raw:a};a?(Object.defineProperties(r,{isFullscreen:{get:function(){return Boolean(t[a.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[a.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return Boolean(t[a.fullscreenEnabled])}}}),n?(e.exports=r,e.exports.default=r):window.screenfull=r):n?e.exports=!1:window.screenfull=!1}()},function(e,t){e.exports='<div> <div id=video-preview ng-show=$ctrl.showVideoPreview class="w-100 h-100 fixed-top bg-dark"> <img id=overlay ng-show="$ctrl.showVideoInPreview && $ctrl.overlayLoaded && $ctrl.videoPlaying" ng-style=$ctrl.getOverlayStyles() ng-src={{$ctrl.overlay}} class="fixed zindex-video-overlay"/> <video id=video ng-show=$ctrl.showVideoInPreview ng-style=$ctrl.getVideoStyles() class="fixed-top zindex-video" playsinline></video> <canvas id=display-canvas ng-show=$ctrl.showCaptureInPreview ng-style=$ctrl.getCanvasStyles() class="fixed zindex-video"></canvas> <canvas id=upload-canvas ng-show=false class=fixed></canvas> <label class="fixed-bottom camera-ctrl-bar"> <span class=camera-ctrl-box-small> <span id=video-cancel class="camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close" ng-if=$ctrl.showVideoInPreview ng-click=$ctrl.onCancelBtnClick()></span> <span id=capture-cancel class="camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close" ng-if=$ctrl.showCaptureInPreview ng-click=$ctrl.onRecaptureBtnClick()></span> </span> <span class=camera-ctrl-box-big> <span id=video-confirm class=camera-ctrl-btn-big ng-if=$ctrl.showVideoInPreview ng-click="!$ctrl.captureButtonDisabled && $ctrl.onCaptureBtnClick()"> <span class=camera-ctrl-btn-big-inner></span> </span> </span> <span class=camera-ctrl-box-small> <span id=capture-confirm class="camera-ctrl-btn-small camera-ctrl-btn-confirm icon icon-check" ng-if=$ctrl.showCaptureInPreview ng-click=$ctrl.onUploadBtnClick()></span> </span> </label> </div> </div> '},function(e,t,n){var i=n(73);"string"==typeof i&&(i=[[e.i,i,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(7)(i,a);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,".camera-ctrl-box-small{display:inline-block;height:60px;width:60px;margin-left:10px;margin-right:10px;vertical-align:bottom}.camera-ctrl-box-big{display:inline-block;height:84px;width:84px;margin-left:36px;margin-right:36px;vertical-align:bottom}.camera-ctrl-btn-cancel{color:red;background-color:#f8f9fa}.camera-ctrl-btn-confirm{color:green;background-color:#f8f9fa}.camera-ctrl-btn-small{display:inline-block;height:60px;width:60px;padding:4px;margin-bottom:0;font-size:52px;line-height:1;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border-radius:50%}.camera-ctrl-btn-big-inner{height:64px;width:64px;padding:0;background-color:#f8f9fa;border:1px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-btn-big,.camera-ctrl-btn-big-inner{display:inline-block;margin-bottom:0;vertical-align:middle}.camera-ctrl-btn-big{height:84px;width:84px;padding:2px;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#343a40;background-image:none;border:8px solid;border-radius:50%;border-color:#f8f9fa}.fixed{position:fixed;z-index:1030}.fixed-top{top:0}.fixed-bottom,.fixed-top{position:fixed;right:0;left:0;z-index:1030}.fixed-bottom{bottom:0}.camera-ctrl-bar{padding-top:10px;padding-bottom:10px;z-index:1032!important}.bg-dark{background-color:#343a40!important}.zindex-video{z-index:1030!important}.display-mirror{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.zindex-video-overlay{z-index:1031!important}.w-100{width:100%!important}.h-100{height:100%!important}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$log=t,this.CameraOverlayHandler=n}return i(e,[{key:"getVideoSpecifications",value:function(e,t,n,i){this.$log.debug("Computing video specs");var a=100,s=100;if(o(e,t,n,i))this.$log.debug("(video) Portrait narrow screen"),a=parseInt(n/i/(e/t)*100,10);else if(r(e,t,n,i)){this.$log.debug("(video) Landscape narrow screen"),s=parseInt(i/n/(t/e)*100,10)}return this.$log.debug("video width : "+s),this.$log.debug("video height : "+a),{videoHeightInPercentage:a,videoWidthInPercentage:s}}},{key:"getCanvasSpecifications",value:function(e,t,n,i,a,s){this.$log.debug("Computing canvas specs"),this.$log.debug("video width : "+t),this.$log.debug("video height : "+e),this.$log.debug("screen width : "+i),this.$log.debug("screen height : "+n),this.$log.debug("video res width : "+s),this.$log.debug("video res height : "+a);var l=null;o(n,i,a,s)?(this.$log.debug("(canvas) Portrait narrow screen"),l=function(e,t,n,i,a,o){return{height:n,width:i,yOffset:0,xOffset:0,paintHeight:parseInt(a/(e/100),10),paintWidth:o}}(e,0,n,i,a,s)):r(n,i,a,s)?(this.$log.debug("(canvas) Landscape narrow screen"),l=function(e,t,n,i,a,o){return{height:n,width:i,yOffset:0,xOffset:0,paintHeight:a,paintWidth:parseInt(o/(t/100),10)}}(0,t,n,i,a,s)):(this.$log.debug("(canvas) Normal screen"),l=function(e,t,n,i){var a=e/n,o=t/i,r=0,s=0,l=0,c=0;a===o?(r=t,s=e,l=0,c=0):a>o?(r=t,s=parseInt(o*n,10),l=0,c=parseInt((e-s)/2,10)):(r=parseInt(a*i,10),s=e,l=parseInt((t-r)/2,10),c=0);return{height:s,width:r,yOffset:c,xOffset:l,paintHeight:n,paintWidth:i}}(n,i,a,s));var c=l,u=c.height,d=c.width,f=c.yOffset,h=c.xOffset,p=c.paintHeight,g=c.paintWidth;return this.$log.debug("canvas width : "+d),this.$log.debug("canvas height : "+u),this.$log.debug("canvas x-offset : "+h),this.$log.debug("canvas y-offset : "+f),this.$log.debug("canvas width to paint : "+g),this.$log.debug("canvas height to paint : "+p),l}},{key:"getOverlaySpecifications",value:function(t,n,i,a){var o=e.getOverlayContainer(t,n),r=o.height,s=o.width,l=o.yOffset,c=o.xOffset,u=this.CameraOverlayHandler.getOverlaySpecificationsWrtContainer(r,s,i,a);return{height:u.height,width:u.width,yOffset:l+u.yOffset,xOffset:c+u.xOffset}}}],[{key:"getOverlayContainer",value:function(t,n){if(e.isScreenPortrait(t,n))return{height:n,width:n,yOffset:(t-n)/2.5,xOffset:0};var i=.9*t;return{height:i,width:i,yOffset:0,xOffset:(n-i)/2}}},{key:"isScreenPortrait",value:function(e,t){return e>=t}},{key:"isScreenLandscape",value:function(e,t){return t>=e}}]),e}();function o(e,t,n,i){return a.isScreenPortrait(e,t)&&n/i>e/t}function r(e,t,n,i){return a.isScreenLandscape(e,t)&&i/n>t/e}a.$inject=["$log","CameraOverlayHandler"],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.overlayXMargin=.075,this.overlayYMargin=.075}return i(e,[{key:"getOverlaySpecificationsWrtContainer",value:function(e,t,n,i){var a=n/i,o=t-2*t*this.overlayXMargin,r=e-2*e*this.overlayYMargin,s=void 0,l=void 0;return o*a>=r?s=(l=r)/a:l=(s=o)*a,{height:l,width:s,yOffset:(e-l)/2,xOffset:(t-s)/2}}}]),e}();a.$inject=[],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(77));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.button",[]).component("twUploadButton",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(78)),a=o(n(79));function o(e){return e&&e.__esModule?e:{default:e}}var r={template:i.default,controller:a.default,bindings:{name:"<",label:"<",isSecondary:"<",small:"<",block:"<",accept:"<",model:"<",multiple:"<",disabled:"<",onClick:"&",onCapture:"&"}};t.default=r},function(e,t){e.exports='<label class=btn ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled,\n              \'btn-primary\': !$ctrl.isSecondary,\n              \'btn-default\': $ctrl.isSecondary,\n              \'btn-block\': $ctrl.block,\n              \'btn-sm\': $ctrl.small\n            }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> <span ng-if=!$ctrl.isLiveCameraUpload> <input ng-if=!$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model /> <input ng-if=$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model multiple=multiple /> </span> </label>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t}return i(e,[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}},{key:"onButtonCapture",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input").files;this.onCapture({files:e})}}]),e}();a.$inject=["$element"],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(81));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.camera-button",[]).component("twCameraButton",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(82)),a=o(n(83));function o(e){return e&&e.__esModule?e:{default:e}}var r={template:i.default,controller:a.default,bindings:{label:"<",disabled:"<",onClick:"&",onCapture:"&"}};t.default=r},function(e,t){e.exports='<label class="btn btn-primary" ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> </label> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t[0].addEventListener("change",function(){n.onUserInput&&"function"==typeof n.onUserInput&&n.onUserInput()})};i.$inject=["$element"],t.default=function(){return{restrict:"A",controller:i,controllerAs:"$ctrl",bindToController:!0,scope:{onUserInput:"&"}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(86)),o=s(n(14)),r=s(n(11));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload.multi",[r.default,o.default]).component("twMultiUpload",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(87)),a=o(n(88));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",label:"@",placeholder:"@",icon:"@",buttonText:"@",secondaryButtonText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",onStart:"&",onFinish:"&",accept:"@",httpOptions:"<",maxSize:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();function a(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var o=function(){function e(t,n,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=i,this.files=[],this.model=[],this.$timeout=a}return i(e,[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");0!==e.length&&(this.onStart&&this.areAllFilesProcessed()&&this.onStart(),this.files=[].concat(a(this.files),a(e)),this.$timeout(function(){var e=t.$element[0].querySelector(".processing-list");e&&(e.scrollTop=e.scrollHeight)},600))}}},{key:"onProcessSuccess",value:function(e,t,n,i){var a=this.httpOptions?"id":"dataUrl";this.files[e][a]=this.httpOptions?i:n;var o=this.files.map(function(e){return e[a]}).filter(function(e){return!!e});this.setNgModel(o),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"areAllFilesProcessed",value:function(){var e=this.httpOptions?"id":"dataUrl";return!this.files.some(function(t){return null==t[e]&&null==t.error})}},{key:"onProcessFailure",value:function(e,t,n){this.files[e].error=n,this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"onProcessCancel",value:function(e){var t=this.httpOptions?"id":"dataUrl";this.files.splice(e,1);var n=this.files.map(function(e){return e[t]}).filter(function(e){return!!e});this.setNgModel(n)}},{key:"onDragEnter",value:function(){this.isDroppable=!0}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e)}},{key:"reset",value:function(){this.setNgModel(null)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}}]),e}();o.$inject=["$element","$scope","$attrs","$timeout"],t.default=o},function(e,t){e.exports='<div class="well droppable p-r-0 p-l-0 p-t-1 p-b-0 multi-upload" tw-drop=$ctrl.onDrop(files) tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() ng-class="{\'droppable-dropping\': $ctrl.isDroppable}"> <div class="droppable-dropping-card droppable-card"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> <div ng-if="$ctrl.files.length === 0" class="empty-processing-list droppable-default-card text-xs-center p-t-3"> <div class=empty-screen> <div class="circle circle-sm m-b-3 m-t-3"> <img ng-if=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-if=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 ng-if=$ctrl.label class=m-b-1>{{$ctrl.label}}</h4> <p ng-if=$ctrl.placeholder class="p-l-3 p-r-3"> {{$ctrl.placeholder}} </p> </div> </div> <div ng-if="$ctrl.files.length > 0" class="droppable-default-card p-l-3 processing-list"> <div ng-repeat="(index, file) in $ctrl.files" class=p-r-3 ng-class="{\'last-item\': $last}"> <tw-upload-processing-mini name=$ctrl.name file=file on-success="$ctrl.onProcessSuccess(index, file, dataUrl, id, response)" on-failure="$ctrl.onProcessFailure(index, file, error)" on-cancel=$ctrl.onProcessCancel(index) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText></tw-upload-processing-mini> </div> </div> <div class=m-a-3> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label="$ctrl.files.length === 0 ? $ctrl.buttonText : $ctrl.secondaryButtonText" is-secondary="$ctrl.files.length > 0" accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onFileCapture(files) block=true small=true multiple=true></tw-upload-button> </div> </div> '},function(e,t,n){"use strict";function i(e,t,n){return{restrict:"A",controller:function(){},link:function(i,a,o){i.counter=0,a[0].addEventListener("drop",function(a){var r=e(o.twDrop),s=function(){r(i,{files:a.dataTransfer.files})};if(t.$$phase)try{s()}catch(e){n(e)}else i.$apply(s);a.preventDefault(),i.counter=0},!1),a[0].addEventListener("dragover",function(e){e.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["$parse","$rootScope","$exceptionHandler"],t.default=i},function(e,t,n){"use strict";function i(e,t){return{restrict:"A",require:"twDrop",link:function(n,i,a){i[0].addEventListener("dragenter",function(i){var o=e(a.twDragEnter);if(n.counter++,n.counter>=1){var r=function(){o(n,{$event:i})};t.$$phase?n.$evalAsync(r):n.$apply(r)}i.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["$parse","$rootScope"],t.default=i},function(e,t,n){"use strict";function i(e,t){return{restrict:"A",require:"twDrop",link:function(n,i,a){i[0].addEventListener("dragleave",function(i){var o=e(a.twDragLeave);if(n.counter--,n.counter<=0){var r=function(){o(n,{$event:i})};t.$$phase?n.$evalAsync(r):n.$apply(r)}i.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["$parse","$rootScope"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(93)),a=o(n(94));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",required:"@",ngRequired:"<",disabled:"@",ngDisabled:"<",locale:"@",twLocale:"<",min:"@",ngMin:"<",max:"@",ngMax:"<",modelType:"@"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=t.controller("ngModel");if(this.DateService=a,this.initialisedWithDate=!1,this.ngModel)this.applyDateModelIfValidOrThrowError(),this.initialisedWithDate=!0;else{if(this.modelType){if(this.modelType!==r&&this.modelType!==s)throw new Error("Invalid modelType, should be "+r+" or "+s);this.dateModelType=this.modelType}else this.dateModelType=s;this.day=null,this.month=0,this.year=null}this.setDateRequired(),this.setDateDisabled(),this.setDateLocale(),this.setMonths(),this.addValidators(o),this.addWatchers(i,o),function(e){var t=e[0],n=t.querySelector("input[name=day]"),i=t.querySelector("input[name=year]");n.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))}),i.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))})}(t),function(e,t){var n=void 0,i=e[0],a=i.querySelector("input[name=day]"),o=i.querySelector("input[name=year]");a.addEventListener("blur",function(){!0&&n&&(t.$setTouched(),i.dispatchEvent(new CustomEvent("blur")))}),o.addEventListener("blur",function(){n=!0,t.$setTouched(),i.dispatchEvent(new CustomEvent("blur"))})}(t,o)}return i(e,[{key:"applyDateModelIfValidOrThrowError",value:function(){if(!c(this.ngModel))throw new Error("date model passed should either be instance of Date or valid ISO8601 string");this.dateModelType="string"==typeof this.ngModel?r:s,this.explodeDateModel(this.ngModel)}},{key:"setMonths",value:function(){this.dateMonths=this.getMonthsBasedOnIntlSupportForLocale()}},{key:"setDateRequired",value:function(){this.dateRequired=void 0!==this.ngRequired?this.ngRequired:void 0!==this.required}},{key:"setDateDisabled",value:function(){this.dateDisabled=void 0!==this.ngDisabled?this.ngDisabled:void 0!==this.disabled}},{key:"setDateLocale",value:function(){this.locale||(this.locale=o),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale)}},{key:"explodeDateModel",value:function(e){var t="string"==typeof e?new Date(e):e;this.day=t.getUTCDate(),this.month=t.getUTCMonth(),this.year=t.getUTCFullYear()}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e){var n=d(t.ngMin,t.min),i=f(e);return!n||!i||i>=n},e.$validators.max=function(e){var n=d(t.ngMax,t.max),i=f(e);return!n||!i||i<=n}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.day",function(e,i){e!==i&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.month",function(e,i){e!==i&&(n.adjustLastDay(),t.$setTouched(),n.initialisedWithDate&&t.$setDirty())}),e.$watch("$ctrl.year",function(e,i){e!==i&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.ngModel",function(e,i){e!==i&&c(n.ngModel)&&(t.$setDirty(),n.explodeDateModel(n.ngModel))}),e.$watch("$ctrl.ngRequired",function(e,t){e!==t&&n.setDateRequired()}),e.$watch("$ctrl.ngDisabled",function(e,t){e!==t&&n.setDateDisabled()}),e.$watch("$ctrl.locale",function(e,t){e!==t&&(n.setDateLocale(),n.setMonths())})}},{key:"getMonthsBasedOnIntlSupportForLocale",value:function(){return function(e){return e.map(function(e,t){return{value:t,label:e}})}(this.DateService.getMonthNamesForLocale(this.locale))}},{key:"combineDate",value:function(){return this.DateService.getUTCDateFromParts(Number(this.year),Number(this.month),Number(this.day))}},{key:"updateDateModelAndValidationClasses",value:function(){if(this.adjustLastDay(),e=this.year,t=this.month,n=this.day,l(e)&&l(n)&&(l(t)||"string"==typeof(i=t)&&!isNaN(Number(i)))){var e,t,n,i,a=this.combineDate();if(this.dateModelType===r){var o=a.toISOString(),s=o.substring(0,o.indexOf("T"));this.$ngModel.$setViewValue(s)}else this.$ngModel.$setViewValue(a)}else this.$ngModel.$setViewValue(null)}},{key:"adjustLastDay",value:function(){var e=Number(this.day),t=Number(this.month),n=Number(this.year),i=this.DateService.getLastDayOfMonth(n,t);e>i&&(this.day=parseInt(i,10))}}]),e}(),o="en",r="string",s="object";function l(e){return"number"==typeof e}function c(e){return u(e)||"string"==typeof(t=e)&&u(new Date(t));var t}function u(e){return"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e.getTime())}function d(e,t){var n=e||t;return!!n&&(!!u(n="string"==typeof n?new Date(n):n)&&n)}function f(e){return"string"==typeof e?new Date(e):e}a.$inject=["$element","$log","$scope","TwDateService"],t.default=a},function(e,t){e.exports='<div class=row> <div class="col-sm-5 tw-date-month-column" ng-if=$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-3 tw-date-day-column"> <label class=sr-only>Day</label> <input type=number name=day class="form-control tw-date-day" ng-model=$ctrl.day ng-change=$ctrl.updateDateModelAndValidationClasses() placeholder=DD min=1 ng-min=1 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> <div class="col-sm-5 tw-date-month-column" ng-if=!$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-4 tw-date-year-column"> <label class=sr-only>Year</label> <input type=number name=year class="form-control tw-date-year" placeholder=YYYY ng-model=$ctrl.year ng-change=$ctrl.updateDateModelAndValidationClasses() ng-min=$ctrl.min.getFullYear() ng-max=$ctrl.max.getFullYear() maxlength=4 ng-maxlength=4 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],i=!0,a=!1,o=void 0;try{for(var r,s=e[Symbol.iterator]();!(i=(r=s.next()).done)&&(n.push(r.value),!t||n.length!==t);i=!0);}catch(e){a=!0,o=e}finally{try{!i&&s.return&&s.return()}finally{if(a)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=this;function t(e,t,n){var i=void 0,a=c(t);return h[a]&&(i=h[a][e]),i?"short"===n?i.substr(0,3):"narrow"===n?i.substr(0,1):i:null}function n(e,t,n){var i=c(t);return i&&f[i]&&("short"!==n||"ja"===i)?f[i][e]:null}function a(e,t){var n=c(t);return""+e+(d(p,e,n)||"")}function o(e,t){var n=c(t);return""+e+d(g,e,n)}function r(e,t,n){if(!e.toLocaleDateString)return null;var i=e.toLocaleDateString(t,n);return function(e){if(!e)return!0;if("ja"===c(e))return!1;return!0}(t)&&(i=i.replace(/[0-9]|\s|,|\./g,"")),i[0].toUpperCase()+i.substring(1)}function s(e){return!e||["narrow","short","long"].indexOf(e)<0?"long":e}function l(e){return function(e){try{return window.Intl.DateTimeFormat.supportedLocalesOf([e]).length>0}catch(e){return!1}}(e)?e:"en-GB"}function c(e){return e?e.substring(0,2):"en"}function u(e){return void 0!==m[e]?m[e]:" "}function d(e,t,n){return e[n]?e[n].exactMatch&&e[n].exactMatch[t]?e[n].exactMatch[t]:e[n].endsWith&&e[n].endsWith[t%10]?e[n].endsWith[t%10]:e[n].default:""}this.getLocaleDate=function(e){return e||(e=new Date),e.getDate()},this.getLocaleMonth=function(e){return e||(e=new Date),e.getMonth()},this.getLocaleFullYear=function(e){return e||(e=new Date),e.getFullYear()},this.getLocaleToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getLocaleFullYear(t),e.getLocaleMonth(t),e.getLocaleDate(t))},this.getUTCDate=function(e){return e||(e=new Date),e.getUTCDate()},this.getUTCMonth=function(e){return e||(e=new Date),e.getUTCMonth()},this.getUTCFullYear=function(e){return e||(e=new Date),e.getUTCFullYear()},this.getUTCToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getUTCFullYear(t),e.getUTCMonth(t),e.getUTCDate(t))},this.getLastDayOfMonth=function(t,n){return e.getUTCDateFromParts(t,n+1,0).getUTCDate()},this.getUTCDateFromParts=function(e,t,n,i,a,o){var r=new Date;return r.setUTCFullYear(e,t,n),r.setUTCHours(i||0),r.setUTCMinutes(a||0),r.setUTCSeconds(o||0),r.setUTCMilliseconds(0),r},this.getLocaleDateFromParts=function(e,t,n,i,a,o){var r=new Date;return r.setFullYear(e,t,n),r.setHours(i||0),r.setMinutes(a||0),r.setSeconds(o||0),r.setMilliseconds(0),r},this.getDatePartsFromIso=function(e){var t=0,n=0,i=parseInt(e.substr(0,4),10),a=parseInt(e.substr(5,2),10)-1,o=parseInt(e.substr(8,2),10),r=parseInt(e.substr(11,2),10)||0,s=parseInt(e.substr(14,2),10)||0,l=parseInt(e.substr(17,2),10)||0,c=e.substring(10).match("[+-]{1}[0-9]{2}(:[0-9]{2})?$");return c&&(t=parseInt(c[0].substr(1,2),10)||0,n=parseInt(c[0].substr(4,2),10)||0,"-"===c[0].substr(0,1)&&(t*=-1,n*=-1)),[i,a,o,r,s,l,t,n]},this.isIsoStringValid=function(e){return new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{3})?(Z|[+,-][0-9]{2}(:[0-9]{2})?))?$").test(e)},this.getUTCDateFromIso=function(t){if(!e.isIsoStringValid(t))return null;var n=e.getDatePartsFromIso(t),a=i(n,8),o=a[0],r=a[1],s=a[2],l=a[3],c=a[4],u=a[5],d=a[6],f=a[7];return e.getUTCDateFromParts(o,r,s,l+d,c+f,u)},this.getDayNamesForLocale=function(t,n){for(var i=[],a=s(n),o=0;o<7;o++)i.push(e.getDayNameForLocale(o,t,a));return i},this.getDayNameForLocale=function(n,i,a){var o=t(n,i,a);if(o)return o;var c=l(i),u=s(a);return r(e.getUTCDateFromParts(2006,0,n+1),c,{weekday:"long"})||t(n,"en-GB",u)},this.getMonthNamesForLocale=function(t,n){for(var i=[],a=s(n),o=0;o<12;o++)i.push(e.getMonthNameForLocale(o,t,a));return i},this.getMonthNameForLocale=function(t,i,a){var o=n(t,i,a);if(o)return o;var c=l(i),u=s(a),d=e.getUTCDateFromParts(2e3,t,15);return"short"===a?(t=r(d,c,{month:"long"})).length>4?t.slice(0,3):t:r(d,c,{month:"long"})||n(t,"en-GB",u)},this.getWeekday=function(t,n,i){return e.getUTCDateFromParts(t,n,i).getUTCDay()},this.isMonthBeforeDay=function(e){return"ja"===c(e)||e&&-1!==e.indexOf("US",e.length-2)},this.isYearBeforeMonth=function(e){return"ja"===c(e)},this.addYears=function(t,n){return e.addToDate(t,n,0,0)},this.addMonths=function(t,n){return e.addToDate(t,0,n,0)},this.addDays=function(t,n){return e.addToDate(t,0,0,n)},this.addToDate=function(t,n,i,a){return e.getUTCDateFromParts(t.getUTCFullYear()+n,t.getUTCMonth()+i,t.getUTCDate()+a)},this.getLocaleTimeString=function(t,n){return e.getTimeString(t.getHours(),t.getMinutes(),t.getSeconds(),n)},this.getTimeString=function(e,t,n,i){if(e<10&&(e="0"+e),t<10&&(t="0"+t),"en"===c(i)){var a=e>=12?"pm":"am";return 0===(e%=12)&&(e=12),"00"===t?""+e+a:e+":"+t+a}return e+":"+t},this.getYearAndMonthPresentation=function(t,n,i,a){var r=o(t,i),s=e.getMonthNameForLocale(n,i,a||"long"),l=u(c(i));return e.isYearBeforeMonth(i)?[r,s].join(l):[s,r].join(l)},this.getYearMonthDatePresentation=function(t,n,i,r,s){var l=o(t,r),d=e.getMonthNameForLocale(n,r,s||"long"),f=a(i,r),h=u(c(r));return e.isYearBeforeMonth(r)?[l,d,f].join(h):e.isMonthBeforeDay(r)?[d,f].join(h)+", "+l:[f,d,l].join(h)},this.getLocaleNow=function(){return new Date},this.getUTCNow=function(){var t=new Date;return e.getUTCDateFromParts(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds())},this.getLocaleDateString=function(t,n,i){if(!t.getFullYear)return t;var a=e.getLocaleNow();return e.getDateString(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getDay(),n,t-a,a.getFullYear(),i)},this.getUTCDateString=function(t,n,i){if(!t)return t;var a=e.getUTCNow();return e.getDateString(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCDay(),n,t-a,a.getUTCFullYear(),i)},this.getDateString=function(t,n,i,r,s,l,c,u,d,f,h){var p=Math.abs(d)<5184e5&&"long"!==h,g=!p,m=Math.abs(d)<6912e5||"long"===h,v=!m||"long"===h,y=!m&&f!==t||"long"===h?o(t,u):"",b=v?e.getMonthNameForLocale(n,u,"short"===h?"short":"long"):"",$=g?a(i,u):"",w=m?e.getDayNameForLocale(c,u,"short"===h?"short":"long"):"",M=p?e.getTimeString(r,s,l,u):"";return e.combineDateParts(y,b,$,M,w,u)},this.combineDateParts=function(t,n,i,a,o,r){var s=c(r),l=u(s),d=void 0;if(e.isYearBeforeMonth(r)?d=[t,n,i].join(l).trim():e.isMonthBeforeDay(r)?(d=[n,i].join(l).trim(),t&&(d+=", "+t)):d=[i,n,t].join(l).trim(),o){if("ja"===s)return(d+" "+a+" ("+o+")").trim();d=n||t?(o+", "+d).trim():(o+" "+d).trim()}return(d=d+" "+a).trim()};var f={en:["January","February","March","April","May","June","July","August","September","October","November","December"],ja:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]},h={en:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ja:["日","月","火","水","木","金","土"]},p={en:{exactMatch:{11:"th",12:"th",13:"th"},endsWith:{1:"st",2:"nd",3:"rd"},default:"th"},de:{default:"."},fi:{default:"."},ja:{default:"日"}},g={ja:{default:"年"}},m={ja:""}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(97);var o={template:((i=a)&&i.__esModule?i:{default:i}).default,bindings:{date:"<",locale:"<",format:"<"}};t.default=o},function(e,t){e.exports='<span tw-tool-tip data-original-title="{{ $ctrl.date | twDateFormat : $ctrl.locale : \'long\' }}"> <span class="hidden-xs hidden-sm"> {{ $ctrl.date | twDateFormat : $ctrl.locale : $ctrl.format }} </span> <span class="hidden-md hidden-lg hidden-xl"> {{ $ctrl.date | twDateFormat : $ctrl.locale : \'short\' }} </span> </span> '},function(e,t,n){"use strict";function i(e){return function(t,n,i){if(!t)return t;var a=t;if("string"==typeof a&&(a=e.getUTCDateFromIso(a),new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}$").test(t)))return e.getUTCDateString(a,n,i);return a?e.getLocaleDateString(a,n,i):t}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["TwDateService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(100)),a=o(n(101));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:{$ngModel:"ngModel"},bindings:{type:"@",name:"@",id:"@",label:"@",placeholder:"@",step:"@",locale:"@",uploadAccept:"@",uploadIcon:"@",uploadTooLargeMessage:"@",options:"<",ngModel:"=",ngChange:"&",ngFocus:"&",ngBlur:"&",ngRequired:"<",ngDisabled:"<",ngMinlength:"<twMinlength",ngMaxlength:"<twMaxlength",ngMin:"<",ngMax:"<",ngPattern:"<",uploadOptions:"<",helpOptions:"<",textFormat:"<",validationAsync:"<",persistAsync:"<",onAsyncFailure:"&",onAsyncSuccess:"&",fileUploadSource:"<",cameraOptions:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=void 0,o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.element=t[0],a=this}return i(e,[{key:"$onInit",value:function(){this.$ngModel=this.$element.controller("ngModel"),this.addValidators(),this.uploadOptions||(this.uploadOptions={})}},{key:"change",value:function(){this.$ngModel.$setDirty(),this.$ngModel.$setViewValue(this.internalModel)}},{key:"focus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"blur",value:function(){this.$ngModel.$setTouched(),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"onAsyncUploadSuccess",value:function(e,t){a.onAsyncSuccess&&a.onAsyncSuccess({response:t})}},{key:"onAsyncUploadFailure",value:function(e){a.onAsyncFailure&&a.onAsyncFailure({response:e})}},{key:"getAutocompleteStatus",value:function(){return this.helpOptions&&this.helpOptions.message?"disabled":"on"}},{key:"addValidators",value:function(){var e=this,t=this.$ngModel;t.$validators.required=function(t,n){return!(t||n)||!e.ngRequired},t.$validators.minlength=function(t,n){var i=t||n;return"text"!==e.type||!e.ngMinlength||(!i||i.length>=e.ngMinlength)},t.$validators.maxlength=function(t,n){var i=t||n;return"text"!==e.type||!e.ngMaxlength||(!i||i.length<=e.ngMaxlength)},t.$validators.min=function(t,n){var i=t||n;return void 0===e.ngMin||("number"==typeof i&&"number"==typeof e.ngMin?i>=e.ngMin:"date"===e.type&&"string"==typeof i&&"string"==typeof e.ngMin?i>=e.ngMin:!("date"===e.type&&i instanceof Date&&e.ngMin instanceof Date)||i>=e.ngMin)},t.$validators.max=function(t,n){var i=t||n;return void 0===e.ngMax||("number"==typeof i&&"number"==typeof e.ngMax?i<=e.ngMax:"date"===e.type&&"string"==typeof i&&"string"==typeof e.ngMax?i<=e.ngMax:!("date"===e.type&&i instanceof Date&&e.ngMax instanceof Date)||i<=e.ngMax)},t.$formatters.push(function(t){return e.internalModel=t,t})}}]),e}();o.$inject=["$element"],t.default=o},function(e,t){e.exports='<div ng-switch=$ctrl.type> <div ng-switch-when=radio class=radio ng-class="{disabled: $ctrl.ngDisabled, \'radio-lg\': option.secondary}" ng-repeat="option in $ctrl.options"> <label> <tw-radio name={{$ctrl.name}} ng-value=option.value ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change(option.value) ng-click=$ctrl.change(option.value) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-radio> {{option.label}} <small ng-if=option.secondary>{{option.secondary}}</small> </label> </div> <div ng-switch-when=checkbox class=checkbox ng-class="{disabled: $ctrl.ngDisabled}"> <label> <tw-checkbox name={{$ctrl.name}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-click=$ctrl.change() ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-checkbox> {{$ctrl.placeholder}} </label> </div> <div ng-switch-when=select> <tw-select name={{$ctrl.name}} options=$ctrl.options filter="{{ $ctrl.options.length > 9 ? \' \' : \'\' }}" placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-select> </div> <div ng-switch-when=file> <tw-upload name={{$ctrl.name}} label={{$ctrl.label}} icon={{$ctrl.uploadIcon}} help-image={{$ctrl.helpOptions.image}} placeholder={{$ctrl.placeholder}} accept={{$ctrl.uploadAccept}} complete-text={{$ctrl.label}} button-text={{$ctrl.uploadOptions.buttonText}} cancel-text={{$ctrl.uploadOptions.cancelText}} processing-text="{{ $ctrl.uploadOptions.processingText }}" success-text="{{ $ctrl.uploadOptions.successText }}" failure-text="{{ $ctrl.uploadOptions.failureText }}" validation-messages=$ctrl.uploadOptions.validationMessages view-image-text={{$ctrl.uploadOptions.viewImageText}} too-large-message={{$ctrl.uploadTooLargeMessage}} max-size=$ctrl.ngMax ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() http-options=$ctrl.persistAsync source=$ctrl.fileUploadSource camera-overlay={{$ctrl.cameraOptions.overlay}} camera-direction={{$ctrl.cameraOptions.direction}} on-success=$ctrl.onAsyncUploadSuccess on-failure=$ctrl.onAsyncUploadFailure></tw-upload> </div> <div ng-switch-when=date|date-time ng-switch-when-separator=|> <tw-date name={{$ctrl.name}} locale={{$ctrl.locale}} ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() model-type=string></tw-date> </div> <div ng-switch-when=tel> <tw-telephone name="{{ $ctrl.name }}" placeholder="{{ $ctrl.placeholder }}" ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() locale="{{ $ctrl.locale }}" search-placeholder=" "></tw-telephone> </div> <input ng-switch-when=number name={{$ctrl.name}} type=number step={{$ctrl.step}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <input ng-switch-when=hidden name={{$ctrl.name}} type=hidden ng-model=$ctrl.ngModel /> <input ng-switch-when=password name={{$ctrl.name}} type=password class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <textarea ng-switch-when=textarea name={{$ctrl.name}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-pattern=$ctrl.ngPattern ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled autocomplete="{{ $ctrl.getAutocompleteStatus() }}"></textarea> <input ng-switch-default name={{$ctrl.name}} type=text class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-pattern=$ctrl.ngPattern ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled tw-text-format="{{ $ctrl.textFormat }}" autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(103)),a=o(n(104));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{name:"@",model:"=",initialField:"<field",locale:"@",required:"<",uploadOptions:"<",changeHandler:"&?onChange",focusHandler:"&?onFocus",blurHandler:"&?onBlur",errorMessage:"<",warningMessage:"<",validationMessages:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t}return i(e,[{key:"$onChanges",value:function(e){var t;e.initialField&&(this.field=(t=this.initialField,JSON.parse(JSON.stringify(t))),this.control=this.field.control?this.field.control:this.RequirementsService.getControlType(e.initialField.currentValue),this.field.valuesAsync&&this.RequirementsService.prepValuesAsync(this.field,{}),this.required&&this.field.enum&&1===this.field.enum.length&&(this.model=this.field.enum[0]),this.field.default&&!this.model&&(this.model=this.field.default),this.validationMessages&&!this.field.validationMessages&&(this.field.validationMessages=this.validationMessages))}},{key:"onFocus",value:function(){this.focusHandler&&this.focusHandler()}},{key:"onBlur",value:function(){this.blurHandler&&this.blurHandler()}},{key:"onChange",value:function(e){this.changeHandler&&this.changeHandler({value:e}),this.errorMessage&&delete this.errorMessage}},{key:"onPersistAsyncFailure",value:function(e){this.uploadOptions||(this.uploadOptions={}),e.data?this.extractErrors(e.data):e.originalData&&this.extractErrors(e.originalData)}},{key:"extractErrors",value:function(e){e.message&&(this.uploadOptions.failureText=e.message),Array.isArray(e.errors)&&(this.uploadOptions.validationMessages=e.errors.map(function(e){return e.message}))}},{key:"onPersistAsyncSuccess",value:function(e){this.uploadOptions||(this.uploadOptions={}),e&&(this.uploadOptions.successText=e.data.message)}},{key:"sizeOf",value:function(e){return e?Object.keys(e).length:0}},{key:"isFeedbackDetached",value:function(e){return"date"===e||"file"===e||"radio"===e||"tel"===e}}]),e}();a.$inject=["TwRequirementsService"],t.default=a},function(e,t){e.exports='<div class="form-group tw-field-{{ $ctrl.name }}" ng-class="{\n    \'has-error\': $ctrl.field.errorMessage || $ctrl.errorMessage,\n    \'has-warning\': $ctrl.field.warningMessage || $ctrl.warningMessage,\n    \'hidden\': $ctrl.field.hidden\n  }"> <label class=control-label ng-if="$ctrl.control !== \'file\'"> {{$ctrl.field.title}} </label> <tw-form-control name="{{ $ctrl.name }}" label="{{ $ctrl.field.title }}" type="{{ $ctrl.control | lowercase }}" placeholder="{{ $ctrl.field.placeholder }}" help-options=$ctrl.field.help locale="{{ $ctrl.locale }}" upload-accept="{{ $ctrl.field.accept }}" upload-icon="{{ $ctrl.field.icon }}" upload-too-large-message="{{ $ctrl.field.tooLargeMessage }}" options=$ctrl.field.values upload-options=$ctrl.uploadOptions ng-model=$ctrl.model ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() ng-change=$ctrl.onChange($ctrl.model) ng-required=$ctrl.required ng-disabled=$ctrl.field.disabled tw-minlength="$ctrl.field.minlength || $ctrl.field.minLength" tw-maxlength="$ctrl.field.maxlength || $ctrl.field.maxLength" ng-min=$ctrl.field.minimum ng-max=$ctrl.field.maximum ng-pattern=$ctrl.field.pattern text-format=$ctrl.field.displayFormat validation-async=$ctrl.field.validationAsync persist-async=$ctrl.field.persistAsync file-upload-source=$ctrl.field.sourceType camera-options=$ctrl.field.camera on-async-success=$ctrl.onPersistAsyncSuccess(response) on-async-failure=$ctrl.onPersistAsyncFailure(response) tw-validation></tw-form-control> <div class="alert alert-danger error-messages" ng-if="$ctrl.sizeOf($ctrl.field.validationMessages) > 0 || $ctrl.errorMessage" ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> <div ng-repeat="(validationType, validationMessage) in $ctrl.field.validationMessages track by $index" class="error-{{ validationType | lowercase }}"> {{validationMessage}} </div> <div class=error-provided ng-if=$ctrl.errorMessage> {{ $ctrl.errorMessage }} </div> </div> <div class="alert alert-warning" ng-if=$ctrl.warningMessage ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> {{ $ctrl.warningMessage }} </div> <div ng-if=$ctrl.field.help class="alert alert-focus" ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> <span ng-if=$ctrl.field.help.message> {{ $ctrl.field.help.message }} </span> <ul ng-if=$ctrl.field.help.list class=list-unstyled> <li ng-repeat="helpMessage in $ctrl.field.help.list">{{ helpMessage }}</li> </ul> <img ng-if="$ctrl.field.help.image && $ctrl.control !== \'file\'" ng-src={{$ctrl.field.help.image}} alt="{{ $ctrl.field.title }}" class="thumbnail m-y-2"/> </div> </div> '},function(e,t,n){"use strict";function i(e){var t=this;function n(e){if(e instanceof Array){var t=[];return e.forEach(function(e){e.fields?t=t.concat(i(e,e.fields)):e.group?t=t.concat(i(e,e.group)):t.push(e)}),t}return e}function i(e,t){return e.name&&t.length&&!t[0].name&&(t[0].name=e.name),e.width&&t.length&&!t[0].width&&(t[0].width=e.width),e.tooltip&&t.length&&!t[0].helpText&&(t[0].helpText=e.tooltip),e.info&&t.length&&!t[0].helpText&&(t[0].helpText=e.info),2===t.length&&t.forEach(function(e){e.width="md"}),3===t.length&&(t[0].width="md",t[1].width="md"),t}function s(e){return!e.label&&e.title&&(e.label=e.title,delete e.title),!e.label&&e.name&&(e.label=e.name,delete e.name),!e.value&&e.code&&(e.value=e.code,delete e.code),!e.value&&e.key&&(e.value=e.key,delete e.key),e}this.prepRequirements=function(e){if(!e||!e.length)return[];var n=r(e);return n.forEach(function(e){e.prepared||(t.prepLegacyAlternatives(e),e.properties=t.prepFields(e.properties||e.fields),e.type&&"object"!==e.type&&!e.types&&(e.properties.type={type:"string",enum:[e.type],required:!0,hidden:!0},e.type="object"),e.prepared=!0)}),n},this.prepFields=function(e,i,a){if(!e)return{};var o=r(e);return o=function(e){if(e instanceof Array)throw new Error("Expecting a map of fields, not an array");var t={};return Object.keys(e).forEach(function(n){if(n.indexOf(".")>0){var i=n.split("."),a=i[0];t[a]||(t[a]={type:"object",properties:{}}),t[a].properties[i[1]]=e[n]}else t[n]=e[n]}),t}(o=function(e){if(e instanceof Array){var t={};return e.forEach(function(e){var n=e.key||e.name;delete e.key,t[n]=r(e)}),t}return e}(o=n(o))),Object.keys(o).forEach(function(e){o[e]=t.prepField(o[e],i,a)}),o},this.prepField=function(e,n,i){var a=r(e);return t.prepLegacyProps(a),t.prepType(a),t.prepPattern(a),t.prepValuesAsync(a,n),t.prepValidationMessages(a,i),t.prepHelp(a),a},this.prepType=function(e){switch(e.type&&e.type.toLowerCase&&e.type.toLowerCase()){case"text":e.type="string";break;case"date":e.type="string",e.format="date";break;case"password":e.type="string",e.control="password";break;case"checkbox":e.type="boolean";break;case"select":e.control||(e.control="select"),delete e.type;break;case"radio":e.control="radio",delete e.type;break;case"upload":e.type="string",e.format="base64url";break;case"tel":e.type="string",e.format="phone";break;case"textarea":e.type="string",e.control="textarea"}e.control||"object"===e.type||(e.control=t.getControlType(e))},this.prepLegacyAlternatives=function(e){!e.title&&e.label&&(e.title=e.label),e.title||(e.title=function(e){if(e&&e.length>0){var t=e.toLowerCase().split("_").join(" ");return t.charAt(0).toUpperCase()+t.slice(1)}return""}(e.type)),!e.type&&e.name&&(e.type=e.name),!e.description&&e.tooltip&&(e.description=e.tooltip),e.fieldGroups&&!e.fields&&(e.fields=n(e.fieldGroups),delete e.fieldGroups)},this.prepLegacyProps=function(e){e.name&&!e.title&&(e.title=e.name,delete e.name),e.validationRegexp&&(e.pattern=e.validationRegexp,delete e.validationRegexp),e.min&&(e.minimum=e.min,delete e.min),e.max&&(e.maximum=e.max,delete e.max),e.example&&!e.placeholder&&(e.placeholder=e.example,delete e.example),e.tooltip&&!e.helpText&&(e.helpText=e.tooltip,delete e.tooltip),e.valuesAllowed&&!e.values&&(e.values=e.valuesAllowed,delete e.valuesAllowed),e.values&&e.values.map&&(e.values=t.prepLegacyValues(e.values)),e.value&&!e.default&&(e.default=e.value,delete e.value),e.values&&e.values&&e.values.length&&e.values[0]&&!e.values[0].value&&e.values[0].label&&!e.placeholder&&(e.placeholder=e.values[0].label,e.values=e.values.slice(1))},this.prepLegacyValues=function(e){return e.map(s)},this.prepPattern=function(e){if(e.pattern)try{RegExp(e.pattern)}catch(t){console.warn("API regexp is invalid"),delete e.pattern}else delete e.pattern},this.prepValuesAsync=function(e,n){if(e.valuesAsync){var i={};e.valuesAsync.params&&e.valuesAsync.params.length&&(i=t.getParamValuesFromModel(n,e.valuesAsync.params)),t.fetchValuesAsync(e,i).catch(function(){return t.fetchValuesAsync(e,i)})}},this.fetchValuesAsync=function(n,i){return e({method:n.valuesAsync.method||"GET",url:n.valuesAsync.url,data:i||{}}).then(function(e){n.values=t.prepLegacyValues(e.data)})},this.getParamValuesFromModel=function(e,t){var n={};return t.forEach(function(t){e[t.key]?n[t.parameterName]=e[t.key]:t.required}),n},this.prepValidationMessages=function(e){e.validationMessages&&e.validationMessages.minimum&&(e.validationMessages.min=e.validationMessages.minimum,delete e.validationMessages.minimum),e.validationMessages&&e.validationMessages.maximum&&(e.validationMessages.max=e.validationMessages.maximum,delete e.validationMessages.maximum)},this.prepHelp=function(e){!e.help&&(e.helpText||e.helpImage||e.helpList||e.uploadPlaceholderImage)&&(e.help={}),e.helpText&&(e.help.message=e.helpText,delete e.helpText),e.helpImage&&(e.help.image=e.helpImage,delete e.helpImage),e.uploadPlaceholderImage&&(e.help.image=e.uploadPlaceholderImage,delete e.uploadPlaceholderImage),e.list&&(e.help.list=e.helpList,delete e.helpList)},this.getRequiredFields=a,this.getControlType=o}function a(e){if(Array.isArray(e))throw new Error("Expected field map");return Object.keys(e).filter(function(t){return e[t].required})}function o(e){if(e.control)return e.control.toLowerCase();if(e.hidden)return"hidden";if(e.valuesAsync)return"select";if(e.values&&e.values.length)return function(e){if(e.control)return e.control;if("select"===e.type)return"select";if("radio"===e.type)return"radio";var t=e.enum||e.values;if(t)return t.length>3?"select":"radio";return"select"}(e);switch(e.type){case"string":return function(e){switch(e){case"date":return"date";case"base64url":return"file";case"password":return"password";case"uri":case"email":return"text";case"phone":return"tel";default:return"text"}}(e.format);case"number":case"integer":return"number";case"boolean":return"checkbox";default:return"text"}}function r(e){return JSON.parse(JSON.stringify(e))}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["$http"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(107),o=(i=a)&&i.__esModule?i:{default:i};t.default=function(){return{restrict:"A",require:{$ngModel:"ngModel"},controller:o.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=n[0],r=i.getClosestParentByClassName(o,"form-group"),s=n.controller("ngModel");o.addEventListener("invalid",function(e){e.preventDefault()}),s.$validators.validation=function(){return t.$evalAsync(function(){a(s,r,o)}),!0};o.addEventListener("blur",function(){t.$evalAsync(function(){a(s,r,o)})})};function a(e,t,n){if(e.$valid)return t&&t.classList.remove("has-error"),void n.removeAttribute("aria-invalid");e.$touched&&e.$dirty&&(t&&t.classList.add("has-error"),n.setAttribute("aria-invalid","true"))}i.$inject=["$scope","$element","TwDomService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=w(n(0)),a=w(n(16)),o=w(n(10)),r=w(n(4)),s=w(n(17)),l=w(n(19)),c=w(n(120)),u=w(n(124)),d=w(n(129)),f=w(n(21)),h=w(n(22)),p=w(n(109)),g=w(n(138)),m=w(n(2)),v=w(n(145)),y=w(n(163)),b=w(n(168)),$=w(n(172));function w(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms",[a.default,o.default,r.default,s.default,l.default,c.default,u.default,d.default,f.default,h.default,p.default,g.default,m.default,v.default,y.default,b.default,$.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(133)),o=s(n(22)),r=s(n(5));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.fieldset",[o.default,r.default]).component("twFieldset",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(142));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.navigation.tabs",[]).component("twTabs",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=l(n(0)),a=l(n(149)),o=l(n(20)),r=l(n(112)),s=l(n(159));function l(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.formatting",[a.default,o.default,r.default,s.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(155)),o=s(n(157)),r=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.formatting.number",[r.default]).component("twNumberFormat",a.default).filter("twNumberFormat",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(176)),o=r(n(23));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.validation",[a.default,o.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(195)),o=r(n(8));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.loading",[a.default,o.default]).name},,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=p(n(0));n(24);var a=p(n(108)),o=p(n(113)),r=p(n(111)),s=p(n(26)),l=p(n(178)),c=p(n(185)),u=p(n(114)),d=p(n(198)),f=p(n(199)),h=p(n(200));function p(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide-components",[a.default,o.default,r.default,s.default,l.default,c.default,u.default,d.default,f.default,h.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(121)),o=s(n(3)),r=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.date-lookup",[o.default,r.default]).component("twDateLookup",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(122)),a=o(n(123));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",ngChange:"&",ngMin:"<",ngMax:"<",ngRequired:"<",ngDisabled:"<",placeholder:"@",size:"@",locale:"@",label:"@",shortDate:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a,o){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var s=t.controller("ngModel");this.DateService=a,this.$element=t,this.element=t[0],this.$timeout=i,this.yearOffset=0,this.addValidators(s,t),this.addWatchers(n,s),s.$formatters.push(function(e){return r.updateCalendarView(e),e}),this.formGroup=o.getClosestParentByClassName(this.element,"form-group");var l=this.element.getElementsByClassName("btn")[0],c=this.element.getElementsByClassName("btn-group")[0],u=this.element.getElementsByClassName("dropdown-menu")[0],d=function(){i(function(){l===document.activeElement||c.classList.contains("open")||(r.formGroup&&r.formGroup.classList.remove("focus"),r.element.dispatchEvent(new CustomEvent("blur")))},150)};l.addEventListener("focusout",d),u.addEventListener("focusout",d),this.setLocale(this.locale),this.updateMinDateView(this.ngMin),this.updateMaxDateView(this.ngMax),this.button=l}return i(e,[{key:"openLookup",value:function(){var e=this;this.$ngModel.$setTouched(),this.mode="day";var t=this.ngModel;this.ngMin&&this.ngModel<this.ngMin&&(t=this.ngMin),this.ngMax&&this.ngModel>this.ngMax&&(t=this.ngMax),this.updateCalendarView(t),this.$timeout(function(){e.element.getElementsByClassName("tw-date-lookup-month-label")[0].focus()})}},{key:"selectDay",value:function(e,t,n,i){var a,o;this.isDayDisabled(t,n,i)?e.stopPropagation():(this.day=t,this.setModel(this.DateService.getUTCDateFromParts(i,n,t)),a=this.element,(o=a.getElementsByTagName("button")[0])&&o.focus(),this.updateCalendarDatePresentation())}},{key:"selectMonth",value:function(e,t,n){e.stopPropagation(),this.isMonthDisabled(t,n)||(this.month=t,this.weeks=this.getTableStructure(),this.mode="day",this.updateCalendarDatePresentation())}},{key:"selectYear",value:function(e,t){e.stopPropagation(),this.isYearDisabled(t)||(this.year=t,this.mode="month",this.updateCalendarDatePresentation())}},{key:"monthBefore",value:function(e){e.stopPropagation(),0===this.month?(this.year--,this.month=11):this.month--,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"yearBefore",value:function(e){e.stopPropagation(),this.year--,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"monthAfter",value:function(e){e.stopPropagation(),11===this.month?(this.year++,this.month=0):this.month++,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"yearAfter",value:function(e){e.stopPropagation(),this.year++,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"isCurrentlySelected",value:function(e,t,n){return e===this.selectedDate&&t===this.selectedMonth&&n===this.selectedYear}},{key:"isDayDisabled",value:function(e,t,n){return this.isYearDisabled(n)||this.isMonthDisabled(t,n)||n===this.minYear&&t===this.minMonth&&e<this.minDay||n===this.maxYear&&t===this.maxMonth&&e>this.maxDay}},{key:"isMonthDisabled",value:function(e,t){return this.isYearDisabled(t)||t===this.minYear&&e<this.minMonth||t===this.maxYear&&e>this.maxMonth}},{key:"isYearDisabled",value:function(e){return this.minYear&&e<this.minYear||this.maxYear&&e>this.maxYear}},{key:"switchToMonths",value:function(e){this.findActiveLink(),e.stopPropagation(),this.mode="month"}},{key:"switchToYears",value:function(e){this.findActiveLink(),e.stopPropagation(),this.mode="year"}},{key:"setYearOffset",value:function(e,t){e.stopPropagation(),this.yearOffset+=t}},{key:"buttonFocus",value:function(){this.formGroup&&this.formGroup.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e,n){var i=e||n;return!(i&&t.ngMin&&i<t.ngMin)||(t.formGroup&&t.formGroup.classList.add("has-error"),!1)},e.$validators.max=function(e,n){var i=e||n;return!(i&&t.ngMax&&i>t.ngMax)||(t.formGroup&&t.formGroup.classList.add("has-error"),!1)}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.locale",function(e,t){e&&e!==t&&n.setLocale(e)}),e.$watch("$ctrl.ngRequired",function(){t.$validate()}),e.$watch("$ctrl.ngMin",function(e,i){e!==i&&(n.updateMinDateView(n.ngMin),t.$validate())}),e.$watch("$ctrl.shortDate",function(){n.updateSelectedDatePresentation()}),e.$watch("$ctrl.ngMax",function(e,i){e!==i&&(n.updateMaxDateView(n.ngMax),t.$validate())}),e.$watch("$ctrl.ngModel",function(e){e&&(n.selectedDate=n.DateService.getUTCDate(e),n.selectedMonth=n.DateService.getUTCMonth(e),n.selectedYear=n.DateService.getUTCFullYear(e),n.updateSelectedDatePresentation())})}},{key:"updateCalendarView",value:function(e){e&&e.getUTCDate||(e=this.DateService.getLocaleToday()),this.day=this.DateService.getUTCDate(e),this.month=this.DateService.getUTCMonth(e),this.year=this.DateService.getUTCFullYear(e),this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"getTableStructure",value:function(){var e=this.DateService.getWeekday(this.year,this.month,1);0===e&&(e=7);var t=this.DateService.getLastDayOfMonth(this.year,this.month),n=[],i=[],a=void 0;for(a=1;a<e;a++)n.push(!1);for(a=1;a<=t;a++)n.push(a),(e+a-1)%7==0&&(i.push(n),n=[]);if(n.length){for(a=n.length;a<7;a++)n.push(!1);i.push(n)}return i}},{key:"setLocale",value:function(e){e||(this.locale="en-GB"),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale),this.monthsOfYear=this.DateService.getMonthNamesForLocale(this.locale,"long"),this.shortMonthsOfYear=this.DateService.getMonthNamesForLocale(this.locale,"short");var t=this.DateService.getDayNamesForLocale(this.locale,"short"),n=this.DateService.getDayNamesForLocale(this.locale,"narrow");t.push(t.shift()),n.push(n.shift()),this.daysOfWeek=t,this.shortDaysOfWeek=n,this.updateSelectedDatePresentation()}},{key:"updateSelectedDatePresentation",value:function(){this.selectedDateFormatted=this.DateService.getYearMonthDatePresentation(this.selectedYear,this.selectedMonth,this.selectedDate,this.locale,this.shortDate?"short":"long")}},{key:"updateCalendarDatePresentation",value:function(){this.yearMonthFormatted=this.DateService.getYearAndMonthPresentation(this.year,this.month,this.locale,this.shortDate?"short":"long")}},{key:"moveDateToWithinRange",value:function(e,t,n){return e||(e=this.DateService.getLocaleToday()),t&&t>e?t:n&&n<e?n:e}},{key:"setModel",value:function(e){e=this.moveDateToWithinRange(e,this.ngMin,this.ngMax),this.$ngModel.$setViewValue(e),this.$ngModel.$setDirty(),this.updateCalendarView(e)}},{key:"updateMinDateView",value:function(e){e&&e.getUTCDate?(this.minDay=this.DateService.getUTCDate(e),this.minMonth=this.DateService.getUTCMonth(e),this.minYear=this.DateService.getUTCFullYear(e)):(this.minDay=null,this.minMonth=null,this.minYear=null)}},{key:"updateMaxDateView",value:function(e){e&&e.getUTCDate?(this.maxDay=this.DateService.getUTCDate(e),this.maxMonth=this.DateService.getUTCMonth(e),this.maxYear=this.DateService.getUTCFullYear(e)):(this.maxDay=null,this.maxMonth=null,this.maxYear=null)}},{key:"keyHandler",value:function(e){if(this.ngModel){var t=e.which||e.charCode||e.keyCode;37===t?this.adjustDate(this.mode,this.ngModel,-1,-1,-1):38===t?(e.preventDefault(),this.adjustDate(this.mode,this.ngModel,-7,-4,-4)):39===t?this.adjustDate(this.mode,this.ngModel,1,1,1):40===t&&(e.preventDefault(),this.adjustDate(this.mode,this.ngModel,7,4,4)),this.findActiveLink()}else{var n=this.DateService.getUTCDateFromParts(this.year,this.month,this.day);this.setModel(n)}}},{key:"findActiveLink",value:function(){var e=this;this.$timeout(function(){var t=e.element.getElementsByClassName("active")[0];t&&t.focus()})}},{key:"adjustDate",value:function(e,t,n,i,a){var o=t;"day"===e&&(o=this.DateService.addDays(t,n)),"month"===e&&(o=this.DateService.addMonths(t,i)),"year"===e&&(o=this.DateService.addYears(t,a)),this.setModel(o)}},{key:"calculateYear",value:function(e,t){return this.year-this.year%20+e+t+this.yearOffset}}]),e}();a.$inject=["$element","$scope","$timeout","TwDateService","TwDomService"],t.default=a},function(e,t){e.exports='<div class="btn-group btn-block dropdown" ng-keydown=$ctrl.keyHandler($event)> <button class="btn btn-input dropdown-toggle tw-date-lookup-button" data-toggle=dropdown ng-disabled=$ctrl.ngDisabled ng-click=$ctrl.openLookup() ng-focus=$ctrl.buttonFocus() ng-class="{\n      \'btn-sm\': $ctrl.size ===\'sm\',\n      \'btn-lg\': $ctrl.size ===\'lg\'\n    }"> <span ng-if=$ctrl.label class="control-label small m-r-1">{{$ctrl.label}}</span><span ng-if=!$ctrl.ngModel class="form-control-placeholder tw-date-lookup-placeholder visible-xs-inline visible-sm-inline visible-md-inline visible-lg-inline visible-xl-inline"> {{$ctrl.placeholder}} </span><span ng-if=$ctrl.ngModel class=tw-date-lookup-selected> {{$ctrl.selectedDateFormatted}} </span> <span class=caret></span> </button> <div class=dropdown-menu> <div ng-if="$ctrl.mode ===\'year\'" class=tw-date-lookup-years> <div class="text-xs-center p-t-1 p-b-2"> <div class="pull-xs-left p-b-2"> <a href="" ng-click="$ctrl.setYearOffset($event, -20)" class="text-no-decoration tw-date-lookup-previous-years"> <span class="icon icon-left icon-lg"></span> </a> </div> <div class="pull-xs-right p-b-2"> <a href="" ng-click="$ctrl.setYearOffset($event, 20)" class="text-no-decoration tw-date-lookup-next-years"> <span class="icon icon-right icon-lg"></span> </a> </div> </div> <table class="table table-condensed table-bordered table-calendar m-b-0"><thead class=sr-only> <tr> <th colspan=4>{{$ctrl.placeholder}}</th> </tr> </thead> <tbody> <tr ng-repeat="row in [0,4,8,12,16]"> <td ng-repeat="col in [0,1,2,3]"> <a href="" ng-click="$ctrl.selectYear($event, $ctrl.calculateYear(row, col))" ng-disabled="$ctrl.isYearDisabled($ctrl.calculateYear(row, col))" ng-class="{\n                  \'active\': $ctrl.selectedYear === $ctrl.calculateYear(row, col)\n                }" class=tw-date-lookup-year-option> {{$ctrl.calculateYear(row, col)}} </a> </td> </tr> </tbody> </table> </div> <div ng-if="$ctrl.mode ===\'month\'" class=tw-date-lookup-months> <div class="text-xs-center p-t-1 p-b-2"> <div class=pull-xs-left> <a href="" ng-click=$ctrl.yearBefore($event) class=text-no-decoration> <span class="icon icon-left icon-lg"></span> </a> </div> <a href="" ng-click=$ctrl.switchToYears($event) class=tw-date-lookup-year-label> {{$ctrl.year}} </a> <div class=pull-xs-right> <a href="" ng-click=$ctrl.yearAfter($event) class=text-no-decoration> <span class="icon icon-right icon-lg"></span> </a> </div> </div> <table class="table table-condensed table-bordered table-calendar m-b-0"><thead class=sr-only> <tr> <th colspan=3>{{$ctrl.placeholder}}</th> </tr> </thead> <tbody> <tr ng-repeat="row in [0,4,8]"> <td ng-repeat="col in [0,1,2,3]"> <a href="" ng-click="$ctrl.selectMonth($event, row+col, $ctrl.year)" ng-disabled="$ctrl.isMonthDisabled(row + col, $ctrl.year)" ng-class="{\n                  \'active\': $ctrl.selectedMonth === (row + col) && $ctrl.selectedYear === $ctrl.year\n                }" class=tw-date-lookup-month-option> {{$ctrl.shortMonthsOfYear[row+col] | limitTo:5}} </a> </td> </tr> </tbody> </table> </div> <div ng-if="$ctrl.mode ===\'day\'" class=tw-date-lookup-days> <div class="text-xs-center p-t-1 p-b-2"> <div class=pull-xs-left> <a href="" ng-click=$ctrl.monthBefore($event) class="text-no-decoration tw-date-lookup-previous-month"> <span class="icon icon-left icon-lg"></span> </a> </div> <a href="" ng-click=$ctrl.switchToYears($event) class=tw-date-lookup-month-label> {{$ctrl.yearMonthFormatted}} </a> <div class=pull-xs-right> <a href="" ng-click=$ctrl.monthAfter($event) class="text-no-decoration tw-date-lookup-next-month"> <span class="icon icon-right icon-lg"></span> </a> </div> </div> <table class="table table-condensed table-bordered table-calendar m-b-0"><thead> <tr> <th ng-repeat="day in $ctrl.daysOfWeek track by $index"> <span class=hidden-xs>{{day | limitTo : 3}}</span> <span class=visible-xs-inline-block>{{$ctrl.shortDaysOfWeek[$index] | limitTo : 2}}</span> </th> </tr> </thead> <tbody> <tr ng-repeat="week in $ctrl.weeks"> <td ng-repeat="day in week track by $index" ng-class="{\n                \'default\': $index > 4\n              }"> <a href="" title="{{day}} {{$ctrl.monthsOfYear[$ctrl.month]}} {{$ctrl.year}}" ng-if=day ng-click="$ctrl.selectDay($event, day, $ctrl.month, $ctrl.year)" ng-disabled="$ctrl.isDayDisabled(day, $ctrl.month, $ctrl.year)" ng-class="{\n                  \'active\': $ctrl.isCurrentlySelected(day, $ctrl.month, $ctrl.year)\n                }" class=tw-date-lookup-day-option tabindex=0> {{day}} </a> </td> </tr> </tbody> </table> </div> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(125)),o=s(n(15)),r=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.currency-input",[o.default,r.default]).component("twCurrencyInput",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(126)),a=o(n(127));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:{$ngModel:"ngModel"},transclude:{addon:"?addon"},bindings:{ngModel:"=",ngChange:"&",ngMin:"<",ngMax:"<",ngRequired:"<",ngDisabled:"<",currency:"=",currencyCode:"@",placeholder:"@",size:"@",locale:"@"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var s=t.controller("ngModel"),l=t[0];this.CurrencyService=a,this.$timeout=i,this.showDecimals=!0,n.$watch("$ctrl.ngModel",function(e,t){e!==t&&s.$setDirty()}),n.$watch("$ctrl.currency",function(e,t){e!==t&&(r.showDecimals=r.CurrencyService.getDecimals(e)>0)}),l.getElementsByTagName("input")[0].addEventListener("blur",function(){s.$setTouched(),l.dispatchEvent(new CustomEvent("blur"))}),l.getAttribute("currency-code")&&console&&console.log&&console.log("currency code is deprecated in twCurrencyInput, please use currency."),s.$validators.min=function(e,t){return void 0===r.ngMin||null===r.ngMin||!o(t)||t>=r.ngMin},s.$validators.max=function(e,t){return void 0===r.ngMax||null===r.ngMax||!o(t)||t<=r.ngMax}}return i(e,[{key:"changedInputValue",value:function(){this.ngChange&&this.$timeout(this.ngChange)}}]),e}();function o(e){return!isNaN(parseFloat(e))}a.$inject=["$element","$scope","$timeout","TwCurrencyService"],t.default=a},function(e,t){e.exports="<div class=input-group ng-class=\"{\n  'input-group-sm': $ctrl.size === 'sm',\n  'input-group-lg': $ctrl.size === 'lg',\n  'disabled': $ctrl.ngDisabled\n}\"> <input type=text autocomplete=off name=amount step=any class=\"form-control p-r-0\" placeholder={{$ctrl.placeholder}} show-decimals=$ctrl.showDecimals tw-focusable tw-number-input-formatter ng-change=$ctrl.changedInputValue() ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled /> <span class=\"hello-world input-group-addon tw-currency-input-code p-l-1\"> <span ng-transclude=addon></span> {{ $ctrl.currency || $ctrl.currencyCode }} </span> </div> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e={BIF:0,BYR:0,CLP:0,DJF:0,GNF:0,JPY:0,KMF:0,KRW:0,MGA:0,PYG:0,RWF:0,VND:0,VUV:0,XAF:0,XOF:0,XPF:0,HUF:0,BHD:3,JOD:3,KWD:3,OMR:3,TND:3};this.getDecimals=function(t){return t&&t.toUpperCase&&void 0!==e[t.toUpperCase()]?e[t.toUpperCase()]:2}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=l(n(0)),a=l(n(4)),o=l(n(130)),r=l(n(15)),s=l(n(2));function l(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.amount-currency-select",[a.default,r.default,s.default]).component("twAmountCurrencySelect",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(131)),a=o(n(132));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,require:{$ngModel:"ngModel"},transclude:{addon:"?addon"},bindings:{ngModel:"=",ngMin:"<",ngMax:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&",amountReadOnly:"<",onAmountChange:"&",currency:"=",currencies:"<",onCurrencyChange:"&",currencyFilterPlaceholder:"@",customActionLabel:"<",onCustomAction:"&",placeholder:"@",size:"@",locale:"@"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var s=t.controller("ngModel");this.element=t[0],this.$timeout=i,this.showDecimals=!0,this.CurrencyService=a,n.$watch("$ctrl.ngModel",function(e,t){e!==t&&s.$setDirty()}),n.$watch("$ctrl.currency",function(e,t){e&&e!==t&&(r.showDecimals=r.CurrencyService.getDecimals(e)>0)}),t[0].getElementsByTagName("input")[0].addEventListener("blur",function(){s.$setTouched(),r.element.dispatchEvent(new CustomEvent("blur"))}),s.$validators.min=function(e,t){return void 0===r.ngMin||null===r.ngMin||!o(t)||t>=r.ngMin},s.$validators.max=function(e,t){return void 0===r.ngMax||null===r.ngMax||!o(t)||t<=r.ngMax},this.element.getAttribute("on-amount-change")&&console&&console.log&&console.log("onAmountChange is deprecated in twAmountCurrencySelect, please use ngChange.")}return i(e,[{key:"changedAmount",value:function(){this.ngChange&&this.$timeout(this.ngChange),this.onAmountChange&&this.$timeout(this.onAmountChange)}},{key:"changedCurrency",value:function(){this.onCurrencyChange&&this.$timeout(this.onCurrencyChange)}},{key:"customAction",value:function(){this.onCustomAction&&this.onCustomAction()}}]),e}();function o(e){return!isNaN(parseFloat(e))}a.$inject=["$element","$scope","$timeout","TwCurrencyService"],t.default=a},function(e,t){e.exports="<div class=input-group ng-class=\"{\n    'input-group-sm': $ctrl.size === 'sm',\n    'input-group-lg': $ctrl.size === 'lg',\n    'disabled': $ctrl.ngDisabled\n  }\"> <input type=text autocomplete=off name=amount step=any class=form-control placeholder=\"{{ $ctrl.placeholder }}\" tw-focusable show-decimals=$ctrl.showDecimals tw-number-input-formatter ng-change=$ctrl.changedAmount() ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled /> <span class=input-group-addon ng-class=\"{'input-lg': $ctrl.size ==='lg'}\" ng-transclude=addon></span> <span class=\"input-group-btn amount-currency-select-btn\"> <tw-select ng-model=$ctrl.currency ng-required=true size=\"{{ $ctrl.size }}\" inverse=true dropdown-right=xs dropdown-width=lg hide-currency=xs hide-note=true hide-secondary=true options=$ctrl.currencies filter=\"{{ $ctrl.currencyFilterPlaceholder }}\" ng-change=$ctrl.changedCurrency()> <a href=\"\" ng-if=!!$ctrl.customActionLabel ng-click=$ctrl.onCustomAction()> {{ $ctrl.customActionLabel }} </a> </tw-select> </span> </div> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(134)),a=o(n(135));function o(e){return e&&e.__esModule?e:{default:e}}n(136);var r={controller:i.default,template:a.default,bindings:{model:"=",initialFields:"<fields",requiredFields:"<",uploadOptions:"<",locale:"@",title:"@",description:"@",onModelChange:"&?",onRefreshRequirements:"&?",onFieldFocus:"&?",onFieldBlur:"&?",onFieldChange:"&?",validationMessages:"<",errorMessages:"<",warningMessages:"<",isValid:"=?",narrow:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(0),r=(i=o)&&i.__esModule?i:{default:i};var s=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.$scope=n,this.$timeout=i}return a(e,[{key:"$onInit",value:function(){var e=this;this.model||(this.model={}),this.requiredFields||(this.requiredFields=[]),this.validationMessages||(this.validationMessages={required:"Required",pattern:"Incorrect format",min:"The value is too low",max:"The value is too high",minlength:"The value is too short",maxlength:"The value is too long"}),this.$scope.$watch("twFieldset.$valid",function(t){e.isValid=t})}},{key:"$onChanges",value:function(e){var t=e.initialFields;t&&(r.default.equals(t.currentValue,t.previousValue)||(this.fields=this.RequirementsService.prepFields(t.currentValue,this.model,this.validationMessages),this.requiredFields&&this.requiredFields.length||(this.requiredFields=this.RequirementsService.getRequiredFields(this.fields))))}},{key:"fieldFocus",value:function(e,t){this.onFieldFocus&&this.onFieldFocus({key:e,field:t})}},{key:"fieldBlur",value:function(e,t){this.onFieldBlur&&this.onFieldBlur({key:e,field:t})}},{key:"fieldChange",value:function(e,t,n){var i=this;void 0===e&&delete this.model[t],this.onFieldChange&&this.onFieldChange({value:e,key:t,field:n}),this.errorMessages&&this.errorMessages[t]&&delete this.errorMessages[t],this.$timeout(function(){i.onModelChange&&i.onModelChange({model:i.model}),n.refreshRequirementsOnChange&&i.onRefreshRequirements&&i.onRefreshRequirements()})}},{key:"refreshRequirements",value:function(){this.onRefreshRequirements&&this.onRefreshRequirements()}},{key:"isRequired",value:function(e){return Array.isArray(this.requiredFields)&&this.requiredFields.indexOf(e)>=0}}]),e}();s.$inject=["TwRequirementsService","$scope","$timeout"],t.default=s},function(e,t){e.exports='<fieldset ng-form=twFieldset> <legend ng-if=$ctrl.title>{{ $ctrl.title }}</legend> <p class=text-max-width ng-if=$ctrl.description>{{ $ctrl.description }}</p> <div class="row row-equal-height"> <div class=col-xs-12 ng-hide=field.hidden ng-repeat="(key, field) in $ctrl.fields" ng-class="{\n        \'col-sm-4\': !$ctrl.narrow  && field.width === \'sm\',\n        \'col-sm-6\': !$ctrl.narrow  && field.width === \'md\',\n        \'col-sm-12\': $ctrl.narrow || field.width === \'lg\'\n      }"> <tw-field ng-if="field.type !== \'object\'" name="{{ key }}" model=$ctrl.model[key] field=field required=$ctrl.isRequired(key) locale="{{ $ctrl.locale }}" upload-options=$ctrl.uploadOptions warning-message=$ctrl.warningMessages[key] error-message=$ctrl.errorMessages[key] validation-messages=$ctrl.validationMessages on-change="$ctrl.fieldChange(value, key, field)" on-focus="$ctrl.fieldFocus(key, field)" on-blur="$ctrl.fieldBlur(key, field)" class=tw-field-full-width> </tw-field> <tw-fieldset ng-if="field.type === \'object\'" model=$ctrl.model[key] fields=field.properties locale="{{ $ctrl.locale }}" title="{{ field.title }}" description="{{ field.description }}" upload-options=$ctrl.uploadOptions warning-messages=$ctrl.warningMessages[key] error-messages=$ctrl.errorMessages[key] validation-messages=$ctrl.validationMessages on-refresh-requirements=$ctrl.refreshRequirements() on-field-change="$ctrl.fieldChange(value, key, field)" on-field-focus="$ctrl.fieldFocus(key, field)" on-field-blur="$ctrl.fieldBlur(key, field)" class=tw-field-full-width> </tw-fieldset> </div> </div> </fieldset> '},function(e,t,n){var i=n(137);"string"==typeof i&&(i=[[e.i,i,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(7)(i,a);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,".tw-field-full-width{flex:1}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(139)),o=s(n(110)),r=s(n(109));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.requirements-form",[o.default,r.default]).component("twRequirementsForm",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(140)),a=o(n(141));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{model:"=",onModelChange:"&",requirements:"<",uploadOptions:"<",locale:"@",onRefreshRequirements:"&?",validationMessages:"<",errorMessages:"<",isValid:"=?"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(0),r=(i=o)&&i.__esModule?i:{default:i};var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.model||(this.model={})}return a(e,[{key:"$onInit",value:function(){this.requirements&&this.requirements.length>0&&(this.activeIndex=0)}},{key:"$onChanges",value:function(e){e.requirements&&this.onRequirementsChange(e.requirements.currentValue,e.requirements.previousValue)}},{key:"onTabChange",value:function(e){this.switchTab(e,this.activeIndex),this.activeIndex=e}},{key:"switchTab",value:function(e,t){e!==t&&l(this.model,this.requirements&&this.requirements[t],this.requirements&&this.requirements[e])}},{key:"onFieldsetRefreshRequirements",value:function(){this.onRefreshRequirements&&this.onRefreshRequirements()}},{key:"onFieldsetModelChange",value:function(e){this.onModelChange&&this.onModelChange({model:e})}},{key:"onRequirementsChange",value:function(e,t){if(!r.default.equals(e,t)){var n=this.RequirementsService.prepRequirements(e),i=this.RequirementsService.prepRequirements(t);this.requirements=n,this.tabs=this.requirements.map(function(e){return e.title}),(!this.activeIndex||this.activeIndex&&!this.requirements[this.activeIndex])&&this.requirements.length>0&&(this.activeIndex=0),l(this.model,i[this.activeIndex],n[this.activeIndex])}}}]),e}();function l(e,t,n){if(t&&n&&t.properties&&n.properties){var i=c(t),a=c(n);i.filter(function(e){return a.indexOf(e)<0}).forEach(function(t){delete e[t]})}}function c(e){return e&&e.properties&&Object.keys(e.properties)||[]}s.$inject=["TwRequirementsService"],t.default=s},function(e,t){e.exports='<tw-tabs ng-if="$ctrl.requirements.length > 1" tabs=$ctrl.tabs on-change=$ctrl.onTabChange(index) active=$ctrl.activeIndex> </tw-tabs> <div class=tab-content ng-form=twForm ng-if="$ctrl.requirements.length > 0"> <div class="tab-pane active"> <p ng-if=$ctrl.requirements[$ctrl.activeIndex].description> {{ $ctrl.requirements[$ctrl.activeIndex].description }} </p> <tw-fieldset fields=$ctrl.requirements[$ctrl.activeIndex].properties model=$ctrl.model on-model-change=$ctrl.onFieldsetModelChange(model) upload-options=$ctrl.uploadOptions locale={{$ctrl.locale}} on-refresh-requirements=$ctrl.onFieldsetRefreshRequirements() validation-messages=$ctrl.validationMessages error-messages=$ctrl.errorMessages is-valid=$ctrl.isValid> </tw-fieldset> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(143)),a=o(n(144));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{tabs:"<",active:"<",onChange:"&"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!this.active&&this.tabs&&this.tabs.length&&(this.active=0)}return i(e,[{key:"switchTab",value:function(e){this.active=e,this.onChange&&this.onChange({index:e})}}]),e}();t.default=a},function(e,t){e.exports='<ul ng-if="$ctrl.tabs.length > 0" class="nav nav-tabs m-b-3"> <li ng-repeat="tab in $ctrl.tabs track by $index" ng-class="{\n      \'active\': $ctrl.active === $index\n    }"> <a href="" ng-click=$ctrl.switchTab($index)> {{ tab }} </a> </li> </ul> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=l(n(0)),a=l(n(146)),o=l(n(111)),r=l(n(5)),s=l(n(3));function l(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.requirements.definition-list",[o.default,r.default,s.default]).component("twDefinitionList",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(147)),a=o(n(148));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{model:"<",initialFields:"<fields",locale:"@",title:"@",narrow:"<",layout:"@"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(0),r=(i=o)&&i.__esModule?i:{default:i};var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.layout=this.layout||"vertical"}return a(e,[{key:"$onChanges",value:function(e){var t=e.initialFields;t&&(r.default.equals(t.currentValue,t.previousValue)||(this.fields=this.RequirementsService.prepFields(t.currentValue,this.model)))}},{key:"getValueLabel",value:function(e,t){for(var n=0;n<e.length;n++)if(e[n].value===t)return e[n].label;return t}},{key:"mask",value:function(e){return new Array(e.length+1).join("*")}}]),e}();s.$inject=["TwRequirementsService"],t.default=s},function(e,t){e.exports='<div class=m-t-1> <h4 ng-if=$ctrl.title ng-bind=$ctrl.title class="page-header p-t-3"> </h4> </div> <div ng-class="{\'row row-equal-height\': $ctrl.layout === \'vertical\'}"> <div ng-class="{\'col-xs-12 col-sm-6\': !$ctrl.narrow && $ctrl.layout === \'vertical\'}" ng-repeat="(key, field) in $ctrl.fields track by $index" ng-if="$ctrl.model[key] && !field.hidden"> <dl ng-if=!field.group ng-class="{\'dl-horizontal-item\': $ctrl.layout === \'justified\', \'dl-horizontal\': $ctrl.layout === \'horizontal\'}"> <dt ng-bind=field.title></dt> <dd ng-switch=field.control class=text-word-break> <span ng-switch-when=select|radio ng-switch-when-separator=|> {{ $ctrl.getValueLabel(field.values, $ctrl.model[key]) }} </span> <span ng-switch-when=date> {{ $ctrl.model[key] | twDateFormat: $ctrl.locale }} </span> <span ng-switch-when=number> {{ $ctrl.model[key] | twNumberFormat: $ctrl.locale }} </span> <span ng-switch-when=password> {{ $ctrl.mask($ctrl.model[key]) }} </span> <div ng-switch-when=file class=thumbnail> <img alt="{{ field.title }}" ng-src="{{ $ctrl.model[key] }}" ng-attr-alt="{{ field.title }}"/> </div> <span ng-switch-default> {{ $ctrl.model[key] | twTextFormat: field.displayFormat }} </span> </dd> </dl> <dl ng-if=field.group ng-class="{\'dl-horizontal-item\': $ctrl.layout === \'justified\', \'dl-horizontal\': $ctrl.layout === \'horizontal\'}"> <dt ng-bind=field.title></dt> <dd class=text-word-break> <span ng-repeat="fieldSection in field.group"> <span ng-switch=fieldSection.control> <span ng-switch-when=select|radio ng-switch-when-separator=|> {{ $ctrl.getValueLabel(fieldSection.values, $ctrl.model[fieldSection.key]) }} </span> <span ng-switch-when=date> {{ $ctrl.model[fieldSection.key] | twDateFormat: $ctrl.locale }} </span> <span ng-switch-when=number> {{ $ctrl.model[fieldSection.key] | twNumberFormat: $ctrl.locale }} </span> <span ng-switch-when=password> {{ $ctrl.mask($ctrl.model[fieldSection.key]) }} </span> <div ng-switch-when=file class=thumbnail> <img alt="{{ field.title }}" ng-src="{{ $ctrl.model[fieldSection.key] }}" ng-attr-alt="{{ field.title }}"/> </div> <span ng-switch-default> {{ $ctrl.model[fieldSection.key] | twTextFormat: fieldSection.displayFormat }} </span> </span> </span> </dd> </dl> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=l(n(0)),a=l(n(150)),o=l(n(151)),r=l(n(152)),s=l(n(154));function l(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.formatting.text-format",[]).service("TwUndoStackFactory",a.default).service("TwTextFormatService",o.default).directive("twTextFormat",r.default).filter("twTextFormat",s.default).name},function(e,t,n){"use strict";function i(){var e=0,t=[];this.reset=function(n){t=[n],e=0},this.add=function(n){t.length-1>e&&(t=t.slice(0,e+1)),t[e]!==n&&(t.push(n),e++)},this.undo=function(){return e>=0&&void 0!==t[e-1]&&e--,t[e]},this.redo=function(){return e<t.length&&void 0!==t[e+1]&&e++,t[e]}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){this.new=function(){return new i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;function t(e,t){return e[t]&&"*"!==e[t]}this.formatUsingPattern=function(n,i){if(n||(n=""),"string"!=typeof i)return n;for(var a="",o=0,r=n.length,s=0;r;)t(i,s)?(a+=i[s],o++):(a+=n[s-o],r--),s++;var l=e.countSeparatorsAfterCursor(i,s);return l&&(a+=i.substr(s,l)),a},this.unformatUsingPattern=function(e,n){if(!e)return"";if("string"!=typeof n)return e;for(var i=0;i<n.length;i++)if(t(n,i))for(;e.indexOf(n[i])>=0;)e=e.replace(n[i],"");return e},this.reformatUsingPattern=function(t,n,i){return void 0===i&&(i=n),e.formatUsingPattern(e.unformatUsingPattern(t,i),n)},this.countSeparatorsBeforeCursor=function(e,n){for(var i=0;t(e,n-i-1);)i++;return i},this.countSeparatorsAfterCursor=function(e,n){for(var i=0;t(e,n+i);)i++;return i},this.countSeparatorsInAppendedValue=function(e,n,i){for(var a=0,o=0,r=i.length;r;)t(e,n+o)?a++:r--,o++;return a},this.countSeparatorsInPattern=function(e){for(var n=0,i=0;i<e.length;i++)t(e,i)&&n++;return n}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(153),o=(i=a)&&i.__esModule?i:{default:i};t.default=function(){return{restrict:"A",require:"ngModel",bindToController:!0,controllerAs:"$ctrl",scope:{ngModel:"<",twTextFormat:"@"},controller:o.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a,o){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.keydownCount=0,this.pattern="",this.undoStack=o.new(),this.$ngModel=t.controller("ngModel"),this.$timeout=n,this.TextFormatService=a,this.element=t[0],this.$ngModel.$formatters.push(function(e){return r.pattern?a.formatUsingPattern(e,r.pattern):e}),this.$ngModel.$parsers.push(function(e){return r.pattern?a.unformatUsingPattern(e,r.pattern):e}),this.element.addEventListener("change",function(e){r.onChange(e)}),this.element.addEventListener("keydown",function(e){r.onKeydown(e)}),this.element.addEventListener("paste",function(e){r.onPaste(e)}),this.element.addEventListener("cut",function(e){r.onCut(e)}),this.element.addEventListener("copy",function(e){r.onCopy(e)}),this.replaceLengthValidators(this.$ngModel,this.TextFormatService,this.$timeout),i.$watch("$ctrl.twTextFormat",function(e){r.onPatternChange(e)}),i.$watch("$ctrl.ngModel",function(e,t){r.onModelChange(e,t)}),this.undoStack.reset(this.element.value)}return i(e,[{key:"onModelChange",value:function(e,t){if(e!==t&&this.pattern){var n=this.element.selectionStart,i=this.element.selectionEnd;this.reformatControl(this.element,e),this.setSelection(n,i)}}},{key:"onPatternChange",value:function(e,t){if(e!==t){e&&e.indexOf("||")>0?this.pattern=e.substring(0,e.indexOf("||")):this.pattern=e;var n=this.element.value;t&&(n=this.TextFormatService.unformatUsingPattern(n,t)),e&&(n=this.TextFormatService.formatUsingPattern(n,this.pattern)),this.undoStack.reset(n),this.element.value=n}else this.pattern=e}},{key:"reformatControl",value:function(e,t){t||(t=e.value);var n=this.TextFormatService.reformatUsingPattern(t,this.pattern);n!==t&&(e.value=n)}},{key:"onChange",value:function(){this.pattern&&(this.reformatControl(this.element),this.undoStack.add(this.element.value))}},{key:"onPaste",value:function(e){var t=this;if(this.pattern){var n=this.element.selectionStart,i=(e.clipboardData||window.clipboardData).getData("Text"),a=this.TextFormatService.countSeparatorsInAppendedValue(this.pattern,n,i);this.$timeout(function(){var e=n+i.length+a;t.reformatControl(t.element),t.undoStack.add(t.element.value),t.setSelection(e,e)})}}},{key:"onKeydown",value:function(e){var t=this;if(this.pattern){this.keydownCount++;var n=this.keydownCount,i=e.keyCode||e.which,a=e.target.selectionStart,o=e.target.selectionEnd;if(s.indexOf(i)>=0||e.metaKey||e.ctrlKey)return i===r.z&&(e.metaKey||e.ctrlKey)&&(e.preventDefault(),e.stopPropagation(),this.element.value=this.undoStack.undo()),void(i===r.y&&(e.metaKey||e.ctrlKey)&&(e.preventDefault(),e.stopPropagation(),this.element.value=this.undoStack.redo()));this.$timeout(function(){t.afterKeydown(i,n,t.element,t.pattern,a,o)})}}},{key:"afterKeydown",value:function(e,t,n,i,a,o){var s=void 0;e===r.backspace?(s=this.doBackspace(n,i,a,o),this.$ngModel.$setViewValue(s)):e===r.delete?(s=this.doDelete(n,i,a,o),this.$ngModel.$setViewValue(s)):this.keydownCount===t&&this.doKeypress(n,i,a,o)}},{key:"doBackspace",value:function(e,t,n,i){e.value=this.getFormattedValueAfterBackspace(e,t,n,i),this.undoStack.add(e.value);var a=this.getPositionAfterBackspace(t,e,n,i);return this.setSelection(a,a),e.value}},{key:"getFormattedValueAfterBackspace",value:function(e,t,n,i){var a=void 0,r=void 0,s=e.value,l=this.TextFormatService.countSeparatorsBeforeCursor(t,n);if(l){var c=l>1?1:0;n!==i?(a=n-l+1,r=n-c):(a=n-l,r=n-c),s=o(e.value,a,r)}return this.TextFormatService.reformatUsingPattern(s,t)}},{key:"doDelete",value:function(e,t,n,i){return e.value=this.getFormattedValueAfterDelete(e,t,n,i),this.undoStack.add(e.value),this.setSelection(n,n),e.value}},{key:"setSelection",value:function(e,t){this.element.setSelectionRange(e,t)}},{key:"getFormattedValueAfterDelete",value:function(e,t,n,i){var a=void 0,r=void 0,s=e.value,l=this.TextFormatService.countSeparatorsAfterCursor(t,n);if(l){var c=l>1?0:1;n!==i?(a=n+c,r=n+l+c):(a=n+l,r=n+l+1),s=o(e.value,a,r)}return this.TextFormatService.reformatUsingPattern(s,t)}},{key:"doKeypress",value:function(e,t,n,i){this.reformatControl(e),this.undoStack.add(e.value);var a=this.getPositionAfterKeypress(t,e,n,i);this.setSelection(a,a)}},{key:"getPositionAfterBackspace",value:function(e,t,n,i){var a=n-this.TextFormatService.countSeparatorsBeforeCursor(e,n)-(n!==i?0:1);return a+this.TextFormatService.countSeparatorsAfterCursor(e,a)}},{key:"getPositionAfterKeypress",value:function(e,t,n,i){var a=void 0;return n!==i?a=this.TextFormatService.countSeparatorsAfterCursor(e,n):0===(a=this.TextFormatService.countSeparatorsAfterCursor(e,n))&&(a=this.TextFormatService.countSeparatorsAfterCursor(e,n+1)),n+1+a}},{key:"onCut",value:function(){var e=this;if(this.pattern){var t=this.element.selectionStart;this.$timeout(function(){e.reformatControl(e.element),e.undoStack.add(e.element.value);var n=t+e.TextFormatService.countSeparatorsAfterCursor(e.pattern,t);e.setSelection(n,n)})}}},{key:"onCopy",value:function(){var e=this;if(this.pattern){var t=this.element.selectionStart,n=this.element.selectionEnd;this.$timeout(function(){e.setSelection(t,n)})}}},{key:"replaceLengthValidators",value:function(e,t,n){var i=this;n(function(){var n=e.$validators.minlength,a=e.$validators.maxlength,o=e.$validators.pattern;n&&(e.$validators.minlength=function(e,a){return n(e,t.unformatUsingPattern(a,i.pattern))}),a&&(e.$validators.maxlength=function(e,n){return a(e,t.unformatUsingPattern(n,i.pattern))}),o&&(e.$validators.pattern=function(e,n){return o(e,t.unformatUsingPattern(n,i.pattern))})})}}]),e}();function o(e,t,n){return e.substring(0,t-1)+e.substring(n-1,e.length)}var r={cmd:224,cmdLeft:91,cmdRight:93,backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,end:35,home:36,left:37,up:38,right:39,down:40,delete:46,y:89,z:90},s=[r.cmd,r.cmdLeft,r.cmdRight,r.enter,r.shift,r.ctrl,r.alt,r.left,r.up,r.right,r.down];a.$inject=["$element","$timeout","$scope","TwTextFormatService","TwUndoStackFactory"],t.default=a},function(e,t,n){"use strict";function i(e){return function(t,n){return t=t||"",n?(n.indexOf("||")>0&&(n=n.substring(0,n.indexOf("||"))),e.formatUsingPattern(t,n)):t}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["TwTextFormatService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(156);var o={template:((i=a)&&i.__esModule?i:{default:i}).default,bindings:{amount:"<",precision:"<",locale:"<"}};t.default=o},function(e,t){e.exports="{{ $ctrl.amount | twNumberFormat : $ctrl.precision : $ctrl.locale }} "},function(e,t,n){"use strict";function i(e){return function(t,n,i){if(!t)return t;"string"==typeof t&&Number(t)&&(t=Number(t));var a={useGrouping:!0};return"number"==typeof n&&(a.minimumFractionDigits=n,a.maximumFractionDigits=n,"1,234"!==1234..toLocaleString("en-GB"))?t.toFixed(n):i?t.toLocaleString(i,a):t.toLocaleString(e.getCurrent(),a)}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["TwLocaleService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=this;this.locale="en-GB",this.regex=/^[a-z]{2}(-[A-Z][A-Z])?$/,this.lowerCaseCountry=/^[a-z]{2}(-[a-z][a-z])?$/,this.getCurrent=function(){return e.locale},this.setCurrent=function(t){return e.isValid(t)?(e.locale=t,e.locale):e.lowerCaseCountry.test(t)?(e.locale=(n=t).slice(0,3)+n.slice(3,5).toUpperCase(),e.locale):(console&&console.warn&&console.warn("Incorrect locale: "+t),e.locale="en-GB",e.locale);var n},this.isValid=function(t){return e.regex.test(t)},this.getCountryFromLocale=function(t){return e.isValid(t)&&t.slice(3,5)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=l(n(0)),a=l(n(160)),o=l(n(162)),r=l(n(15)),s=l(n(112));function l(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.formatting.currency",[r.default,s.default]).component("twCurrencyFormat",a.default).filter("twCurrencyFormat",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(161);var o={template:((i=a)&&i.__esModule?i:{default:i}).default,bindings:{amount:"<",currency:"<",locale:"<"}};t.default=o},function(e,t){e.exports="{{ $ctrl.amount | twCurrencyFormat : $ctrl.currency : $ctrl.locale }} "},function(e,t,n){"use strict";function i(e,t,n){return function(e,i,a){var o=void 0;return"string"==typeof e&&Number(e)&&(e=Number(e)),o=e===parseInt(e,10)?0:t.getDecimals(i),n(e,o,a)+" "+i}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["$filter","TwCurrencyService","twNumberFormatFilter"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(164)),o=s(n(1)),r=s(n(25));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.telephone",[o.default,r.default]).component("twTelephone",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(165)),a=o(n(167));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{ngModel:"=",ngRequired:"<",ngDisabled:"<",ngChange:"&",locale:"@",placeholder:"@",searchPlaceholder:"@"},transclude:!0};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=n(166),r=(i=o)&&i.__esModule?i:{default:i};var s=function(){function e(t,n,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$timeout=n,this.LocaleService=i,this.DomService=a,this.countries=r.default}return a(e,[{key:"$onInit",value:function(){var e,t,n=this;this.callingCodes=(e=r.default,t=function(e){var t={};return e.forEach(function(e){t[e.phone]||(t[e.phone]={code:e.phone,iso3:[],names:[]}),t[e.phone].iso3.push(e.iso3),t[e.phone].names.push(e.name)}),t}(e),Object.keys(t).sort(function(e,t){return parseInt(e.substring(1),10)<parseInt(t.substring(1),10)?-1:1}).map(function(e){return{value:e,label:e,note:t[e].iso3.join(", "),searchable:t[e].names.join(", ")}})),this.formGroup=this.DomService.getClosestParentByClassName(this.$element[0],"form-group"),this.charactersToRemove=/[\s.-]/g,this.modelPattern=/^\+[0-9]*$/,this.ngModel&&this.explodeNumberModel(this.ngModel),this.$ngModel=this.$element.controller("ngModel"),this.$ngModel.$formatters.unshift(function(e){return n.explodeNumberModel(e),e}),this.$ngModel.$validators.pattern=function(e){return n.modelPattern.test(e)},this.$ngModel.$validators.minlength=function(e){return e&&e.length>6},this.$timeout(function(){n.suffixModelController=n.$element.find("input[type=tel]").controller("ngModel"),n.suffixModelController&&n.suffixModelController.$parsers&&n.suffixModelController.$parsers.unshift(function(e){return e.replace(n.charactersToRemove,"")})})}},{key:"$onChanges",value:function(e){e.locale&&!this.ngModel&&this.setDefaultPrefix()}},{key:"explodeNumberModel",value:function(e){var t,n=l(e,this.countries);"string"==typeof(t=e)&&t.length>4&&"+"===t.substring(0,1)?n?(this.prefix=n.phone,this.suffix=e.substring(n.phone.length),this.format=n.phoneFormat||""):(this.prefix="",this.suffix=e.substring(1),this.format=""):this.setDefaultPrefix()}},{key:"onPrefixChange",value:function(e){var t=l(e,this.countries);t&&(this.format=t.phoneFormat||""),this.onValueChange(e,this.suffix)}},{key:"onSuffixChange",value:function(){this.onValueChange(this.prefix,this.suffix&&this.suffix.replace(this.charactersToRemove,""))}},{key:"onValueChange",value:function(e,t){var n=void 0;n=t?(e||"+")+t:null,this.$ngModel.$setViewValue(n),this.validate()}},{key:"setDefaultPrefix",value:function(){var e=function(e,t){if(t&&t.length&&e&&2===e.length){var n=t.filter(function(t){return e===t.iso2});if(n&&n.length)return n.reduce(function(e,t){return e.phone.length>t.phone.length?e:t})}return}(this.LocaleService.getCountryFromLocale(this.locale),this.countries);e?(this.prefix=e.phone,this.format=e.phoneFormat||""):this.prefix="+44"}},{key:"onFocus",value:function(){this.$element[0].dispatchEvent(new CustomEvent("focus"))}},{key:"onBlur",value:function(){this.$ngModel.$setTouched(),this.$element[0].dispatchEvent(new CustomEvent("blur")),this.validate()}},{key:"validate",value:function(){this.formGroup&&(this.$ngModel.$invalid&&this.$ngModel.$touched?this.formGroup.classList.add("has-error"):this.formGroup.classList.remove("has-error"))}}]),e}();function l(e,t){if(t&&t.length&&e&&e.length>1){var n=t.filter(function(t){return 0===e.indexOf(t.phone)});if(n&&n.length)return n.reduce(function(e,t){return e.phone.length>t.phone.length?e:t})}}s.$inject=["$element","$timeout","TwLocaleService","TwDomService"],t.default=s},function(e){e.exports=JSON.parse('[{"name":"Afghanistan","iso2":"AF","iso3":"AFG","phone":"+93"},{"name":"Åland Islands","iso2":"AX","iso3":"ALA","phone":"+358"},{"name":"Albania","iso2":"AL","iso3":"ALB","phone":"+355"},{"name":"Algeria","iso2":"DZ","iso3":"DZA","phone":"+213"},{"name":"American Samoa","iso2":"AS","iso3":"ASM","phone":"+1684"},{"name":"Andorra","iso2":"AD","iso3":"AND","phone":"+376"},{"name":"Angola","iso2":"AO","iso3":"AGO","phone":"+244"},{"name":"Anguilla","iso2":"AI","iso3":"AIA","phone":"+1264"},{"name":"Antarctica","iso2":"AQ","iso3":"ATA","phone":"+672"},{"name":"Antigua","iso2":"AG","iso3":"ATG","phone":"+1268"},{"name":"Argentina","iso2":"AR","iso3":"ARG","phone":"+54"},{"name":"Armenia","iso2":"AM","iso3":"ARM","phone":"+374"},{"name":"Aruba","iso2":"AW","iso3":"ABW","phone":"+297"},{"name":"Ascension Island","iso2":"SH","iso3":"SHN","phone":"+247"},{"name":"Australia","iso2":"AU","iso3":"AUS","phone":"+61"},{"name":"Australian External Territories","iso2":"AU","iso3":"AUS","phone":"+672"},{"name":"Austria","iso2":"AT","iso3":"AUT","phone":"+43"},{"name":"Azerbaijan","iso2":"AZ","iso3":"AZE","phone":"+994"},{"name":"Bahamas","iso2":"BS","iso3":"BHS","phone":"+1242"},{"name":"Bahrain","iso2":"BH","iso3":"BHR","phone":"+973"},{"name":"Bangladesh","iso2":"BD","iso3":"BGD","phone":"+880"},{"name":"Barbados","iso2":"BB","iso3":"BRB","phone":"+1246"},{"name":"Belarus","iso2":"BY","iso3":"BLR","phone":"+375"},{"name":"Belgium","iso2":"BE","iso3":"BEL","phone":"+32"},{"name":"Belize","iso2":"BZ","iso3":"BLZ","phone":"+501"},{"name":"Benin","iso2":"BJ","iso3":"BEN","phone":"+229"},{"name":"Bermuda","iso2":"BM","iso3":"BMU","phone":"+1441"},{"name":"Bhutan","iso2":"BT","iso3":"BTN","phone":"+975"},{"name":"Bolivia","iso2":"BO","iso3":"BOL","phone":"+591"},{"name":"Bonaire, Sint Eustatius and Saba","iso2":"BQ","iso3":"BES","phone":"+599"},{"name":"Bosnia and Herzegovina","iso2":"BA","iso3":"BIH","phone":"+387"},{"name":"Botswana","iso2":"BW","iso3":"BWA","phone":"+267"},{"name":"Brazil","iso2":"BR","iso3":"BRA","phone":"+55"},{"name":"British Virgin Islands","iso2":"VG","iso3":"VGB","phone":"+1284"},{"name":"Brunei","iso2":"BN","iso3":"BRN","phone":"+673"},{"name":"Bulgaria","iso2":"BG","iso3":"BGR","phone":"+359"},{"name":"Burkina Faso","iso2":"BF","iso3":"BFA","phone":"+226"},{"name":"Burundi","iso2":"BI","iso3":"BDI","phone":"+257"},{"name":"Cambodia","iso2":"KH","iso3":"KHM","phone":"+855"},{"name":"Cameroon","iso2":"CM","iso3":"CMR","phone":"+237"},{"name":"Canada","iso2":"CA","iso3":"CAN","phone":"+1"},{"name":"Cape Verde","iso2":"CV","iso3":"CPV","phone":"+238"},{"name":"Cayman Islands","iso2":"KY","iso3":"CYM","phone":"+1345"},{"name":"Central African Republic","iso2":"CF","iso3":"CAF","phone":"+236"},{"name":"Chad","iso2":"TD","iso3":"TCD","phone":"+235"},{"name":"Chile","iso2":"CL","iso3":"CHL","phone":"+56"},{"name":"China","iso2":"CN","iso3":"CHN","phone":"+86"},{"name":"Christmas Island","iso2":"CX","iso3":"CXR","phone":"+61"},{"name":"Cocos (Keeling) Islands","iso2":"CC","iso3":"CCK","phone":"+61"},{"name":"Colombia","iso2":"CO","iso3":"COL","phone":"+57"},{"name":"Comoros","iso2":"KM","iso3":"COM","phone":"+269"},{"name":"Congo","iso2":"CG","iso3":"COG","phone":"+242"},{"name":"Cook Islands","iso2":"CK","iso3":"COK","phone":"+682"},{"name":"Costa Rica","iso2":"CR","iso3":"CRI","phone":"+506"},{"name":"Croatia","iso2":"HR","iso3":"HRV","phone":"+385"},{"name":"Cuba","iso2":"CU","iso3":"CUB","phone":"+53"},{"name":"Curaçao","iso2":"CW","iso3":"CUW","phone":"+599"},{"name":"Cyprus","iso2":"CY","iso3":"CYP","phone":"+357"},{"name":"Czech Republic","iso2":"CZ","iso3":"CZE","phone":"+420"},{"name":"Democratic Republic of the Congo","iso2":"CD","iso3":"COD","phone":"+243"},{"name":"Denmark","iso2":"DK","iso3":"DNK","phone":"+45"},{"name":"Diego Garcia","iso2":"IO","iso3":"IOT","phone":"+246"},{"name":"Djibouti","iso2":"DJ","iso3":"DJI","phone":"+253"},{"name":"Dominica","iso2":"DM","iso3":"DMA","phone":"+1767"},{"name":"Dominican Republic","iso2":"DO","iso3":"DOM","phone":"+1809"},{"name":"East Timor","iso2":"TL","iso3":"TLS","phone":"+670"},{"name":"Ecuador","iso2":"EC","iso3":"ECU","phone":"+593"},{"name":"Egypt","iso2":"EG","iso3":"EGY","phone":"+20"},{"name":"El Salvador","iso2":"SV","iso3":"SLV","phone":"+503"},{"name":"Equatorial Guinea","iso2":"GQ","iso3":"GNQ","phone":"+240"},{"name":"Eritrea","iso2":"ER","iso3":"ERI","phone":"+291"},{"name":"Estonia","iso2":"EE","iso3":"EST","phone":"+372"},{"name":"Ethiopia","iso2":"ET","iso3":"ETH","phone":"+251"},{"name":"Falkland Islands","iso2":"FK","iso3":"FLK","phone":"+500"},{"name":"Faroe Islands","iso2":"FO","iso3":"FRO","phone":"+298"},{"name":"Fiji","iso2":"FJ","iso3":"FJI","phone":"+679"},{"name":"Finland","iso2":"FI","iso3":"FIN","phone":"+358"},{"name":"France","iso2":"FR","iso3":"FRA","phone":"+33"},{"name":"French Guiana","iso2":"GF","iso3":"GUF","phone":"+594"},{"name":"French Polynesia","iso2":"PF","iso3":"PYF","phone":"+689"},{"name":"French Southern Territories","iso2":"TF","iso3":"ATF","phone":"+262"},{"name":"Gabon","iso2":"GA","iso3":"GAB","phone":"+241"},{"name":"Gambia","iso2":"GM","iso3":"GMB","phone":"+220"},{"name":"Georgia","iso2":"GE","iso3":"GEO","phone":"+995"},{"name":"Germany","iso2":"DE","iso3":"DEU","phone":"+49"},{"name":"Ghana","iso2":"GH","iso3":"GHA","phone":"+233"},{"name":"Gibraltar","iso2":"GI","iso3":"GIB","phone":"+350"},{"name":"Greece","iso2":"GR","iso3":"GRC","phone":"+30"},{"name":"Greenland","iso2":"GL","iso3":"GRL","phone":"+299"},{"name":"Grenada","iso2":"GD","iso3":"GRD","phone":"+1473"},{"name":"Guadeloupe","iso2":"GP","iso3":"GLP","phone":"+596"},{"name":"Guadeloupe","iso2":"GP","iso3":"GLP","phone":"+590"},{"name":"Guam","iso2":"GU","iso3":"GUM","phone":"+1671"},{"name":"Guatemala","iso2":"GT","iso3":"GTM","phone":"+502"},{"name":"Guernsey","iso2":"GG","iso3":"GGY","phone":"+44","phoneFormat":"**** *** ***"},{"name":"Guinea","iso2":"GN","iso3":"GIN","phone":"+224"},{"name":"Guinea-Bissau","iso2":"GW","iso3":"GNB","phone":"+245"},{"name":"Guyana","iso2":"GY","iso3":"GUY","phone":"+592"},{"name":"Haiti","iso2":"HT","iso3":"HTI","phone":"+509"},{"name":"Holy See","iso2":"VA","iso3":"VAT","phone":"+379"},{"name":"Honduras","iso2":"HN","iso3":"HND","phone":"+504"},{"name":"Hong Kong","iso2":"HK","iso3":"HKG","phone":"+852"},{"name":"Hungary","iso2":"HU","iso3":"HUN","phone":"+36"},{"name":"Iceland","iso2":"IS","iso3":"ISL","phone":"+354"},{"name":"India","iso2":"IN","iso3":"IND","phone":"+91"},{"name":"Indonesia","iso2":"ID","iso3":"IDN","phone":"+62"},{"name":"Iran","iso2":"IR","iso3":"IRN","phone":"+98"},{"name":"Iraq","iso2":"IQ","iso3":"IRQ","phone":"+964"},{"name":"Ireland","iso2":"IE","iso3":"IRL","phone":"+353"},{"name":"Isle of Man","iso2":"IM","iso3":"IMN","phone":"+44"},{"name":"Israel","iso2":"IL","iso3":"ISR","phone":"+972"},{"name":"Italy","iso2":"IT","iso3":"ITA","phone":"+39"},{"name":"Ivory Coast","iso2":"CI","iso3":"CIV","phone":"+225"},{"name":"Jamaica","iso2":"JM","iso3":"JAM","phone":"+1876"},{"name":"Japan","iso2":"JP","iso3":"JPN","phone":"+81"},{"name":"Jersey","iso2":"JE","iso3":"JEY","phone":"+44"},{"name":"Jordan","iso2":"JO","iso3":"JOR","phone":"+962"},{"name":"Kazakhstan","iso2":"KZ","iso3":"KAZ","phone":"+7"},{"name":"Kenya","iso2":"KE","iso3":"KEN","phone":"+254"},{"name":"Kiribati","iso2":"KI","iso3":"KIR","phone":"+686"},{"name":"Kosovo","iso2":"XK","iso3":"RKS","phone":"+383"},{"name":"Kuwait","iso2":"KW","iso3":"KWT","phone":"+965"},{"name":"Kyrgyzstan","iso2":"KG","iso3":"KGZ","phone":"+996"},{"name":"Laos","iso2":"LA","iso3":"LAO","phone":"+856"},{"name":"Latvia","iso2":"LV","iso3":"LVA","phone":"+371"},{"name":"Lebanon","iso2":"LB","iso3":"LBN","phone":"+961"},{"name":"Lesotho","iso2":"LS","iso3":"LSO","phone":"+266"},{"name":"Liberia","iso2":"LR","iso3":"LBR","phone":"+231"},{"name":"Libya","iso2":"LY","iso3":"LBY","phone":"+218"},{"name":"Liechtenstein","iso2":"LI","iso3":"LIE","phone":"+423"},{"name":"Lithuania","iso2":"LT","iso3":"LTU","phone":"+370"},{"name":"Luxembourg","iso2":"LU","iso3":"LUX","phone":"+352"},{"name":"Macau","iso2":"MO","iso3":"MAC","phone":"+853"},{"name":"Macedonia","iso2":"MK","iso3":"MKD","phone":"+389"},{"name":"Madagascar","iso2":"MG","iso3":"MDG","phone":"+261"},{"name":"Malawi","iso2":"MW","iso3":"MWI","phone":"+265"},{"name":"Malaysia","iso2":"MY","iso3":"MYS","phone":"+60"},{"name":"Maldives","iso2":"MV","iso3":"MDV","phone":"+960"},{"name":"Mali","iso2":"ML","iso3":"MLI","phone":"+223"},{"name":"Malta","iso2":"MT","iso3":"MLT","phone":"+356"},{"name":"Marshall Islands","iso2":"MH","iso3":"MHL","phone":"+692"},{"name":"Martinique","iso2":"MQ","iso3":"MTQ","phone":"+596"},{"name":"Mauritania","iso2":"MR","iso3":"MRT","phone":"+222"},{"name":"Mauritius","iso2":"MU","iso3":"MUS","phone":"+230"},{"name":"Mayotte","iso2":"YT","iso3":"MYT","phone":"+262"},{"name":"Mexico","iso2":"MX","iso3":"MEX","phone":"+52"},{"name":"Micronesia","iso2":"FM","iso3":"FSM","phone":"+691"},{"name":"Moldova","iso2":"MD","iso3":"MDA","phone":"+373"},{"name":"Monaco","iso2":"MC","iso3":"MCO","phone":"+377"},{"name":"Mongolia","iso2":"MN","iso3":"MNG","phone":"+976"},{"name":"Montenegro","iso2":"ME","iso3":"MNE","phone":"+382"},{"name":"Montserrat","iso2":"MS","iso3":"MSR","phone":"+1664"},{"name":"Morocco","iso2":"MA","iso3":"MAR","phone":"+212"},{"name":"Mozambique","iso2":"MZ","iso3":"MOZ","phone":"+258"},{"name":"Myanmar","iso2":"MM","iso3":"MMR","phone":"+95"},{"name":"Namibia","iso2":"NA","iso3":"NAM","phone":"+264"},{"name":"Nauru","iso2":"NR","iso3":"NRU","phone":"+674"},{"name":"Nepal","iso2":"NP","iso3":"NPL","phone":"+977"},{"name":"Netherlands","iso2":"NL","iso3":"NLD","phone":"+31"},{"name":"Netherlands Antilles","iso2":"AN","iso3":"ANT","phone":"+599"},{"name":"New Caledonia","iso2":"NC","iso3":"NCL","phone":"+687"},{"name":"New Zealand","iso2":"NZ","iso3":"NZL","phone":"+64"},{"name":"Nicaragua","iso2":"NI","iso3":"NIC","phone":"+505"},{"name":"Niger","iso2":"NE","iso3":"NER","phone":"+227"},{"name":"Nigeria","iso2":"NG","iso3":"NGA","phone":"+234"},{"name":"Niue","iso2":"NU","iso3":"NIU","phone":"+683"},{"name":"Norfolk Island","iso2":"NF","iso3":"NFK","phone":"+672"},{"name":"North Korea","iso2":"KP","iso3":"PRK","phone":"+850"},{"name":"Northern Mariana Islands","iso2":"MP","iso3":"MNP","phone":"+1670"},{"name":"Norway","iso2":"NO","iso3":"NOR","phone":"+47"},{"name":"Oman","iso2":"OM","iso3":"OMN","phone":"+968"},{"name":"Pakistan","iso2":"PK","iso3":"PAK","phone":"+92"},{"name":"Palau","iso2":"PW","iso3":"PLW","phone":"+680"},{"name":"Palestine","iso2":"PS","iso3":"PSE","phone":"+970"},{"name":"Panama","iso2":"PA","iso3":"PAN","phone":"+507"},{"name":"Papua New Guinea","iso2":"PG","iso3":"PNG","phone":"+675"},{"name":"Paraguay","iso2":"PY","iso3":"PRY","phone":"+595"},{"name":"Peru","iso2":"PE","iso3":"PER","phone":"+51"},{"name":"Philippines","iso2":"PH","iso3":"PHL","phone":"+63"},{"name":"Pitcairn","iso2":"PN","iso3":"PCN","phone":"+64"},{"name":"Poland","iso2":"PL","iso3":"POL","phone":"+48"},{"name":"Portugal","iso2":"PT","iso3":"PRT","phone":"+351"},{"name":"Puerto Rico","iso2":"PR","iso3":"PRI","phone":"+1939"},{"name":"Qatar","iso2":"QA","iso3":"QAT","phone":"+974"},{"name":"Reunion Island","iso2":"RE","iso3":"REU","phone":"+262"},{"name":"Romania","iso2":"RO","iso3":"ROU","phone":"+40"},{"name":"Russia","iso2":"RU","iso3":"RUS","phone":"+7"},{"name":"Rwanda","iso2":"RW","iso3":"RWA","phone":"+250"},{"name":"Saint Barthélemy","iso2":"BL","iso3":"BLM","phone":"+590"},{"name":"Saint Helena","iso2":"SH","iso3":"SHN","phone":"+290"},{"name":"Saint Kitts and Nevis","iso2":"KN","iso3":"KNA","phone":"+1869"},{"name":"Saint Lucia","iso2":"LC","iso3":"LCA","phone":"+1758"},{"name":"Saint Martin (French part)","iso2":"MF","iso3":"MAF","phone":"+590"},{"name":"Saint Pierre and Miquelon","iso2":"PM","iso3":"SPM","phone":"+508"},{"name":"Saint Vincent and the Grenadines","iso2":"VC","iso3":"VCT","phone":"+1784"},{"name":"San Marino","iso2":"SM","iso3":"SMR","phone":"+378"},{"name":"Sao Tome and Principe","iso2":"ST","iso3":"STP","phone":"+239"},{"name":"Saudi Arabia","iso2":"SA","iso3":"SAU","phone":"+966"},{"name":"Senegal","iso2":"SN","iso3":"SEN","phone":"+221"},{"name":"Serbia","iso2":"RS","iso3":"SRB","phone":"+381"},{"name":"Seychelles","iso2":"SC","iso3":"SYC","phone":"+248"},{"name":"Sierra Leone","iso2":"SL","iso3":"SLE","phone":"+232"},{"name":"Singapore","iso2":"SG","iso3":"SGP","phone":"+65"},{"name":"Sint Maarten","iso2":"SX","iso3":"SXM","phone":"+1721"},{"name":"Slovakia","iso2":"SK","iso3":"SVK","phone":"+421"},{"name":"Slovenia","iso2":"SI","iso3":"SVN","phone":"+386"},{"name":"Solomon Islands","iso2":"SB","iso3":"SLB","phone":"+677"},{"name":"Somalia","iso2":"SO","iso3":"SOM","phone":"+252"},{"name":"South Africa","iso2":"ZA","iso3":"ZAF","phone":"+27"},{"name":"South Georgia and the South Sandwich Islands","iso2":"GS","iso3":"SGS","phone":"+500"},{"name":"South Korea","iso2":"KR","iso3":"KOR","phone":"+82"},{"name":"South Sudan","iso2":"SS","iso3":"SSD","phone":"+2011"},{"name":"Spain","iso2":"ES","iso3":"ESP","phone":"+34"},{"name":"Sri Lanka","iso2":"LK","iso3":"LKA","phone":"+94"},{"name":"Sudan","iso2":"SD","iso3":"SDN","phone":"+249"},{"name":"Suriname","iso2":"SR","iso3":"SUR","phone":"+597"},{"name":"Svalbard and Jan Mayen","iso2":"SJ","iso3":"SJM","phone":"+47"},{"name":"Swaziland","iso2":"SZ","iso3":"SWZ","phone":"+268"},{"name":"Sweden","iso2":"SE","iso3":"SWE","phone":"+46"},{"name":"Switzerland","iso2":"CH","iso3":"CHE","phone":"+41"},{"name":"Syria","iso2":"SY","iso3":"SYR","phone":"+963"},{"name":"Taiwan","iso2":"TW","iso3":"TWN","phone":"+886"},{"name":"Tajikistan","iso2":"TJ","iso3":"TJK","phone":"+992"},{"name":"Tanzania","iso2":"TZ","iso3":"TZA","phone":"+255"},{"name":"Thailand","iso2":"TH","iso3":"THA","phone":"+66"},{"name":"Togo","iso2":"TG","iso3":"TGO","phone":"+228"},{"name":"Tokelau","iso2":"TK","iso3":"TKL","phone":"+690"},{"name":"Tonga","iso2":"TO","iso3":"TON","phone":"+676"},{"name":"Trinidad and Tobago","iso2":"TT","iso3":"TTO","phone":"+1868"},{"name":"Tunisia","iso2":"TN","iso3":"TUN","phone":"+216"},{"name":"Turkey","iso2":"TR","iso3":"TUR","phone":"+90"},{"name":"Turkmenistan","iso2":"TM","iso3":"TKM","phone":"+993"},{"name":"Turks and Caicos","iso2":"TC","iso3":"TCA","phone":"+1649"},{"name":"Tuvalu","iso2":"TV","iso3":"TUV","phone":"+688"},{"name":"Uganda","iso2":"UG","iso3":"UGA","phone":"+256"},{"name":"Ukraine","iso2":"UA","iso3":"UKR","phone":"+380"},{"name":"United Arab Emirates","iso2":"AE","iso3":"ARE","phone":"+971"},{"name":"United Kingdom","iso2":"GB","iso3":"GBR","phone":"+44","phoneFormat":"**** *** ***"},{"name":"United States Minor Outlying Islands","iso2":"UM","iso3":"UMI","phone":"+1"},{"name":"United States of America","iso2":"US","iso3":"USA","phone":"+1"},{"name":"Uruguay","iso2":"UY","iso3":"URY","phone":"+598"},{"name":"Uzbekistan","iso2":"UZ","iso3":"UZB","phone":"+998"},{"name":"Vanuatu","iso2":"VU","iso3":"VUT","phone":"+678"},{"name":"Venezuela","iso2":"VE","iso3":"VEN","phone":"+58"},{"name":"Vietnam","iso2":"VN","iso3":"VNM","phone":"+84"},{"name":"Virgin Islands (U.S.)","iso2":"VI","iso3":"VIR","phone":"+1340"},{"name":"Wallis and Futuna","iso2":"WF","iso3":"WLF","phone":"+681"},{"name":"Western Sahara","iso2":"EH","iso3":"ESH","phone":"+212"},{"name":"Western Samoa","iso2":"WS","iso3":"WSM","phone":"+685"},{"name":"Yemen","iso2":"YE","iso3":"YEM","phone":"+967"},{"name":"Zambia","iso2":"ZM","iso3":"ZMB","phone":"+260"},{"name":"Zimbabwe","iso2":"ZW","iso3":"ZWE","phone":"+263"}]')},function(e,t){e.exports='<div class=row> <div class=col-xs-5> <tw-select name=phoneNumberPrefix options=$ctrl.callingCodes ng-model=$ctrl.prefix ng-change=$ctrl.onPrefixChange($ctrl.prefix) ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() placeholder=+ filter="{{ $ctrl.searchPlaceholder }}" dropdown-width=md hide-note=true></tw-select> </div> <div class=col-xs-7> <input type=tel name=phoneNumber placeholder="{{ $ctrl.placeholder }}" class=form-control ng-model=$ctrl.suffix ng-model-options="{ allowInvalid: true }" ng-change=$ctrl.onSuffixChange() ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() /> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(169)),o=s(n(8)),r=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.submit",[o.default,r.default]).component("twSubmit",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(170)),a=o(n(171));function o(e){return e&&e.__esModule?e:{default:e}}var r={controller:i.default,template:a.default,bindings:{label:"<",promise:"<",submitCallback:"&onSubmit",successCallback:"&onSuccess",failureCallback:"&?onFailure",ngDisabled:"<"}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=n,this.$q=t,this.element=i[0],this.dom=a}return i(e,[{key:"$onInit",value:function(){var e=this;this.state=0,this.colour="blue",this.animationDelay=1500,this.form=this.dom.getClosestParentByTagName(this.element,"form"),this.form.addEventListener("submit",function(){return e.onSubmit(),!0})}},{key:"$onChanges",value:function(e){e.promise&&e.promise.currentValue&&this.onNewPromise()}},{key:"onNewPromise",value:function(){var e=this;this.state=0,this.promise.then(function(t){return e.onPromiseSuccess(t)}).catch(function(t){return e.onPromiseFailure(t)})}},{key:"onSubmit",value:function(){return this.isSpinnerVisible=!0,this.isButtonDisabled=!0,this.colour="blue",this.submitCallback(),!0}},{key:"onPromiseSuccess",value:function(e){var t=this;return this.state=1,this.$timeout(function(){t.isButtonDisabled=!1,t.successCallback&&t.successCallback()},this.animationDelay),e}},{key:"onPromiseFailure",value:function(e){var t=this;return this.state=-1,this.$timeout(function(){t.colour="red",t.isButtonDisabled=!1,t.failureCallback()},this.animationDelay),this.$timeout(function(){t.colour="blue"},3*this.animationDelay),e}}]),e}();a.$inject=["$q","$timeout","$element","TwDomService"],t.default=a},function(e,t){e.exports="<button class=\"btn btn-block\" ng-class=\"{\n    'btn-danger': $ctrl.colour === 'red',\n    'btn-primary': $ctrl.colour === 'blue'\n  }\" ng-disabled=\"$ctrl.isButtonDisabled || $ctrl.ngDisabled\"> <tw-process ng-if=$ctrl.isSpinnerVisible state=$ctrl.state size=xs> </tw-process> {{ $ctrl.label }} </button> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(173)),o=r(n(175));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.forms.upload-droppable",[]).directive("twFileSelect",o.default).component("twUploadDroppable",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(174));function o(e){return e&&e.__esModule?e:{default:e}}function r(){var e=this;e.dragCounter=0,e.isActive=!1,e.onManualUpload=function(t){e.onUpload&&"function"==typeof e.onUpload&&e.onUpload(i.default.element(document.querySelector("#file-upload"))[0].files[0],t)},e.onDrop=function(t,n){e.onUpload&&"function"==typeof e.onUpload&&e.onUpload(t,n),e.isActive=!1,e.dropCounter=0},e.onDragChange=function(t){t?(e.dragCounter++,1===e.dragCounter&&(e.isActive=!0)):(e.dragCounter--,0===e.dragCounter&&(e.isActive=!1))}}function s(e,t){t[0].addEventListener("dragenter",function(t){t.preventDefault(),e.$ctrl.onDragChange(!0),e.$apply()},!1),t[0].addEventListener("dragover",function(e){e.preventDefault()},!1),t[0].addEventListener("dragleave",function(t){t.preventDefault(),e.$ctrl.onDragChange(!1),e.$apply()},!1),t[0].addEventListener("drop",function(t){t.preventDefault(),e.$ctrl.onDrop(t.dataTransfer.files[0]),e.$apply()},!1)}t.default=function(){return{bindToController:!0,controller:r,controllerAs:"$ctrl",replace:!1,transclude:!0,restrict:"E",scope:{title:"@",cta:"@",onUpload:"=",accept:"="},link:s,template:a.default}}},function(e,t){e.exports='<div class="text-center tw-upload-droppable-box" ng-class="{\'active\': $ctrl.isActive}"> <span class="icon icon-upload tw-upload-droppable-icon"></span> <h4 class=m-t-2 ng-if=$ctrl.title>{{$ctrl.title}}</h4> <div class=row> <div class="col-xs-12 col-sm-6 col-sm-offset-3 m-t-1"> <ng-transclude></ng-transclude> <label class=link for=file-upload>{{$ctrl.cta}}</label> <input tw-file-select id=file-upload type=file accept={{$ctrl.accept}} class=hidden on-user-input=$ctrl.onManualUpload /> </div> </div> </div> '},function(e,t,n){"use strict";function i(e,t){t[0].addEventListener("change",function(t){e.$ctrl.onUserInput&&"function"==typeof e.$ctrl.onUserInput&&e.$ctrl.onUserInput(t)})}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{restrict:"A",scope:{onUserInput:"="},link:i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(177)),o=r(n(1));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.validation.form",[o.default]).directive("form",a.default).name},function(e,t,n){"use strict";function i(e){return{restrict:"E",link:function(t,n){var i=n[0];i.addEventListener("submit",function(){var t=void 0,n=void 0,a=void 0,o=i.querySelectorAll("[tw-validation].ng-invalid, tw-telephone.ng-invalid-required, tw-telephone.ng-invalid-pattern");return!o.forEach||(o.forEach(function(i){t=e.getClosestParentByClassName(i,"form-group"),a=e.getClosestParentByClassName(i,"radio"),n=e.getClosestParentByClassName(i,"checkbox"),t&&t.classList.add("has-error"),a&&a.classList.add("has-error"),n&&n.classList.add("has-error")}),!0)})}}}Object.defineProperty(t,"__esModule",{value:!0}),i.$inject=["TwDomService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(179)),o=r(n(183));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.help",[a.default,o.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(180)),o=r(n(182));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.help.popover",[]).service("twPopOverService",o.default).directive("twPopOver",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{restrict:"A",controller:o.default}};var i,a=n(181),o=(i=a)&&i.__esModule?i:{default:i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=t[0];this.showPopover=function(e){return e.preventDefault(),n.showPopover(o(i))},this.hidePopover=function(e){return e.preventDefault(),n.hidePopover(o(i))},this.registerEventListeners=this.registerEventListeners.bind(this),this.unregisterEventListeners=this.registerEventListeners(o(i))}return i(e,[{key:"$onDestroy",value:function(){this.unregisterEventListeners()}},{key:"registerEventListeners",value:function(e){var t=e.element.node,n=e.popover.options.trigger;return"hover"===n?(t.addEventListener("mouseover",this.showPopover),t.addEventListener("mouseout",this.hidePopover)):t.addEventListener("click",this.showPopover),function(){"hover"===n?(t.removeEventListener("mouseover",this.showPopover),t.removeEventListener("mouseout",this.hidePopover)):t.removeEventListener("click",this.showPopover)}}}]),e}();function o(e){var t={content:{title:"",content:""},options:{placement:"right",trigger:"click"},customOptions:{spacing:0}};return["title","content","image"].forEach(function(n){e.dataset[n]&&(t.content[n]=e.dataset[n])}),["trigger","template","container","placement"].forEach(function(n){e.dataset[n]&&(t.options[n]=e.dataset[n])}),e.dataset.originalTitle&&(t.content.title=e.dataset.originalTitle),e.dataset.contentHtml&&(t.options.contentHtml="true"===e.dataset.contentHtml),{element:{node:e},popover:t}}a.$inject=["$element","twPopOverService"],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.popover=null,this.$rootScope=t,this.documentCallback=this.documentCallback.bind(this),this.resizeCallback=this.resizeCallback.bind(this),this.registerGlobalEventListeners()}return i(e,[{key:"showPopover",value:function(e){this.config=e;var t=r(e);if(!t.contains(this.popover)){var n=t.querySelector(".popover-service");n?this.popover=n:(this.popover=function(e){var t,n=e.popover.options.placement,i=function(e){var t=e.popover.options.template;return t||"<div class='popover'>\n      <h3 class='popover-title'></h3>\n      <div class='popover-content'></div>\n    </div>"}(e),a=angular.element(i)[0],o=s(e),r=["popover","in",n,"scale-down","popover-service"];o?r.push("popover-modal"):r.push("animate");return(t=a.classList).add.apply(t,r),a.setAttribute("role","popover"),a}(e),t.appendChild(this.popover))}return function(e,t){var n=e.popover,i=n.content,a=n.options.contentHtml;["title","content"].forEach(function(e){var n=t.querySelector(".popover-"+e);n.textContent="",a?n.insertAdjacentHTML("beforeend",i[e]):n.insertAdjacentText("beforeend",i[e])});var o=t.querySelector(".popover-image"),r=i.image;o&&r&&(o.src=r)}(e,this.popover),o(e,this.popover),this.popover.classList.remove("scale-down"),this.popover}},{key:"hidePopover",value:function(e){var t=this.popover;return t&&!t.classList.contains("scale-down")&&(!function(e,t){var n=e.element.node,i=e.popover.customOptions.highlightElement;s(e)&&l();i&&n.classList.remove("promoted")}(e),t.classList.add("scale-down"),this.$rootScope.$emit("promotion:close",e.popover)),this.popover}},{key:"documentCallback",value:function(e){var t=this.popover,n=this.config;if(t){var i=!t.contains(e.target),a=t.contains(e.target),o=e.target.classList.contains("popover-close"),r=e.target.classList.contains("popover-modal-cover");!t.classList.contains("scale-down")&&(i||r||a&&o)&&this.hidePopover(n)}}},{key:"resizeCallback",value:function(){var e=this.config,t=this.popover;t&&!t.classList.contains("scale-down")&&o(e,t)}},{key:"registerGlobalEventListeners",value:function(){document.documentElement.addEventListener("click",this.documentCallback,!0),window.addEventListener("resize",this.resizeCallback)}},{key:"unregisterGlobalEventListeners",value:function(){document.documentElement.removeEventListener("click",this.documentCallback,!0),window.removeEventListener("resize",this.resizeCallback)}}]),e}();function o(e,t){var n=e.element.node,i=e.popover.customOptions,a=i.highlightElement,o=i.fixedPosition;s(e)?(t.classList.contains("animate")&&t.classList.remove("animate"),t.classList.contains("popover-modal")||t.classList.add("popover-modal"),function(e,t){if(null===document.body.querySelector(".popover-modal-cover")){var n=r(e),i=document.createElement("div");i.classList.add("popover-modal-cover"),n.insertBefore(i,t)}}(e,t)):(t.classList.contains("animate")||t.classList.add("animate"),t.classList.contains("popover-modal")&&t.classList.remove("popover-modal"),l(),function(e,t){var n;(n=e.classList).remove.apply(n,["top","right","bottom","left","top-left","top-right","right-top","right-bottom","bottom-left","bottom-right","left-top","left-bottom"]);var i=function(e,t){var n=t.element.node,i=t.popover.customOptions.spacing,a=t.popover.options.placement,o=c(n),r=f(document.documentElement),s=d(n),l=d(e),u=o.offsetX+s.offsetWidth+i+l.offsetWidth,h=o.offsetX-(l.offsetWidth+i),p=u>r.clientWidth,g=h<0;p&&g&&(a="bottom");"right"===a&&p&&(a="left");"right-top"===a&&p&&(a="left-top");"right-bottom"===a&&p&&(a="left-bottom");"left"===a&&g&&(a="right");"left-top"===a&&g&&(a="right-top");"left-bottom"===a&&g&&(a="right-bottom");return a}(e,t);e.classList.add(i),e.style.visibility="hidden";var a=function(e,t,n){var i=r(t),a=t.element.node,o=t.popover.customOptions.spacing,s=(i===document.body?c:u)(a),l=d(a),f={offsetX:0,offsetY:0},p=d(e),g=getComputedStyle(e,":before"),m=h("top",g),v=h("height",g),y=h("left",g),b=h("right",g),$=h("margin-top",g);if("top"===n){var w=s.offsetX-p.offsetWidth/2+l.offsetWidth/2,M=s.offsetY-p.offsetHeight-o;f={offsetX:w,offsetY:M}}if("top-right"===n){var C=s.offsetX+l.offsetWidth/2-y,x=s.offsetY-p.offsetHeight-o;f={offsetX:C,offsetY:x}}if("top-left"===n){var k=s.offsetX-p.offsetWidth+(l.offsetWidth/2+b),S=s.offsetY-p.offsetHeight-o;f={offsetX:k,offsetY:S}}if("right-top"===n||"right"===n||"right-bottom"===n){var _=s.offsetX+l.offsetWidth+o,D=s.offsetY-(m+$+v/2)+l.offsetHeight/2;f={offsetX:_,offsetY:D}}if("bottom"===n){var P=s.offsetX-p.offsetWidth/2+l.offsetWidth/2,O=s.offsetY+l.offsetHeight+o;f={offsetX:P,offsetY:O}}if("bottom-right"===n){var T=s.offsetX+l.offsetWidth/2-y,A=s.offsetY+l.offsetHeight+o;f={offsetX:T,offsetY:A}}if("bottom-left"===n){var L=s.offsetX-p.offsetWidth+(l.offsetWidth/2+b),F=s.offsetY+l.offsetHeight+o;f={offsetX:L,offsetY:F}}if("left-top"===n||"left"===n||"left-bottom"===n){var E=s.offsetX-p.offsetWidth-o,j=s.offsetY-(m+$+v/2)+l.offsetHeight/2;f={offsetX:E,offsetY:j}}return f}(e,t,i),o=a.offsetX,s=a.offsetY;e.style.visibility="visible",e.style.top=s+"px",e.style.left=o+"px"}(t,e)),a&&n.classList.add("promoted"),o&&(t.style.position="fixed")}function r(e){var t=e.element.node,n=e.popover.options.container;return n&&"body"===n.toLowerCase()?document.body:"string"==typeof n&&document.querySelector(n)?document.querySelector(n):t.parentNode}function s(e){var t=e.popover.customOptions.modalTransform,n=f(document.documentElement);return t&&n.clientWidth<=991}function l(){var e=document.body.querySelector(".popover-modal-cover");e&&e.parentNode.removeChild(e)}function c(e){var t=e.getBoundingClientRect(),n=window.pageXOffset||document.documentElement.scrollLeft,i=window.pageYOffset||document.documentElement.scrollTop;return{offsetY:t.top+i,offsetX:t.left+n}}function u(e){return{offsetY:e.offsetTop,offsetX:e.offsetLeft}}function d(e){return{offsetWidth:e.offsetWidth,offsetHeight:e.offsetHeight}}function f(e){return{clientWidth:e.clientWidth,clientHeight:e.clientHeight}}function h(e,t){return parseInt(t.getPropertyValue(e),10)}a.$inject=["$rootScope"],t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(184));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.help.tooltip",[]).directive("twToolTip",a.default).name},function(e,t,n){"use strict";function i(e,t){if(t.tooltip){var n=t[0],i={};n.getAttribute("data-placement")||(i.placement="top"),t.tooltip(i),n.setAttribute("tabindex","0"),n.setAttribute("data-toggle","tooltip")}else console.log("twToolTip requires bootstrap.js")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{restrict:"A",link:i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0)),a=r(n(186)),o=r(n(188));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.layout",[a.default,o.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(187));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.styling.affix",[]).directive("twAffix",a.default).name},function(e,t,n){"use strict";function i(e,t){if(t.affix){var n=t[0],i={};(n.getAttribute("data-offset-top")||n.getAttribute("data-offset-bottom"))&&(i.offset={}),n.getAttribute("data-offset-top")&&Number(n.getAttribute("data-offset-top"))&&(i.offset.top=Number(n.getAttribute("data-offset-top"))),n.getAttribute("data-offset-bottom")&&Number(n.getAttribute("data-offset-bottom"))&&(i.offset.bottom=Number(n.getAttribute("data-offset-bottom"))),t.affix(i)}else console.log("twAffix requires bootstrap.js")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{restrict:"A",link:i}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0)),a=s(n(189)),o=s(n(190)),r=s(n(193));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.layout.cards",[]).service("TwCardsService",a.default).component("twCards",r.default).directive("twCard",o.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=-1,t=[];this.toggle=function(n){-1!==e&&e!==n&&(t[e].isExpanded()&&t[e].collapse(),e=-1);var i=t[n];i.isExpanded()?i.collapse():(e=n,i.expand())},this.addCard=function(e){t.push(e)},this.updateExpandedIndex=function(t){e=t},this.getCard=function(e){return t[e]},this.getLength=function(){return t.length},this.getExpandedIndex=function(){return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(191)),a=o(n(192));function o(e){return e&&e.__esModule?e:{default:e}}function r(e){var t=e.$ctrl;t.addCard(t),t.index=t.getLength()-1,t.inactive=t.cardContainerController.inactive,null==t.empty&&(t.empty=!1),!0===t.open&&!1===t.empty&&-1===t.getExpandedIndex()?t.updateExpandedIndex(t.index):t.open=!1,null==t.disabled&&(t.disabled=!1)}t.default=function(){return{controller:i.default,template:a.default,require:{cardContainerController:"^twCards"},controllerAs:"$ctrl",bindToController:!0,replace:!0,scope:{state:"@",index:"<",showForm:"<?",open:"<?",disabled:"<?",empty:"<?",inactive:"<",onExpand:"&",onCollapse:"&"},transclude:{collapsedCard:"collapsed",expandedCard:"expanded",cardForm:"?cardForm",cardIcon:"cardIcon",modals:"?modals"},link:r}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();var a=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.toggle=n.toggle,this.addCard=n.addCard,this.getExpandedIndex=n.getExpandedIndex,this.updateExpandedIndex=n.updateExpandedIndex,this.getCard=n.getCard,this.getLength=n.getLength}return i(e,[{key:"isExpanded",value:function(){return this.open}},{key:"collapse",value:function(){this.open=!1,this.onCollapse&&this.onCollapse()}},{key:"expand",value:function(){this.open=!0,this.onExpand&&this.onExpand()}}]),e}();a.$inject=["$transclude","TwCardsService"],t.default=a},function(e,t){e.exports='<li class="list-group-item p-a-0 list-group-item-{{$ctrl.state}}" ng-class="{\n    \'active\': $ctrl.open,\n    \'disabled\': $ctrl.disabled\n  }"> <div class=p-a-panel role="{{$ctrl.empty ? null : \'button\'}}" ng-click="!$ctrl.empty && $ctrl.toggle($ctrl.index)"> <div class=media> <div class=media-left> <div class="circle circle-sm circle-responsive" ng-class="{\'circle-inverse\': !$ctrl.inactive }"> <div ng-transclude=cardIcon></div> </div> </div> <div class=media-body ng-transclude=collapsedCard></div> <div class=media-right ng-class="{\'invisible\': $ctrl.empty }"> <span class="glyphicon hidden-xs hidden-sm anchor text-no-decoration font-weight-normal" ng-class="{\'glyphicon-chevron-up\': $ctrl.open, \'glyphicon-chevron-down\': !$ctrl.open}"></span> <span class="glyphicon visible-xs-inline visible-sm-inline anchor text-no-decoration font-weight-normal" ng-class="{\'glyphicon-chevron-right\': !$ctrl.open }"></span> </div> </div> </div> <div class=collapse ng-attr-aria-expanded="{{ $ctrl.open }}" ng-class="{\'in\': $ctrl.open }" ng-if=$ctrl.open> <div class="p-l-panel p-r-panel p-b-panel"> <div class=media> <div class=media-left> <div class="circle circle-sm circle-inverse circle-responsive invisible"></div> </div> <div class=media-body> <hr class="m-t-0 hidden-xs hidden-sm"/> <a href="" ng-click=$ctrl.toggle($ctrl.index) class="visible-xs-inline-block visible-sm-inline-block text-no-decoration m-t-1 tw-card-back"> <span class="icon icon-left-arrow icon-xxl"></span> </a> <div ng-transclude=expandedCard></div> </div> </div> </div> <div class="p-y-3 bg-default p-l-panel p-r-panel" ng-if=$ctrl.showForm> <div class=media> <div class=media-left> <div class="circle circle-sm circle-responsive invisible"></div> </div> <div class=media-body ng-transclude=cardForm></div> </div> </div> </div> <div ng-transclude=modals></div> </li> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(194);var o={template:((i=a)&&i.__esModule?i:{default:i}).default,bindings:{inactive:"=?"},transclude:!0};t.default=o},function(e,t){e.exports='<ul ng-transclude class="list-group panel-list-group list-group-slide-out" ng-class="{\'list-group-inactive\': $ctrl.inactive}"> </ul> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(196));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.loading.loader",[]).component("twLoader",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i,a=n(197);var o={template:((i=a)&&i.__esModule?i:{default:i}).default};t.default=o},function(e,t){e.exports='<div class=loader> <div class=loader-spinner></div> <div class=loader-flag> <svg xmlns=http://www.w3.org/2000/svg class=loader-flag-outline viewBox="-2 -2 56 56"> <polygon class=loader-flag-stroke stroke=#00B9FF stroke-width=2 stroke-linejoin=miter stroke-linecap=round stroke-miterlimit=10 stroke-dasharray=300 stroke-dashoffset=300 fill=none points="24.6,27.3 0,27.3 14.3,13.7 6.1,0 48.2,0 26.3,52 19.5,52 39.2,\n          5.5 16.8,5.5 21.6,13.6 13.4,21.8 27,21.8"/> </svg> <svg xmlns=http://www.w3.org/2000/svg class=loader-flag-fill viewBox="0 2 52 48"> <polygon fill=#00B9FF points="6.1,0 14.3,13.7 0,27.3 24.6,27.3 27,21.8 13.4,21.8 21.6,\n          13.6 16.8,5.5 39.2,5.5 19.5,52 26.3,52 48.2,0 "/> </svg> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=o(n(0)),a=o(n(110));function o(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.styleguide.navigation",[a.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=s(n(0));n(24);var a=s(n(108)),o=s(n(114)),r=s(n(26));function s(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.form-components",[a.default,o.default,r.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(0));n(24);var a=r(n(113)),o=r(n(26));function r(e){return e&&e.__esModule?e:{default:e}}t.default=i.default.module("tw.form-validation",[a.default,o.default]).name}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYW5ndWxhclwiIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZvY3VzYWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9yZXF1aXJlbWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZGluZy9wcm9jZXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb2N1c2FibGUvZm9jdXNhYmxlLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmctY2FyZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmcuYmluZGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RyYWctYW5kLWRyb3AvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2N1cnJlbmN5L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jaGVja2JveC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9hc3luY1Rhc2tzQ29uZmlnL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb3JtLWNvbnRyb2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92YWxpZGF0aW9uL2NvbnRyb2wtdmFsaWRhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2xvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2NoZWNrYm94L2NoZWNrYm94LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY2hlY2tib3gvY2hlY2tib3guY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY2hlY2tib3gvY2hlY2tib3guaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvZG9tL2RvbS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb2N1c2FibGUvZm9jdXNhYmxlLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9jdXNhYmxlL2Zvcm0tY29udHJvbC5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL3JhZGlvLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvcmFkaW8vcmFkaW8uY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvcmFkaW8vcmFkaW8uaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L3NlbGVjdC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3NlbGVjdC9zZWxlY3QuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L3NlbGVjdC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQubGVzcz8zYjhkIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhcHR1cmUtY2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhcHR1cmUtY2FyZC9jYXB0dXJlLWNhcmQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FwdHVyZS1jYXJkL2NhcHR1cmUtY2FyZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FwdHVyZS1jYXJkL2NhcHR1cmUtY2FyZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvZHJvcHBpbmctY2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2Ryb3BwaW5nLWNhcmQvZHJvcHBpbmctY2FyZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9kcm9wcGluZy1jYXJkL2Ryb3BwaW5nLWNhcmQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9wcm9jZXNzaW5nLWNhcmQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmctY2FyZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmctbWluaS5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9wcm9jZXNzaW5nLWNhcmQvcHJvY2Vzc2luZy1taW5pLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zZXJ2aWNlcy9hc3luYy1maWxlLXJlYWRlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc2VydmljZXMvYXN5bmMtZmlsZS1zYXZlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc2VydmljZXMvZmlsZS12YWxpZGF0aW9uLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2FzeW5jVGFza3NDb25maWcvYXN5bmNUYXNrc0NvbmZpZy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2FkaW5nL3Byb2Nlc3MvcHJvY2Vzcy5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvYWRpbmcvcHJvY2Vzcy9wcm9jZXNzLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvYWRpbmcvcHJvY2Vzcy9wcm9jZXNzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvc3VjY2Vzcy1jYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3N1Y2Nlc3MtY2FyZC9zdWNjZXNzLWNhcmQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3N1Y2Nlc3MtY2FyZC9zdWNjZXNzLWNhcmQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NyZWVuZnVsbC9kaXN0L3NjcmVlbmZ1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtY2FwdHVyZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUubGVzcz85YTM0Iiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUubGVzcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2NhbWVyYS1jYXB0dXJlLXNjcmVlbi1oYW5kbGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtb3ZlcmxheS1oYW5kbGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQtYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLWJ1dHRvbi91cGxvYWQtYnV0dG9uLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC1idXR0b24vdXBsb2FkLWJ1dHRvbi5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLWJ1dHRvbi91cGxvYWQtYnV0dG9uLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWJ1dHRvbi9jYW1lcmEtYnV0dG9uLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1idXR0b24vY2FtZXJhLWJ1dHRvbi5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWJ1dHRvbi9jYW1lcmEtYnV0dG9uLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9maWxlLWlucHV0LmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL211bHRpLXVwbG9hZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL211bHRpLXVwbG9hZC9tdWx0aS11cGxvYWQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvbXVsdGktdXBsb2FkL211bHRpLXVwbG9hZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvbXVsdGktdXBsb2FkL211bHRpLXVwbG9hZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kcmFnLWFuZC1kcm9wL2Ryb3AuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kcmFnLWFuZC1kcm9wL2RyYWctZW50ZXIuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kcmFnLWFuZC1kcm9wL2RyYWctbGVhdmUuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlL2RhdGUuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlL2RhdGUuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGF0ZS9kYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2RhdGUvZGF0ZS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0L2RhdGUtZm9ybWF0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy9kYXRlLWZvcm1hdC9kYXRlLWZvcm1hdC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0L2RhdGUtZm9ybWF0LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9ybS1jb250cm9sL2Zvcm0tY29udHJvbC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2Zvcm0tY29udHJvbC9mb3JtLWNvbnRyb2wuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9ybS1jb250cm9sL2Zvcm0tY29udHJvbC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZC9maWVsZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkL2ZpZWxkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkL2ZpZWxkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3JlcXVpcmVtZW50cy9yZXF1aXJlbWVudHMuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZHNldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbmF2aWdhdGlvbi90YWJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL251bWJlci1mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbGlkYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvYWRpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlLWxvb2t1cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGF0ZS1sb29rdXAvZGF0ZS1sb29rdXAuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlLWxvb2t1cC9kYXRlLWxvb2t1cC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlLWxvb2t1cC9kYXRlLWxvb2t1cC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jdXJyZW5jeS1pbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY3VycmVuY3ktaW5wdXQvY3VycmVuY3ktaW5wdXQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jdXJyZW5jeS1pbnB1dC9jdXJyZW5jeS1pbnB1dC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jdXJyZW5jeS1pbnB1dC9jdXJyZW5jeS1pbnB1dC5odG1sIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9jdXJyZW5jeS9jdXJyZW5jeS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9hbW91bnQtY3VycmVuY3ktc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9hbW91bnQtY3VycmVuY3ktc2VsZWN0L2Ftb3VudC1jdXJyZW5jeS1zZWxlY3QuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9hbW91bnQtY3VycmVuY3ktc2VsZWN0L2Ftb3VudC1jdXJyZW5jeS1zZWxlY3QuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvYW1vdW50LWN1cnJlbmN5LXNlbGVjdC9hbW91bnQtY3VycmVuY3ktc2VsZWN0Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkc2V0L2ZpZWxkc2V0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZmllbGRzZXQvZmllbGRzZXQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZmllbGRzZXQvZmllbGRzZXQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZmllbGRzZXQvZmllbGRzZXQubGVzcz8zMTM3Iiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZHNldC9maWVsZHNldC5sZXNzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9yZXF1aXJlbWVudHMtZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvcmVxdWlyZW1lbnRzLWZvcm0vcmVxdWlyZW1lbnRzLWZvcm0uY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9yZXF1aXJlbWVudHMtZm9ybS9yZXF1aXJlbWVudHMtZm9ybS5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9yZXF1aXJlbWVudHMtZm9ybS9yZXF1aXJlbWVudHMtZm9ybS5odG1sIiwid2VicGFjazovLy8uL3NyYy9uYXZpZ2F0aW9uL3RhYnMvdGFicy5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25hdmlnYXRpb24vdGFicy90YWJzLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25hdmlnYXRpb24vdGFicy90YWJzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RlZmluaXRpb24tbGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGVmaW5pdGlvbi1saXN0L2RlZmluaXRpb24tbGlzdC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RlZmluaXRpb24tbGlzdC9kZWZpbml0aW9uLWxpc3QuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGVmaW5pdGlvbi1saXN0L2RlZmluaXRpb24tbGlzdC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL3RleHQtZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL3RleHQtZm9ybWF0L3VuZG8tc3RhY2suc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy90ZXh0LWZvcm1hdC90ZXh0LWZvcm1hdC5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL3RleHQtZm9ybWF0L3RleHQtZm9ybWF0LmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy90ZXh0LWZvcm1hdC90ZXh0LWZvcm1hdC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL3RleHQtZm9ybWF0L3RleHQtZm9ybWF0LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy9udW1iZXItZm9ybWF0L251bWJlci1mb3JtYXQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL251bWJlci1mb3JtYXQvbnVtYmVyLWZvcm1hdC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL251bWJlci1mb3JtYXQvbnVtYmVyLWZvcm1hdC5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2xvY2FsZS9sb2NhbGUuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy9jdXJyZW5jeS1mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1hdHRpbmcvY3VycmVuY3ktZm9ybWF0L2N1cnJlbmN5LWZvcm1hdC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1hdHRpbmcvY3VycmVuY3ktZm9ybWF0L2N1cnJlbmN5LWZvcm1hdC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2N1cnJlbmN5LWZvcm1hdC9jdXJyZW5jeS1mb3JtYXQuZmlsdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy90ZWxlcGhvbmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3RlbGVwaG9uZS90ZWxlcGhvbmUuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy90ZWxlcGhvbmUvdGVsZXBob25lLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3RlbGVwaG9uZS90ZWxlcGhvbmUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc3VibWl0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9zdWJtaXQvc3VibWl0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc3VibWl0L3N1Ym1pdC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9zdWJtaXQvc3VibWl0Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC1kcm9wcGFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC1kcm9wcGFibGUvdXBsb2FkLWRyb3BwYWJsZS5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC1kcm9wcGFibGUvdXBsb2FkLWRyb3BwYWJsZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQtZHJvcHBhYmxlL2ZpbGUtc2VsZWN0LmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsaWRhdGlvbi9mb3JtLXZhbGlkYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbGlkYXRpb24vZm9ybS12YWxpZGF0aW9uL2Zvcm0tdmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHAvcG9wLW92ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHAvcG9wLW92ZXIvcG9wLW92ZXIuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9oZWxwL3BvcC1vdmVyL3BvcC1vdmVyLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hlbHAvcG9wLW92ZXIvcG9wLW92ZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscC90b29sLXRpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGVscC90b29sLXRpcC90b29sLXRpcC5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0L2FmZml4L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9sYXlvdXQvYWZmaXgvYWZmaXguZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9sYXlvdXQvY2FyZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dC9jYXJkcy9jYXJkcy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9sYXlvdXQvY2FyZHMvY2FyZC5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dC9jYXJkcy9jYXJkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dC9jYXJkcy9jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dC9jYXJkcy9jYXJkcy5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xheW91dC9jYXJkcy9jYXJkcy5odG1sIiwid2VicGFjazovLy8uL3NyYy9sb2FkaW5nL2xvYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZGluZy9sb2FkZXIvbG9hZGVyLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZGluZy9sb2FkZXIvbG9hZGVyLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL25hdmlnYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm0tY29tcG9uZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybS12YWxpZGF0aW9uLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiYW5ndWxhciIsInNlcnZpY2UiLCJEb21TZXJ2aWNlIiwiZGlyZWN0aXZlIiwiRm9jdXNhYmxlIiwiRm9ybUNvbnRyb2xGb2N1cyIsIkRhdGVTZXJ2aWNlIiwiY29tcG9uZW50IiwiU2VsZWN0IiwiUmVxdWlyZW1lbnRzU2VydmljZSIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsInB1c2giLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImFsbCIsImF0b2IiLCJhcHBseSIsImFyZ3VtZW50cyIsImdldEVsZW1lbnQiLCJ0YXJnZXQiLCJwYXJlbnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJzdHlsZXMiLCJvcHRpb25zIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJhcHBlbmRDaGlsZCIsImZpcnN0Q2hpbGQiLCJiZWZvcmUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJpZHgiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInVuZGVmaW5lZCIsImF0dHJzIiwidHlwZSIsIm5vbmNlIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJ0cmFuc2Zvcm0iLCJkZWZhdWx0Iiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJQcm9jZXNzIiwiRm9jdXNhYmxlQ29udHJvbGxlciIsIiRlbGVtZW50IiwiVHdEb21TZXJ2aWNlIiwiZWxlbWVudCIsImZvcm1Hcm91cCIsImdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCIkaW5qZWN0IiwiUmFkaW8iLCJBc3luY1Rhc2tzQ29uZmlnIiwiQXN5bmNGaWxlUmVhZGVyIiwiQXN5bmNGaWxlU2F2ZXIiLCJGaWxlVmFsaWRhdGlvblNlcnZpY2UiLCJQcm9jZXNzaW5nQ2FyZCIsIlByb2Nlc3NpbmdNaW5pIiwiQ29udHJvbGxlciIsIiR0aW1lb3V0IiwiRmlsZVZhbGlkYXRpb24iLCJwcm9jZXNzaW5nU3RhdGUiLCJjaGFuZ2VzIiwiZmlsZSIsImN1cnJlbnRWYWx1ZSIsIm9uRmlsZUNhcHR1cmUiLCJuZ0Rpc2FibGVkIiwicmVzZXQiLCJpc1Byb2Nlc3NpbmciLCJvblN0YXJ0IiwiaXNTbWFsbGVyVGhhbk1heFNpemUiLCJtYXhTaXplIiwidmFsaWRhdGlvbk1lc3NhZ2VzIiwidG9vTGFyZ2VNZXNzYWdlIiwiYXN5bmNGYWlsdXJlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImh0dHBPcHRpb25zIiwiYXN5bmNGaWxlUmVhZCIsInRoZW4iLCJkYXRhVXJsIiwiYXN5bmNGaWxlU2F2ZSIsInJlc3BvbnNlIiwiYXN5bmNTdWNjZXNzIiwiY2F0Y2giLCJlcnJvciIsImV4dGVuZEh0dHBPcHRpb25zIiwic2F2ZSIsInBhcmFtIiwicmVhZCIsImlzU3VjY2VzcyIsImlzRXJyb3IiLCJvbkNhbmNlbCIsIiRjdHJsIiwiaWRQcm9wZXJ0eSIsImRhdGEiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJhY2NlcHQiLCJwcm9jZXNzaW5nTWVzc2FnZSIsInN1Y2Nlc3NNZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwiY2FuY2VsVGV4dCIsIkRyb3AiLCJEcmFnRW50ZXIiLCJEcmFnTGVhdmUiLCJDdXJyZW5jeVNlcnZpY2UiLCJDaGVja2JveCIsIkNhcHR1cmVDYXJkIiwiRHJvcHBpbmdDYXJkIiwiU3VjY2Vzc0NhcmQiLCJDYW1lcmFDYXB0dXJlIiwiVXBsb2FkQnV0dG9uIiwiQ2FtZXJhQnV0dG9uIiwiTXVsdGlVcGxvYWQiLCJEcmFnQW5kRHJvcCIsIkZpbGVJbnB1dCIsIlVwbG9hZCIsIkRhdGVGb3JtYXQiLCJEYXRlQ29udHJvbCIsIkRhdGVGaWx0ZXIiLCJGb3JtQ29udHJvbCIsIkNvbnRyb2xWYWxpZGF0aW9uIiwiRmllbGQiLCJDdXN0b21FdmVudCIsImV2ZW50IiwicGFyYW1zIiwiZXZ0IiwiY3JlYXRlRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImluaXRDdXN0b21FdmVudCIsIkV2ZW50IiwiTG9jYWxlU2VydmljZSIsImNvbnRyb2xsZXIiLCJ0ZW1wbGF0ZSIsInJlcXVpcmUiLCIkbmdNb2RlbCIsImJpbmRpbmdzIiwibmdNb2RlbCIsIm5nVHJ1ZVZhbHVlIiwibmdGYWxzZVZhbHVlIiwibmdSZXF1aXJlZCIsIkNoZWNrYm94Q29udHJvbGxlciIsIiRzY29wZSIsImRvbSIsImFkZExhYmVsSGFuZGxlciIsImFkZFdhdGNoZXJzIiwiY2hlY2tib3hDb250YWluZXIiLCJsYWJlbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY2hlY2tlZCIsImlzQ2hlY2tlZCIsIiRzZXRWaWV3VmFsdWUiLCIkc2V0VG91Y2hlZCIsInN0b3BQcm9wYWdhdGlvbiIsInZhbGlkYXRlQ2hlY2tib3giLCJkaXNwYXRjaEV2ZW50IiwiZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZSIsImdldEF0dHJpYnV0ZSIsInByZXZlbnREZWZhdWx0IiwiJHdhdGNoIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIiRzZXREaXJ0eSIsImNoZWNrYm94IiwicmVtb3ZlQXR0cmlidXRlIiwiJGV2ZW50IiwiaXNSZXF1aXJlZCIsIiR0b3VjaGVkIiwiYnV0dG9uIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNoZWNrYm94TGFiZWwiLCIkc2V0VmFsaWRpdHkiLCJ0YWdOYW1lIiwidGFnTmFtZVVwcGVyIiwidG9VcHBlckNhc2UiLCJjbGFzc05hbWUiLCJjb250YWlucyIsImdldFByZXZpb3VzU2libGluZ1dpdGhDbGFzc05hbWUiLCJzaWJsaW5nIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsImdldE5leHRTaWJsaW5nV2l0aENsYXNzTmFtZSIsIm5leHRFbGVtZW50U2libGluZyIsInJlc3RyaWN0IiwibmdWYWx1ZSIsIm5nQ2hhbmdlIiwiUmFkaW9Db250cm9sbGVyIiwicmFkaW9MYWJlbCIsInRyYW5zY2x1ZGUiLCJwbGFjZWhvbGRlciIsInNpemUiLCJkcm9wZG93blJpZ2h0IiwiZHJvcGRvd25VcCIsImRyb3Bkb3duV2lkdGgiLCJpbnZlcnNlIiwiaGlkZU5vdGUiLCJoaWRlU2Vjb25kYXJ5IiwiaGlkZUljb24iLCJoaWRlQ3VycmVuY3kiLCJoaWRlQ2lyY2xlIiwiaGlkZUxhYmVsIiwiU2VsZWN0Q29udHJvbGxlciIsIiR0cmFuc2NsdWRlIiwiJGF0dHJzIiwib25Nb2RlbENoYW5nZSIsImJ1dHRvbkdyb3VwIiwiZHJvcGRvd24iLCJvbkZvY3VzT3V0Iiwic2VhcmNoIiwicHJlU2VsZWN0TW9kZWxWYWx1ZSIsInNldERlZmF1bHRJZlJlcXVpcmVkIiwiYWN0aXZlRWxlbWVudCIsIm9wdGlvbktleXByZXNzIiwic2hvdWxkU2hvd1NlYXJjaCIsImZvY3VzIiwiZm9jdXNPbkFjdGl2ZUxpbmsiLCJ0b0xvd2VyQ2FzZSIsImNsb25lIiwidGV4dCIsInRyaW0iLCJoYXNUcmFuc2NsdWRlZCIsImNoZWNrRm9yVHJhbnNjbHVkZWRDb250ZW50IiwicmVzcG9uc2l2ZUNsYXNzZXMiLCJvcHRpb25zUGFnZVNpemUiLCJudW1iZXJPZk9wdGlvbnNSZXZlYWxlZCIsImhhc01vcmVPcHRpb25zVG9SZXZlYWwiLCJmaWx0ZXJTdHJpbmciLCJmaWx0ZXJlZE9wdGlvbnMiLCJnZXRGaWx0ZXJlZE9wdGlvbnMiLCJvbk9wdGlvbnNDaGFuZ2UiLCJwcmV2aW91c1ZhbHVlIiwib3B0aW9uIiwiZmluZE9wdGlvbkZyb21WYWx1ZSIsInNlbGVjdGVkIiwicmVzcG9uc2l2ZU9wdGlvbiIsImNsYXNzZXMiLCJzZWNvbmRhcnlDbGFzc2VzIiwic2Vjb25kYXJ5IiwiZGlzYWJsZWQiLCJzZWxlY3RPcHRpb24iLCJnZXRDaGFyYWN0ZXJDb2RlRnJvbUtleXByZXNzIiwiY2hhcmFjdGVyIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZ2V0Q2hhcmFjdGVyRnJvbUtleXByZXNzIiwibGV0dGVyIiwiZm91bmQiLCJzZWFyY2hBbmRTZWxlY3QiLCJjb250aW51ZVNlYXJjaEFuZFNlbGVjdE1hdGNoIiwicmVzZXRPcHRpb24iLCJmaWx0ZXJTdHJpbmdMb3dlciIsInJlcGxhY2UiLCJlbmNvdW50ZXJlZExhYmVsc0FuZFZhbHVlcyIsImhlYWRlciIsImlzRHVwbGljYXRlIiwiZXhpc3RpbmdWYWx1ZXNGb3JMYWJlbCIsImhhc0V4aXN0aW5nVmFsdWVzIiwiaXNBcnJheSIsImVxdWFscyIsImxhYmVsTWF0Y2hlcyIsIm5vdGVNYXRjaGVzIiwic2Vjb25kYXJ5TWF0Y2hlcyIsInNlYXJjaGFibGVNYXRjaGVzIiwiZmlsdGVySW5wdXQiLCJzZWxlY3RlZE9wdGlvbiIsImZpbmRTZWxlY3RlZCIsImNoYXJhY3RlckNvZGUiLCJ3aGljaCIsImNoYXJDb2RlIiwia2V5Q29kZSIsImFjdGl2ZU9wdGlvbiIsImFjdGl2ZUxpbmsiLCJvcHRpb25MaW5rcyIsImRvd24iLCJtb3ZlRG93bk9uZU9wdGlvbiIsInVwIiwibW92ZVVwT25lT3B0aW9uIiwicmV0dXJuIiwiY2xpY2siLCJwcmV2aW91c09wdGlvbiIsInByZXZpb3VzT3B0aW9uTGluayIsInNlbGVjdE9wdGlvblVzaW5nTGluayIsIm5leHRPcHRpb24iLCJuZXh0T3B0aW9uTGluayIsInRyYW5zY2x1ZGVkT3B0aW9uIiwibm90ZSIsInNlYXJjaGFibGUiLCJpc1ZhbGlkTW9kZWwiLCJvcHRpb25NYXRjaCIsInJlcXVpcmVkIiwiJGNvbW1pdFZpZXdWYWx1ZSIsInRlcm0iLCJzZWFyY2hUZXJtIiwiY29udGFpbnNTZWFyY2giLCJicmVha3BvaW50cyIsInZhbGlkQnJlYWtwb2ludHMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwic3BsaXQiLCJicmVha3BvaW50IiwiaWNvbiIsImhlbHBJbWFnZSIsImJ1dHRvblRleHQiLCJkcm9wcGluZ1RleHQiLCJwcm9jZXNzaW5nVGV4dCIsInN1Y2Nlc3NUZXh0IiwiZmFpbHVyZVRleHQiLCJjYW1lcmFPdmVybGF5IiwiY2FtZXJhRGlyZWN0aW9uIiwiZGVzY3JpcHRpb24iLCJpbnN0cnVjdGlvbnMiLCJVcGxvYWRDb250cm9sbGVyIiwiaXNMaXZlQ2FtZXJhVXBsb2FkIiwiaXNEb25lIiwiY2xlYXJIdG1sSW5wdXQiLCJzZXROZ01vZGVsIiwicXVlcnlTZWxlY3RvckFsbCIsImlucHV0IiwiaXNEcm9wcGFibGUiLCJpc0Ryb3BFbGlnaWJsZSIsImZpbGVzIiwiaXNJbWFnZSIsImxvY2FscyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsInRlc3QiLCJpbnB1dEZpbGUiLCJzaG93TGl2ZUNhcHR1cmVTY3JlZW4iLCJ2aWV3SWNvbiIsIiRxIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsImRlZmVycmVkIiwiZGVmZXIiLCJvbmxvYWQiLCJyZXNvbHZlIiwib25lcnJvciIsInJlamVjdCIsInJlYWRBc0RhdGFVUkwiLCJwcm9taXNlIiwiJGh0dHAiLCJmaWVsZE5hbWUiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiJGh0dHBPcHRpb25zIiwiJGlucHV0T3B0aW9ucyIsImNvcHkiLCJ1cmwiLCJoZWFkZXJzIiwidHJhbnNmb3JtUmVxdWVzdCIsImlkZW50aXR5IiwicHJlcGFyZUh0dHBPcHRpb25zIiwibWV0aG9kIiwicG9zdCIsImlzTnVtYmVyIiwiaW5wdXRPcHRpb25zIiwic3RhdGUiLCJvblN0b3AiLCJQcm9jZXNzQ29udHJvbGxlciIsIiRpbnRlcnZhbCIsImludGVydmFsIiwicHJvY2Vzc2luZyIsIm9uU3RhdGVDaGFuZ2UiLCJvblNpemVDaGFuZ2UiLCJpc1N0b3BwZWQiLCJzdGFydFByb2Nlc3MiLCJzdG9wUHJvY2VzcyIsInJhZGl1cyIsIm5vdGlmeUNvbnN1bWVycyIsImNhbmNlbCIsIlN1Y2Nlc3NDYXJkQ29udHJvbGxlciIsImZpbGVOYW1lIiwiQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIiLCJDYW1lcmFPdmVybGF5SGFuZGxlciIsIm92ZXJsYXkiLCJkaXJlY3Rpb24iLCJvbkNhcHR1cmUiLCJ0ZXN0TW9kZSIsIkNhbWVyYUNhcHR1cmVDb250cm9sbGVyIiwiJHdpbmRvdyIsIiRsb2ciLCJzaG93VmlkZW9QcmV2aWV3Iiwic2hvd1ZpZGVvSW5QcmV2aWV3Iiwic2hvd0NhcHR1cmVJblByZXZpZXciLCJtZWRpYVN0cmVhbSIsImNhcHR1cmVCdXR0b25EaXNhYmxlZCIsInNjcmVlbkhlaWdodCIsInNjcmVlbldpZHRoIiwidmlkZW9SZXNIZWlnaHQiLCJ2aWRlb1Jlc1dpZHRoIiwib3ZlcmxheVdpZHRoIiwib3ZlcmxheUhlaWdodCIsIm92ZXJsYXlYT2Zmc2V0Iiwib3ZlcmxheVlPZmZzZXQiLCJkaXNwbGF5Q2FudmFzWE9mZnNldCIsImRpc3BsYXlDYW52YXNZT2Zmc2V0IiwidmlkZW9YT2Zmc2V0IiwidmlkZW9IZWlnaHQiLCJ2aWRlb1dpZHRoIiwiaXNWaWRlb0hvcml6b250YWxseUZsaXBwZWQiLCJoYXNHZXRVc2VyTWVkaWEiLCJ3YXJuIiwib3ZlcmxheUxvYWRlZCIsIm92ZXJsYXlFbGVtZW50IiwiZGlzcGxheUNhbnZhcyIsInVwbG9hZENhbnZhcyIsInZpZGVvUHJldmlld0VsZW1lbnQiLCJ2aWRlbyIsImFzc2lnblZpZGVvRGltZW5zaW9ucyIsImRlYnVnIiwiZ2V0VmlkZW9TcGVjaWZpY2F0aW9ucyIsInZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlIiwidmlkZW9XaWR0aEluUGVyY2VudGFnZSIsInZpZGVvUGxheWluZ0NhbGxiYWNrIiwiJGFwcGx5QXN5bmMiLCJ2aWRlb1BsYXlpbmciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25PcmllbnRhdGlvbkNoYW5nZSIsInN0YXJ0TGl2ZUNhbUZsb3ciLCJjcmVhdGVPcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrIiwicGF1c2UiLCJ0cnlBY3F1aXJlRnVsbFNjcmVlbiIsImZpbmFsbHkiLCJzZXRTY3JlZW5EaW1lbnNpb25zIiwibmF0dXJhbEhlaWdodCIsIm5hdHVyYWxXaWR0aCIsImNyZWF0ZU92ZXJsYXlPbkxvYWRDYWxsYmFjayIsInRyeUFjcXVpcmVNZWRpYVN0cmVhbSIsInN0cmVhbSIsIm9uVmlkZW9TdHJlYW1BY3F1aXNpdGlvbiIsImVyciIsIm9uQ2FuY2VsQnRuQ2xpY2siLCJzY3JlZW5mdWxsIiwiZW5hYmxlZCIsImlzRnVsbHNjcmVlbiIsInJlcXVlc3QiLCJzcmNPYmplY3QiLCJwbGF5IiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZW51bWVyYXRlRGV2aWNlcyIsImRldmljZXMiLCJudW1WaWRlb0RldmljZXMiLCJkZXZpY2UiLCJraW5kIiwiY2FtZXJhQ29uc3RyYWludHMiLCJ3aWR0aCIsIm1pbiIsImlkZWFsIiwibWF4IiwiZmFjaW5nTW9kZSIsImF1ZGlvIiwiZ2V0VXNlck1lZGlhIiwic2NyZWVuIiwiaGVpZ2h0IiwiYXZhaWxIZWlnaHQiLCJhdmFpbFdpZHRoIiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiZXhpdCIsImdldFRyYWNrcyIsInRyYWNrIiwic3RvcCIsImNsb3NlVmlkZW9TdHJlYW0iLCJnZXRDYW52YXNTcGVjaWZpY2F0aW9ucyIsInlPZmZzZXQiLCJ4T2Zmc2V0IiwicGFpbnRIZWlnaHQiLCJwYWludFdpZHRoIiwiY3R4IiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiZHJhd0ltYWdlIiwidG9CbG9iIiwibGVmdCIsInRvcCIsImdldE92ZXJsYXlTcGVjaWZpY2F0aW9ucyIsImlzQ29tbW9uanMiLCJrZXlib2FyZEFsbG93ZWQiLCJFbGVtZW50IiwidmFsIiwiZm5NYXAiLCJyZXQiLCJldmVudE5hbWVNYXAiLCJjaGFuZ2UiLCJmdWxsc2NyZWVuY2hhbmdlIiwiZnVsbHNjcmVlbmVycm9yIiwiZWxlbSIsIlByb21pc2UiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsIm9uRnVsbFNjcmVlbkVudGVyZWQiLCJvZmYiLCJkb2N1bWVudEVsZW1lbnQiLCJ1c2VyQWdlbnQiLCJBTExPV19LRVlCT0FSRF9JTlBVVCIsIm9uIiwib25GdWxsU2NyZWVuRXhpdCIsImV4aXRGdWxsc2NyZWVuIiwidG9nZ2xlIiwib25jaGFuZ2UiLCJjYWxsYmFjayIsImV2ZW50TmFtZSIsInJhdyIsImRlZmluZVByb3BlcnRpZXMiLCJmdWxsc2NyZWVuRWxlbWVudCIsImZ1bGxzY3JlZW5FbmFibGVkIiwiaGFzTmFycm93VmlkZW9JblBvcnRyYWl0U2NyZWVuIiwicGFyc2VJbnQiLCJoYXNOYXJyb3dWaWRlb0luTGFuZFNjYXBlU2NyZWVuIiwiY2FudmFzRGltZW5zaW9ucyIsImdldENhbnZhc1NwZWNzRm9yUG9ydHJhaXRTY3JlZW5XaXRoTmFycm93VmlkZW8iLCJnZXRDYW52YXNTcGVjc0ZvckxhbmRzY2FwZVNjcmVlbldpdGhOYXJyb3dWaWRlbyIsImhlaWdodE11bHQiLCJ3aWR0aE11bHQiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImNhbnZhc1hPZmZzZXQiLCJjYW52YXNZT2Zmc2V0IiwiZ2V0Q2FudmFzU3BlY3MiLCJvdmVybGF5TmF0dXJhbEhlaWdodCIsIm92ZXJsYXlOYXR1cmFsV2lkdGgiLCJnZXRPdmVybGF5Q29udGFpbmVyIiwiY29udGFpbmVySGVpZ2h0IiwiY29udGFpbmVyV2lkdGgiLCJjb250YWluZXJZT2Zmc2V0IiwiY29udGFpbmVyWE9mZnNldCIsImdldE92ZXJsYXlTcGVjaWZpY2F0aW9uc1dydENvbnRhaW5lciIsImlzU2NyZWVuUG9ydHJhaXQiLCJhdmFpbGFibGVIZWlnaHQiLCJpc1NjcmVlbkxhbmRzY2FwZSIsIm92ZXJsYXlYTWFyZ2luIiwib3ZlcmxheVlNYXJnaW4iLCJvdmVybGF5SGVpZ2h0V2lkdGhSYXRpbyIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwiaXNTZWNvbmRhcnkiLCJzbWFsbCIsImJsb2NrIiwibW9kZWwiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJGaWxlSW5wdXRDb250cm9sbGVyIiwib25Vc2VySW5wdXQiLCJjb250cm9sbGVyQXMiLCJiaW5kVG9Db250cm9sbGVyIiwic2NvcGUiLCJDb21wb25lbnQiLCJzZWNvbmRhcnlCdXR0b25UZXh0Iiwib25GaW5pc2giLCJhcmVBbGxGaWxlc1Byb2Nlc3NlZCIsIm9iakRpdiIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsImZpbGVPYmplY3QiLCJzb21lIiwidHdEcm9wIiwiJHBhcnNlIiwiJHJvb3RTY29wZSIsIiRleGNlcHRpb25IYW5kbGVyIiwiYXR0ciIsImNvdW50ZXIiLCJkYXRhVHJhbnNmZXIiLCIkJHBoYXNlIiwiJGFwcGx5IiwidHdEcmFnRW50ZXIiLCIkZXZhbEFzeW5jIiwidHdEcmFnTGVhdmUiLCJsb2NhbGUiLCJ0d0xvY2FsZSIsIm5nTWluIiwibmdNYXgiLCJtb2RlbFR5cGUiLCJEYXRlQ29udHJvbGxlciIsIlR3RGF0ZVNlcnZpY2UiLCJpbml0aWFsaXNlZFdpdGhEYXRlIiwiYXBwbHlEYXRlTW9kZWxJZlZhbGlkT3JUaHJvd0Vycm9yIiwiU1RSSU5HX1RZUEUiLCJPQkpFQ1RfVFlQRSIsImRhdGVNb2RlbFR5cGUiLCJkYXkiLCJtb250aCIsInllYXIiLCJzZXREYXRlUmVxdWlyZWQiLCJzZXREYXRlRGlzYWJsZWQiLCJzZXREYXRlTG9jYWxlIiwic2V0TW9udGhzIiwiYWRkVmFsaWRhdG9ycyIsImRheUlucHV0IiwieWVhcklucHV0IiwiYWRkRm9jdXNIYW5kbGVycyIsInllYXJUb3VjaGVkIiwiYWRkQmx1ckhhbmRsZXJzIiwidmFsaWREYXRlIiwiZXhwbG9kZURhdGVNb2RlbCIsImRhdGVNb250aHMiLCJnZXRNb250aHNCYXNlZE9uSW50bFN1cHBvcnRGb3JMb2NhbGUiLCJkYXRlUmVxdWlyZWQiLCJkYXRlRGlzYWJsZWQiLCJERUZBVUxUX0xPQ0FMRV9FTiIsIm1vbnRoQmVmb3JlRGF5IiwiaXNNb250aEJlZm9yZURheSIsImRhdGUiLCJkYXRlT2JqIiwiRGF0ZSIsImdldFVUQ0RhdGUiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwiJHZhbGlkYXRvcnMiLCJsaW1pdCIsInByZXBEYXRlTGltaXRGb3JDb21wYXJpc29uIiwiZGF0ZVZhbHVlIiwicHJlcERhdGVWYWx1ZUZvckNvbXBhcmlzb24iLCJhZGp1c3RMYXN0RGF5IiwibW9udGhOYW1lcyIsIm1vbnRoTmFtZSIsImV4dGVuZE1vbnRoc1dpdGhJZHMiLCJnZXRNb250aE5hbWVzRm9yTG9jYWxlIiwiZ2V0VVRDRGF0ZUZyb21QYXJ0cyIsIk51bWJlciIsImlzTmFOIiwiY29tYmluZURhdGUiLCJpc29TdHJpbmciLCJ0b0lTT1N0cmluZyIsImRhdGVTdHJpbmciLCJzdWJzdHJpbmciLCJsYXN0VVRDRGF5Rm9yTW9udGhBbmRZZWFyIiwiZ2V0TGFzdERheU9mTW9udGgiLCJ2YWxpZERhdGVPYmplY3QiLCJnZXRUaW1lIiwibmdMaW1pdCIsImF0dHJMaW1pdCIsImdldERlZmF1bHREYXlOYW1lIiwiZGF5T2ZXZWVrIiwiZm9ybWF0IiwiZGVmYXVsdERheU5hbWUiLCJsYW5ndWFnZSIsImdldExhbmd1YWdlRnJvbUxvY2FsZSIsIkRFRkFVTFRfREFZX05BTUVTX0JZX0xBTkdVQUdFIiwic3Vic3RyIiwiZ2V0RGVmYXVsdE1vbnRoTmFtZSIsIkRFRkFVTFRfTU9OVEhfTkFNRVNfQllfTEFOR1VBR0UiLCJnZXREYXRlTmFtZSIsImRheU9mTW9udGgiLCJsYW5nIiwiZ2V0U3VmZml4IiwiREFZX1NVRkZJWEVTX0JZX0xBTkdVQUdFIiwiZ2V0WWVhck5hbWUiLCJZRUFSX1NVRkZJWEVTX0JZX0xBTkdVQUdFIiwiZ2V0TG9jYWxpc2VkRGF0ZU5hbWUiLCJmb3JtYXR0aW5nT2JqZWN0IiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiaXNMb2NhbGVUcmFuc2xhdGlvblJlcXVpcmVzU3RyaXBwaW5nIiwiZ2V0VmFsaWREYXRlRm9ybWF0IiwiZ2V0VmFsaWRMb2NhbGUiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJzdXBwb3J0ZWRMb2NhbGVzT2YiLCJpc0ludGxTdXBwb3J0ZWRGb3JMb2NhbGUiLCJnZXREZWxpbWl0ZXIiLCJERUxJTUlURVJTX0JZX0xBTkdVQUdFIiwic3VmZml4ZXMiLCJleGFjdE1hdGNoIiwiZW5kc1dpdGgiLCJnZXRMb2NhbGVEYXRlIiwiZ2V0RGF0ZSIsImdldExvY2FsZU1vbnRoIiwiZ2V0TW9udGgiLCJnZXRMb2NhbGVGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwiZ2V0TG9jYWxlVG9kYXkiLCJub3ciLCJnZXRVVENUb2RheSIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJzZXRVVENGdWxsWWVhciIsInNldFVUQ0hvdXJzIiwic2V0VVRDTWludXRlcyIsInNldFVUQ1NlY29uZHMiLCJzZXRVVENNaWxsaXNlY29uZHMiLCJnZXRMb2NhbGVEYXRlRnJvbVBhcnRzIiwic2V0RnVsbFllYXIiLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwic2V0TWlsbGlzZWNvbmRzIiwiZ2V0RGF0ZVBhcnRzRnJvbUlzbyIsImlzb0RhdGUiLCJob3Vyc09mZnNldCIsIm1pbnV0ZXNPZmZzZXQiLCJvZmZzZXQiLCJtYXRjaCIsImlzSXNvU3RyaW5nVmFsaWQiLCJSZWdFeHAiLCJnZXRVVENEYXRlRnJvbUlzbyIsImdldERheU5hbWVzRm9yTG9jYWxlIiwiZGF5cyIsInZhbGlkRm9ybWF0IiwiZ2V0RGF5TmFtZUZvckxvY2FsZSIsInZhbGlkTG9jYWxlIiwid2Vla2RheSIsIm1vbnRocyIsImdldE1vbnRoTmFtZUZvckxvY2FsZSIsImRlZmF1bHRNb250aE5hbWUiLCJzbGljZSIsImdldFdlZWtkYXkiLCJnZXRVVENEYXkiLCJpc1llYXJCZWZvcmVNb250aCIsImFkZFllYXJzIiwieWVhcnMiLCJhZGRUb0RhdGUiLCJhZGRNb250aHMiLCJhZGREYXlzIiwiZ2V0TG9jYWxlVGltZVN0cmluZyIsImdldFRpbWVTdHJpbmciLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiYW1wbSIsImdldFllYXJBbmRNb250aFByZXNlbnRhdGlvbiIsInllYXJOYW1lIiwiZGVsaW1pdGVyIiwiZ2V0WWVhck1vbnRoRGF0ZVByZXNlbnRhdGlvbiIsImRhdGVOYW1lIiwiZ2V0TG9jYWxlTm93IiwiZ2V0VVRDTm93IiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldExvY2FsZURhdGVTdHJpbmciLCJnZXREYXRlU3RyaW5nIiwiZ2V0RGF5IiwiZ2V0VVRDRGF0ZVN0cmluZyIsImN1cnJlbnRZZWFyIiwiaGFzVGltZSIsIk1hdGgiLCJhYnMiLCJoYXNEYXRlIiwiaGFzV2Vla2RheSIsImhhc01vbnRoIiwid2Vla2RheU5hbWUiLCJ0aW1lTmFtZSIsImNvbWJpbmVEYXRlUGFydHMiLCJkYXlOYW1lIiwiZW4iLCJqYSIsIjExIiwiMTIiLCIxMyIsIjEiLCIyIiwiMyIsImRlIiwiZmkiLCJEYXRlRGlzcGxheSIsIkRhdGVGb3JtYXRGaWx0ZXIiLCJkYXRlU3VwcGxpZWQiLCJzdGVwIiwidXBsb2FkQWNjZXB0IiwidXBsb2FkSWNvbiIsInVwbG9hZFRvb0xhcmdlTWVzc2FnZSIsIm5nRm9jdXMiLCJuZ0JsdXIiLCJuZ01pbmxlbmd0aCIsIm5nTWF4bGVuZ3RoIiwibmdQYXR0ZXJuIiwidXBsb2FkT3B0aW9ucyIsImhlbHBPcHRpb25zIiwidGV4dEZvcm1hdCIsInZhbGlkYXRpb25Bc3luYyIsInBlcnNpc3RBc3luYyIsIm9uQXN5bmNGYWlsdXJlIiwib25Bc3luY1N1Y2Nlc3MiLCJmaWxlVXBsb2FkU291cmNlIiwiY2FtZXJhT3B0aW9ucyIsIkZvcm1Db250cm9sQ29udHJvbGxlciIsImludGVybmFsTW9kZWwiLCJtZXNzYWdlIiwibW9kZWxWYWx1ZSIsInZpZXdWYWx1ZSIsIm1pbmxlbmd0aCIsIm1heGxlbmd0aCIsIiRmb3JtYXR0ZXJzIiwiaW5pdGlhbEZpZWxkIiwiY2hhbmdlSGFuZGxlciIsImZvY3VzSGFuZGxlciIsImJsdXJIYW5kbGVyIiwid2FybmluZ01lc3NhZ2UiLCJGaWVsZENvbnRyb2xsZXIiLCJmaWVsZCIsInBhcnNlIiwiY29udHJvbCIsImdldENvbnRyb2xUeXBlIiwidmFsdWVzQXN5bmMiLCJwcmVwVmFsdWVzQXN5bmMiLCJlbnVtIiwiZXh0cmFjdEVycm9ycyIsIm9yaWdpbmFsRGF0YSIsIkFycmF5IiwiZXJyb3JzIiwiY29udHJvbFR5cGUiLCJmbGF0dGVuRmllbGRzV2l0aEdyb3VwcyIsImZpZWxkcyIsImZsYXR0ZW5lZEZpZWxkcyIsImZsYXR0ZW5GaWVsZFdpdGhHcm91cCIsImdyb3VwIiwic3ViRmllbGRzIiwidG9vbHRpcCIsImhlbHBUZXh0IiwiaW5mbyIsIm5lc3RlZEZpZWxkIiwicHJlcExlZ2FjeVZhbHVlIiwidGl0bGUiLCJjb2RlIiwicHJlcFJlcXVpcmVtZW50cyIsImFsdGVybmF0aXZlcyIsInByZXBwZWRBbHRlcm5hdGl2ZXMiLCJjb3B5T2YiLCJhbHRlcm5hdGl2ZSIsInByZXBhcmVkIiwicHJlcExlZ2FjeUFsdGVybmF0aXZlcyIsInByb3BlcnRpZXMiLCJwcmVwRmllbGRzIiwidHlwZXMiLCJoaWRkZW4iLCJwcmVwYXJlZEZpZWxkcyIsImZpZWxkTWFwIiwibmVzdGVkRmllbGRzIiwicGF0aFNlY3Rpb25zIiwibmVzdGVkS2V5IiwidHJhbnNmb3JtTmVzdGVkS2V5c1RvTmVzdGVkU3BlY3MiLCJ0cmFuc2Zvcm1GaWVsZEFycmF5VG9NYXAiLCJwcmVwRmllbGQiLCJwcmVwYXJlZEZpZWxkIiwicHJlcExlZ2FjeVByb3BzIiwicHJlcFR5cGUiLCJwcmVwUGF0dGVybiIsInByZXBWYWxpZGF0aW9uTWVzc2FnZXMiLCJwcmVwSGVscCIsInRhYlR5cGUiLCJ0YWJOYW1lV2l0aFNwYWNlcyIsImNoYXJBdCIsImdldE5hbWVGcm9tVHlwZSIsImZpZWxkR3JvdXBzIiwidmFsaWRhdGlvblJlZ2V4cCIsInBhdHRlcm4iLCJtaW5pbXVtIiwibWF4aW11bSIsImV4YW1wbGUiLCJ2YWx1ZXNBbGxvd2VkIiwidmFsdWVzIiwicHJlcExlZ2FjeVZhbHVlcyIsImV4IiwiY29uc29sZSIsInBvc3REYXRhIiwiZ2V0UGFyYW1WYWx1ZXNGcm9tTW9kZWwiLCJmZXRjaFZhbHVlc0FzeW5jIiwicGFyYW1ldGVyTmFtZSIsImhlbHAiLCJoZWxwTGlzdCIsInVwbG9hZFBsYWNlaG9sZGVySW1hZ2UiLCJpbWFnZSIsImdldFJlcXVpcmVkRmllbGRzIiwiZ2V0U2VsZWN0aW9uVHlwZSIsImdldENvbnRyb2xGb3JTdHJpbmdGb3JtYXQiLCJWYWxpZGF0aW9uQ29udHJvbGxlciIsInZhbGlkYXRpb24iLCJjaGVja01vZGVsQW5kVXBkYXRlIiwiJHZhbGlkIiwiJGRpcnR5IiwiRGF0ZUxvb2t1cCIsIkN1cnJlbmN5SW5wdXQiLCJBbW91bnRDdXJyZW5jeVNlbGVjdCIsIkZpZWxkc2V0IiwiUmVxdWlyZW1lbnRzRm9ybSIsIkRlZmluaXRpb25MaXN0IiwiVGVsZXBob25lIiwiU3VibWl0IiwiVXBsb2FkRHJvcHBhYmxlIiwiVGFicyIsIlRleHRGb3JtYXQiLCJOdW1iZXJGb3JtYXQiLCJDdXJyZW5jeUZvcm1hdCIsIk51bWJlckNvbXBvbmVudCIsIk51bWJlckZpbHRlciIsIkZvcm1WYWxpZGF0aW9uIiwiTG9hZGVyIiwiRm9ybXMiLCJWYWxpZGF0aW9uIiwiRm9ybWF0dGluZyIsIlNlcnZpY2VzIiwiSGVscCIsIkxheW91dCIsIkxvYWRpbmciLCJOYXZpZ2F0aW9uIiwiT2xkRm9ybUNvbXBvbmVudE1vZHVsZSIsIk9sZEZvcm1WYWxpZGF0aW9uTW9kdWxlIiwic2hvcnREYXRlIiwiRGF0ZUxvb2t1cENvbnRyb2xsZXIiLCJ5ZWFyT2Zmc2V0IiwibmV3RGF0ZSIsInVwZGF0ZUNhbGVuZGFyVmlldyIsInNldExvY2FsZSIsInVwZGF0ZU1pbkRhdGVWaWV3IiwidXBkYXRlTWF4RGF0ZVZpZXciLCJ2aWV3RGF0ZSIsImlzRGF5RGlzYWJsZWQiLCJzZXRNb2RlbCIsInVwZGF0ZUNhbGVuZGFyRGF0ZVByZXNlbnRhdGlvbiIsImlzTW9udGhEaXNhYmxlZCIsIndlZWtzIiwiZ2V0VGFibGVTdHJ1Y3R1cmUiLCJpc1llYXJEaXNhYmxlZCIsInNlbGVjdGVkRGF0ZSIsInNlbGVjdGVkTW9udGgiLCJzZWxlY3RlZFllYXIiLCJtaW5ZZWFyIiwibWluTW9udGgiLCJtaW5EYXkiLCJtYXhZZWFyIiwibWF4TW9udGgiLCJtYXhEYXkiLCJmaW5kQWN0aXZlTGluayIsImFkZHRpb25hbE9mZnNldCIsIiR2YWxpZGF0ZSIsInVwZGF0ZVNlbGVjdGVkRGF0ZVByZXNlbnRhdGlvbiIsImZpcnN0RGF5T2ZNb250aCIsImRheXNJbk1vbnRoIiwid2VlayIsIm1vbnRoc09mWWVhciIsInNob3J0TW9udGhzT2ZZZWFyIiwianNEYXlzIiwianNTaG9ydERheXMiLCJzaGlmdCIsImRheXNPZldlZWsiLCJzaG9ydERheXNPZldlZWsiLCJzZWxlY3RlZERhdGVGb3JtYXR0ZWQiLCJ5ZWFyTW9udGhGb3JtYXR0ZWQiLCJtb2RlbERhdGUiLCJtb3ZlRGF0ZVRvV2l0aGluUmFuZ2UiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImFkanVzdERhdGUiLCJyb3ciLCJjb2x1bW4iLCJhZGRvbiIsImN1cnJlbmN5IiwiY3VycmVuY3lDb2RlIiwiQ3VycmVuY3lJbnB1dENvbnRyb2xsZXIiLCJUd0N1cnJlbmN5U2VydmljZSIsInNob3dEZWNpbWFscyIsImdldERlY2ltYWxzIiwibG9nIiwicGFyc2VGbG9hdCIsImN1cnJlbmN5RGVjaW1hbHMiLCJCSUYiLCJCWVIiLCJDTFAiLCJESkYiLCJHTkYiLCJKUFkiLCJLTUYiLCJLUlciLCJNR0EiLCJQWUciLCJSV0YiLCJWTkQiLCJWVVYiLCJYQUYiLCJYT0YiLCJYUEYiLCJIVUYiLCJCSEQiLCJKT0QiLCJLV0QiLCJPTVIiLCJUTkQiLCJhbW91bnRSZWFkT25seSIsIm9uQW1vdW50Q2hhbmdlIiwiY3VycmVuY2llcyIsIm9uQ3VycmVuY3lDaGFuZ2UiLCJjdXJyZW5jeUZpbHRlclBsYWNlaG9sZGVyIiwiY3VzdG9tQWN0aW9uTGFiZWwiLCJvbkN1c3RvbUFjdGlvbiIsIkFtb3VudEN1cnJlbmN5U2VsZWN0Q29udHJvbGxlciIsImluaXRpYWxGaWVsZHMiLCJyZXF1aXJlZEZpZWxkcyIsIm9uUmVmcmVzaFJlcXVpcmVtZW50cyIsIm9uRmllbGRGb2N1cyIsIm9uRmllbGRCbHVyIiwib25GaWVsZENoYW5nZSIsImVycm9yTWVzc2FnZXMiLCJ3YXJuaW5nTWVzc2FnZXMiLCJpc1ZhbGlkIiwibmFycm93IiwiRmllbGRzZXRDb250cm9sbGVyIiwiVHdSZXF1aXJlbWVudHNTZXJ2aWNlIiwidmFsaWRpdHkiLCJmaWVsZHNDaGFuZ2VkIiwicmVmcmVzaFJlcXVpcmVtZW50c09uQ2hhbmdlIiwicmVxdWlyZW1lbnRzIiwiUmVxdWlyZW1lbnRzRm9ybUNvbnRyb2xsZXIiLCJhY3RpdmVJbmRleCIsIm9uUmVxdWlyZW1lbnRzQ2hhbmdlIiwic3dpdGNoVGFiIiwibmV3SW5kZXgiLCJvbGRJbmRleCIsImNsZWFuUmVxdWlyZW1lbnRzTW9kZWwiLCJuZXdSZXF1aXJlbWVudHMiLCJvbGRSZXF1aXJlbWVudHMiLCJuZXdQcmVwYXJlZCIsIm9sZFByZXBhcmVkIiwidGFicyIsInJlcXVpcmVtZW50Iiwib2xkRmllbGROYW1lcyIsImdldEZpZWxkTmFtZXNGcm9tUmVxdWlyZW1lbnQiLCJuZXdGaWVsZE5hbWVzIiwibW9kZWxSZXF1aXJlbWVudCIsImFjdGl2ZSIsIm9uQ2hhbmdlIiwiVGFic0NvbnRyb2xsZXIiLCJsYXlvdXQiLCJEZWZpbml0aW9uTGlzdENvbnRyb2xsZXIiLCJVbmRvU3RhY2tGYWN0b3J5IiwiVGV4dEZvcm1hdFNlcnZpY2UiLCJUZXh0Rm9ybWF0RGlyZWN0aXZlIiwiVGV4dEZvcm1hdEZpbHRlciIsIlVuZG9TdGFjayIsInBvaW50ZXIiLCJzdGFjayIsInVuZG8iLCJyZWRvIiwibmV3IiwicG9zaXRpb25Jc1NlcGFyYXRvciIsInBvc2l0aW9uIiwiZm9ybWF0VXNpbmdQYXR0ZXJuIiwic2VwYXJhdG9ycyIsImNoYXJhY3RlcnNUb0FsbG9jYXRlIiwic2VwYXJhdG9yc0FmdGVyQ3Vyc29yIiwiY291bnRTZXBhcmF0b3JzQWZ0ZXJDdXJzb3IiLCJ1bmZvcm1hdFVzaW5nUGF0dGVybiIsInJlZm9ybWF0VXNpbmdQYXR0ZXJuIiwibmV3UGF0dGVybiIsIm9sZFBhdHRlcm4iLCJjb3VudFNlcGFyYXRvcnNCZWZvcmVDdXJzb3IiLCJjb3VudFNlcGFyYXRvcnNJbkFwcGVuZGVkVmFsdWUiLCJ0b0FsbG9jYXRlIiwiY291bnRTZXBhcmF0b3JzSW5QYXR0ZXJuIiwidHdUZXh0Rm9ybWF0IiwiVGV4dEZvcm1hdENvbnRyb2xsZXIiLCJUd1RleHRGb3JtYXRTZXJ2aWNlIiwiVHdVbmRvU3RhY2tGYWN0b3J5Iiwia2V5ZG93bkNvdW50IiwidW5kb1N0YWNrIiwiJHBhcnNlcnMiLCJvbktleWRvd24iLCJvblBhc3RlIiwib25DdXQiLCJvbkNvcHkiLCJyZXBsYWNlTGVuZ3RoVmFsaWRhdG9ycyIsIm9uUGF0dGVybkNoYW5nZSIsIm5ld01vZGVsIiwib2xkTW9kZWwiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInJlZm9ybWF0Q29udHJvbCIsInNldFNlbGVjdGlvbiIsIm9yaWdpbmFsVmFsdWUiLCJwYXN0ZWREYXRhIiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJzZXBhcmF0b3JzSW5QYXN0ZSIsIm5ld1Bvc2l0aW9uIiwiY3VycmVudEtleWRvd25Db3VudCIsInJlc2VydmVkS2V5cyIsIm1ldGFLZXkiLCJjdHJsS2V5IiwieiIsInkiLCJhZnRlcktleWRvd24iLCJuZXdWYWwiLCJiYWNrc3BhY2UiLCJkb0JhY2tzcGFjZSIsImRlbGV0ZSIsImRvRGVsZXRlIiwiZG9LZXlwcmVzcyIsImdldEZvcm1hdHRlZFZhbHVlQWZ0ZXJCYWNrc3BhY2UiLCJnZXRQb3NpdGlvbkFmdGVyQmFja3NwYWNlIiwicmVtb3ZlU3RhcnQiLCJyZW1vdmVFbmQiLCJzZXBhcmF0b3JzQmVmb3JlQ3Vyc29yIiwiYWRqdXN0IiwicmVtb3ZlQ2hhcmFjdGVycyIsImdldEZvcm1hdHRlZFZhbHVlQWZ0ZXJEZWxldGUiLCJzdGFydCIsImVuZCIsInNldFNlbGVjdGlvblJhbmdlIiwiZ2V0UG9zaXRpb25BZnRlcktleXByZXNzIiwicHJvcG9zZWRQb3NpdGlvbiIsInNlcGFyYXRvcnNBZnRlciIsIm9yaWdpbmFsTWluTGVuZ3RoIiwib3JpZ2luYWxNYXhMZW5ndGgiLCJvcmlnaW5hbFBhdHRlcm4iLCJmaXJzdCIsImxhc3QiLCJjbWQiLCJjbWRMZWZ0IiwiY21kUmlnaHQiLCJ0YWIiLCJlbnRlciIsImN0cmwiLCJhbHQiLCJob21lIiwicmlnaHQiLCJOdW1iZXJEaXNwbGF5IiwiYW1vdW50IiwicHJlY2lzaW9uIiwiTnVtYmVyRm9ybWF0RmlsdGVyIiwibnVtYmVyIiwidXNlR3JvdXBpbmciLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJ0b0xvY2FsZVN0cmluZyIsInRvRml4ZWQiLCJnZXRDdXJyZW50IiwicmVnZXgiLCJsb3dlckNhc2VDb3VudHJ5Iiwic2V0Q3VycmVudCIsIm5ld0xvY2FsZSIsImxvd2VyQ2FzZUxvY2FsZSIsInRlc3RMb2NhbGUiLCJnZXRDb3VudHJ5RnJvbUxvY2FsZSIsIkN1cnJlbmN5Q29tcG9uZW50IiwiQ3VycmVuY3lGaWx0ZXIiLCJDdXJyZW5jeUZvcm1hdEZpbHRlciIsIiRmaWx0ZXIiLCJudW1iZXJGb3JtYXRGaWx0ZXIiLCJUZWxlcGhvbmVDb250cm9sIiwic2VhcmNoUGxhY2Vob2xkZXIiLCJUZWxlcGhvbmVDb250cm9sbGVyIiwiY291bnRyaWVzIiwiY291bnRyeUxpc3QiLCJkaWFsbGluZ0NvZGVNYXAiLCJjYWxsaW5nQ29kZXMiLCJjb3VudHJ5IiwicGhvbmUiLCJpc28zIiwibmFtZXMiLCJnZW5lcmF0ZVByZWZpeE1hcCIsInNvcnQiLCJhIiwiYiIsImNoYXJhY3RlcnNUb1JlbW92ZSIsIm1vZGVsUGF0dGVybiIsImV4cGxvZGVOdW1iZXJNb2RlbCIsInVuc2hpZnQiLCJzdWZmaXhNb2RlbENvbnRyb2xsZXIiLCJmaW5kIiwic2V0RGVmYXVsdFByZWZpeCIsInBob25lTnVtYmVyIiwiZmluZENvdW50cnlCeVByZWZpeCIsInByZWZpeCIsInN1ZmZpeCIsInBob25lRm9ybWF0Iiwib25WYWx1ZUNoYW5nZSIsImNvbWJpbmVkIiwidmFsaWRhdGUiLCJtYXRjaGluZ0NvZGVzIiwiaXNvMiIsInJlZHVjZSIsImZpbmRDb3VudHJ5QnlDb2RlIiwiJGludmFsaWQiLCJzdWJtaXRDYWxsYmFjayIsInN1Y2Nlc3NDYWxsYmFjayIsImZhaWx1cmVDYWxsYmFjayIsIlN1Ym1pdENvbnRyb2xsZXIiLCJjb2xvdXIiLCJhbmltYXRpb25EZWxheSIsImZvcm0iLCJvblN1Ym1pdCIsIm9uTmV3UHJvbWlzZSIsIm9uUHJvbWlzZVN1Y2Nlc3MiLCJvblByb21pc2VGYWlsdXJlIiwiaXNTcGlubmVyVmlzaWJsZSIsImlzQnV0dG9uRGlzYWJsZWQiLCJGaWxlU2VsZWN0IiwiVHdVcGxvYWREcm9wcGFibGVDb250cm9sbGVyIiwiZHJhZ0NvdW50ZXIiLCJpc0FjdGl2ZSIsIm9uTWFudWFsVXBsb2FkIiwib25VcGxvYWQiLCJvbkRyb3AiLCJkcm9wQ291bnRlciIsIm9uRHJhZ0NoYW5nZSIsIlR3VXBsb2FkRHJvcHBhYmxlTGluayIsImN0YSIsIkZpbGVTZWxlY3RMaW5rIiwicmFkaW9Db250YWluZXIiLCJjb250cm9scyIsIlBvcE92ZXIiLCJUb29sVGlwIiwiUG9wT3ZlclNlcnZpY2UiLCJQb3BPdmVyQ29udHJvbGxlciIsIlBvcG92ZXJTZXJ2aWNlIiwidW53cmFwcGVkRWwiLCJzaG93UG9wb3ZlciIsImdldFBvcG92ZXJPcHRpb25zIiwiaGlkZVBvcG92ZXIiLCJyZWdpc3RlckV2ZW50TGlzdGVuZXJzIiwidW5yZWdpc3RlckV2ZW50TGlzdGVuZXJzIiwiY29uZmlnIiwibm9kZSIsInRyaWdnZXIiLCJwb3BvdmVyIiwicGxhY2VtZW50IiwiY3VzdG9tT3B0aW9ucyIsInNwYWNpbmciLCJkYXRhc2V0Iiwib3JpZ2luYWxUaXRsZSIsImNvbnRlbnRIdG1sIiwiZG9jdW1lbnRDYWxsYmFjayIsInJlc2l6ZUNhbGxiYWNrIiwicmVnaXN0ZXJHbG9iYWxFdmVudExpc3RlbmVycyIsImdldFBvcG92ZXJQYXJlbnQiLCJleGlzdGluZ1BvcG92ZXIiLCJwb3BvdmVyVGVtcGxhdGUiLCJERUZBVUxUX1RFTVBMQVRFIiwiZ2V0UG9wb3ZlclRlbXBsYXRlIiwicG9wb3ZlckVsZW1lbnQiLCJpc1BvcG92ZXJNb2RhbCIsImdldE1vZGFsQ29uZGl0aW9uIiwiY3NzQ2xhc3NlcyIsImdldFBvcG92ZXJFbGVtZW50IiwidGV4dENvbnRlbnQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJpbnNlcnRBZGphY2VudFRleHQiLCJpbWFnZUVsZW1lbnQiLCJpbWFnZVVybCIsInNyYyIsInVwZGF0ZVBvcG92ZXJDb250ZW50IiwiaGFuZGxlUG9wb3Zlck9wdGlvbnMiLCJoaWdobGlnaHRFbGVtZW50IiwicmVtb3ZlUG9wb3Zlck92ZXJsYXkiLCJ0ZWFyZG93blBvcG92ZXJPcHRpb25zIiwiJGVtaXQiLCJjbGlja2VkT3V0c2lkZVBvcG92ZXIiLCJjbGlja2VkSW5zaWRlUG9wb3ZlciIsImNsaWNrZWRQb3BvdmVyQ2xvc2UiLCJjbGlja2VkTW9kYWxPdmVybGF5IiwiZml4ZWRQb3NpdGlvbiIsImJvZHkiLCJwb3BvdmVyUGFyZW50IiwicG9wb3Zlck92ZXJsYXkiLCJhZGRQb3BvdmVyT3ZlcmxheSIsImVsZW1lbnRPZmZzZXQiLCJnZXRCb3VuZGluZ09mZnNldCIsInZpZXdwb3J0Q2xpZW50RGltZW5zaW9ucyIsImdldENsaWVudERpbWVuc2lvbnMiLCJlbGVtZW50T2Zmc2V0RGltZW5zaW9ucyIsImdldE9mZnNldERpbWVuc2lvbnMiLCJwb3BvdmVyT2Zmc2V0RGltZW5zaW9ucyIsInBvcG92ZXJPZmZzZXRXaWR0aCIsIm9mZnNldFgiLCJvZmZzZXRXaWR0aCIsInBvcG92ZXJMZWZ0T2Zmc2V0Iiwib3ZlcmZsb3dzUmlnaHQiLCJjbGllbnRXaWR0aCIsIm92ZXJmbG93c0xlZnQiLCJjaGVja1BvcG92ZXJQbGFjZW1lbnQiLCJ2aXNpYmlsaXR5IiwiZ2V0UGFyZW50T2Zmc2V0IiwicG9wb3Zlck9mZnNldHMiLCJvZmZzZXRZIiwicG9wb3ZlckFycm93U3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInBvcG92ZXJBcnJvd1RvcE9mZnNldCIsImdldE51bWVyaWNWYWx1ZSIsInBvcG92ZXJBcnJvd0hlaWdodCIsInBvcG92ZXJBcnJvd0xlZnRPZmZzZXQiLCJwb3BvdmVyQXJyb3dSaWdodE9mZnNldCIsInBvcG92ZXJBcnJvd01hcmdpblRvcCIsInBvcG92ZXJPZmZzZXRYIiwicG9wb3Zlck9mZnNldFkiLCJvZmZzZXRIZWlnaHQiLCJnZXRQb3BvdmVyQ29vcmRpbmF0ZXMiLCJzZXRQb3BvdmVyUG9zaXRpb24iLCJjb250YWluZXIiLCJtb2RhbFRyYW5zZm9ybSIsIm92ZXJsYXlOb2RlIiwiZWxlbWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJwYWdlWU9mZnNldCIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJjbGllbnRIZWlnaHQiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiVG9vbFRpcExpbmsiLCJ0YWciLCJBZmZpeCIsIkNhcmRzIiwiQWZmaXhMaW5rIiwiYWZmaXgiLCJib3R0b20iLCJDYXJkc1NlcnZpY2UiLCJDYXJkIiwiZXhwYW5kZWRJbmRleCIsImNhcmRzIiwiaXNFeHBhbmRlZCIsImNvbGxhcHNlIiwiY2FyZCIsImV4cGFuZCIsImFkZENhcmQiLCJ1cGRhdGVFeHBhbmRlZEluZGV4IiwibmV3RXhwYW5kZWRJbmRleCIsImdldENhcmQiLCJnZXRMZW5ndGgiLCJnZXRFeHBhbmRlZEluZGV4IiwiQ2FyZExpbmsiLCJpbmFjdGl2ZSIsImNhcmRDb250YWluZXJDb250cm9sbGVyIiwiZW1wdHkiLCJvcGVuIiwic2hvd0Zvcm0iLCJvbkV4cGFuZCIsIm9uQ29sbGFwc2UiLCJjb2xsYXBzZWRDYXJkIiwiZXhwYW5kZWRDYXJkIiwiY2FyZEZvcm0iLCJjYXJkSWNvbiIsIm1vZGFscyIsIkNhcmRDb250cm9sbGVyIiwiVHdDYXJkc1NlcnZpY2UiLCJUd0NhcmRzIiwiVHdMb2FkZXIiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVB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VUFBVSxXQUFZZytCLFdBQVFoZ0MsTSw4RUNMakMsSSxFQUFBLFNBRUEsSUFBTWk4QyxFQUFXLENBQ2Y5ckMsVyxrQ0FBQUEsUyxVQUdhOHJDLEcsY0NOZno4QyxFQUFPRCxRQUFVLDJ0Qiw4RUNBakIsSSxJQUFBLE0sSUFFQSxRLDZEQUVla0MsVUFBUWpDLE9BQU8sMkJBQTRCLENBQ3hEaWdDLFlBQ0N6L0IsTSw4RUNKSCxJLElBQUEsTUFFQSxNQUVBLEksSUFBQSxRLElBQ0EsUSxJQUNBLE8sNkRBRWV5QixVQUFRakMsT0FBTyxxQkFBc0IsQ0FDbER5Z0MsVUFDQU0sVUFDQUgsWUFDQ3BnQyxNLDhFQ1pILEksSUFBQSxNQUVBLE1BRUEsSSxJQUFBLFEsSUFDQSxPLDZEQUVleUIsVUFBUWpDLE9BQU8scUJBQXNCLENBQ2xEMGdDLFVBQ0FFLFlBQ0NwZ0MiLCJmaWxlIjoiZGlzdC9qcy9zdHlsZWd1aWRlLWNvbXBvbmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTE5KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjsiLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4vZG9tLnNlcnZpY2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMuZG9tJywgW10pXG4gIC5zZXJ2aWNlKCdUd0RvbVNlcnZpY2UnLCBEb21TZXJ2aWNlKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4vZm9jdXNhYmxlLmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgRm9ybUNvbnRyb2xGb2N1cyBmcm9tICcuL2Zvcm0tY29udHJvbC5kaXJlY3RpdmUuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmZvY3VzYWJsZScsIFtcbiAgICBEb21TZXJ2aWNlXG4gIF0pXG4gIC5kaXJlY3RpdmUoJ3R3Rm9jdXNhYmxlJywgRm9jdXNhYmxlKVxuICAuZGlyZWN0aXZlKCdmb3JtQ29udHJvbCcsIEZvcm1Db250cm9sRm9jdXMpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEYXRlU2VydmljZSBmcm9tICcuL2RhdGUuc2VydmljZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcy5kYXRlJywgW10pXG4gIC5zZXJ2aWNlKCdUd0RhdGVTZXJ2aWNlJywgRGF0ZVNlcnZpY2UpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi9zZWxlY3QuY29tcG9uZW50LmpzJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvbSc7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4uL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5zZWxlY3QnLCBbXG4gICAgRG9tU2VydmljZSxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdTZWxlY3QnLCBTZWxlY3QpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBSZXF1aXJlbWVudHNTZXJ2aWNlIGZyb20gJy4vcmVxdWlyZW1lbnRzLnNlcnZpY2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMucmVxdWlyZW1lbnRzJywgW10pXG4gIC5zZXJ2aWNlKCdUd1JlcXVpcmVtZW50c1NlcnZpY2UnLCBSZXF1aXJlbWVudHNTZXJ2aWNlKS5uYW1lO1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFByb2Nlc3MgZnJvbSAnLi9wcm9jZXNzLmNvbXBvbmVudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5sb2FkaW5nLnByb2Nlc3MnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdQcm9jZXNzJywgUHJvY2VzcykubmFtZTtcbiIsIlxuY2xhc3MgRm9jdXNhYmxlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgY29uc3QgZm9ybUdyb3VwID0gVHdEb21TZXJ2aWNlLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuXG4gICAgaWYgKGZvcm1Hcm91cCAmJiBlbGVtZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICAgIH0pO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5Gb2N1c2FibGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBGb2N1c2FibGVDb250cm9sbGVyO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgUmFkaW8gZnJvbSAnLi9yYWRpby5jb21wb25lbnQuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcbmltcG9ydCBGb2N1c2FibGUgZnJvbSAnLi4vZm9jdXNhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnJhZGlvJywgW1xuICAgIERvbVNlcnZpY2UsXG4gICAgRm9jdXNhYmxlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3UmFkaW8nLCBSYWRpbykubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFByb2Nlc3NpbmdDYXJkIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgUHJvY2Vzc2luZ01pbmkgZnJvbSAnLi9wcm9jZXNzaW5nLW1pbmkuY29tcG9uZW50JztcbmltcG9ydCBBc3luY0ZpbGVSZWFkZXIgZnJvbSAnLi4vc2VydmljZXMvYXN5bmMtZmlsZS1yZWFkZXIuc2VydmljZS5qcyc7XG5pbXBvcnQgQXN5bmNGaWxlU2F2ZXIgZnJvbSAnLi4vc2VydmljZXMvYXN5bmMtZmlsZS1zYXZlci5zZXJ2aWNlLmpzJztcbmltcG9ydCBGaWxlVmFsaWRhdGlvblNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvZmlsZS12YWxpZGF0aW9uLnNlcnZpY2UuanMnO1xuaW1wb3J0IEFzeW5jVGFza3NDb25maWcgZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvYXN5bmNUYXNrc0NvbmZpZyc7XG5pbXBvcnQgUHJvY2VzcyBmcm9tICcuLi8uLi8uLi9sb2FkaW5nL3Byb2Nlc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLnByb2Nlc3NpbmcnLCBbXG4gICAgQXN5bmNUYXNrc0NvbmZpZyxcbiAgICBBc3luY0ZpbGVSZWFkZXIsXG4gICAgQXN5bmNGaWxlU2F2ZXIsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgIFByb2Nlc3NcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRQcm9jZXNzaW5nJywgUHJvY2Vzc2luZ0NhcmQpXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkUHJvY2Vzc2luZ01pbmknLCBQcm9jZXNzaW5nTWluaSlcbiAgLm5hbWU7XG4iLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJHRpbWVvdXQsXG4gICAgQXN5bmNGaWxlUmVhZGVyLFxuICAgIEFzeW5jRmlsZVNhdmVyLFxuICAgIEFzeW5jVGFza3NDb25maWcsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLkFzeW5jRmlsZVJlYWRlciA9IEFzeW5jRmlsZVJlYWRlcjtcbiAgICB0aGlzLkFzeW5jRmlsZVNhdmVyID0gQXN5bmNGaWxlU2F2ZXI7XG4gICAgdGhpcy5Bc3luY1Rhc2tzQ29uZmlnID0gQXN5bmNUYXNrc0NvbmZpZztcbiAgICB0aGlzLkZpbGVWYWxpZGF0aW9uID0gRmlsZVZhbGlkYXRpb25TZXJ2aWNlO1xuXG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSBudWxsO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZmlsZSAmJiBjaGFuZ2VzLmZpbGUuY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLm9uRmlsZUNhcHR1cmUoY2hhbmdlcy5maWxlLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgb25GaWxlQ2FwdHVyZShmaWxlKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZmlsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcmV0cmlldmUgZmlsZScpO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQoKTtcblxuICAgIHRoaXMuZmlsZSA9IGZpbGU7XG5cbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSBudWxsO1xuXG4gICAgdGhpcy5vblN0YXJ0KHsgZmlsZSB9KTtcblxuICAgIGlmICghdGhpcy5GaWxlVmFsaWRhdGlvbi5pc1NtYWxsZXJUaGFuTWF4U2l6ZShmaWxlLCB0aGlzLm1heFNpemUpKSB7XG4gICAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcyA9IFt0aGlzLnRvb0xhcmdlTWVzc2FnZV07XG4gICAgICBhc3luY0ZhaWx1cmUoe1xuICAgICAgICBzdGF0dXM6IDQxMyxcbiAgICAgICAgc3RhdHVzVGV4dDogJ1JlcXVlc3QgRW50aXR5IFRvbyBMYXJnZSdcbiAgICAgIH0sIG51bGwsIHRoaXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmh0dHBPcHRpb25zKSB7XG4gICAgICAvLyBQb3N0IGZpbGUgbm93XG4gICAgICB0aGlzLmFzeW5jRmlsZVJlYWQoZmlsZSlcbiAgICAgICAgLnRoZW4oZGF0YVVybCA9PiB0aGlzLmFzeW5jRmlsZVNhdmUoZmlsZSlcbiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiBhc3luY1N1Y2Nlc3MocmVzcG9uc2UsIGRhdGFVcmwsIHRoaXMpKSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IGFzeW5jRmFpbHVyZShlcnJvciwgbnVsbCwgdGhpcykpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBQb3N0IG9uIGZvcm0gc3VibWl0XG4gICAgICB0aGlzLmFzeW5jRmlsZVJlYWQoZmlsZSlcbiAgICAgICAgLnRoZW4oZGF0YVVybCA9PiBhc3luY1N1Y2Nlc3MobnVsbCwgZGF0YVVybCwgdGhpcykpXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiBhc3luY0ZhaWx1cmUoZXJyb3IsIG51bGwsIHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICBhc3luY0ZpbGVTYXZlKGZpbGUpIHtcbiAgICBjb25zdCBodHRwT3B0aW9ucyA9IHRoaXMuQXN5bmNUYXNrc0NvbmZpZy5leHRlbmRIdHRwT3B0aW9ucyh0aGlzLmh0dHBPcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5Bc3luY0ZpbGVTYXZlci5zYXZlKGh0dHBPcHRpb25zLnBhcmFtIHx8IHRoaXMubmFtZSwgZmlsZSwgaHR0cE9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmNGaWxlUmVhZChmaWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuQXN5bmNGaWxlUmVhZGVyLnJlYWQoZmlsZSk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLnByb2Nlc3NpbmdTdGF0ZSA9IDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmlzU3VjY2VzcyA9IGZhbHNlO1xuICAgIHRoaXMuaXNFcnJvciA9IGZhbHNlO1xuICB9XG5cbiAgb25SZW1vdmUoKSB7XG4gICAgdGhpcy5vbkNhbmNlbCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzeW5jU3VjY2VzcyhyZXNwb25zZSwgZGF0YVVybCwgJGN0cmwpIHtcbiAgJGN0cmwucHJvY2Vzc2luZ1N0YXRlID0gMTtcbiAgbGV0IGlkID0gbnVsbDtcbiAgY29uc3QgZmlsZSA9ICRjdHJsLmZpbGU7XG4gIGNvbnN0IGh0dHBPcHRpb25zID0gJGN0cmwuaHR0cE9wdGlvbnM7XG5cbiAgaWYgKGh0dHBPcHRpb25zXG4gICAgICAmJiBodHRwT3B0aW9ucy5pZFByb3BlcnR5XG4gICAgICAmJiByZXNwb25zZVxuICAgICAgJiYgcmVzcG9uc2UuZGF0YVxuICAgICAgJiYgcmVzcG9uc2UuZGF0YVtodHRwT3B0aW9ucy5pZFByb3BlcnR5XSkge1xuICAgIGlkID0gcmVzcG9uc2UuZGF0YVtodHRwT3B0aW9ucy5pZFByb3BlcnR5XTtcbiAgfVxuXG4gIC8vIFRpbWUgc3VjY2VzcyBtZXNzYWdpbmcgdG8gbWF0Y2ggYW5pbWF0aW9uXG4gICRjdHJsLiR0aW1lb3V0KCgpID0+IHtcbiAgICAkY3RybC5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAkY3RybC5pc1N1Y2Nlc3MgPSB0cnVlO1xuICAgICRjdHJsLm9uU3VjY2Vzcyh7IGZpbGUsIGRhdGFVcmwsIGlkLCByZXNwb25zZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9LCAzNjAwKTtcblxuICByZXR1cm4gZGF0YVVybDtcbn1cbmZ1bmN0aW9uIGFzeW5jRmFpbHVyZShlcnJvciwgZGF0YVVybCwgJGN0cmwpIHtcbiAgLy8gU3RhcnQgY2hhbmdpbmcgcHJvY2VzcyBpbmRpY2F0b3IgaW1tZWRpYXRlbHlcbiAgJGN0cmwucHJvY2Vzc2luZ1N0YXRlID0gLTE7XG4gIC8vIFdhaXQgYmVmb3JlIHVwZGF0aW5nIHRleHRcbiAgJGN0cmwuJHRpbWVvdXQoKCkgPT4ge1xuICAgICRjdHJsLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICRjdHJsLmlzRXJyb3IgPSB0cnVlO1xuICB9LCAzNjAwKTtcbiAgLy8gQWxsb3cgYSBzbWFsbCBhbW91bnQgb2YgZXh0cmEgdGltZSBiZWZvcmUgbm90aWZ5aW5nIGV4dGVybmFsIGhhbmRsZXJzXG4gICRjdHJsLiR0aW1lb3V0KCgpID0+IHtcbiAgICAkY3RybC5vbkZhaWx1cmUoeyBlcnJvciB9KTtcbiAgfSwgNDEwMCk7IC8vIDM1MDApOyBUT0RPIGZvciBzb21lIHJlYXNvbiBtb3JlIHRpbWUgaXMgbmVlZGVkXG5cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckdGltZW91dCcsXG4gICdBc3luY0ZpbGVSZWFkZXInLFxuICAnQXN5bmNGaWxlU2F2ZXInLFxuICAnQXN5bmNUYXNrc0NvbmZpZycsXG4gICdGaWxlVmFsaWRhdGlvblNlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnPCcsXG4gIGZpbGU6ICc8JyxcblxuICBvblN0YXJ0OiAnJicsXG4gIG9uU3VjY2VzczogJyYnLFxuICBvbkZhaWx1cmU6ICcmJyxcbiAgb25DYW5jZWw6ICcmJyxcblxuICBtYXhTaXplOiAnPCcsXG4gIGFjY2VwdDogJzwnLFxuICBodHRwT3B0aW9uczogJzwnLFxuXG4gIHByb2Nlc3NpbmdNZXNzYWdlOiAnPCcsXG4gIHN1Y2Nlc3NNZXNzYWdlOiAnPCcsXG4gIGVycm9yTWVzc2FnZTogJzwnLFxuICB0b29MYXJnZU1lc3NhZ2U6ICc8JyxcblxuICB2YWxpZGF0aW9uTWVzc2FnZXM6ICc8JyxcblxuICBjYW5jZWxUZXh0OiAnPCdcbn07XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEcm9wIGZyb20gJy4vZHJvcC5kaXJlY3RpdmUnO1xuaW1wb3J0IERyYWdFbnRlciBmcm9tICcuL2RyYWctZW50ZXIuZGlyZWN0aXZlJztcbmltcG9ydCBEcmFnTGVhdmUgZnJvbSAnLi9kcmFnLWxlYXZlLmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5kcmFnLWFuZC1kcm9wJywgW10pXG4gIC5kaXJlY3RpdmUoJ3R3RHJvcCcsIERyb3ApXG4gIC5kaXJlY3RpdmUoJ3R3RHJhZ0VudGVyJywgRHJhZ0VudGVyKVxuICAuZGlyZWN0aXZlKCd0d0RyYWdMZWF2ZScsIERyYWdMZWF2ZSlcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDdXJyZW5jeVNlcnZpY2UgZnJvbSAnLi9jdXJyZW5jeS5zZXJ2aWNlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLnNlcnZpY2VzLmN1cnJlbmN5JywgW10pXG4gIC5zZXJ2aWNlKCdUd0N1cnJlbmN5U2VydmljZScsIEN1cnJlbmN5U2VydmljZSkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4vY2hlY2tib3guY29tcG9uZW50LmpzJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvbSc7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4uL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5jaGVja2JveCcsIFtcbiAgICBEb21TZXJ2aWNlLFxuICAgIEZvY3VzYWJsZVxuICBdKVxuICAuY29tcG9uZW50KCd0d0NoZWNrYm94JywgQ2hlY2tib3gpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuaW1wb3J0IFVwbG9hZCBmcm9tICcuL3VwbG9hZC5jb21wb25lbnQuanMnO1xuXG5pbXBvcnQgQ2FwdHVyZUNhcmQgZnJvbSAnLi9jYXB0dXJlLWNhcmQnO1xuaW1wb3J0IERyb3BwaW5nQ2FyZCBmcm9tICcuL2Ryb3BwaW5nLWNhcmQnO1xuaW1wb3J0IFByb2Nlc3NpbmdDYXJkIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkJztcbmltcG9ydCBTdWNjZXNzQ2FyZCBmcm9tICcuL3N1Y2Nlc3MtY2FyZCc7XG5pbXBvcnQgQ2FtZXJhQ2FwdHVyZSBmcm9tICcuL2NhbWVyYS1jYXB0dXJlJztcbmltcG9ydCBVcGxvYWRCdXR0b24gZnJvbSAnLi91cGxvYWQtYnV0dG9uJztcbmltcG9ydCBDYW1lcmFCdXR0b24gZnJvbSAnLi9jYW1lcmEtYnV0dG9uJztcblxuaW1wb3J0IEZpbGVJbnB1dCBmcm9tICcuL2ZpbGUtaW5wdXQuZGlyZWN0aXZlLmpzJztcbmltcG9ydCBNdWx0aVVwbG9hZCBmcm9tICcuL211bHRpLXVwbG9hZCc7XG5pbXBvcnQgRHJhZ0FuZERyb3AgZnJvbSAnLi4vZHJhZy1hbmQtZHJvcCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQnLCBbXG4gICAgQ2FwdHVyZUNhcmQsXG4gICAgRHJvcHBpbmdDYXJkLFxuICAgIFByb2Nlc3NpbmdDYXJkLFxuICAgIFN1Y2Nlc3NDYXJkLFxuICAgIENhbWVyYUNhcHR1cmUsXG4gICAgVXBsb2FkQnV0dG9uLFxuICAgIENhbWVyYUJ1dHRvbixcbiAgICBNdWx0aVVwbG9hZCxcbiAgICBEcmFnQW5kRHJvcFxuICBdKVxuICAuZGlyZWN0aXZlKCd0d0ZpbGVJbnB1dCcsIEZpbGVJbnB1dClcbiAgLmNvbXBvbmVudCgndHdVcGxvYWQnLCBVcGxvYWQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQXN5bmNUYXNrc0NvbmZpZyBmcm9tICcuL2FzeW5jVGFza3NDb25maWcuc2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcy5hc3luYy10YXNrcy1jb25maWcnLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jVGFza3NDb25maWcnLCBBc3luY1Rhc2tzQ29uZmlnKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRGF0ZUNvbnRyb2wgZnJvbSAnLi9kYXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgRGF0ZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZGF0ZSc7XG5pbXBvcnQgRGF0ZUZvcm1hdCBmcm9tICcuLi8uLi9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0JztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vc2VsZWN0JztcbmltcG9ydCBGb2N1c2FibGUgZnJvbSAnLi4vZm9jdXNhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmRhdGUnLCBbXG4gICAgRGF0ZVNlcnZpY2UsXG4gICAgRGF0ZUZvcm1hdCxcbiAgICBTZWxlY3QsXG4gICAgRm9jdXNhYmxlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3RGF0ZScsIERhdGVDb250cm9sKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRGF0ZUZvcm1hdCBmcm9tICcuL2RhdGUtZm9ybWF0LmNvbXBvbmVudCc7XG5pbXBvcnQgRGF0ZUZpbHRlciBmcm9tICcuL2RhdGUtZm9ybWF0LmZpbHRlcic7XG5pbXBvcnQgRGF0ZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3JtYXR0aW5nLmRhdGUnLCBbXG4gICAgRGF0ZVNlcnZpY2VcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdEYXRlRm9ybWF0JywgRGF0ZUZvcm1hdClcbiAgLmZpbHRlcigndHdEYXRlRm9ybWF0JywgRGF0ZUZpbHRlcilcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vc2VsZWN0JztcbmltcG9ydCBSYWRpbyBmcm9tICcuLi9yYWRpbyc7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vY2hlY2tib3gnO1xuaW1wb3J0IERhdGVDb250cm9sIGZyb20gJy4uL2RhdGUnO1xuaW1wb3J0IFVwbG9hZCBmcm9tICcuLi91cGxvYWQnO1xuXG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi9mb3JtLWNvbnRyb2wuY29tcG9uZW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmZvcm0tY29udHJvbCcsIFtcbiAgICBTZWxlY3QsXG4gICAgUmFkaW8sXG4gICAgQ2hlY2tib3gsXG4gICAgRGF0ZUNvbnRyb2wsXG4gICAgVXBsb2FkXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3Rm9ybUNvbnRyb2wnLCBGb3JtQ29udHJvbClcbiAgLmNvbXBvbmVudCgndHdEeW5hbWljRm9ybUNvbnRyb2wnLCBGb3JtQ29udHJvbCkgLy8gRGVwcmVjYXRlZFxuICAubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJy4uL2Zvcm0tY29udHJvbCc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IFJlcXVpcmVtZW50c1NlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvcmVxdWlyZW1lbnRzJztcbmltcG9ydCBDb250cm9sVmFsaWRhdGlvbiBmcm9tICcuLi8uLi92YWxpZGF0aW9uL2NvbnRyb2wtdmFsaWRhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5maWVsZCcsIFtcbiAgICBGb3JtQ29udHJvbCxcbiAgICBSZXF1aXJlbWVudHNTZXJ2aWNlLFxuICAgIENvbnRyb2xWYWxpZGF0aW9uXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3RmllbGQnLCBGaWVsZCkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbnRyb2xWYWxpZGF0aW9uIGZyb20gJy4vY29udHJvbC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxndWlkZS52YWxpZGF0aW9uLmNvbnRyb2wnLCBbXG4gICAgRG9tU2VydmljZVxuICBdKVxuICAuZGlyZWN0aXZlKCd0d1ZhbGlkYXRpb24nLCBDb250cm9sVmFsaWRhdGlvbikubmFtZTtcbiIsIi8vIFBvbHlmaWxsIGZvciBJRSA5LCAxMCwgMTEgQ3VzdG9tRXZlbnRzLCBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50L0N1c3RvbUV2ZW50XG4oZnVuY3Rpb24gaW5pdEN1c3RvbUV2ZW50UG9seWZpbGwoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gQ3VzdG9tRXZlbnQoZXZlbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7IGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWQgfTtcbiAgICBldnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50LCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICAgIHJldHVybiBldnQ7XG4gIH1cblxuICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDtcbiAgcmV0dXJuIHRydWU7XG59KCkpO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgTG9jYWxlU2VydmljZSBmcm9tICcuL2xvY2FsZS5zZXJ2aWNlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLnNlcnZpY2VzLmxvY2FsZScsIFtdKVxuICAuc2VydmljZSgnVHdMb2NhbGVTZXJ2aWNlJywgTG9jYWxlU2VydmljZSkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgQXN5bmNUYXNrc0NvbmZpZyBmcm9tICcuL2FzeW5jVGFza3NDb25maWcnO1xuaW1wb3J0IERhdGVTZXJ2aWNlIGZyb20gJy4vZGF0ZSc7XG5pbXBvcnQgQ3VycmVuY3lTZXJ2aWNlIGZyb20gJy4vY3VycmVuY3knO1xuaW1wb3J0IExvY2FsZVNlcnZpY2UgZnJvbSAnLi9sb2NhbGUnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi9kb20nO1xuaW1wb3J0IFJlcXVpcmVtZW50c1NlcnZpY2UgZnJvbSAnLi9yZXF1aXJlbWVudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcycsIFtcbiAgQXN5bmNUYXNrc0NvbmZpZyxcbiAgRGF0ZVNlcnZpY2UsXG4gIEN1cnJlbmN5U2VydmljZSxcbiAgTG9jYWxlU2VydmljZSxcbiAgRG9tU2VydmljZSxcbiAgUmVxdWlyZW1lbnRzU2VydmljZVxuXSkubmFtZTtcbiIsIlxuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jaGVja2JveC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NoZWNrYm94Lmh0bWwnO1xuXG5jb25zdCBDaGVja2JveCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6IHtcbiAgICAkbmdNb2RlbDogJ25nTW9kZWwnXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgbmFtZTogJ0AnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ1RydWVWYWx1ZTogJzwnLFxuICAgIG5nRmFsc2VWYWx1ZTogJzwnLFxuICAgIG5nUmVxdWlyZWQ6ICc8JyxcbiAgICBuZ0Rpc2FibGVkOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tib3g7XG4iLCJcbmNsYXNzIENoZWNrYm94Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRzY29wZSwgJGVsZW1lbnQsIFR3RG9tU2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdGhpcy5kb20gPSBUd0RvbVNlcnZpY2U7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuXG4gICAgdGhpcy5hZGRMYWJlbEhhbmRsZXIoKTtcbiAgICB0aGlzLmFkZFdhdGNoZXJzKCRzY29wZSwgJGVsZW1lbnQsICRuZ01vZGVsKTtcblxuICAgIHRoaXMuY2hlY2tib3hDb250YWluZXIgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAnY2hlY2tib3gnXG4gICAgKTtcblxuICAgIHRoaXMubGFiZWwgPSB0aGlzLmNoZWNrYm94Q29udGFpbmVyXG4gICAgICA/IHRoaXMuY2hlY2tib3hDb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xhYmVsJylbMF1cbiAgICAgIDogZmFsc2U7XG4gIH1cblxuICAkb25Jbml0KCkge1xuICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuaXNDaGVja2VkKCk7XG4gIH1cblxuICBpc0NoZWNrZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLm5nVHJ1ZVZhbHVlICYmIHRoaXMubmdUcnVlVmFsdWUgPT09IHRoaXMubmdNb2RlbClcbiAgICAgIHx8ICghdGhpcy5uZ1RydWVWYWx1ZSAmJiB0aGlzLm5nTW9kZWwpXG4gICAgICB8fCBmYWxzZTtcbiAgfVxuXG4gIGJ1dHRvbkNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY2hlY2tlZCkge1xuICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodGhpcy5uZ0ZhbHNlVmFsdWUgfHwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMubmdUcnVlVmFsdWUgfHwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgLy8gUHJldmVudCBidXR0b24gY2xpY2sgcHJvcGdhdGlvbiBmcm9tIGZpcmluZyBsYWJlbFxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVDaGVja2JveChcbiAgICAgIHRoaXMuY2hlY2tlZCxcbiAgICAgIHRoaXMuJGVsZW1lbnQsXG4gICAgICB0aGlzLiRuZ01vZGVsLFxuICAgICAgdGhpcy5uZ1JlcXVpcmVkLFxuICAgICAgdGhpcy5kb21cbiAgICApO1xuICB9XG5cbiAgYnV0dG9uRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9XG5cbiAgYnV0dG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgdGhpcy5sYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG5cbiAgICB2YWxpZGF0ZUNoZWNrYm94KFxuICAgICAgdGhpcy5jaGVja2VkLFxuICAgICAgdGhpcy4kZWxlbWVudCxcbiAgICAgIHRoaXMuJG5nTW9kZWwsXG4gICAgICB0aGlzLm5nUmVxdWlyZWQsXG4gICAgICB0aGlzLmRvbVxuICAgICk7XG4gIH1cblxuICAvLyBJRSAnY2xpY2tzJyB0aGUgaGlkZGVuIGlucHV0IHdoZW4gbGFiZWwgaXMgY2xpY2tlZFxuICBzdGF0aWMgaGlkZGVuQ2xpY2soJGV2ZW50KSB7XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgYWRkTGFiZWxIYW5kbGVyKCkge1xuICAgIGNvbnN0IGxhYmVsID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZSh0aGlzLmVsZW1lbnQsICdsYWJlbCcpO1xuXG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IGxhYmVsLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIGlmICghaXNEaXNhYmxlZCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpWzBdO1xuICAgICAgICAvLyBUcmlnZ2VyIG91ciBidXR0b24sIHByZXZlbnQgZGVmYXVsdCBsYWJlbCBiZWhhdmlvdXJcbiAgICAgICAgYnV0dG9uLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdjbGljaycpKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZFdhdGNoZXJzKCRzY29wZSwgJGVsZW1lbnQsICRuZ01vZGVsKSB7XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICAgIHZhbGlkYXRlQ2hlY2tib3goXG4gICAgICAgICAgdGhpcy5jaGVja2VkLFxuICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICRuZ01vZGVsLFxuICAgICAgICAgIHRoaXMubmdSZXF1aXJlZCxcbiAgICAgICAgICB0aGlzLmRvbVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdEaXNhYmxlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICAgIGNvbnN0IGNoZWNrYm94ID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGVsZW1lbnQsICdjaGVja2JveCcpO1xuICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlUYWdOYW1lKGVsZW1lbnQsICdsYWJlbCcpO1xuXG4gICAgICBpZiAoIWNoZWNrYm94KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZSAmJiAhb2xkVmFsdWUpIHtcbiAgICAgICAgY2hlY2tib3guY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gY2hlY2tib3guc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSBpZiAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlKSB7XG4gICAgICAgIGNoZWNrYm94LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGNoZWNrYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgbGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdSZXF1aXJlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdmFsaWRhdGVDaGVja2JveChcbiAgICAgICAgICB0aGlzLmNoZWNrZWQsXG4gICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgJG5nTW9kZWwsXG4gICAgICAgICAgdGhpcy5uZ1JlcXVpcmVkLFxuICAgICAgICAgIHRoaXMuZG9tXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDaGVja2JveChpc0NoZWNrZWQsICRlbGVtZW50LCAkbmdNb2RlbCwgaXNSZXF1aXJlZCwgZG9tKSB7XG4gIGlmICghJG5nTW9kZWwuJHRvdWNoZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBjb25zdCBidXR0b24gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LWNoZWNrYm94LWJ1dHRvbicpWzBdO1xuICBjb25zdCBjaGVja2JveExhYmVsID0gZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnY2hlY2tib3gnKTtcbiAgY29uc3QgZm9ybUdyb3VwID0gZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuXG4gIGlmICghaXNDaGVja2VkICYmIGlzUmVxdWlyZWQpIHtcbiAgICAkbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICBpZiAoY2hlY2tib3hMYWJlbCkge1xuICAgICAgY2hlY2tib3hMYWJlbC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICB9XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAkbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIGlmIChjaGVja2JveExhYmVsKSB7XG4gICAgICBjaGVja2JveExhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgICBpZiAoZm9ybUdyb3VwKSB7XG4gICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWVycm9yJyk7XG4gICAgfVxuICB9XG59XG5cbkNoZWNrYm94Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnVHdEb21TZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94Q29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8aW5wdXQgdHlwZT1oaWRkZW4gY2xhc3M9c3Itb25seSBuYW1lPXt7JGN0cmwubmFtZX19IG5nLW1vZGVsPSRjdHJsLm5nTW9kZWwgbmctY2xpY2s9JGN0cmwuaGlkZGVuQ2xpY2soJGV2ZW50KSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIC8+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9dHctY2hlY2tib3gtYnV0dG9uIHR3LWZvY3VzYWJsZSBuZy1jbGljaz0kY3RybC5idXR0b25DbGljaygkZXZlbnQpIG5nLWZvY3VzPSRjdHJsLmJ1dHRvbkZvY3VzKCkgbmctYmx1cj0kY3RybC5idXR0b25CbHVyKCkgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jbGFzcz1cXFwieydjaGVja2VkJzogJGN0cmwuY2hlY2tlZH1cXFwiIGFyaWEtcHJlc3NlZD17eyRjdHJsLmNoZWNrZWR9fT4gPHNwYW4gY2xhc3M9XFxcInR3LWNoZWNrYm94LWNoZWNrIGdseXBoaWNvbiBnbHlwaGljb24tb2tcXFwiPjwvc3Bhbj4gPC9idXR0b24+IFwiOyIsImZ1bmN0aW9uIERvbVNlcnZpY2UoKSB7XG4gIHRoaXMuZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZSA9IChlbGVtZW50LCB0YWdOYW1lKSA9PiB7XG4gICAgY29uc3QgdGFnTmFtZVVwcGVyID0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50O1xuXG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICBpZiAocGFyZW50ICYmIHBhcmVudC50YWdOYW1lICYmIHBhcmVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHRhZ05hbWVVcHBlcikge1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZSA9IChlbGVtZW50LCBjbGFzc05hbWUpID0+IHtcbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudDtcblxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuY2xhc3NMaXN0ICYmIHBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldFByZXZpb3VzU2libGluZ1dpdGhDbGFzc05hbWUgPSAoZWxlbWVudCwgY2xhc3NOYW1lKSA9PiB7XG4gICAgbGV0IHNpYmxpbmcgPSBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG5cbiAgICB3aGlsZSAoc2libGluZykge1xuICAgICAgaWYgKHNpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHNpYmxpbmc7XG4gICAgICB9XG4gICAgICBzaWJsaW5nID0gc2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldE5leHRTaWJsaW5nV2l0aENsYXNzTmFtZSA9IChlbGVtZW50LCBjbGFzc05hbWUpID0+IHtcbiAgICBsZXQgc2libGluZyA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICAgIGlmIChzaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nO1xuICAgICAgfVxuICAgICAgc2libGluZyA9IHNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRG9tU2VydmljZTtcbiIsImltcG9ydCBGb2N1c2FibGVDb250cm9sbGVyIGZyb20gJy4vZm9jdXNhYmxlLmNvbnRyb2xsZXIuanMnO1xuXG5mdW5jdGlvbiBGb2N1c2FibGUoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiBGb2N1c2FibGVDb250cm9sbGVyXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvY3VzYWJsZTtcbiIsIi8vIFRoaXMgZGlyZWN0aXZlIHByb3ZpZGUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8vIEl0IHNob3VsZCBubyBsb25nZXIgYmUgbmVjZXNzYXJ5IHdoZW4gYnJvd3NlcnMgc3VwcG9ydCA6Zm9jdXMtd2l0aGluXG5pbXBvcnQgRm9jdXNhYmxlQ29udHJvbGxlciBmcm9tICcuL2ZvY3VzYWJsZS5jb250cm9sbGVyLmpzJztcblxuZnVuY3Rpb24gRm9ybUNvbnRyb2xGb2N1cygpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0MnLFxuICAgIGNvbnRyb2xsZXI6IEZvY3VzYWJsZUNvbnRyb2xsZXJcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xGb2N1cztcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vcmFkaW8uY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9yYWRpby5odG1sJztcblxuY29uc3QgUmFkaW8gPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICByZXF1aXJlOiB7XG4gICAgJG5nTW9kZWw6ICduZ01vZGVsJ1xuICB9LFxuICBiaW5kaW5nczoge1xuICAgIG5hbWU6ICdAJyxcbiAgICB2YWx1ZTogJ0AnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ1ZhbHVlOiAnPCcsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBuZ0NoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlvO1xuIiwiXG5jbGFzcyBSYWRpb0NvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCAkbmdNb2RlbCA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcblxuICAgIHRoaXMuZG9tID0gVHdEb21TZXJ2aWNlO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpO1xuICAgIHRoaXMubGFiZWwgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlUYWdOYW1lKHRoaXMuZWxlbWVudCwgJ2xhYmVsJyk7XG5cbiAgICAkZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkV2F0Y2hlcnMoJHNjb3BlLCB0aGlzLmVsZW1lbnQpO1xuICB9XG5cbiAgaXNDaGVja2VkKCkge1xuICAgIHJldHVybiAodGhpcy5uZ1ZhbHVlICYmIHRoaXMubmdNb2RlbCA9PT0gdGhpcy5uZ1ZhbHVlKVxuICAgICAgfHwgdGhpcy52YWx1ZSA9PT0gdGhpcy5uZ01vZGVsO1xuICB9XG5cbiAgYnV0dG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMubmdWYWx1ZSB8fCB0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIGJ1dHRvbkZvY3VzKCkge1xuICAgIGlmICh0aGlzLmxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH1cblxuICBidXR0b25CbHVyKCkge1xuICAgIGlmICh0aGlzLmxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzJyk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgfVxuXG4gIGhpZGRlbklucHV0Q2hhbmdlKCkge1xuICAgIC8vIFRoaXMgb25seSBmaXJlcyBvbiBsYWJlbCBjbGlja1xuICAgIC8vIFNldHRpbmcgdmlldyB2YWx1ZSB3aWxsIGFsc28gdHJpZ2dlciBvbkNoYW5nZVxuICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSh0aGlzLm5nVmFsdWUgfHwgdGhpcy52YWx1ZSk7XG4gIH1cblxuICBhZGRXYXRjaGVycygkc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ01vZGVsJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLiRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGVja2VkID0gdGhpcy5pc0NoZWNrZWQoKTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nRGlzYWJsZWQnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBjb25zdCByYWRpb0xhYmVsID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGVsZW1lbnQsICdyYWRpbycpO1xuXG4gICAgICBpZiAoIXJhZGlvTGFiZWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1ZhbHVlICYmICFvbGRWYWx1ZSkge1xuICAgICAgICByYWRpb0xhYmVsLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHJhZGlvTGFiZWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICB9IGVsc2UgaWYgKCFuZXdWYWx1ZSAmJiBvbGRWYWx1ZSkge1xuICAgICAgICByYWRpb0xhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHJhZGlvTGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cblJhZGlvQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnVHdEb21TZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlvQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8aW5wdXQgdHlwZT1yYWRpbyBjbGFzcz1zci1vbmx5IG5hbWU9e3skY3RybC5uYW1lfX0gbmctdmFsdWU9XFxcIiRjdHJsLm5nVmFsdWUgfHwgJGN0cmwudmFsdWVcXFwiIG5nLW1vZGVsPSRjdHJsLm5nTW9kZWwgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuaGlkZGVuSW5wdXRDaGFuZ2UoKSB0YWJpbmRleD0tMSAvPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPXR3LXJhZGlvLWJ1dHRvbiB0dy1mb2N1c2FibGUgbmctY2xpY2s9JGN0cmwuYnV0dG9uQ2xpY2soJGV2ZW50KSBuZy1mb2N1cz0kY3RybC5idXR0b25Gb2N1cygpIG5nLWJsdXI9JGN0cmwuYnV0dG9uQmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2xhc3M9XFxcIntjaGVja2VkOiAkY3RybC5jaGVja2VkfVxcXCIgYXJpYS1wcmVzc2VkPXt7JGN0cmwuY2hlY2tlZH19PiA8c3BhbiBjbGFzcz10dy1yYWRpby1jaGVjaz48L3NwYW4+IDwvYnV0dG9uPiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL3NlbGVjdC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3NlbGVjdC5odG1sJztcblxuY29uc3QgU2VsZWN0ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICB0cmFuc2NsdWRlOiB0cnVlLFxuICBiaW5kaW5nczoge1xuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG9wdGlvbnM6ICc8JyxcbiAgICBuYW1lOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICBmaWx0ZXI6ICdAJyxcbiAgICBzaXplOiAnQCcsXG4gICAgZHJvcGRvd25SaWdodDogJ0AnLFxuICAgIGRyb3Bkb3duVXA6ICdAJyxcbiAgICBkcm9wZG93bldpZHRoOiAnQCcsXG4gICAgaW52ZXJzZTogJzwnLFxuICAgIGhpZGVOb3RlOiAnQCcsXG4gICAgaGlkZVNlY29uZGFyeTogJ0AnLFxuICAgIGhpZGVJY29uOiAnQCcsXG4gICAgaGlkZUN1cnJlbmN5OiAnQCcsXG4gICAgaGlkZUNpcmNsZTogJ0AnLFxuICAgIGhpZGVMYWJlbDogJ0AnXG4gIH1cbn07XG5cbi8qXG4vLyBUT0RPIG1heSBiZSBiZXR0ZXIgZm9yIGFjY2Vzc2liaWxpdHkgdG8gaGF2ZSBoaWRkZW4gc2VsZWN0P1xuPHNlbGVjdCBuYW1lPSd7eyRjdHJsLm5hbWV9fScgY2xhc3M9J3NyLW9ubHkgdHctc2VsZWN0LWhpZGRlbicgXFxcbiAgbmctbW9kZWw9JyRjdHJsLm5nTW9kZWwnIFxcXG4gIG5nLW9wdGlvbnM9J29wdGlvbi52YWx1ZSBhcyBvcHRpb24ubGFiZWwgZm9yIG9wdGlvbiBpbiAkY3RybC5vcHRpb25zJyBcXFxuICBuZy1kaXNhYmxlZD0nJGN0cmwubmdEaXNhYmxlZCcgXFxcbiAgbmctcmVxdWlyZWQ9JyRjdHJsLm5nUmVxdWlyZWQnPiBcXFxuPC9zZWxlY3Q+XCJcbiovXG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5jbGFzcyBTZWxlY3RDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsICR0cmFuc2NsdWRlLCAkdGltZW91dCwgJGF0dHJzLCBUd0RvbVNlcnZpY2UsICRzY29wZSkge1xuICAgIHRoaXMuJG5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLiR0cmFuc2NsdWRlID0gJHRyYW5zY2x1ZGU7XG4gICAgdGhpcy5kb20gPSBUd0RvbVNlcnZpY2U7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ01vZGVsJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4gdGhpcy5vbk1vZGVsQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpO1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdidG4nKVswXTtcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuXG4gICAgcHJlU2VsZWN0TW9kZWxWYWx1ZSh0aGlzLiRuZ01vZGVsLCB0aGlzKTtcbiAgICBzZXREZWZhdWx0SWZSZXF1aXJlZCh0aGlzLiRuZ01vZGVsLCB0aGlzLCB0aGlzLiRlbGVtZW50LCB0aGlzLiRhdHRycyk7XG5cbiAgICBhZGRFdmVudEhhbmRsZXJzKHRoaXMsIHRoaXMuJGVsZW1lbnQsIHRoaXMuJG5nTW9kZWwsIHRoaXMub3B0aW9ucywgdGhpcy4kdGltZW91dCk7XG5cbiAgICBjaGVja0ZvclRyYW5zY2x1ZGVkQ29udGVudCh0aGlzLiR0cmFuc2NsdWRlLCB0aGlzKTtcblxuICAgIHRoaXMucmVzcG9uc2l2ZUNsYXNzZXMgPSByZXNwb25zaXZlQ2xhc3NlcztcblxuICAgIHRoaXMub3B0aW9uc1BhZ2VTaXplID0gMzAwO1xuICAgIHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnNQYWdlU2l6ZTsgLy8gSW5pdC5cbiAgICB0aGlzLmhhc01vcmVPcHRpb25zVG9SZXZlYWwgPSBmYWxzZTtcblxuICAgIHRoaXMuZmlsdGVyU3RyaW5nID0gJyc7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMub3B0aW9ucykge1xuICAgICAgdGhpcy5vbk9wdGlvbnNDaGFuZ2UoXG4gICAgICAgIGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWUsXG4gICAgICAgIGNoYW5nZXMub3B0aW9ucy5wcmV2aW91c1ZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG9uTW9kZWxDaGFuZ2UobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgaWYgKG5ld1ZhbHVlID09PSBvbGRWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobmV3VmFsdWUgfHwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbiA9IGZpbmRPcHRpb25Gcm9tVmFsdWUodGhpcy5vcHRpb25zLCBuZXdWYWx1ZSk7XG4gICAgaWYgKG9wdGlvbikge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IG9wdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgb25PcHRpb25zQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgIHByZVNlbGVjdE1vZGVsVmFsdWUodGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gICAgICBzZXREZWZhdWx0SWZSZXF1aXJlZCh0aGlzLiRuZ01vZGVsLCB0aGlzLCB0aGlzLiRlbGVtZW50LCB0aGlzLiRhdHRycyk7XG4gICAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZ2V0RmlsdGVyZWRPcHRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgY2lyY2xlQ2xhc3NlcyhyZXNwb25zaXZlT3B0aW9uKSB7XG4gICAgbGV0IGNsYXNzZXMgPSByZXNwb25zaXZlQ2xhc3NlcyhyZXNwb25zaXZlT3B0aW9uKTtcbiAgICBjb25zdCBzZWNvbmRhcnlDbGFzc2VzID0gcmVzcG9uc2l2ZUNsYXNzZXModGhpcy5oaWRlU2Vjb25kYXJ5KTtcbiAgICAvLyBJZiBzZWNvbmRhcnkgdGV4dCBsaW5lLCBhbmQgaXQgd29uJ3QgYmUgaGlkZGVuIGF0IHNvbWUgcG9pbnQsIHVzZSBsYXJnZXIgY2lyY2xlXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQuc2Vjb25kYXJ5ICYmIHNlY29uZGFyeUNsYXNzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjbGFzc2VzICs9ICcgY2lyY2xlLXNtJztcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3NlcyArPSAnIGNpcmNsZS14cyc7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG5cbiAgYnV0dG9uRm9jdXMoKSB7XG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfVxuXG4gIG9wdGlvbkNsaWNrKG9wdGlvbiwgJGV2ZW50KSB7XG4gICAgaWYgKG9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWxlY3RPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcywgb3B0aW9uKTtcbiAgICB0aGlzLmJ1dHRvbi5mb2N1cygpO1xuICB9XG5cbiAgb3B0aW9uRm9jdXMob3B0aW9uKSB7XG4gICAgc2VsZWN0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMsIG9wdGlvbik7XG4gIH1cblxuICBvcHRpb25LZXlwcmVzcyhldmVudCkge1xuICAgIC8vIElmIHdlJ3JlIGluIHRoZSBmaWx0ZXIgZG9uJ3QgYWxsb3cgbm9ybWFsIGJlaGF2aW91clxuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0dy1zZWxlY3QtZmlsdGVyJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGRlbGV0ZSB0YWtpbmcgdXMgYmFja1xuICAgIGNvbnN0IGNoYXJhY3RlckNvZGUgPSBnZXRDaGFyYWN0ZXJDb2RlRnJvbUtleXByZXNzKGV2ZW50KTtcbiAgICBpZiAoY2hhcmFjdGVyQ29kZSA9PT0gOCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTZWFyY2ggZm9yIG9wdGlvbiBiYXNlZCBvbiBjaGFyYWN0ZXJcbiAgICBjb25zdCBjaGFyYWN0ZXIgPSBnZXRDaGFyYWN0ZXJGcm9tS2V5cHJlc3MoZXZlbnQpO1xuICAgIGNvbnRpbnVlU2VhcmNoQW5kU2VsZWN0TWF0Y2goXG4gICAgICB0aGlzLiRuZ01vZGVsLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIGNoYXJhY3RlclxuICAgICk7XG4gICAgZm9jdXNPbkFjdGl2ZUxpbmsodGhpcy5lbGVtZW50KTtcbiAgfVxuXG4gIHBsYWNlaG9sZGVyQ2xpY2soKSB7XG4gICAgcmVzZXRPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gICAgdGhpcy5idXR0b24uZm9jdXMoKTtcbiAgfVxuXG4gIHBsYWNlaG9sZGVyRm9jdXMoKSB7XG4gICAgcmVzZXRPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gIH1cblxuICBnZXRGaWx0ZXJlZE9wdGlvbnMoKSB7XG4gICAgdGhpcy5oYXNNb3JlT3B0aW9uc1RvUmV2ZWFsID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMgfHwgIXRoaXMub3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJTdHJpbmdMb3dlciA9IHRoaXMuZmlsdGVyU3RyaW5nICYmIGVzY2FwZVJlZ0V4cCh0aGlzLmZpbHRlclN0cmluZy50b0xvd2VyQ2FzZSgpKTtcblxuICAgIGNvbnN0IGVuY291bnRlcmVkTGFiZWxzQW5kVmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vcHRpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBvcHRpb24gPSB0aGlzLm9wdGlvbnNbaV07XG5cbiAgICAgIGlmIChvcHRpb24uaGVhZGVyICYmICFvcHRpb24udmFsdWUgJiYgIW9wdGlvbi5sYWJlbCkge1xuICAgICAgICBmaWx0ZXJlZE9wdGlvbnMucHVzaChvcHRpb24pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBpc0R1cGxpY2F0ZSA9IGZhbHNlO1xuXG4gICAgICBjb25zdCBleGlzdGluZ1ZhbHVlc0ZvckxhYmVsID0gZW5jb3VudGVyZWRMYWJlbHNBbmRWYWx1ZXNbb3B0aW9uLmxhYmVsXTtcbiAgICAgIGNvbnN0IGhhc0V4aXN0aW5nVmFsdWVzID0gYW5ndWxhci5pc0FycmF5KGV4aXN0aW5nVmFsdWVzRm9yTGFiZWwpO1xuXG4gICAgICBpZiAoaGFzRXhpc3RpbmdWYWx1ZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBleGlzdGluZ1ZhbHVlc0ZvckxhYmVsLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKGV4aXN0aW5nVmFsdWVzRm9yTGFiZWxbal0sIG9wdGlvbi52YWx1ZSkpIHtcbiAgICAgICAgICAgIGlzRHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBzaG91bGRBZGRPcHRpb24gPSAhaXNEdXBsaWNhdGVcbiAgICAgICAgJiYgKCFmaWx0ZXJTdHJpbmdMb3dlciAvLyBlbXB0eSBmaWx0ZXJzdHJpbmcgbWVhbnMgcGFzcyBldmVyeXRoaW5nLlxuICAgICAgICAgIHx8IGxhYmVsTWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKVxuICAgICAgICAgIHx8IG5vdGVNYXRjaGVzKG9wdGlvbiwgZmlsdGVyU3RyaW5nTG93ZXIpXG4gICAgICAgICAgfHwgc2Vjb25kYXJ5TWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKVxuICAgICAgICAgIHx8IHNlYXJjaGFibGVNYXRjaGVzKG9wdGlvbiwgZmlsdGVyU3RyaW5nTG93ZXIpKTtcblxuICAgICAgaWYgKHNob3VsZEFkZE9wdGlvbikge1xuICAgICAgICAvLyBUb28gbWFueSBvcHRpb25zPyBEb24ndCBhZGQgYW55bW9yZSwgaW5kaWNhdGUgdGhhdCB0aGVyZSdzIG1vcmUgaW5zdGVhZC5cbiAgICAgICAgaWYgKGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggPj0gdGhpcy5udW1iZXJPZk9wdGlvbnNSZXZlYWxlZCkge1xuICAgICAgICAgIHRoaXMuaGFzTW9yZU9wdGlvbnNUb1JldmVhbCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzRXhpc3RpbmdWYWx1ZXMpIHtcbiAgICAgICAgICBleGlzdGluZ1ZhbHVlc0ZvckxhYmVsLnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmNvdW50ZXJlZExhYmVsc0FuZFZhbHVlc1tvcHRpb24ubGFiZWxdID0gW29wdGlvbi52YWx1ZV07XG4gICAgICAgIH1cblxuICAgICAgICBmaWx0ZXJlZE9wdGlvbnMucHVzaChvcHRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWx0ZXJlZE9wdGlvbnM7XG4gIH1cblxuICBmb2N1c09uRmlsdGVySW5wdXQoKSB7XG4gICAgY29uc3QgZmlsdGVySW5wdXQgPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHctc2VsZWN0LWZpbHRlcicpWzBdO1xuICAgIGlmIChmaWx0ZXJJbnB1dCkge1xuICAgICAgZmlsdGVySW5wdXQuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBmaWx0ZXJDaGFuZ2UoKSB7XG4gICAgdGhpcy5udW1iZXJPZk9wdGlvbnNSZXZlYWxlZCA9IHRoaXMub3B0aW9uc1BhZ2VTaXplOyAvLyBSZXNldC5cbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZ2V0RmlsdGVyZWRPcHRpb25zKCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBmaW5kU2VsZWN0ZWQodGhpcy5maWx0ZXJlZE9wdGlvbnMsIHRoaXMuc2VsZWN0ZWQpO1xuXG4gICAgLy8gQ2hvb3NlIGEgbmV3IHNlbGVjdGVkIHZhbHVlIGlmIHRoZSBvbGQgb25lIHdhcyBoaWRkZW5cbiAgICBpZiAoIXNlbGVjdGVkT3B0aW9uICYmIHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aCkge1xuICAgICAgc2VsZWN0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMsIHRoaXMuZmlsdGVyZWRPcHRpb25zWzBdKTtcbiAgICB9XG4gIH1cblxuICAvLyBLZXlkb3duIGFzIGtleXByZXNzIGRpZCBub3Qgd29yayBpbiBjaHJvbWUvc2FmYXJpXG4gIGZpbHRlcktleWRvd24oZXZlbnQpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJDb2RlID0gZXZlbnQud2hpY2ggfHwgZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZTtcbiAgICBjb25zdCBhY3RpdmVPcHRpb24gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpO1xuICAgIGNvbnN0IGFjdGl2ZUxpbmsgPSBhY3RpdmVPcHRpb24gPyBhY3RpdmVPcHRpb24ucXVlcnlTZWxlY3RvcignYScpIDogZmFsc2U7XG4gICAgY29uc3Qgb3B0aW9uTGlua3MgPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHctc2VsZWN0LW9wdGlvbi1saW5rJyk7XG5cbiAgICBpZiAoY2hhcmFjdGVyQ29kZSA9PT0ga2V5cy5kb3duKSB7XG4gICAgICB0aGlzLm1vdmVEb3duT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBjdXJzb3IganVtcGluZyBhcm91bmQgaW4gaW5wdXRcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlckNvZGUgPT09IGtleXMudXApIHtcbiAgICAgIHRoaXMubW92ZVVwT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBjdXJzb3IganVtcGluZyBpbiBpbnB1dFxuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyQ29kZSA9PT0ga2V5cy5yZXR1cm4pIHtcbiAgICAgIGlmIChhY3RpdmVPcHRpb24pIHtcbiAgICAgICAgYWN0aXZlT3B0aW9uLmNsaWNrKCk7XG4gICAgICAgIHRoaXMuYnV0dG9uLmZvY3VzKCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IGZvcm0gYWN0aW9uIGFzIGlucHV0IGFjdGl2ZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHNlbGVjdE9wdGlvblVzaW5nTGluayhsaW5rKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gdGhpcy5maWx0ZXJlZE9wdGlvbnNbbGluay5nZXRBdHRyaWJ1dGUoJ2luZGV4JyldO1xuICAgIHNlbGVjdE9wdGlvbih0aGlzLiRuZ01vZGVsLCB0aGlzLCBvcHRpb24pO1xuICB9XG5cbiAgbW92ZVVwT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpIHtcbiAgICAvLyBJZiBub25lIGFjdGl2ZSwgc2VsZWN0IGxhc3RcbiAgICBpZiAoIWFjdGl2ZU9wdGlvbiAmJiBvcHRpb25MaW5rcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2VsZWN0T3B0aW9uVXNpbmdMaW5rKG9wdGlvbkxpbmtzW29wdGlvbkxpbmtzLmxlbmd0aCAtIDFdKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhY3RpdmUgb3B0aW9uIG5vdCBmaXJzdCwgbW92ZSB1cFxuICAgIGlmIChhY3RpdmVMaW5rICE9PSBvcHRpb25MaW5rc1swXSkge1xuICAgICAgY29uc3QgcHJldmlvdXNPcHRpb24gPSB0aGlzLmRvbS5nZXRQcmV2aW91c1NpYmxpbmdXaXRoQ2xhc3NOYW1lKFxuICAgICAgICBhY3RpdmVPcHRpb24sXG4gICAgICAgICd0dy1zZWxlY3Qtb3B0aW9uJ1xuICAgICAgKTtcbiAgICAgIGlmIChwcmV2aW91c09wdGlvbikge1xuICAgICAgICBjb25zdCBwcmV2aW91c09wdGlvbkxpbmsgPSBwcmV2aW91c09wdGlvbi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdO1xuICAgICAgICB0aGlzLnNlbGVjdE9wdGlvblVzaW5nTGluayhwcmV2aW91c09wdGlvbkxpbmspO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1vdmVEb3duT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpIHtcbiAgICAvLyBJZiBub25lIGFjdGl2ZSwgc2VsZWN0IGZpcnN0XG4gICAgaWYgKCFhY3RpdmVPcHRpb24gJiYgb3B0aW9uTGlua3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlbGVjdE9wdGlvblVzaW5nTGluayhvcHRpb25MaW5rc1swXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIGFjdGl2ZSBvcHRpb24gbm90IGxhc3QsIG1vdmUgZG93blxuICAgIGlmIChhY3RpdmVMaW5rICE9PSBvcHRpb25MaW5rc1tvcHRpb25MaW5rcy5sZW5ndGggLSAxXSkge1xuICAgICAgY29uc3QgbmV4dE9wdGlvbiA9IHRoaXMuZG9tLmdldE5leHRTaWJsaW5nV2l0aENsYXNzTmFtZShcbiAgICAgICAgYWN0aXZlT3B0aW9uLFxuICAgICAgICAndHctc2VsZWN0LW9wdGlvbidcbiAgICAgICk7XG4gICAgICBpZiAobmV4dE9wdGlvbikge1xuICAgICAgICBjb25zdCBuZXh0T3B0aW9uTGluayA9IG5leHRPcHRpb24uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXTtcbiAgICAgICAgdGhpcy5zZWxlY3RPcHRpb25Vc2luZ0xpbmsobmV4dE9wdGlvbkxpbmspO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIElmIGFjdGl2ZSBpcyBsYXN0IGFuZCBjdXN0b20gYWN0aW9uLCBmb2N1cyBvbiBpdFxuICAgIGNvbnN0IHRyYW5zY2x1ZGVkT3B0aW9uID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC10cmFuc2NsdWRlZCcpO1xuXG4gICAgaWYgKHRyYW5zY2x1ZGVkT3B0aW9uLmxlbmd0aCkge1xuICAgICAgdHJhbnNjbHVkZWRPcHRpb25bMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHNob3VsZFNob3dTZWFyY2goKSB7XG4gICAgLy8gRm9yIGxvbmdlciBsaXN0IGF1dG8tc2hvdyBzZWFyY2guXG4gICAgLy8gV2UgY2hvb3NlIHR3ZWx2ZSBhcyB3ZSBkb24ndCBuZWVkIGl0IGZvciBtb250aCBzZWxlY3RvclxuICAgIHJldHVybiB0aGlzLmZpbHRlciB8fCAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5sZW5ndGggPiAxMik7XG4gIH1cblxuICByZXZlYWxNb3JlT3B0aW9ucygkZXZlbnQpIHtcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5udW1iZXJPZk9wdGlvbnNSZXZlYWxlZCArPSB0aGlzLm9wdGlvbnNQYWdlU2l6ZTtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZ2V0RmlsdGVyZWRPcHRpb25zKCk7IC8vIFJlLWNhbGMgb3B0aW9ucyBiYXNlZCBvbiBsYXJnZXIgbGlzdCBzaXplLlxuICB9XG59XG5cbmZ1bmN0aW9uIGxhYmVsTWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLmxhYmVsICYmIG9wdGlvbi5sYWJlbC50b0xvd2VyQ2FzZSgpLnNlYXJjaChzZWFyY2gpID49IDA7XG59XG5mdW5jdGlvbiBub3RlTWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLm5vdGUgJiYgb3B0aW9uLm5vdGUudG9Mb3dlckNhc2UoKS5zZWFyY2goc2VhcmNoKSA+PSAwO1xufVxuZnVuY3Rpb24gc2Vjb25kYXJ5TWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLnNlY29uZGFyeSAmJiBvcHRpb24uc2Vjb25kYXJ5LnRvTG93ZXJDYXNlKCkuc2VhcmNoKHNlYXJjaCkgPj0gMDtcbn1cbmZ1bmN0aW9uIHNlYXJjaGFibGVNYXRjaGVzKG9wdGlvbiwgc2VhcmNoKSB7XG4gIHJldHVybiBvcHRpb24uc2VhcmNoYWJsZSAmJiBvcHRpb24uc2VhcmNoYWJsZS50b0xvd2VyQ2FzZSgpLnNlYXJjaChzZWFyY2gpID49IDA7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50SGFuZGxlcnMoJGN0cmwsICRlbGVtZW50LCAkbmdNb2RlbCwgb3B0aW9ucywgJHRpbWVvdXQpIHtcbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBjb25zdCBidXR0b24gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0bicpWzBdO1xuICBjb25zdCBidXR0b25Hcm91cCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYnRuLWdyb3VwJylbMF07XG4gIGNvbnN0IGRyb3Bkb3duID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkcm9wZG93bi1tZW51JylbMF07XG5cbiAgY29uc3Qgb25Gb2N1c091dCA9ICgpID0+IHtcbiAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBJZiBidXR0b24gaXNuJ3QgZm9jdXNlZCBhbmQgZHJvcGRvd24gbm90IG9wZW4sIGJsdXJcbiAgICAgIGlmIChidXR0b24gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgJiYgIWJ1dHRvbkdyb3VwLmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpKSB7XG4gICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gICAgICB9XG4gICAgfSwgMTUwKTsgLy8gbmVlZCB0aW1lb3V0IGJlY2F1c2UgdXNpbmcgZHJvcGRvd24uanMsXG4gIH07XG5cbiAgY29uc3Qgb25CdXR0b25DbGljayA9ICgpID0+IHtcbiAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoJGN0cmwuc2hvdWxkU2hvd1NlYXJjaCgpKSB7XG4gICAgICAgIC8vIElmIGZpbHRlciBpbiB1c2UsIGZvY3VzIG9uIHRoYXRcbiAgICAgICAgY29uc3QgZmlsdGVySW5wdXQgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC1maWx0ZXInKVswXTtcbiAgICAgICAgZmlsdGVySW5wdXQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBmb2N1cyBvbiBzZWxlY3RlZCBvcHRpb25cbiAgICAgICAgZm9jdXNPbkFjdGl2ZUxpbmsoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgb25CdXR0b25LZXlwcmVzcyA9IChldmVudCkgPT4ge1xuICAgICRjdHJsLm9wdGlvbktleXByZXNzKGV2ZW50KTtcbiAgfTtcblxuICBjb25zdCBvbkRyb3Bkb3duS2V5cHJlc3MgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKSB7XG4gICAgICAkY3RybC5vcHRpb25LZXlwcmVzcyhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uQ29tcG9uZW50Qmx1ciA9ICgpID0+IHtcbiAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICB9O1xuXG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uQ29tcG9uZW50Qmx1cik7XG4gIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIG9uQnV0dG9uS2V5cHJlc3MpO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1dHRvbkNsaWNrKTtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0Jywgb25Gb2N1c091dCk7XG4gIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0Jywgb25Gb2N1c091dCk7XG4gIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgb25Ecm9wZG93bktleXByZXNzKTtcbn1cblxuZnVuY3Rpb24gZm9jdXNPbkFjdGl2ZUxpbmsoZWxlbWVudCkge1xuICBjb25zdCBhY3RpdmVPcHRpb24gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FjdGl2ZScpWzBdO1xuICBpZiAoYWN0aXZlT3B0aW9uKSB7XG4gICAgYWN0aXZlT3B0aW9uLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uZm9jdXMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ZvclRyYW5zY2x1ZGVkQ29udGVudCgkdHJhbnNjbHVkZSwgJGN0cmwpIHtcbiAgJHRyYW5zY2x1ZGUoKGNsb25lKSA9PiB7XG4gICAgaWYgKGNsb25lLmxlbmd0aCA+IDEgfHwgY2xvbmUudGV4dCgpLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgICRjdHJsLmhhc1RyYW5zY2x1ZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRDaGFyYWN0ZXJDb2RlRnJvbUtleXByZXNzKGV2ZW50KSB7XG4gIHJldHVybiBldmVudC53aGljaCB8fCBldmVudC5jaGFyQ29kZSB8fCBldmVudC5rZXlDb2RlO1xufVxuXG5mdW5jdGlvbiBnZXRDaGFyYWN0ZXJGcm9tS2V5cHJlc3MoZXZlbnQpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyhldmVudCkpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nLCAnXFxcXCQmJyk7XG59XG5cbmZ1bmN0aW9uIHByZVNlbGVjdE1vZGVsVmFsdWUoJG5nTW9kZWwsICRjdHJsKSB7XG4gIGlmIChpc1ZhbGlkTW9kZWwoJGN0cmwubmdNb2RlbCkpIHtcbiAgICBjb25zdCBvcHRpb24gPSBmaW5kT3B0aW9uRnJvbVZhbHVlKCRjdHJsLm9wdGlvbnMsICRjdHJsLm5nTW9kZWwpO1xuICAgIGlmIChvcHRpb24pIHtcbiAgICAgIHNlbGVjdE9wdGlvbigkbmdNb2RlbCwgJGN0cmwsIG9wdGlvbik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRPcHRpb25Gcm9tVmFsdWUob3B0aW9ucywgdmFsdWUpIHtcbiAgbGV0IG9wdGlvbk1hdGNoID0gZmFsc2U7XG4gIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgaWYgKGFuZ3VsYXIuZXF1YWxzKG9wdGlvbi52YWx1ZSwgdmFsdWUpKSB7XG4gICAgICBvcHRpb25NYXRjaCA9IG9wdGlvbjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3B0aW9uTWF0Y2g7XG59XG5cbmZ1bmN0aW9uIHNldERlZmF1bHRJZlJlcXVpcmVkKCRuZ01vZGVsLCAkY3RybCwgJGVsZW1lbnQsICRhdHRycykge1xuICAvLyBJZiByZXF1aXJlZCBhbmQgbW9kZWwgZW1wdHksIHNlbGVjdCBmaXJzdCBvcHRpb24gd2l0aCB2YWx1ZVxuICBpZiAoKCRjdHJsLm5nUmVxdWlyZWQgfHwgJGF0dHJzLnJlcXVpcmVkKSAmJiAhaXNWYWxpZE1vZGVsKCRjdHJsLm5nTW9kZWwpICYmICEkY3RybC5wbGFjZWhvbGRlcikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgJGN0cmwub3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlzVmFsaWRNb2RlbCgkY3RybC5vcHRpb25zW2ldLnZhbHVlKSkge1xuICAgICAgICBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCAkY3RybC5vcHRpb25zW2ldKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNlbGVjdE9wdGlvbigkbmdNb2RlbCwgJGN0cmwsIG9wdGlvbikge1xuICBpZiAob3B0aW9uLmRpc2FibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUob3B0aW9uLnZhbHVlKTtcbiAgLy8gRm9yY2UgY29tbWl0IHNvIHRoYXQgbmctY2hhbmdlIGFsd2F5cyBoYXMgbmV3IHZhbHVlXG4gICRuZ01vZGVsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgJGN0cmwuc2VsZWN0ZWQgPSBvcHRpb247XG59XG5cbmZ1bmN0aW9uIGZpbmRTZWxlY3RlZChvcHRpb25zLCBzZWxlY3RlZCkge1xuICAvLyBUaGVyZSBjYW4gYmUgc2NlbmFyaW9zIHdoZW4gdGhlIGBmaWx0ZXJlZE9wdGlvbnNgIGFyZSBsb2FkZWQgYXN5bmNocm9ub3VzbHlcbiAgLy8gc28gdGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCB3aXRoIGFuIHVuZGVmaW5lZCBhcyBgb3B0aW9uc2AgYXJndW1lbnQsIHNvXG4gIC8vIHdlIHNob3VsZCBjaGVjayBpZiB0aGF0IHBhc3NlZCBhcmd1bWVudCBpcyByZWFsbHkgYW4gYXJyYXkgYmVmb3JlIGNhbGxpbmdcbiAgLy8gYC5mb3JFYWNoYCBvbiBpdFxuICBpZiAoIWFuZ3VsYXIuaXNBcnJheShvcHRpb25zKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBQcmVmZXIgZm9yRWFjaCBvdmVyIGZpbmQgZm9yIGJyb3dzZXIgc3VwcG9ydFxuICBsZXQgc2VsZWN0ZWRPcHRpb247XG4gIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgaWYgKHNlbGVjdGVkICYmIGFuZ3VsYXIuZXF1YWxzKHNlbGVjdGVkLnZhbHVlLCBvcHRpb24udmFsdWUpKSB7XG4gICAgICBzZWxlY3RlZE9wdGlvbiA9IHNlbGVjdGVkO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWxlY3RlZE9wdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVzZXRPcHRpb24oJG5nTW9kZWwsICRjdHJsKSB7XG4gICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUobnVsbCk7XG4gIC8vIEZvcmNlIGNvbW1pdCBzbyB0aGF0IG5nLWNoYW5nZSBhbHdheXMgaGFzIG5ldyB2YWx1ZVxuICAkbmdNb2RlbC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICRjdHJsLnNlbGVjdGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnRpbnVlU2VhcmNoQW5kU2VsZWN0TWF0Y2goJG5nTW9kZWwsICRjdHJsLCBvcHRpb25zLCBsZXR0ZXIpIHtcbiAgbGV0IGZvdW5kID0gc2VhcmNoQW5kU2VsZWN0KCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgJGN0cmwuc2VhcmNoICsgbGV0dGVyKTtcbiAgaWYgKGZvdW5kKSB7XG4gICAgJGN0cmwuc2VhcmNoICs9IGxldHRlcjtcbiAgfSBlbHNlIHtcbiAgICAkY3RybC5zZWFyY2ggPSBsZXR0ZXI7XG4gICAgZm91bmQgPSBzZWFyY2hBbmRTZWxlY3QoJG5nTW9kZWwsICRjdHJsLCBvcHRpb25zLCAkY3RybC5zZWFyY2gpO1xuICB9XG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gc2VhcmNoQW5kU2VsZWN0KCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgdGVybSkge1xuICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgY29uc3Qgc2VhcmNoVGVybSA9IHRlcm0udG9Mb3dlckNhc2UoKTtcblxuICBvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGFpbnNTZWFyY2gob3B0aW9uLmxhYmVsLCBzZWFyY2hUZXJtKVxuICAgICAgfHwgY29udGFpbnNTZWFyY2gob3B0aW9uLm5vdGUsIHNlYXJjaFRlcm0pXG4gICAgICB8fCBjb250YWluc1NlYXJjaChvcHRpb24uc2Vjb25kYXJ5LCBzZWFyY2hUZXJtKVxuICAgICAgfHwgY29udGFpbnNTZWFyY2gob3B0aW9uLnNlYXJjaGFibGUsIHNlYXJjaFRlcm0pKSB7XG4gICAgICBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCBvcHRpb24pO1xuICAgICAgZm91bmQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNTZWFyY2godGVybSwgc2VhcmNoKSB7XG4gIHJldHVybiB0ZXJtICYmIHRlcm0udG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNb2RlbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgfHwgdmFsdWUgPT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXNwb25zaXZlQ2xhc3Nlcyh2YWx1ZSkge1xuICBsZXQgY2xhc3NlcyA9ICcnO1xuICBsZXQgYnJlYWtwb2ludHMgPSBbXTtcbiAgY29uc3QgdmFsaWRCcmVha3BvaW50cyA9IHtcbiAgICB4czogdHJ1ZSxcbiAgICBzbTogdHJ1ZSxcbiAgICBtZDogdHJ1ZSxcbiAgICBsZzogdHJ1ZSxcbiAgICB4bDogdHJ1ZVxuICB9O1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiB2YWx1ZSkge1xuICAgIHJldHVybiAnaGlkZGVuJztcbiAgfVxuXG4gIGlmICh2YWx1ZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtcbiAgICByZXR1cm4gJ2hpZGRlbic7XG4gIH1cblxuICBpZiAodmFsdWUpIHtcbiAgICBicmVha3BvaW50cyA9IHZhbHVlLnNwbGl0KCcsJyk7XG4gIH1cblxuICBicmVha3BvaW50cy5mb3JFYWNoKChicmVha3BvaW50KSA9PiB7XG4gICAgaWYgKHZhbGlkQnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgIGNsYXNzZXMgKz0gYGhpZGRlbi0ke2JyZWFrcG9pbnR9IGA7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuY29uc3Qga2V5cyA9IHtcbiAgdXA6IDM4LFxuICBkb3duOiA0MCxcbiAgcmV0dXJuOiAxM1xufTtcblxuU2VsZWN0Q29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHRyYW5zY2x1ZGUnLFxuICAnJHRpbWVvdXQnLFxuICAnJGF0dHJzJyxcbiAgJ1R3RG9tU2VydmljZScsXG4gICckc2NvcGUnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tYmxvY2sgdHctc2VsZWN0XFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICBkcm9wZG93bjogISRjdHJsLmRyb3Bkb3duVXAsXFxuICAgIGRyb3B1cDogJGN0cmwuZHJvcGRvd25VcFxcbiAgfVxcXCIgYXJpYS1oaWRkZW49ZmFsc2U+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4taW5wdXQgZHJvcGRvd24tdG9nZ2xlXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICdidG4taW5wdXQtaW52ZXJzZSc6ICRjdHJsLmludmVyc2UsXFxuICAgICAgJ2J0bi1hZGRvbic6ICRjdHJsLmludmVyc2UsXFxuICAgICAgJ2J0bi1zbSc6ICRjdHJsLnNpemUgPT09ICdzbScsXFxuICAgICAgJ2J0bi1sZyc6ICRjdHJsLnNpemUgPT09ICdsZydcXG4gICAgfVxcXCIgZGF0YS10b2dnbGU9ZHJvcGRvd24gYXJpYS1leHBhbmRlZD1mYWxzZSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWZvY3VzPSRjdHJsLmJ1dHRvbkZvY3VzKCkgdHctZm9jdXNhYmxlPiA8c3BhbiBjbGFzcz10dy1zZWxlY3Qtc2VsZWN0ZWQgbmctaWY9JGN0cmwuc2VsZWN0ZWQ+IDxzcGFuIGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLWludmVyc2UgcHVsbC14cy1sZWZ0IGNpcmNsZS1zbVxcXCIgbmctaWY9XFxcIiRjdHJsLnNlbGVjdGVkICYmICRjdHJsLnNlbGVjdGVkLmljb24gJiYgJGN0cmwuc2VsZWN0ZWQuc2Vjb25kYXJ5XFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24ge3skY3RybC5zZWxlY3RlZC5pY29ufX1cXFwiPjwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1pbnZlcnNlIHB1bGwteHMtbGVmdFxcXCIgbmctY2xhc3M9JGN0cmwuY2lyY2xlQ2xhc3NlcygkY3RybC5oaWRlQ2lyY2xlKSBuZy1pZj1cXFwiKCRjdHJsLnNlbGVjdGVkLmNpcmNsZVRleHQgfHwgJGN0cmwuc2VsZWN0ZWQuY2lyY2xlSW1hZ2UgfHwgJGN0cmwuc2VsZWN0ZWQuY2lyY2xlSWNvbilcXFwiPiA8c3BhbiBuZy1pZj0kY3RybC5zZWxlY3RlZC5jaXJjbGVUZXh0Pnt7JGN0cmwuc2VsZWN0ZWQuY2lyY2xlVGV4dH19PC9zcGFuPiA8aW1nIGFsdD17eyRjdHJsLnNlbGVjdGVkLmxhYmVsfX0gbmctaWY9JGN0cmwuc2VsZWN0ZWQuY2lyY2xlSW1hZ2Ugc3JjPVxcXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsXFxuICAgICAgICAgICAgaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFFQUFBQUJDQVFBQUFDMUhBd0NBQUFBQzBsRVFWUjQybU5rWUFBQUFBWUFBakNCMEM4QUFBQUFTVVZPUks1Q1lJST1cXFwiIG5nLXNyYz17eyRjdHJsLnNlbGVjdGVkLmNpcmNsZUltYWdlfX0gLz4gPHNwYW4gbmctaWY9JGN0cmwuc2VsZWN0ZWQuY2lyY2xlSWNvbiBjbGFzcz1cXFwiaWNvbiB7eyRjdHJsLnNlbGVjdGVkLmNpcmNsZUljb259fVxcXCI+PC9zcGFuPiA8L3NwYW4+IDxzcGFuIGNsYXNzPXRleHQtZWxsaXBzaXM+IDxzcGFuIGNsYXNzPVxcXCJjdXJyZW5jeS1mbGFnIGN1cnJlbmN5LWZsYWcte3skY3RybC5zZWxlY3RlZC5jdXJyZW5jeSB8IGxvd2VyY2FzZX19XFxcIiBuZy1pZj1cXFwiJGN0cmwuc2VsZWN0ZWQgJiYgJGN0cmwuc2VsZWN0ZWQuY3VycmVuY3lcXFwiIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVDdXJyZW5jeSk+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiB7eyRjdHJsLnNlbGVjdGVkLmljb259fVxcXCIgbmctaWY9XFxcIiRjdHJsLnNlbGVjdGVkICYmICRjdHJsLnNlbGVjdGVkLmljb24gJiYgISRjdHJsLnNlbGVjdGVkLnNlY29uZGFyeVxcXCIgbmctY2xhc3M9JGN0cmwucmVzcG9uc2l2ZUNsYXNzZXMoJGN0cmwuaGlkZUljb24pPjwvc3Bhbj4gPHNwYW4gY2xhc3M9dHctc2VsZWN0LWxhYmVsIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVMYWJlbCk+IHt7JGN0cmwuc2VsZWN0ZWQubGFiZWx9fSA8L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLnNlbGVjdGVkLm5vdGUgbmctY2xhc3M9JGN0cmwucmVzcG9uc2l2ZUNsYXNzZXMoJGN0cmwuaGlkZU5vdGUpIGNsYXNzPVxcXCJ0dy1zZWxlY3Qtbm90ZSBzbWFsbCBtLWwtMVxcXCI+IHt7JGN0cmwuc2VsZWN0ZWQubm90ZX19IDwvc3Bhbj4gPHNwYW4gbmctaWY9JGN0cmwuc2VsZWN0ZWQuc2Vjb25kYXJ5IG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVTZWNvbmRhcnkpIGNsYXNzPVxcXCJ0dy1zZWxlY3Qtc2Vjb25kYXJ5IHNtYWxsIHNlY29uZGFyeSB0ZXh0LWVsbGlwc2lzXFxcIj4ge3skY3RybC5zZWxlY3RlZC5zZWNvbmRhcnl9fSA8L3NwYW4+IDwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1mb3JtLWNvbnRyb2wtcGxhY2Vob2xkZXIgbmctaWY9ISRjdHJsLnNlbGVjdGVkPnt7JGN0cmwucGxhY2Vob2xkZXJ9fTwvc3Bhbj4gPHNwYW4gY2xhc3M9Y2FyZXQ+PC9zcGFuPiA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnUgcm9sZT1tZW51IG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUteHMtcmlnaHQnOiAkY3RybC5kcm9wZG93blJpZ2h0ID09PSAneHMnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LXNtLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ3NtJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1tZC1yaWdodCc6ICRjdHJsLmRyb3Bkb3duUmlnaHQgPT09ICdtZCcsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtbGctcmlnaHQnOiAkY3RybC5kcm9wZG93blJpZ2h0ID09PSAnbGcnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LXhsLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ3hsJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1zbSc6ICRjdHJsLmRyb3Bkb3duV2lkdGggPT09ICdzbScsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtbWQnOiAkY3RybC5kcm9wZG93bldpZHRoID09PSAnbWQnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LWxnJzogJGN0cmwuZHJvcGRvd25XaWR0aCA9PT0gJ2xnJ1xcbiAgICB9XFxcIj4gPGxpIG5nLWlmPSRjdHJsLnNob3VsZFNob3dTZWFyY2goKT4gPGEgaHJlZj1cXFwiXFxcIiBjbGFzcz1cXFwidHctc2VsZWN0LWZpbHRlci1saW5rIHAtYS0wXFxcIiB0YWJpbmRleD0tMSBuZy1mb2N1cz0kY3RybC5mb2N1c09uRmlsdGVySW5wdXQoKT4gPGRpdiBjbGFzcz1pbnB1dC1ncm91cD4gPHNwYW4gY2xhc3M9aW5wdXQtZ3JvdXAtYWRkb24+PHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1zZWFyY2hcXFwiPjwvc3Bhbj4gPC9zcGFuPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdHctc2VsZWN0LWZpbHRlclxcXCIgcGxhY2Vob2xkZXI9e3skY3RybC5maWx0ZXJ9fSBuZy1tb2RlbD0kY3RybC5maWx0ZXJTdHJpbmcgbmctY2hhbmdlPSRjdHJsLmZpbHRlckNoYW5nZSgpIG5nLWtleWRvd249JGN0cmwuZmlsdGVyS2V5ZG93bigkZXZlbnQpIC8+IDwvZGl2PiA8L2E+IDwvbGk+IDxsaSBuZy1jbGFzcz1cXFwie2FjdGl2ZTogISRjdHJsLnNlbGVjdGVkfVxcXCIgbmctaWY9XFxcIiRjdHJsLnBsYWNlaG9sZGVyICYmICEkY3RybC5uZ1JlcXVpcmVkICYmICEkY3RybC5maWx0ZXJcXFwiPiA8YSBocmVmPVxcXCJcXFwiIHRhYmluZGV4PS0xIG5nLWNsaWNrPSRjdHJsLnBsYWNlaG9sZGVyQ2xpY2soKSBuZy1mb2N1cz0kY3RybC5wbGFjZWhvbGRlckZvY3VzKCkgY2xhc3M9dHctc2VsZWN0LXBsYWNlaG9sZGVyIHR3LWZvY3VzYWJsZT4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvYT4gPC9saT4gPGxpIG5nLWlmPVxcXCIoJGN0cmwucGxhY2Vob2xkZXIgJiYgISRjdHJsLm5nUmVxdWlyZWQpIHx8ICRjdHJsLmZpbHRlclxcXCIgY2xhc3M9ZGl2aWRlcj48L2xpPiA8bGkgbmctcmVwZWF0PVxcXCJvcHRpb24gaW4gJGN0cmwuZmlsdGVyZWRPcHRpb25zXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICAgJ2FjdGl2ZSc6ICRjdHJsLm5nTW9kZWwgPT09IG9wdGlvbi52YWx1ZSxcXG4gICAgICAgICdkaXNhYmxlZCc6IG9wdGlvbi5kaXNhYmxlZCxcXG4gICAgICAgICdkcm9wZG93bi1oZWFkZXInOiBvcHRpb24uaGVhZGVyLFxcbiAgICAgICAgJ3R3LXNlbGVjdC1vcHRpb24nOiAhb3B0aW9uLmhlYWRlciAmJiAhb3B0aW9uLmRpc2FibGVkXFxuICAgICAgfVxcXCI+IDxzcGFuIG5nLWlmPW9wdGlvbi5oZWFkZXIgY2xhc3M9dGV4dC1lbGxpcHNpcyBuZy1jbGljaz0kZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk+e3tvcHRpb24uaGVhZGVyfX08L3NwYW4+IDxhIGhyZWY9XFxcIlxcXCIgbmctaWY9IW9wdGlvbi5oZWFkZXIgbmctY2xpY2s9XFxcIiRjdHJsLm9wdGlvbkNsaWNrKG9wdGlvbiwgJGV2ZW50KVxcXCIgbmctZm9jdXM9JGN0cmwub3B0aW9uRm9jdXMob3B0aW9uKSBuZy1jbGFzcz1cXFwieyd0dy1zZWxlY3Qtb3B0aW9uLWxpbmsnOiAhb3B0aW9uLmRpc2FibGVkfVxcXCIgaW5kZXg9e3skaW5kZXh9fSB0YWJpbmRleD0tMSB0dy1mb2N1c2FibGU+IDxkaXYgbmctaWY9XFxcIm9wdGlvbi5pY29uICYmIG9wdGlvbi5zZWNvbmRhcnlcXFwiIGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLWludmVyc2UgcHVsbC14cy1sZWZ0IGNpcmNsZS1zbVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIHt7b3B0aW9uLmljb259fVxcXCI+PC9zcGFuPiA8L2Rpdj4gPHNwYW4gbmctaWY9XFxcIm9wdGlvbi5pY29uICYmICFvcHRpb24uc2Vjb25kYXJ5XFxcIiBjbGFzcz1cXFwiaWNvbiB7e29wdGlvbi5pY29ufX0gcHVsbC14cy1sZWZ0XFxcIj4gPC9zcGFuPiA8c3BhbiBuZy1pZj1vcHRpb24uY3VycmVuY3kgY2xhc3M9XFxcImN1cnJlbmN5LWZsYWcgY3VycmVuY3ktZmxhZy17e29wdGlvbi5jdXJyZW5jeSB8IGxvd2VyY2FzZX19IHB1bGwteHMtbGVmdFxcXCI+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImNpcmNsZSBjaXJjbGUtaW52ZXJzZSBwdWxsLXhzLWxlZnRcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgICAgICAgJ2NpcmNsZS1zbSc6IG9wdGlvbi5zZWNvbmRhcnksXFxuICAgICAgICAgICAgJ2NpcmNsZS14cyc6ICFvcHRpb24uc2Vjb25kYXJ5XFxuICAgICAgICAgIH1cXFwiIG5nLWlmPVxcXCJvcHRpb24uY2lyY2xlVGV4dCB8fCBvcHRpb24uY2lyY2xlSW1hZ2UgfHwgb3B0aW9uLmNpcmNsZUljb25cXFwiPiA8c3BhbiBjbGFzcz10dy1zZWxlY3QtY2lyY2xlLXRleHQgbmctaWY9b3B0aW9uLmNpcmNsZVRleHQ+e3tvcHRpb24uY2lyY2xlVGV4dH19PC9zcGFuPiA8aW1nIGFsdD17e29wdGlvbi5sYWJlbH19IG5nLWlmPW9wdGlvbi5jaXJjbGVJbWFnZSBzcmM9XFxcImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxcXG4gICAgICAgICAgICAgIGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBRUFBQUFCQ0FRQUFBQzFIQXdDQUFBQUMwbEVRVlI0Mm1Oa1lBQUFBQVlBQWpDQjBDOEFBQUFBU1VWT1JLNUNZSUk9XFxcIiBuZy1zcmM9e3tvcHRpb24uY2lyY2xlSW1hZ2V9fSAvPiA8c3BhbiBuZy1pZj1vcHRpb24uY2lyY2xlSWNvbiBjbGFzcz1cXFwiaWNvbiB7e29wdGlvbi5jaXJjbGVJY29ufX1cXFwiPjwvc3Bhbj4gPC9zcGFuPnt7b3B0aW9uLmxhYmVsfX08c3BhbiBuZy1pZj1vcHRpb24ubm90ZSBjbGFzcz1cXFwidHctc2VsZWN0LW5vdGUgc21hbGwgbS1sLTFcXFwiPnt7b3B0aW9uLm5vdGV9fTwvc3Bhbj48c3BhbiBuZy1pZj1vcHRpb24uc2Vjb25kYXJ5IGNsYXNzPVxcXCJ0dy1zZWxlY3Qtc2Vjb25kYXJ5IHNtYWxsIHRleHQtZWxsaXBzaXNcXFwiPnt7b3B0aW9uLnNlY29uZGFyeX19PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBuZy1pZj0kY3RybC5oYXNNb3JlT3B0aW9uc1RvUmV2ZWFsPiA8YSBocmVmPVxcXCJcXFwiIG5nLWNsaWNrPSRjdHJsLnJldmVhbE1vcmVPcHRpb25zKCRldmVudCkgY2xhc3M9dHctc2VsZWN0LWxvYWQtbW9yZSB0YWJpbmRleD0tMSB0dy1mb2N1c2FibGU+IC4uLiA8L2E+IDwvbGk+IDxsaSBuZy1pZj0kY3RybC5oYXNUcmFuc2NsdWRlZCBjbGFzcz1kaXZpZGVyPjwvbGk+IDxsaSBuZy10cmFuc2NsdWRlIG5nLWlmPSRjdHJsLmhhc1RyYW5zY2x1ZGVkIGNsYXNzPXR3LXNlbGVjdC10cmFuc2NsdWRlZD48L2xpPiA8L3VsPiA8L2Rpdj4gPGlucHV0IHR5cGU9aGlkZGVuIGNsYXNzPXR3LXNlbGVjdC1oaWRkZW4gbmFtZT17eyRjdHJsLm5hbWV9fSB2YWx1ZT17eyRjdHJsLm5nTW9kZWx9fSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIC8+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vdXBsb2FkLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdXBsb2FkLmh0bWwnO1xuaW1wb3J0ICcuL3VwbG9hZC5sZXNzJztcblxuY29uc3QgVXBsb2FkID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgbmdNb2RlbDogJz0nLFxuICAgIG5nQ2hhbmdlOiAnJicsXG4gICAgbmFtZTogJ0AnLFxuICAgIGljb246ICdAJywgLy8gaWxsdXN0cmF0aW9uIGluIGljb24gc2hvd24gaW4gdXBsb2FkIGJveFxuICAgIGhlbHBJbWFnZTogJ0AnLCAvLyBpbGx1c3RyYXRpb24gaW4gaW1hZ2Ugc2hvd2luIGluIHVwbG9hZCBib3gsIGlmIHNwZWNpZmllZCwgcmVwbGFjZXMgaWNvblxuICAgIGxhYmVsOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcblxuICAgIGJ1dHRvblRleHQ6ICdAJywgLy8gQnV0dG9uIHRleHQgc2hvd24gaW4gZGVmYXVsdCBzdGF0ZVxuICAgIGNhbmNlbFRleHQ6ICdAJywgLy8gVGV4dCBpbnN0cnVjdGluZyB0byBnbyBiYWNrIHRvIHJlLXVwbG9hZCBhZnRlciB1cGxvYWQgaXMgZG9uZVxuICAgIGRyb3BwaW5nVGV4dDogJ0AnLCAvLyBUZXh0IHNob3duIHdoZW4gaG92ZXJpbmcgd2l0aCBhIGZpbGVcblxuICAgIHByb2Nlc3NpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hpbGUgcHJvY2Vzc2luZy91cGxvYWRpbmdcbiAgICBzdWNjZXNzVGV4dDogJ0AnLCAvLyBUZXh0IGFmdGVyIHVwbG9hZCBpcyBzdWNjZXNzZnVsLCBzaG93biBxdWl0ZSBicmllZmx5IGJlZm9yZSBwcmV2aWV3XG4gICAgZmFpbHVyZVRleHQ6ICdAJyxcblxuICAgIHRvb0xhcmdlTWVzc2FnZTogJ0AnLFxuICAgIC8vIHdyb25nVHlwZU1lc3NhZ2U6ICdAJyxcblxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuXG4gICAgc2l6ZTogJ0AnLFxuICAgIGFjY2VwdDogJ0AnLFxuICAgIGh0dHBPcHRpb25zOiAnPCcsXG5cbiAgICBvblN0YXJ0OiAnPScsXG4gICAgb25TdWNjZXNzOiAnPScsXG4gICAgb25GYWlsdXJlOiAnPScsXG4gICAgb25DYW5jZWw6ICc9JyxcblxuICAgIG1heFNpemU6ICc8JywgLy8gVE9ETyBtb3ZlIHRvIG5nTWF4P1xuXG4gICAgLy8gQ2FtZXJhIGNhcHR1cmUgdXBsb2FkIG9wdGlvbnNcblxuICAgIC8qIFNvdXJjZSBvZiBmaWxlIHRvIHVwbG9hZFxuICAgICAqIFBvc3NpYmxlIHZhbHVlc1xuICAgICAqIENBTUVSQV9PTkxZIChhbGxvdyBvbmx5IGNhbWVyYSB1cGxvYWQpXG4gICAgICogRklMRV9PTkxZIChhbGxvdyBvbmx5IHVwbG9hZCBmcm9tIGZpbGUgc3lzdGVtKVxuICAgICAqIEFOWSAod2UgZG9udCBjYXJlKVxuICAgICAqL1xuICAgIHNvdXJjZTogJzwnLFxuICAgIGNhbWVyYU92ZXJsYXk6ICdAJywgLy8gT3B0aW9uYWxcbiAgICBjYW1lcmFEaXJlY3Rpb246ICdAJywgLy8gZW52aXJvbm1lbnQvdXNlclxuXG4gICAgZGVzY3JpcHRpb246ICdAJywgLy8gREVQUkVDQVRFRCBmb3IgbGFiZWxcbiAgICBpbnN0cnVjdGlvbnM6ICdAJywgLy8gREVQUkVDQVRFRCBmb3IgcGxhY2Vob2xkZXJcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkO1xuIiwiY2xhc3MgVXBsb2FkQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICRlbGVtZW50LFxuICAgICRzY29wZSxcbiAgICAkYXR0cnMsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy5GaWxlVmFsaWRhdGlvblNlcnZpY2UgPSBGaWxlVmFsaWRhdGlvblNlcnZpY2U7XG5cbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc291cmNlKSB7XG4gICAgICB0aGlzLmlzTGl2ZUNhbWVyYVVwbG9hZCA9IGNoYW5nZXMuc291cmNlLmN1cnJlbnRWYWx1ZSA9PT0gJ0NBTUVSQV9PTkxZJztcbiAgICB9XG4gIH1cblxuICBvbkZpbGVDYXB0dXJlKGZpbGUpIHtcbiAgICBpZiAodGhpcy5uZ0Rpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXRyaWV2ZSBmaWxlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5maWxlID0gZmlsZTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc0RvbmUgPSBmYWxzZTtcblxuICAgIHRoaXMuY2xlYXJIdG1sSW5wdXQoKTtcbiAgICB0aGlzLnNldE5nTW9kZWwobnVsbCk7XG5cbiAgICBpZiAodGhpcy5vbkNhbmNlbCkge1xuICAgICAgdGhpcy5vbkNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFySHRtbElucHV0KCkge1xuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICBpbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzZXROZ01vZGVsKHZhbHVlKSB7XG4gICAgLy8gSWYgbmdNb2RlbCBub3QgYXNzaWduYWJsZSwgd2UgZG9uJ3Qgd2FudCB0byBlcnJvci5cbiAgICBpZiAodHlwZW9mIHRoaXMuJGF0dHJzLm5nTW9kZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCAkbmdNb2RlbCA9IHRoaXMuJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgICAgaWYgKCEkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGlzRHJvcEVsaWdpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZSAhPT0gJ0NBTUVSQV9PTkxZJztcbiAgfVxuXG4gIG9uRHJhZ0VudGVyKCkge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSB0aGlzLmlzRHJvcEVsaWdpYmxlKCk7XG4gIH1cblxuICBvbkRyYWdMZWF2ZSgpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gIH1cblxuICBvbkRyb3AoZmlsZXMpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKGZpbGVzWzBdKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc1N0YXJ0KGZpbGUpIHtcbiAgICB0aGlzLmlzRG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLm9uU3RhcnQpIHtcbiAgICAgIHRoaXMub25TdGFydCh7IGZpbGUgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Qcm9jZXNzU3VjY2VzcyhmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UpIHtcbiAgICB0aGlzLmlzRG9uZSA9IHRydWU7XG4gICAgdGhpcy5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmRhdGFVcmwgPSBkYXRhVXJsO1xuICAgIHRoaXMuaXNJbWFnZSA9IHRoaXMuRmlsZVZhbGlkYXRpb25TZXJ2aWNlLmlzSW1hZ2UoZmlsZSk7XG5cbiAgICBpZiAodGhpcy5odHRwT3B0aW9ucyAmJiBpZCkge1xuICAgICAgdGhpcy5zZXROZ01vZGVsKGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXROZ01vZGVsKGRhdGFVcmwpO1xuICAgIH1cblxuICAgIHRoaXMub25TdWNjZXNzKGZpbGUsIHJlc3BvbnNlKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc0ZhaWx1cmUoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5vbkZhaWx1cmUpIHtcbiAgICAgIHRoaXMub25GYWlsdXJlKHsgZXJyb3IgfSk7XG4gICAgfVxuICB9XG59XG5cblVwbG9hZENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckYXR0cnMnLFxuICAnRmlsZVZhbGlkYXRpb25TZXJ2aWNlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZSB0dy1kcmFnLWVudGVyPSRjdHJsLm9uRHJhZ0VudGVyKCkgdHctZHJhZy1sZWF2ZT0kY3RybC5vbkRyYWdMZWF2ZSgpIHR3LWRyb3A9JGN0cmwub25Ecm9wKGZpbGVzKSBuZy1jbGFzcz1cXFwie1xcbiAgICAnZHJvcHBhYmxlLXNtJzogJGN0cmwuc2l6ZSA9PT0nc20nLFxcbiAgICAnZHJvcHBhYmxlLW1kJzogJGN0cmwuc2l6ZSA9PT0nbWQnIHx8ICEkY3RybC5zaXplLFxcbiAgICAnZHJvcHBhYmxlLWxnJzogJGN0cmwuc2l6ZSA9PT0nbGcnLFxcbiAgICAnZHJvcHBhYmxlLWRyb3BwaW5nJzogJGN0cmwuaXNEcm9wcGFibGUgJiYgISRjdHJsLm5nRGlzYWJsZWQsXFxuICAgICdkcm9wcGFibGUtcHJvY2Vzc2luZyc6ICEkY3RybC5pc0RvbmUgJiYgKCRjdHJsLmlzUHJvY2Vzc2luZyB8fCAkY3RybC5pc1N1Y2Nlc3MpLFxcbiAgICAnZHJvcHBhYmxlLWNvbXBsZXRlJzogJGN0cmwuaXNEb25lXFxuICB9XFxcIj4gPGRpdiBjbGFzcz1kcm9wcGFibGUtZGVmYXVsdC1jYXJkIGFyaWEtaGlkZGVuPVxcXCJ7eyRjdHJsLmlzRG9uZSB8fCAkY3RybC5pc1Byb2Nlc3Npbmd9fVxcXCI+IDx0dy11cGxvYWQtY2FwdHVyZSBsYWJlbD0kY3RybC5sYWJlbCBpY29uPSRjdHJsLmljb24gYWNjZXB0PSRjdHJsLmFjY2VwdCBpbnB1dC1maWxlPSRjdHJsLmlucHV0RmlsZSBoZWxwLWltYWdlPSRjdHJsLmhlbHBJbWFnZSBidXR0b24tdGV4dD0kY3RybC5idXR0b25UZXh0IG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgcGxhY2Vob2xkZXI9XFxcIiRjdHJsLnBsYWNlaG9sZGVyIHx8ICRjdHJsLmRlc2NyaXB0aW9uXFxcIiBpcy1saXZlLWNhbWVyYS11cGxvYWQ9JGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkIGNhbWVyYS1vdmVybGF5PSRjdHJsLmNhbWVyYU92ZXJsYXkgY2FtZXJhLWRpcmVjdGlvbj0kY3RybC5jYW1lcmFEaXJlY3Rpb24gb24tZmlsZS1jYXB0dXJlPSRjdHJsLm9uRmlsZUNhcHR1cmUoZmlsZSk+PC90dy11cGxvYWQtY2FwdHVyZT4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3BwYWJsZS1wcm9jZXNzaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiIGFyaWEtaGlkZGVuPXt7ISRjdHJsLmlzUHJvY2Vzc2luZ319PiA8dHctdXBsb2FkLXByb2Nlc3NpbmcgbmFtZT0kY3RybC5uYW1lIGZpbGU9JGN0cmwuZmlsZSBvbi1zdGFydD0kY3RybC5vblByb2Nlc3NTdGFydChmaWxlKSBvbi1zdWNjZXNzPVxcXCIkY3RybC5vblByb2Nlc3NTdWNjZXNzKGZpbGUsIGRhdGFVcmwsIGlkLCByZXNwb25zZSlcXFwiIG9uLWZhaWx1cmU9JGN0cmwub25Qcm9jZXNzRmFpbHVyZShlcnJvcikgbWF4LXNpemU9JGN0cmwubWF4U2l6ZSBhY2NlcHQ9JGN0cmwuYWNjZXB0IGh0dHAtb3B0aW9ucz0kY3RybC5odHRwT3B0aW9ucyBwcm9jZXNzaW5nLW1lc3NhZ2U9JGN0cmwucHJvY2Vzc2luZ1RleHQgc3VjY2Vzcy1tZXNzYWdlPSRjdHJsLnN1Y2Nlc3NUZXh0IGVycm9yLW1lc3NhZ2U9JGN0cmwuZmFpbHVyZVRleHQgdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXMgdG9vLWxhcmdlLW1lc3NhZ2U9JGN0cmwudG9vTGFyZ2VNZXNzYWdlIGNhbmNlbC10ZXh0PSRjdHJsLmNhbmNlbFRleHQgb24tY2FuY2VsPSRjdHJsLnJlc2V0KCk+PC90dy11cGxvYWQtcHJvY2Vzc2luZz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3BwYWJsZS1jb21wbGV0ZS1jYXJkIGRyb3BwYWJsZS1jYXJkXFxcIiBhcmlhLWhpZGRlbj17eyEkY3RybC5pc0RvbmV9fT4gPHR3LXVwbG9hZC1zdWNjZXNzIGxhYmVsPSRjdHJsLmxhYmVsIGlzLWltYWdlPSRjdHJsLmlzSW1hZ2UgZmlsZT0kY3RybC5maWxlIGRhdGE9JGN0cmwuZGF0YVVybCBzdWNjZXNzLW1lc3NhZ2U9JGN0cmwuc3VjY2Vzc1RleHQgY2FuY2VsLXRleHQ9JGN0cmwuY2FuY2VsVGV4dCBvbi1jYW5jZWw9JGN0cmwucmVzZXQoKT48L3R3LXVwbG9hZC1zdWNjZXNzPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRyb3BwaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiPiA8dHctdXBsb2FkLWRyb3BwaW5nIGRyb3BwaW5nLXRleHQ9JGN0cmwuZHJvcHBpbmdUZXh0PjwvdHctdXBsb2FkLWRyb3BwaW5nPiA8L2Rpdj4gPC9kaXY+IFwiOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi91cGxvYWQubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdXBsb2FkLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi91cGxvYWQubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiZGl2LnRyYW5zcGFyZW50LWFyZWF7YmFja2dyb3VuZC1jb2xvcjpoc2xhKDAsMCUsOTglLC45KX0uaWNvbi1jaXJjbGUtc2hhZG93e2JhY2tncm91bmQ6I2ZmZjtib3gtc2hhZG93OjAgNHB4IDE2cHggcmdiYSgwLDAsMCwuMDgpO3BhZGRpbmc6MTJweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLXJhZGl1czo5OXB4fS5pY29uLWNpcmNsZS1zaGFkb3cgc3Zne3RvcDo0cHg7cG9zaXRpb246cmVsYXRpdmV9LmlubGluZS1zdmd7dG9wOi4zNWVtO3Bvc2l0aW9uOnJlbGF0aXZlfUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXtwLmZpcnN0LWVycm9ye21pbi1oZWlnaHQ6NzJweH19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjU3NXB4KXsuZW1wdHktcHJvY2Vzc2luZy1saXN0e2hlaWdodDoxMzBweH0ucHJvY2Vzc2luZy1saXN0e21pbi1oZWlnaHQ6MTMwcHh9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDo1NzVweCl7Lm11bHRpLXVwbG9hZHtoZWlnaHQ6Mzc1cHh9Lm11bHRpLXVwbG9hZCAuZW1wdHktc2NyZWVue3BhZGRpbmctdG9wOjQwcHh9LmVtcHR5LXByb2Nlc3NpbmctbGlzdCwucHJvY2Vzc2luZy1saXN0e2hlaWdodDoyOTBweH19LnByb2Nlc3NpbmctbGlzdHtvdmVyZmxvdzphdXRvfS5wcm9jZXNzaW5nLWxpc3QsLnByb2Nlc3NpbmctbGlzdCAucHJvY2Vzc2luZy1pdGVtIC5tZWRpYS1ib2R5LC5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtcmlnaHR7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2UyZTZlOH0ucHJvY2Vzc2luZy1saXN0IC5sYXN0LWl0ZW0gLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtYm9keSwucHJvY2Vzc2luZy1saXN0IC5sYXN0LWl0ZW0gLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtcmlnaHR7Ym9yZGVyLWJvdHRvbTowfS5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlfS5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbSAudmVydGljYWwtY2VudGVye2FsaWduLXNlbGY6Y2VudGVyfS5lbXB0eS1wcm9jZXNzaW5nLWxpc3R7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmVtcHR5LXByb2Nlc3NpbmctbGlzdCAuY2lyY2xle2JhY2tncm91bmQtY29sb3I6I2Q4ZjFmYX0uZW1wdHktcHJvY2Vzc2luZy1saXN0IC5lbXB0eS1zY3JlZW57YWxpZ24tc2VsZjpjZW50ZXJ9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDYXB0dXJlQ2FyZCBmcm9tICcuL2NhcHR1cmUtY2FyZC5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmNhcHR1cmUnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRDYXB0dXJlJywgQ2FwdHVyZUNhcmQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY2FwdHVyZS1jYXJkLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jYXB0dXJlLWNhcmQuY29udHJvbGxlcic7XG5cbmNvbnN0IENhcHR1cmVDYXJkID0ge1xuICB0ZW1wbGF0ZSxcbiAgY29udHJvbGxlcixcbiAgYmluZGluZ3M6IHtcbiAgICBsYWJlbDogJzwnLFxuICAgIGljb246ICc8JyxcbiAgICBhY2NlcHQ6ICc8JyxcbiAgICBidXR0b25UZXh0OiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIHBsYWNlaG9sZGVyOiAnPCcsXG4gICAgaW5wdXRGaWxlOiAnPCcsXG4gICAgaGVscEltYWdlOiAnPCcsXG5cbiAgICBpc0xpdmVDYW1lcmFVcGxvYWQ6ICc8JyxcbiAgICBjYW1lcmFPdmVybGF5OiAnPCcsXG4gICAgY2FtZXJhRGlyZWN0aW9uOiAnPCcsXG5cbiAgICBvbkZpbGVDYXB0dXJlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FwdHVyZUNhcmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUtY2FyZC1jb250ZW50PiA8ZGl2IGNsYXNzPW0tYi0yPiA8aW1nIG5nLXNob3c9JGN0cmwuaGVscEltYWdlIG5nLXNyYz17eyRjdHJsLmhlbHBJbWFnZX19IGFsdD17eyRjdHJsLmxhYmVsfX0gY2xhc3M9XFxcInRodW1ibmFpbCB0ZXh0LXhzLWNlbnRlclxcXCIvPiA8c3BhbiBuZy1zaG93PSEkY3RybC5oZWxwSW1hZ2UgY2xhc3M9XFxcImljb24gaWNvbi17eyRjdHJsLnZpZXdJY29ufX0gaWNvbi14eGxcXFwiPjwvc3Bhbj4gPC9kaXY+IDxoNCBjbGFzcz1tLWItMSBuZy1pZj1cXFwiJGN0cmwubGFiZWwgfHwgJGN0cmwuZGVzY3JpcHRpb25cXFwiPiB7eyRjdHJsLmxhYmVsIHx8ICRjdHJsLmRlc2NyaXB0aW9ufX0gPC9oND4gPHAgY2xhc3M9bS1iLTIgbmctaWY9XFxcIiRjdHJsLnBsYWNlaG9sZGVyIHx8ICRjdHJsLmluc3RydWN0aW9uc1xcXCI+IHt7JGN0cmwucGxhY2Vob2xkZXIgfHwgJGN0cmwuaW5zdHJ1Y3Rpb25zfX0gPC9wPiA8dHctdXBsb2FkLWJ1dHRvbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkIG5hbWU9JGN0cmwubmFtZSBsYWJlbD0kY3RybC5idXR0b25UZXh0IGFjY2VwdD0kY3RybC5hY2NlcHQgbW9kZWw9JGN0cmwuaW5wdXRGaWxlIGRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgb24tY2FwdHVyZT0kY3RybC5vbkJ1dHRvbkNhcHR1cmUoZmlsZXMpPiA8L3R3LXVwbG9hZC1idXR0b24+IDx0dy1jYW1lcmEtYnV0dG9uIG5nLWlmPSRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCBsYWJlbD0kY3RybC5idXR0b25UZXh0IGRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgb24tY2xpY2s9JGN0cmwub25DYW1lcmFCdXR0b25DbGljaygpPiA8L3R3LWNhbWVyYS1idXR0b24+IDx0dy1jYW1lcmEtY2FwdHVyZSBuZy1pZj1cXFwiJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkICYmICRjdHJsLnNob3dMaXZlQ2FwdHVyZVNjcmVlblxcXCIgb3ZlcmxheT17eyRjdHJsLmNhbWVyYU92ZXJsYXl9fSBkaXJlY3Rpb249e3skY3RybC5jYW1lcmFEaXJlY3Rpb259fSBvbi1jYW5jZWw9JGN0cmwub25DYW1lcmFDYW5jZWwoKSBvbi1jYXB0dXJlPSRjdHJsLm9uQ2FtZXJhQ2FwdHVyZShmaWxlKT4gPC90dy1jYW1lcmEtY2FwdHVyZT4gPC9kaXY+IFwiOyIsImNsYXNzIENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkZWxlbWVudCkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLnNob3dMaXZlQ2FwdHVyZVNjcmVlbiA9IGZhbHNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuaWNvbikge1xuICAgICAgdGhpcy52aWV3SWNvbiA9IGNoYW5nZXMuaWNvbi5jdXJyZW50VmFsdWUgPyBjaGFuZ2VzLmljb24uY3VycmVudFZhbHVlIDogJ3VwbG9hZCc7XG4gICAgfVxuICB9XG5cbiAgb25DYW1lcmFDYW5jZWwoKSB7XG4gICAgdGhpcy5zaG93TGl2ZUNhcHR1cmVTY3JlZW4gPSBmYWxzZTtcbiAgfVxuXG4gIG9uQ2FtZXJhQ2FwdHVyZShmaWxlKSB7XG4gICAgdGhpcy5zaG93TGl2ZUNhcHR1cmVTY3JlZW4gPSBmYWxzZTtcbiAgICB0aGlzLm9uRmlsZUNhcHR1cmUoeyBmaWxlIH0pO1xuICB9XG5cbiAgb25DYW1lcmFCdXR0b25DbGljaygpIHtcbiAgICB0aGlzLnNob3dMaXZlQ2FwdHVyZVNjcmVlbiA9IHRydWU7XG4gIH1cblxuICBvbkJ1dHRvbkNhcHR1cmUoZmlsZXMpIHtcbiAgICBjb25zdCBmaWxlID0gZmlsZXNbMF07XG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKHsgZmlsZSB9KTtcbiAgfVxufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEcm9wcGluZ0NhcmQgZnJvbSAnLi9kcm9wcGluZy1jYXJkLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuZHJvcHBpbmcnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWREcm9wcGluZycsIERyb3BwaW5nQ2FyZClcbiAgLm5hbWU7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kcm9wcGluZy1jYXJkLmh0bWwnO1xuXG5jb25zdCBEcm9wcGluZ0NhcmQgPSB7XG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIGRyb3BwaW5nVGV4dDogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3BwaW5nQ2FyZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZS1jYXJkLWNvbnRlbnQ+IDxkaXYgY2xhc3M9XFxcImNpcmNsZSBjaXJjbGUtc20gbS1iLTNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWFkZFxcXCI+PC9zcGFuPiA8L2Rpdj4gPGg0PiB7eyAkY3RybC5kcm9wcGluZ1RleHQgfHwgJ0Ryb3AgZmlsZSB0byBzdGFydCB1cGxvYWQnIH19IDwvaDQ+IDxwIGNsYXNzPVxcXCJtLXQtMiBtLWItMFxcXCI+PC9wPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuaHRtbCc7XG5pbXBvcnQgYmluZGluZ3MgZnJvbSAnLi9wcm9jZXNzaW5nLmJpbmRpbmdzJztcblxuY29uc3QgUHJvY2Vzc2luZ0NhcmQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc2luZ0NhcmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUtY2FyZC1jb250ZW50PiA8ZGl2IGNsYXNzPW0tYi0yPiA8dHctcHJvY2VzcyBzaXplPXNtIHN0YXRlPSRjdHJsLnByb2Nlc3NpbmdTdGF0ZT48L3R3LXByb2Nlc3M+IDwvZGl2PiA8aDQgY2xhc3M9bS1iLTI+IDxzcGFuIG5nLWlmPVxcXCIkY3RybC5pc1Byb2Nlc3NpbmcgJiYgJGN0cmwucHJvY2Vzc2luZ01lc3NhZ2VcXFwiIGNsYXNzPXVwbG9hZC1wcm9jZXNzaW5nLW1lc3NhZ2U+IHt7JGN0cmwucHJvY2Vzc2luZ01lc3NhZ2V9fSA8L3NwYW4+IDxzcGFuIG5nLWlmPVxcXCIkY3RybC5pc0Vycm9yICYmICRjdHJsLmVycm9yTWVzc2FnZVxcXCIgY2xhc3M9dXBsb2FkLWZhaWx1cmUtbWVzc2FnZT4ge3skY3RybC5lcnJvck1lc3NhZ2V9fSA8L3NwYW4+IDwvaDQ+IDx1bCBuZy1pZj1cXFwiJGN0cmwuaXNFcnJvciAmJiAkY3RybC52YWxpZGF0aW9uTWVzc2FnZXNcXFwiIGNsYXNzPVxcXCJ0ZXh0LXhzLWxlZnQgbS1iLTJcXFwiPiA8bGkgbmctaWY9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzBdPnt7ICRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1swXSB9fTwvbGk+IDxsaSBuZy1pZj0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMV0+e3sgJGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzFdIH19PC9saT4gPGxpIG5nLWlmPSRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1syXT57eyAkY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMl0gfX08L2xpPiA8L3VsPiA8YSBocmVmPVxcXCJcXFwiIG5nLWlmPSRjdHJsLmlzRXJyb3IgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgbmctY2xpY2s9JGN0cmwub25SZW1vdmUoKSByb2xlPWJ1dHRvbj4gPHNwYW4gbmctaWY9JGN0cmwuY2FuY2VsVGV4dCBuZy1iaW5kPSRjdHJsLmNhbmNlbFRleHQ+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwuY2FuY2VsVGV4dCBjbGFzcz1cXFwiaWNvbiBpY29uLXVwbG9hZCBtLXItMFxcXCI+PC9zcGFuPiA8L2E+IDwvZGl2PiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL3Byb2Nlc3NpbmctY2FyZC5jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3Byb2Nlc3NpbmctbWluaS5odG1sJztcbmltcG9ydCBiaW5kaW5ncyBmcm9tICcuL3Byb2Nlc3NpbmcuYmluZGluZ3MnO1xuXG5jb25zdCBQcm9jZXNzaW5nQ2FyZCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9jZXNzaW5nQ2FyZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPXByb2Nlc3NpbmctaXRlbT4gPGRpdiBjbGFzcz1tZWRpYT4gPGRpdiBjbGFzcz1cXFwibWVkaWEtbGVmdCB2ZXJ0aWNhbC1jZW50ZXIgcC1yLTIgcC15LTFcXFwiPiA8dHctcHJvY2VzcyBzaXplPXhzIHN0YXRlPSRjdHJsLnByb2Nlc3NpbmdTdGF0ZT48L3R3LXByb2Nlc3M+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJtZWRpYS1ib2R5IHRleHQteHMtbGVmdCBwLXktMVxcXCIgc3R5bGU9b3ZlcmZsb3c6YXV0bz4gPGRpdj4gPHNtYWxsIGNsYXNzPVxcXCJtLWItMCB0ZXh0LWVsbGlwc2lzIGZpbGUtbmFtZVxcXCI+PHN0cm9uZz57eyAkY3RybC5maWxlLm5hbWUgfX08L3N0cm9uZz48L3NtYWxsPiA8c21hbGwgY2xhc3M9XFxcIm0tYi0wIHRleHQtZWxsaXBzaXMgdGlueVxcXCI+IDxzcGFuIG5nLWlmPSRjdHJsLmlzUHJvY2Vzc2luZz57eyAkY3RybC5wcm9jZXNzaW5nTWVzc2FnZSB9fTwvc3Bhbj4gPHNwYW4gbmctaWY9JGN0cmwuaXNFcnJvcj57eyAkY3RybC5lcnJvck1lc3NhZ2UgfX08L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLmlzU3VjY2Vzcz57eyAkY3RybC5zdWNjZXNzTWVzc2FnZSB9fTwvc3Bhbj4gPC9zbWFsbD4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJtZWRpYS1yaWdodCBwLWwtMiBwLXktMlxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgbmctaWY9ISRjdHJsLmlzUHJvY2Vzc2luZyBjbGFzcz1jbG9zZSBuZy1jbGljaz0kY3RybC5vblJlbW92ZSgpIHJvbGU9YnV0dG9uPiZ0aW1lczs8L2E+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiOyIsIlxuY2xhc3MgQXN5bmNGaWxlUmVhZGVyIHtcbiAgY29uc3RydWN0b3IoJHEpIHtcbiAgICB0aGlzLiRxID0gJHE7XG4gIH1cblxuICByZWFkKGZpbGUpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy4kcS5kZWZlcigpO1xuXG4gICAgLy8gV2hlbiB0aGUgcmVhZGVyIGZpbmlzaGVzIGxvYWRpbmcgcmVzb2x2ZSB0aGUgcHJvbWlzZVxuICAgIHJlYWRlci5vbmxvYWQgPSAoZXZlbnQpID0+IHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoZXZlbnQudGFyZ2V0LnJlc3VsdCk7XG4gICAgfTtcblxuICAgIHJlYWRlci5vbmVycm9yID0gKGV2ZW50KSA9PiB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoZXZlbnQpO1xuICAgIH07XG5cbiAgICAvLyBMb2FkIHRoZSBmaWxlXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxufVxuXG5Bc3luY0ZpbGVSZWFkZXIuJGluamVjdCA9IFsnJHEnXTtcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5maWxlLXJlYWRlcicsIFtdKVxuICAuc2VydmljZSgnQXN5bmNGaWxlUmVhZGVyJywgQXN5bmNGaWxlUmVhZGVyKVxuICAubmFtZTtcbiIsIlxuY2xhc3MgQXN5bmNGaWxlU2F2ZXIge1xuICBjb25zdHJ1Y3RvcigkaHR0cCkge1xuICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcbiAgfVxuXG4gIHNhdmUoZmllbGROYW1lLCBmaWxlLCBodHRwT3B0aW9ucykge1xuICAgIGlmICghaHR0cE9wdGlvbnMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgc3VwcGx5IGh0dHBPcHRpb25zJyk7XG4gICAgfVxuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgY29uc3Qga2V5ID0gaHR0cE9wdGlvbnMucGFyYW0gfHwgZmllbGROYW1lO1xuICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIGZpbGUpO1xuXG4gICAgY29uc3QgJGh0dHBPcHRpb25zID0gcHJlcGFyZUh0dHBPcHRpb25zKGh0dHBPcHRpb25zKTtcblxuICAgIGRlbGV0ZSAkaHR0cE9wdGlvbnMubWV0aG9kO1xuXG4gICAgLy8gRm9yIHRlc3RpbmdcbiAgICByZXR1cm4gdGhpcy4kaHR0cC5wb3N0KCRodHRwT3B0aW9ucy51cmwsIGZvcm1EYXRhLCAkaHR0cE9wdGlvbnMpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gcHJlcGFyZUh0dHBPcHRpb25zKCRpbnB1dE9wdGlvbnMpIHtcbiAgY29uc3QgJGh0dHBPcHRpb25zID0gYW5ndWxhci5jb3B5KCRpbnB1dE9wdGlvbnMpO1xuXG4gIGlmICghJGh0dHBPcHRpb25zLnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91IG11c3Qgc3VwcGx5IGEgVVJMIHRvIHBvc3QgaW1hZ2UgZGF0YSBhc3luY2hyb25vdXNseScpO1xuICB9XG4gIGlmICghJGh0dHBPcHRpb25zLmhlYWRlcnMpIHtcbiAgICAkaHR0cE9wdGlvbnMuaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgLy8gQ29udGVudC1UeXBlID0gdW5kZWZpbmVkIGFsbG93cyB0aGUgYnJvd3NlciB0byBjaG9vc2UgdGhlIHJpZ2h0IHR5cGVcbiAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDE2MDc2NTYvcHVycG9zZS1vZi1jb250ZW50LXR5cGUtdW5kZWZpbmVkLWluLWFuZ3VsYXJqcy1maWxldXBsb2FkXG4gICRodHRwT3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHVuZGVmaW5lZDtcbiAgJGh0dHBPcHRpb25zLnRyYW5zZm9ybVJlcXVlc3QgPSBhbmd1bGFyLmlkZW50aXR5O1xuXG4gIHJldHVybiAkaHR0cE9wdGlvbnM7XG59XG5cbkFzeW5jRmlsZVNhdmVyLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuZmlsZS1zYXZlcicsIFtdKVxuICAuc2VydmljZSgnQXN5bmNGaWxlU2F2ZXInLCBBc3luY0ZpbGVTYXZlcilcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuY2xhc3MgRmlsZVZhbGlkYXRpb25TZXJ2aWNlIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlzSW1hZ2UoZmlsZSkge1xuICAgIHJldHVybiBmaWxlLnR5cGUgJiYgZmlsZS50eXBlLmluZGV4T2YoJ2ltYWdlJykgPiAtMTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpc1NtYWxsZXJUaGFuTWF4U2l6ZShmaWxlLCBtYXhTaXplKSB7XG4gICAgcmV0dXJuICFhbmd1bGFyLmlzTnVtYmVyKG1heFNpemUpIHx8IGZpbGUuc2l6ZSA8PSBtYXhTaXplO1xuICB9XG5cbiAgLypcbiAgLy8gVE9ETyB2YWxpZGF0ZSBmaWxlIHR5cGVcbiAgaXNUeXBlVmFsaWQoZmlsZSwgYWNjZXB0KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gICAgLy8gdGhpcy5pc1dyb25nVHlwZSA9IHRydWU7XG4gIH1cbiAgKi9cbn1cblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC52YWxpZGF0aW9uLXNlcnZpY2UnLCBbXSlcbiAgLnNlcnZpY2UoJ0ZpbGVWYWxpZGF0aW9uU2VydmljZScsIEZpbGVWYWxpZGF0aW9uU2VydmljZSlcbiAgLm5hbWU7XG4iLCJjbGFzcyBBc3luY1Rhc2tzQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5iYXNlVXJsID0gJyc7XG4gICAgdGhpcy5oZWFkZXJzID0ge307XG4gIH1cblxuICBzZXRCYXNlVXJsKGJhc2VVcmwpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB9XG5cbiAgc2V0SGVhZGVyKGhlYWRlciwgdmFsdWUpIHtcbiAgICB0aGlzLmhlYWRlcnNbaGVhZGVyXSA9IHZhbHVlO1xuICB9XG5cbiAgZXh0ZW5kSHR0cE9wdGlvbnMoaW5wdXRPcHRpb25zKSB7XG4gICAgY29uc3QgaHR0cE9wdGlvbnMgPSBhbmd1bGFyLmNvcHkoaW5wdXRPcHRpb25zKTtcbiAgICBodHRwT3B0aW9ucy5oZWFkZXJzID0gaHR0cE9wdGlvbnMuaGVhZGVyc1xuICAgICAgPyB7IC4uLmh0dHBPcHRpb25zLmhlYWRlcnMsIC4uLnRoaXMuaGVhZGVycyB9XG4gICAgICA6IHRoaXMuaGVhZGVycztcbiAgICBpZiAoaHR0cE9wdGlvbnMudXJsKSB7XG4gICAgICBodHRwT3B0aW9ucy51cmwgPSBgJHt0aGlzLmJhc2VVcmx9JHtodHRwT3B0aW9ucy51cmx9YDtcbiAgICB9XG4gICAgcmV0dXJuIGh0dHBPcHRpb25zO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFzeW5jVGFza3NDb25maWc7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL3Byb2Nlc3MuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9wcm9jZXNzLmh0bWwnO1xuXG5jb25zdCBQcm9jZXNzID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBzdGF0ZTogJzwnLCAvLyBudWxsIC0gcHJvY2Vzc2luZywgLTEgLSBmYWlsZWQsIDAgLSBoaWRkZW4sIDEgLSBzdWNjZXNzXG4gICAgc2l6ZTogJ0AnLFxuICAgIG9uU3RvcDogJyYnLFxuICAgIHByb21pc2U6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9jZXNzO1xuIiwiY2xhc3MgUHJvY2Vzc0NvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRpbnRlcnZhbCwgJHRpbWVvdXQpIHtcbiAgICB0aGlzLiRpbnRlcnZhbCA9ICRpbnRlcnZhbDtcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG5cbiAgICB0aGlzLmludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLnByb2Nlc3NpbmcgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc3RhdGUpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLnN0YXRlKSB7XG4gICAgICB0aGlzLm9uU2l6ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gY2FuY2VsIHRoZSBpbnRlcnZhbCB3aGVuIG5vdCBuZWVkZWQuXG4gICAgaWYgKGlzU3RvcHBlZCh0aGlzLnByb2Nlc3NpbmcpKSB7XG4gICAgICB0aGlzLnByb2Nlc3NpbmcgPSBudWxsO1xuICAgICAgdGhpcy5zdGFydFByb2Nlc3MoKTtcbiAgICB9XG4gIH1cblxuICBvblNpemVDaGFuZ2UoKSB7XG4gICAgLy8gS2lsbCB0aGUgaW50ZXJ2YWwgYW5kIHJlc3RhcnQgb24gc2l6ZSBjaGFuZ2UgYXMgYW5pbWF0aW9uIHdpbGwgcmVzdGFydFxuICAgIHRoaXMuc3RvcFByb2Nlc3MoKTtcbiAgICB0aGlzLnN0YXJ0UHJvY2VzcygpO1xuXG4gICAgaWYgKCF0aGlzLnNpemUpIHtcbiAgICAgIHRoaXMuc2l6ZSA9ICdzbSc7XG4gICAgfVxuXG4gICAgLy8gNDYlIGlzIG9rIGZvciBtb3N0IGNhc2VzLCBidXQgd2UgY2FuIG1ha2UgaXQgcGVyZmVjdC5cbiAgICBzd2l0Y2ggKHRoaXMuc2l6ZSkge1xuICAgICAgY2FzZSAneHMnOlxuICAgICAgICB0aGlzLnJhZGl1cyA9ICcxMSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc20nOlxuICAgICAgICB0aGlzLnJhZGl1cyA9ICcyMic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneGwnOlxuICAgICAgICB0aGlzLnJhZGl1cyA9ICc2MSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAnNDYlJztcbiAgICB9XG4gIH1cblxuICBzdGFydFByb2Nlc3MoKSB7XG4gICAgLy8gRG9uJ3Qgc3RhcnQgYSBuZXcgaW50ZXJ2YWwgaWYgb25lIGlzIHJ1bm5pbmdcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlIHdhbnQgdG8gY2hlY2sgZm9yIHN0YXRlIGNoYW5nZSBvbmNlIHBlciBhbmltYXRpb24gY3ljbGUuXG4gICAgdGhpcy5pbnRlcnZhbCA9IHRoaXMuJGludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc2luZyA9IHRoaXMuc3RhdGU7XG4gICAgICBpZiAoaXNTdG9wcGVkKHRoaXMuc3RhdGUpKSB7XG4gICAgICAgIHRoaXMuc3RvcFByb2Nlc3MoKTtcbiAgICAgICAgdGhpcy5ub3RpZnlDb25zdW1lcnMoKTtcbiAgICAgIH1cbiAgICB9LCAxNTAwKTtcbiAgfVxuXG4gIHN0b3BQcm9jZXNzKCkge1xuICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwodGhpcy5pbnRlcnZhbCk7XG4gICAgICB0aGlzLmludGVydmFsID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBub3RpZnlDb25zdW1lcnMoKSB7XG4gICAgaWYgKHRoaXMub25TdG9wKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLm9uU3RvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gMTgwMCBtYXRjaGVzIDEuNXMgZGVsYXkgYW5kIDAuM3MgYW5pbWF0aW9uXG4gICAgICAgIHRoaXMuJHRpbWVvdXQodGhpcy5vblN0b3AsIDE4MDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0b3BwZWQoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlID09PSAtMSB8fCBzdGF0ZSA9PT0gMCB8fCBzdGF0ZSA9PT0gMTtcbn1cblxuUHJvY2Vzc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckdGltZW91dCddO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9jZXNzQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3BhbiBjbGFzcz1wcm9jZXNzIG5nLWNsYXNzPVxcXCJ7XFxuICAgICdwcm9jZXNzLXN1Y2Nlc3MnOiAkY3RybC5wcm9jZXNzaW5nID09PSAxLFxcbiAgICAncHJvY2Vzcy1kYW5nZXInOiAkY3RybC5wcm9jZXNzaW5nID09PSAtMSxcXG4gICAgJ3Byb2Nlc3Mtc3RvcHBlZCc6ICRjdHJsLnByb2Nlc3NpbmcgPT09IDAsXFxuICAgICdwcm9jZXNzLXhzJzogJGN0cmwuc2l6ZSA9PT0gJ3hzJyxcXG4gICAgJ3Byb2Nlc3Mtc20nOiAkY3RybC5zaXplID09PSAnc20nLFxcbiAgICAncHJvY2Vzcy1tZCc6ICRjdHJsLnNpemUgPT09ICdtZCcsXFxuICAgICdwcm9jZXNzLWxnJzogJGN0cmwuc2l6ZSA9PT0gJ2xnJyxcXG4gICAgJ3Byb2Nlc3MteGwnOiAkY3RybC5zaXplID09PSAneGwnXFxuICB9XFxcIj4gPHNwYW4gY2xhc3M9cHJvY2Vzcy1pY29uLWNvbnRhaW5lcj4gPHNwYW4gY2xhc3M9cHJvY2Vzcy1pY29uLWhvcml6b250YWw+PC9zcGFuPiA8c3BhbiBjbGFzcz1wcm9jZXNzLWljb24tdmVydGljYWw+PC9zcGFuPiA8L3NwYW4+IDxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sOnNwYWNlPXByZXNlcnZlPiA8Y2lyY2xlIGNsYXNzPXByb2Nlc3MtY2lyY2xlIGN4PTUwJSBjeT01MCUgbmctYXR0ci1yPXt7JGN0cmwucmFkaXVzfX0gZmlsbC1vcGFjaXR5PTAuMCAvPiA8L3N2Zz4gPC9zcGFuPiBcIjsiLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBTdWNjZXNzQ2FyZCBmcm9tICcuL3N1Y2Nlc3MtY2FyZC5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLnN1Y2Nlc3MnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRTdWNjZXNzJywgU3VjY2Vzc0NhcmQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vc3VjY2Vzcy1jYXJkLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9zdWNjZXNzLWNhcmQuY29udHJvbGxlcic7XG5cbmNvbnN0IFN1Y2Nlc3NDYXJkID0ge1xuICB0ZW1wbGF0ZSxcbiAgY29udHJvbGxlcixcbiAgYmluZGluZ3M6IHtcbiAgICBsYWJlbDogJzwnLFxuICAgIGZpbGU6ICc8JyxcbiAgICBkYXRhOiAnPCcsXG4gICAgaXNJbWFnZTogJzwnLFxuICAgIHN1Y2Nlc3NNZXNzYWdlOiAnPCcsXG4gICAgY2FuY2VsVGV4dDogJzwnLFxuICAgIG9uQ2FuY2VsOiAnJicsXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN1Y2Nlc3NDYXJkO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9ZHJvcHBhYmxlLWNhcmQtY29udGVudD4gPGg0IG5nLWlmPVxcXCIkY3RybC5zdWNjZXNzTWVzc2FnZSB8fCAkY3RybC5sYWJlbFxcXCIgY2xhc3M9XFxcIm0tYi0yIHVwbG9hZC1zdWNjZXNzLW1lc3NhZ2VcXFwiPiB7eyAkY3RybC5zdWNjZXNzTWVzc2FnZSB8fCAkY3RybC5sYWJlbCB9fSA8L2g0PiA8aW1nIG5nLWlmPVxcXCIkY3RybC5pc0ltYWdlICYmICRjdHJsLmRhdGFcXFwiIHNyYz1cXFwiZGF0YTppbWFnZS9wbmc7YmFzZTY0LFxcbiAgICAgIGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBRUFBQUFCQ0FRQUFBQzFIQXdDQUFBQUMwbEVRVlI0Mm1Oa1lBQUFBQVlBQWpDQjBDOEFBQUFBU1VWT1JLNUNZSUk9XFxcIiBuZy1zcmM9XFxcInt7ICRjdHJsLmRhdGEgfX1cXFwiIGFsdD1PSyBjbGFzcz1cXFwidGh1bWJuYWlsIG0tYi0zXFxcIi8+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tcGRmIGljb24teHhsXFxcIiBuZy1pZj1cXFwiISRjdHJsLmlzSW1hZ2UgfHwgISRjdHJsLmRhdGFcXFwiPjwvc3Bhbj4gPHAgY2xhc3M9XFxcIm0tYi0yIHRleHQtZWxsaXBzaXNcXFwiPnt7ICRjdHJsLmZpbGVOYW1lIH19PC9wPiA8cCBjbGFzcz1cXFwibS10LTIgbS1iLTBcXFwiPiA8YSBocmVmPVxcXCJcXFwiIG5nLWNsaWNrPSRjdHJsLm9uQ2FuY2VsKCk+IDxzcGFuIG5nLWlmPSRjdHJsLmNhbmNlbFRleHQgbmctYmluZD0kY3RybC5jYW5jZWxUZXh0Pjwvc3Bhbj4gPHNwYW4gbmctaWY9ISRjdHJsLmNhbmNlbFRleHQgY2xhc3M9XFxcImljb24gaWNvbi11cGxvYWQgbS1yLTBcXFwiPjwvc3Bhbj4gPC9hPiA8L3A+IDwvZGl2PiBcIjsiLCJjbGFzcyBTdWNjZXNzQ2FyZENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkZWxlbWVudCwgRmlsZVZhbGlkYXRpb25TZXJ2aWNlKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuRmlsZVZhbGlkYXRpb25TZXJ2aWNlID0gRmlsZVZhbGlkYXRpb25TZXJ2aWNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZmlsZSAmJiBjaGFuZ2VzLmZpbGUuY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLmZpbGVOYW1lID0gY2hhbmdlcy5maWxlLmN1cnJlbnRWYWx1ZS5uYW1lO1xuICAgIH1cbiAgfVxuXG4gIG9uTWFudWFsUmV1cGxvYWQoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF07XG4gICAgY29uc3QgdXBsb2FkSW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50dy1kcm9wcGFibGUtaW5wdXQtcmV1cGxvYWQnKTtcbiAgICBjb25zdCBmaWxlID0gdXBsb2FkSW5wdXQuZmlsZXNbMF07XG5cbiAgICB0aGlzLm9uRmlsZUNhcHR1cmUoZmlsZSk7XG4gIH1cbn1cblxuU3VjY2Vzc0NhcmRDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckZWxlbWVudCcsXG4gICdGaWxlVmFsaWRhdGlvblNlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBTdWNjZXNzQ2FyZENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDYW1lcmFDYXB0dXJlIGZyb20gJy4vY2FtZXJhLWNhcHR1cmUuY29tcG9uZW50JztcblxuaW1wb3J0IENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyIGZyb20gJy4vY2FtZXJhLWNhcHR1cmUtc2NyZWVuLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgQ2FtZXJhT3ZlcmxheUhhbmRsZXIgZnJvbSAnLi9jYW1lcmEtb3ZlcmxheS1oYW5kbGVyLnNlcnZpY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmNhbWVyYS1jYXB0dXJlJywgW10pXG4gIC5zZXJ2aWNlKCdDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlcicsIENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyKVxuICAuc2VydmljZSgnQ2FtZXJhT3ZlcmxheUhhbmRsZXInLCBDYW1lcmFPdmVybGF5SGFuZGxlcilcbiAgLmNvbXBvbmVudCgndHdDYW1lcmFDYXB0dXJlJywgQ2FtZXJhQ2FwdHVyZSlcbiAgLm5hbWU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NhbWVyYS1jYXB0dXJlLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY2FtZXJhLWNhcHR1cmUuaHRtbCc7XG5pbXBvcnQgJy4vY2FtZXJhLWNhcHR1cmUubGVzcyc7XG5cbmNvbnN0IENhbWVyYUNhcHR1cmUgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIG92ZXJsYXk6ICdAJywgLy8gT3B0aW9uYWxcbiAgICBkaXJlY3Rpb246ICdAJywgLy8gZW52aXJvbm1lbnQvdXNlclxuXG4gICAgb25DYW5jZWw6ICcmJyxcbiAgICBvbkNhcHR1cmU6ICcmJyxcblxuICAgIC8qKlxuICAgICAqIE5lZWQgdGhpcyBwYXJhbWV0ZXIgdG8gc2tpcCB1c2VyIGludGVyYWN0aW9uXG4gICAgICogZHVyaW5nIGNvbnRyb2xsZXIgaW5pdGlhbGl6YXRpb24gaW4gdW5pdCB0ZXN0c1xuICAgICAqL1xuICAgIHRlc3RNb2RlOiAnQCcgLy8gdHJ1ZS9mYWxzZVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFDYXB0dXJlO1xuIiwiaW1wb3J0IHNjcmVlbmZ1bGwgZnJvbSAnc2NyZWVuZnVsbCc7IC8vIE1JVEBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3NjcmVlbmZ1bGwuanNcblxuY2xhc3MgQ2FtZXJhQ2FwdHVyZUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICAkZWxlbWVudCxcbiAgICAkc2NvcGUsXG4gICAgJHdpbmRvdyxcbiAgICAkcSxcbiAgICAkYXR0cnMsXG4gICAgJGxvZyxcbiAgICBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlclxuICApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XG4gICAgdGhpcy4kbG9nID0gJGxvZztcbiAgICB0aGlzLiRxID0gJHE7XG4gICAgdGhpcy4kd2luZG93ID0gJHdpbmRvdztcbiAgICB0aGlzLkNhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyID0gQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXI7XG4gIH1cblxuICAkb25Jbml0KCkge1xuICAgIC8vIFZpZGVvIHByZXZpZXcgY29udHJvbFxuICAgIHRoaXMuc2hvd1ZpZGVvUHJldmlldyA9IGZhbHNlO1xuICAgIHRoaXMuc2hvd1ZpZGVvSW5QcmV2aWV3ID0gdHJ1ZTtcbiAgICB0aGlzLnNob3dDYXB0dXJlSW5QcmV2aWV3ID0gZmFsc2U7XG4gICAgdGhpcy5tZWRpYVN0cmVhbSA9IG51bGw7XG5cbiAgICAvLyBMaXZlIGNhbSBmbG93IGJ1dHRvbiBjb250cm9sXG4gICAgdGhpcy5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgLy8gRGltZW5zaW9uL3Jlc29sdXRpb24gY29udHJvbGxcbiAgICB0aGlzLnNjcmVlbkhlaWdodCA9IDAuMDtcbiAgICB0aGlzLnNjcmVlbldpZHRoID0gMC4wO1xuICAgIHRoaXMudmlkZW9SZXNIZWlnaHQgPSAwLjA7XG4gICAgdGhpcy52aWRlb1Jlc1dpZHRoID0gMC4wO1xuXG4gICAgdGhpcy5vdmVybGF5V2lkdGggPSAwO1xuICAgIHRoaXMub3ZlcmxheUhlaWdodCA9IDA7XG4gICAgdGhpcy5vdmVybGF5WE9mZnNldCA9IDA7XG4gICAgdGhpcy5vdmVybGF5WU9mZnNldCA9IDA7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzWE9mZnNldCA9IDA7IC8vIGluIHB4XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzWU9mZnNldCA9IDA7IC8vIGluIHB4XG4gICAgdGhpcy52aWRlb1hPZmZzZXQgPSAwOyAvLyB2aWRlbyB4IG9mZnNldCBpbiBwZXJjZW50YWdlXG4gICAgdGhpcy52aWRlb0hlaWdodCA9IDEwMDsgLy8gdmlkZW8gaGVpZ2h0IGluIHBlcmNlbnRhZ2VcbiAgICB0aGlzLnZpZGVvV2lkdGggPSAxMDA7IC8vIHZpZGVvIHdpZHRoIGluIHBlcmNlbnRhZ2VcblxuICAgIHRoaXMuaXNWaWRlb0hvcml6b250YWxseUZsaXBwZWQgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5oYXNHZXRVc2VyTWVkaWEoKSkge1xuICAgICAgLy8gVE9ETzogaGFveXVhbiBob3cgdG8gaGFuZGxlIGdldCB1c2VyIG1lZGlhIG5vdCBiZWluZyBhdmFpbGFibGU/XG4gICAgICB0aGlzLiRsb2cud2FybignZ2V0VXNlck1lZGlhKCkgaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGJyb3dzZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLm92ZXJsYXlMb2FkZWQgPSBmYWxzZTtcbiAgICB0aGlzLm92ZXJsYXlFbGVtZW50ID0gdGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdmlkZW8tcHJldmlldyAjb3ZlcmxheScpO1xuICAgIHRoaXMuZGlzcGxheUNhbnZhcyA9IHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3ZpZGVvLXByZXZpZXcgI2Rpc3BsYXktY2FudmFzJyk7XG4gICAgdGhpcy51cGxvYWRDYW52YXMgPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1wcmV2aWV3ICN1cGxvYWQtY2FudmFzJyk7XG4gICAgdGhpcy52aWRlb1ByZXZpZXdFbGVtZW50ID0gdGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdmlkZW8tcHJldmlldycpO1xuICAgIHRoaXMudmlkZW8gPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1wcmV2aWV3ICN2aWRlbycpO1xuICAgIHRoaXMudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIGNyZWF0ZVZpZGVvUGxheUNhbGxiYWNrKHRoaXMpKTtcblxuICAgIHRoaXMuJHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIGNyZWF0ZU9yaWVudGF0aW9uQ2hhbmdlQ2FsbGJhY2sodGhpcyksIGZhbHNlKTtcblxuICAgIC8vIFRPRE8gaGFveXVhbiA6IGFkZCBjaGFuZ2UgZXZlbnQgbGlzdGVuZXIgdG8gc2NyZWVuZnVsLFxuICAgIC8vICBleGlzdGluZyBmdWxsIHNjcmVlbiBzaG91bGQgcXVpdCBjYXB0dXJlIGluc3RlYWQgb2Ygc2hvd2luZyBub24gZnVsbCBzY3JlZW4gY2FtZXJhXG4gICAgaWYgKCF0aGlzLnRlc3RNb2RlIHx8IHRoaXMudGVzdE1vZGUudG9Mb3dlckNhc2UoKSAhPT0gJ3RydWUnKSB7XG4gICAgICB0aGlzLnN0YXJ0TGl2ZUNhbUZsb3coKTtcbiAgICB9XG4gIH1cblxuICAvLyBBY3F1aXJlIGFuZCBhdHRhY2ggdmlkZW8gc3RyZWFtIHRvIHZpZGVvIHRhZy5cbiAgc3RhcnRMaXZlQ2FtRmxvdygpIHtcbiAgICB0aGlzLiRsb2cuZGVidWcoJy0tLS0tIExpdmUgY2FtIGZsb3cgc3RhcnQgLS0tLS0nKTtcbiAgICB0aGlzLmNhcHR1cmVCdXR0b25EaXNhYmxlZCA9IHRydWU7XG4gICAgdGhpcy52aWRlb1BsYXlpbmcgPSBmYWxzZTtcblxuICAgIC8vIERpc3BsYXkgdmlkZW8gY29tcG9uZW50IGluIGZ1bGwgc2NyZWVuXG4gICAgLy8gVGhpcyBwYXJ0IG9mIGNvZGUgY2Fubm90IGJlIGluIGNhbGxiYWNrIGR1ZSB0byBicm93c2VyIHNlY3VyaXR5IHJlcXVpcmVtZW50XG4gICAgdGhpcy52aWRlby5wYXVzZSgpO1xuXG4gICAgdGhpcy50cnlBY3F1aXJlRnVsbFNjcmVlbigpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnQWNxdWlyZWQgZnVsbCBzY3JlZW4uJyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgdGhpcy4kbG9nLndhcm4oJ0ZhaWxlZCB0byBhY3F1aXJlIGZ1bGwgc2NyZWVuLicpO1xuICAgICAgfSlcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgLy8gQWZ0ZXIgdHJ5aW5nIHRvIGFjcXVpcmUgZnVsbCBzY3JlZW4sIHJlc29sdmUgdmlkZW8gc3RyZWFtXG4gICAgICAgIHRoaXMuc2V0U2NyZWVuRGltZW5zaW9ucygpO1xuICAgICAgICBpZiAoIXRoaXMub3ZlcmxheUxvYWRlZCkgeyAvLyBEb250IHRyaWdnZXIgb3ZlcmxheSBjb21wdXRhdGlvbiBpZiBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgIGlmICh0aGlzLm92ZXJsYXlFbGVtZW50Lm5hdHVyYWxIZWlnaHQgPT09IDAgfHwgdGhpcy5vdmVybGF5RWxlbWVudC5uYXR1cmFsV2lkdGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnT3ZlcmxheSBoYXMgbm90IGxvYWRlZCBhZnRlciBmdWxsIHNjcmVlbiBpcyBhY3F1aXJlZCcpO1xuICAgICAgICAgICAgdGhpcy5vdmVybGF5RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgY3JlYXRlT3ZlcmxheU9uTG9hZENhbGxiYWNrKHRoaXMpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4kbG9nLmRlYnVnKCdPdmVybGF5IGhhcyBsb2FkZWQgYmVmb3JlIGZ1bGwgc2NyZWVuIGlzIGFjcXVpcmVkJyk7XG4gICAgICAgICAgICBjcmVhdGVPdmVybGF5T25Mb2FkQ2FsbGJhY2sodGhpcykuY2FsbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyeUFjcXVpcmVNZWRpYVN0cmVhbSgpXG4gICAgICAgICAgLnRoZW4oKHN0cmVhbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vblZpZGVvU3RyZWFtQWNxdWlzaXRpb24oc3RyZWFtKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAvLyBUT0RPIGhhb3l1YW4gOiBTaG91bGQgc29tZWhvdyBhc2sgdXNlciB0byByZWZyZXNoIHBhZ2UgdG8gcmVhcXVpcmUgcGVybWlzc2lvblxuICAgICAgICAgICAgdGhpcy4kbG9nLmVycm9yKGVycik7XG4gICAgICAgICAgICB0aGlzLm9uQ2FuY2VsQnRuQ2xpY2soKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgdHJ5QWNxdWlyZUZ1bGxTY3JlZW4oKSB7XG4gICAgaWYgKHNjcmVlbmZ1bGwuZW5hYmxlZCkge1xuICAgICAgaWYgKCFzY3JlZW5mdWxsLmlzRnVsbHNjcmVlbikge1xuICAgICAgICByZXR1cm4gc2NyZWVuZnVsbC5yZXF1ZXN0KHRoaXMudmlkZW9QcmV2aWV3RWxlbWVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kcS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRxLnJlamVjdCgpO1xuICB9XG5cbiAgb25WaWRlb1N0cmVhbUFjcXVpc2l0aW9uKHN0cmVhbSkge1xuICAgIHRoaXMubWVkaWFTdHJlYW0gPSBzdHJlYW07XG5cbiAgICAvKlxuICAgICBUaGlzIGlzIGRvbmUgaW5zdGVhZCBvZiBqdXN0IHJlYXNzaWduaW5nIHZpZGVvIHN0cmVhbSBldmVyeXRpbWVcbiAgICAgdG8gcHJldmVudCBzY3JlZW4gZnJvbSBibGlua2luZyBleGNlc3NpdmVseSBkdXJpbmcgc3dpdGNoXG4gICAgICAqL1xuICAgIGlmICh0aGlzLnZpZGVvLnNyY09iamVjdCAhPT0gdGhpcy5tZWRpYVN0cmVhbSkge1xuICAgICAgdGhpcy52aWRlby5zcmNPYmplY3QgPSB0aGlzLm1lZGlhU3RyZWFtO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSBjb250cm9sc1xuICAgIHRoaXMuc2hvd1ZpZGVvUHJldmlldyA9IHRydWU7XG4gICAgdGhpcy5zaG93VmlkZW9JblByZXZpZXcgPSB0cnVlO1xuICAgIHRoaXMuc2hvd0NhcHR1cmVJblByZXZpZXcgPSBmYWxzZTtcblxuICAgIHRoaXMudmlkZW8ucGxheSgpO1xuICB9XG5cbiAgdHJ5QWNxdWlyZU1lZGlhU3RyZWFtKCkge1xuICAgIGlmICghdGhpcy5tZWRpYVN0cmVhbSkge1xuICAgICAgcmV0dXJuIHRoaXMuJHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKS50aGVuKChkZXZpY2VzKSA9PiB7XG4gICAgICAgIC8vIElmIGRldmljZSBvbmx5IGhhcyBvbmUgY2FtZXJhLCBhc3N1bWUgaXQgaXMgc2VsZmllIGNhbVxuICAgICAgICBjb25zdCBudW1WaWRlb0RldmljZXMgPSBkZXZpY2VzLmZpbHRlcihkZXZpY2UgPT4gZGV2aWNlLmtpbmQgPT09ICd2aWRlb2lucHV0JykubGVuZ3RoO1xuICAgICAgICB0aGlzLiRsb2cuZGVidWcoYEZvdW5kICR7bnVtVmlkZW9EZXZpY2VzfSB2aWRlbyBkZXZpY2VzLmApO1xuICAgICAgICBpZiAobnVtVmlkZW9EZXZpY2VzID09PSAxIHx8ICF0aGlzLmRpcmVjdGlvbikge1xuICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gJ3VzZXInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb24udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZsaXAgdmlkZW8gYWxvbmcgeCBheGlzIHNvIHNlbGZpZSB2aWRlbyBiZWNvbWVzIGEgbWlycm9yXG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3VzZXInKSB7XG4gICAgICAgICAgdGhpcy4kbG9nLmRlYnVnKCdDaGFuZ2VkIHVzZXIgdmlkZW8gdG8gbWlycm9yJyk7XG4gICAgICAgICAgdGhpcy52aWRlby5jbGFzc0xpc3QuYWRkKCdkaXNwbGF5LW1pcnJvcicpO1xuICAgICAgICAgIHRoaXMub3ZlcmxheUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1taXJyb3InKTtcbiAgICAgICAgICB0aGlzLmlzVmlkZW9Ib3Jpem9udGFsbHlGbGlwcGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FtZXJhQ29uc3RyYWludHMgPSB7XG4gICAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICAgIHdpZHRoOiB7XG4gICAgICAgICAgICAgIG1pbjogNjQwLFxuICAgICAgICAgICAgICBpZGVhbDogMTI4MCxcbiAgICAgICAgICAgICAgbWF4OiAxMjgwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmFjaW5nTW9kZToge1xuICAgICAgICAgICAgICBpZGVhbDogdGhpcy5kaXJlY3Rpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGF1ZGlvOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy4kd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHRoaXMuY2FtZXJhQ29uc3RyYWludHMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuJHEucmVzb2x2ZSh0aGlzLm1lZGlhU3RyZWFtKTtcbiAgfVxuXG4gIHNldFNjcmVlbkRpbWVuc2lvbnMoKSB7XG4gICAgLy8gVE9ETyBoYW95dWFuIDogZmlyZWZveCBpcyByZWNvZ25pemluZyBwaXhlbCdzIGJ0bSBiYXJcbiAgICB0aGlzLiRsb2cuZGVidWcoYHNjcmVlbiA6ICR7dGhpcy4kd2luZG93LnNjcmVlbi5oZWlnaHR9IHggJHt0aGlzLiR3aW5kb3cuc2NyZWVuLndpZHRofWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1Zyhgc2NyZWVuIGF2YWlsYWJsZSA6ICR7dGhpcy4kd2luZG93LnNjcmVlbi5hdmFpbEhlaWdodH0geCAke3RoaXMuJHdpbmRvdy5zY3JlZW4uYXZhaWxXaWR0aH1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHNjcmVlbiBpbm5lciA6ICR7dGhpcy4kd2luZG93LmlubmVySGVpZ2h0fSB4ICR7dGhpcy4kd2luZG93LmlubmVyV2lkdGh9YCk7XG4gICAgdGhpcy5zY3JlZW5IZWlnaHQgPSB0aGlzLiR3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdGhpcy5zY3JlZW5XaWR0aCA9IHRoaXMuJHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgKipzY3JlZW4gcmVzb2x2ZWQqKiA6ICR7dGhpcy5zY3JlZW5IZWlnaHR9IHggJHt0aGlzLnNjcmVlbldpZHRofWApO1xuICB9XG5cbiAgY2xvc2VWaWRlb1N0cmVhbSgpIHtcbiAgICBpZiAoc2NyZWVuZnVsbC5lbmFibGVkKSB7XG4gICAgICBzY3JlZW5mdWxsLmV4aXQoKTtcbiAgICB9XG4gICAgdGhpcy52aWRlby5zcmNPYmplY3QgPSBudWxsO1xuICAgIGlmICh0aGlzLm1lZGlhU3RyZWFtKSB7XG4gICAgICB0aGlzLm1lZGlhU3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2godHJhY2sgPT4gdHJhY2suc3RvcCgpKTtcbiAgICAgIHRoaXMubWVkaWFTdHJlYW0gPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnNob3dWaWRlb1ByZXZpZXcgPSBmYWxzZTtcbiAgICB0aGlzLmNhcHR1cmVCdXR0b25EaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICBvbkNhbmNlbEJ0bkNsaWNrKCkge1xuICAgIHRoaXMuY2xvc2VWaWRlb1N0cmVhbSgpO1xuICAgIHRoaXMub25DYW5jZWwoKTtcbiAgfVxuXG4gIG9uQ2FwdHVyZUJ0bkNsaWNrKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGhlaWdodCwgd2lkdGgsXG4gICAgICB5T2Zmc2V0LCB4T2Zmc2V0LFxuICAgICAgcGFpbnRIZWlnaHQsIHBhaW50V2lkdGhcbiAgICB9ID0gdGhpcy5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlci5nZXRDYW52YXNTcGVjaWZpY2F0aW9ucyhcbiAgICAgIHRoaXMudmlkZW9IZWlnaHQsXG4gICAgICB0aGlzLnZpZGVvV2lkdGgsXG4gICAgICB0aGlzLnNjcmVlbkhlaWdodCxcbiAgICAgIHRoaXMuc2NyZWVuV2lkdGgsXG4gICAgICB0aGlzLnZpZGVvUmVzSGVpZ2h0LFxuICAgICAgdGhpcy52aWRlb1Jlc1dpZHRoXG4gICAgKTtcbiAgICB0aGlzLmRpc3BsYXlDYW52YXNZT2Zmc2V0ID0geU9mZnNldDtcbiAgICB0aGlzLmRpc3BsYXlDYW52YXNYT2Zmc2V0ID0geE9mZnNldDtcbiAgICB0aGlzLmRpc3BsYXlDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmRpc3BsYXlDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIC8qIENvbmZ1c2luZyBkcmF3IGltYWdlIG1ldGhvZCBmb3IgdmlkZW9cbiAgICAgKiBEZXNwaXRlIHZpZGVvIGRpbWVuc2lvbiBjYW4gYmUgbW9yZSB0aGFuIDEwMCUsIHRoZSB2aWRlbyBuZXZlciBleHRlbmRzIGJleW9uZCB0aGUgc2NyZWVuXG4gICAgICogSW5zdGVhZCwgaXRzIHJlc29sdXRpb24gZ2V0cyB0cnVuY2F0ZWQgdG8gZml0IHRoZSBzY3JlZW4gcGVyZmVjdGx5XG4gICAgICogVGh1cyBkcmF3aW5nIGFsd2F5cyBzdGFydHMgZnJvbSAoMCwgMClcbiAgICAgKi9cbiAgICBjb25zdCBjdHggPSB0aGlzLmRpc3BsYXlDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICBjdHguZHJhd0ltYWdlKHRoaXMudmlkZW8sIDAsIDAsIHBhaW50V2lkdGgsIHBhaW50SGVpZ2h0LCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB0aGlzLnNob3dDYXB0dXJlSW5QcmV2aWV3ID0gdHJ1ZTtcbiAgICB0aGlzLnNob3dWaWRlb0luUHJldmlldyA9IGZhbHNlO1xuICB9XG5cbiAgb25SZWNhcHR1cmVCdG5DbGljaygpIHtcbiAgICB0aGlzLnN0YXJ0TGl2ZUNhbUZsb3coKTtcbiAgfVxuXG4gIG9uVXBsb2FkQnRuQ2xpY2soKSB7XG4gICAgdGhpcy51cGxvYWRDYW52YXMud2lkdGggPSB0aGlzLmRpc3BsYXlDYW52YXMud2lkdGg7XG4gICAgdGhpcy51cGxvYWRDYW52YXMuaGVpZ2h0ID0gdGhpcy5kaXNwbGF5Q2FudmFzLmhlaWdodDtcbiAgICB0aGlzLnVwbG9hZENhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZSh0aGlzLmRpc3BsYXlDYW52YXMsIDAsIDAsIHRoaXMuZGlzcGxheUNhbnZhcy53aWR0aCwgdGhpcy5kaXNwbGF5Q2FudmFzLmhlaWdodCk7XG4gICAgLy8gU3VwcG9ydCA6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MQ2FudmFzRWxlbWVudC90b0Jsb2JcbiAgICB0aGlzLnVwbG9hZENhbnZhcy50b0Jsb2IoY3JlYXRlVXBsb2FkQ2FsbGJhY2sodGhpcyksICdpbWFnZS9wbmcnLCAxLjApO1xuICB9XG5cbiAgc2V0TmdNb2RlbCh2YWx1ZSkge1xuICAgIC8vIElmIG5nTW9kZWwgbm90IGFzc2lnbmFibGUsIHdlIGRvbid0IHdhbnQgdG8gZXJyb3IuXG4gICAgaWYgKHR5cGVvZiB0aGlzLiRhdHRycy5uZ01vZGVsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICAgIGlmICghJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBoYXNHZXRVc2VyTWVkaWEoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuJHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzXG4gICAgICAmJiB0aGlzLiR3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpO1xuICB9XG5cbiAgZ2V0T3ZlcmxheVN0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogYCR7dGhpcy5vdmVybGF5WE9mZnNldH1weGAsXG4gICAgICB0b3A6IGAke3RoaXMub3ZlcmxheVlPZmZzZXR9cHhgLFxuICAgICAgd2lkdGg6IGAke3RoaXMub3ZlcmxheVdpZHRofXB4YCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy5vdmVybGF5SGVpZ2h0fXB4YCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0VmlkZW9TdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGAke3RoaXMudmlkZW9YT2Zmc2V0fSVgLFxuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnZpZGVvSGVpZ2h0fSVgLFxuICAgICAgd2lkdGg6IGAke3RoaXMudmlkZW9XaWR0aH0lYCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0Q2FudmFzU3R5bGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBgJHt0aGlzLmRpc3BsYXlDYW52YXNYT2Zmc2V0fXB4YCxcbiAgICAgIHRvcDogYCR7dGhpcy5kaXNwbGF5Q2FudmFzWU9mZnNldH1weGAsXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIE5lZWQgdG8gdXNlIHRoaXMgcGF0dGVybiBoZXJlIGJlY2F1c2VcbiAqIHdlIG9ubHkgZ2V0IGhlaWdodCBhbmQgd2lkdGggb2Ygb3ZlcmxheSBpbWFnZSBhZnRlciBpdCBoYXMgYmVlbiBsb2FkZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlT3ZlcmxheU9uTG9hZENhbGxiYWNrKCRjdHJsKSB7XG4gIHJldHVybiBmdW5jdGlvbiBvdmVybGF5T25Mb2FkQ2FsbGJhY2soKSB7XG4gICAgaWYgKCEkY3RybC5vdmVybGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGhlaWdodDogb3ZlcmxheUhlaWdodCxcbiAgICAgIHdpZHRoOiBvdmVybGF5V2lkdGgsXG4gICAgICB5T2Zmc2V0OiBvdmVybGF5WU9mZnNldCxcbiAgICAgIHhPZmZzZXQ6IG92ZXJsYXlYT2Zmc2V0XG4gICAgfSA9ICRjdHJsLkNhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyXG4gICAgICAuZ2V0T3ZlcmxheVNwZWNpZmljYXRpb25zKFxuICAgICAgICAkY3RybC5zY3JlZW5IZWlnaHQsICRjdHJsLnNjcmVlbldpZHRoLFxuICAgICAgICAkY3RybC5vdmVybGF5RWxlbWVudC5uYXR1cmFsSGVpZ2h0LCAkY3RybC5vdmVybGF5RWxlbWVudC5uYXR1cmFsV2lkdGhcbiAgICAgICk7XG5cbiAgICAkY3RybC4kc2NvcGUuJGFwcGx5QXN5bmMoKCkgPT4ge1xuICAgICAgJGN0cmwub3ZlcmxheVlPZmZzZXQgPSBvdmVybGF5WU9mZnNldDtcbiAgICAgICRjdHJsLm92ZXJsYXlYT2Zmc2V0ID0gb3ZlcmxheVhPZmZzZXQ7XG4gICAgICAkY3RybC5vdmVybGF5SGVpZ2h0ID0gb3ZlcmxheUhlaWdodDtcbiAgICAgICRjdHJsLm92ZXJsYXlXaWR0aCA9IG92ZXJsYXlXaWR0aDtcblxuICAgICAgJGN0cmwub3ZlcmxheUxvYWRlZCA9IHRydWU7XG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogTmVlZCB0byB1c2UgdGhpcyBwYXR0ZXJuIGhlcmUgYmVjYXVzZVxuICogd2Ugb25seSBnZXQgaGVpZ2h0IGFuZCB3aWR0aCBvZiB2aWRlbyBhZnRlciBpdCBpcyBwbGF5aW5nXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZpZGVvUGxheUNhbGxiYWNrKCRjdHJsKSB7XG4gIHJldHVybiBmdW5jdGlvbiB2aWRlb1BsYXlDYWxsYmFjaygpIHtcbiAgICAkY3RybC5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudmlkZW9IZWlnaHQgPT09IDAgfHwgdGhpcy52aWRlb1dpZHRoID09PSAwKSB7XG4gICAgICAvLyBWaWRlbyBpcyBub3QgcGxheWluZywgbGlzdGVuIGZvciBpdCB0byBzdGFydFxuICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgZnVuY3Rpb24gdmlkZW9QbGF5aW5nQ2FsbGJhY2soKSB7XG4gICAgICAgICRjdHJsLiRzY29wZS4kYXBwbHlBc3luYygoKSA9PiB7XG4gICAgICAgICAgJGN0cmwudmlkZW9QbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgICBhc3NpZ25WaWRlb0RpbWVuc2lvbnModGhpcyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCB2aWRlb1BsYXlpbmdDYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGN0cmwuJHNjb3BlLiRhcHBseUFzeW5jKCgpID0+IHtcbiAgICAgICAgJGN0cmwudmlkZW9QbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgYXNzaWduVmlkZW9EaW1lbnNpb25zKHRoaXMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXNzaWduVmlkZW9EaW1lbnNpb25zKHZpZGVvKSB7XG4gICAgICAkY3RybC52aWRlb1Jlc0hlaWdodCA9IHZpZGVvLnZpZGVvSGVpZ2h0O1xuICAgICAgJGN0cmwudmlkZW9SZXNXaWR0aCA9IHZpZGVvLnZpZGVvV2lkdGg7XG4gICAgICAkY3RybC4kbG9nLmRlYnVnKGBwbGF5aW5nIHVwZGF0ZWQgdmlkZW8gOiAkeyRjdHJsLnZpZGVvUmVzSGVpZ2h0fSB4ICR7JGN0cmwudmlkZW9SZXNXaWR0aH1gKTtcbiAgICAgIGNvbnN0IHsgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UgfSA9ICRjdHJsLkNhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyXG4gICAgICAgIC5nZXRWaWRlb1NwZWNpZmljYXRpb25zKFxuICAgICAgICAgICRjdHJsLnNjcmVlbkhlaWdodCwgJGN0cmwuc2NyZWVuV2lkdGgsXG4gICAgICAgICAgJGN0cmwudmlkZW9SZXNIZWlnaHQsICRjdHJsLnZpZGVvUmVzV2lkdGhcbiAgICAgICAgKTtcbiAgICAgIC8qKlxuICAgICAgICogV2hlbiB2aWRlbyB3aWR0aCBpcyBtb3JlIHRoYW4gc2NyZWVuIHdpZHRoXG4gICAgICAgKiBuYXR1cmFsIHZpZGVvIHdpbGwgb3ZlcmZsb3cgdG8gcmlnaHQgb2Ygc2NyZWVuXG4gICAgICAgKiBBcyBzZWxmaWUgY2FtIGlzIGZsaXBwZWQsIHRoZSBvdmVyZmxvd24gcGFydCB3aWxsIGJlIGZsaXBwZWQgb250byB0aGUgc2NyZWVuIG9uIHRoZSBsZWZ0XG4gICAgICAgKiBXaGVuIGRyYXdpbmcgY2FudmFzIGZyb20gdmlkZW8sIHZpZGVvIHRyYW5zZm9ybWF0aW9uIGlzIG5vdCBjb25zaWRlcmVkXG4gICAgICAgKiBUaHVzIGJ5IG5hdHVyYWxseSBkcmF3aW5nIHRoZSBzY3JlZW4sIGNhbnZhcyBpbWFnZSB3aWxsIG1pc21hdGNoIHdpdGggdmlkZW9cbiAgICAgICAqIFdlIG5lZWRlZCB0byBhcHBseSBhbiBvZmZzZXQgaGVyZVxuICAgICAgICogdG8gbWFrZSBzdXJlIG92ZXJmbG93biBwYXJ0IGluIHVuZmxpcHBlZCB2aWRlbyBpcyBzdGlsbCBvdmVyZmxvd24gaW4gZmxpcHBlZCB2aWRlb1xuICAgICAgICovXG4gICAgICBpZiAoJGN0cmwuaXNWaWRlb0hvcml6b250YWxseUZsaXBwZWQgJiYgdmlkZW9XaWR0aEluUGVyY2VudGFnZSA+IDEwMC4wKSB7XG4gICAgICAgICRjdHJsLnZpZGVvWE9mZnNldCA9IDEwMCAtIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2U7XG4gICAgICB9XG4gICAgICAkY3RybC52aWRlb0hlaWdodCA9IHZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlO1xuICAgICAgJGN0cmwudmlkZW9XaWR0aCA9IHZpZGVvV2lkdGhJblBlcmNlbnRhZ2U7XG4gICAgfVxuICB9O1xufVxuXG4vLyBSZXNpemUgbGlzdGVuZXIgbGlzdGVucyB0byBlbmQgb2Ygb3JpZW50YXRpb24gY2hhbmdlIGV2ZW50XG5mdW5jdGlvbiBjcmVhdGVPcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrKCRjdHJsKSB7XG4gIC8vIFRPRE8gaGFveXVhbiA6IHNob3VsZCB3ZSBjYW5jZWwgdGhlIGNhcHR1cmUgaWYgc2NyZWVuIHJvdGF0ZXM/XG4gIHJldHVybiBmdW5jdGlvbiBvcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrKCkge1xuICAgIGNvbnN0IG9uT3JpZW50YXRpb25DaGFuZ2UgPSBmdW5jdGlvbiBvbk9yaWVudGF0aW9uQ2hhbmdlKCkge1xuICAgICAgaWYgKCRjdHJsLnNob3dWaWRlb1ByZXZpZXcpIHtcbiAgICAgICAgJGN0cmwuJGxvZy5kZWJ1ZygnT3JpZW50YXRpb24gY2hhbmdlIGRldGVjdGVkLCByZWNvbXB1dGUgc2NyZWVuJyk7XG4gICAgICAgICRjdHJsLnN0YXJ0TGl2ZUNhbUZsb3coKTtcbiAgICAgIH1cbiAgICAgICRjdHJsLiR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25PcmllbnRhdGlvbkNoYW5nZSk7XG4gICAgfTtcbiAgICAkY3RybC4kd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uT3JpZW50YXRpb25DaGFuZ2UpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVcGxvYWRDYWxsYmFjaygkY3RybCkge1xuICByZXR1cm4gZnVuY3Rpb24gdXBsb2FkQ2FsbGJhY2soYmxvYikge1xuICAgIGlmIChzY3JlZW5mdWxsLmVuYWJsZWQpIHtcbiAgICAgIHNjcmVlbmZ1bGwuZXhpdCgpO1xuICAgIH1cbiAgICAkY3RybC5zaG93VmlkZW9QcmV2aWV3ID0gZmFsc2U7XG4gICAgJGN0cmwuY2xvc2VWaWRlb1N0cmVhbSgpO1xuICAgICRjdHJsLiRzY29wZS4kYXBwbHlBc3luYygoKSA9PiB7XG4gICAgICAkY3RybC5vbkNhcHR1cmUoeyBmaWxlOiBibG9iIH0pO1xuICAgIH0pO1xuICB9O1xufVxuXG5DYW1lcmFDYXB0dXJlQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHNjb3BlJyxcbiAgJyR3aW5kb3cnLFxuICAnJHEnLFxuICAnJGF0dHJzJyxcbiAgJyRsb2cnLFxuICAnQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXInXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFDYXB0dXJlQ29udHJvbGxlcjtcbiIsIi8qIVxuKiBzY3JlZW5mdWxsXG4qIHY0LjIuMCAtIDIwMTktMDQtMDFcbiogKGMpIFNpbmRyZSBTb3JodXM7IE1JVCBMaWNlbnNlXG4qL1xuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBkb2N1bWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gd2luZG93LmRvY3VtZW50IDoge307XG5cdHZhciBpc0NvbW1vbmpzID0gdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHM7XG5cdHZhciBrZXlib2FyZEFsbG93ZWQgPSB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0FMTE9XX0tFWUJPQVJEX0lOUFVUJyBpbiBFbGVtZW50O1xuXG5cdHZhciBmbiA9IChmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHZhbDtcblxuXHRcdHZhciBmbk1hcCA9IFtcblx0XHRcdFtcblx0XHRcdFx0J3JlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0J2V4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5jaGFuZ2UnLFxuXHRcdFx0XHQnZnVsbHNjcmVlbmVycm9yJ1xuXHRcdFx0XSxcblx0XHRcdC8vIE5ldyBXZWJLaXRcblx0XHRcdFtcblx0XHRcdFx0J3dlYmtpdFJlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdEV4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0J3dlYmtpdEZ1bGxzY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xuXG5cdFx0XHRdLFxuXHRcdFx0Ly8gT2xkIFdlYktpdCAoU2FmYXJpIDUuMSlcblx0XHRcdFtcblx0XHRcdFx0J3dlYmtpdFJlcXVlc3RGdWxsU2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdENhbmNlbEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHQnd2Via2l0Q3VycmVudEZ1bGxTY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0J3dlYmtpdENhbmNlbEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuZXJyb3InXG5cblx0XHRcdF0sXG5cdFx0XHRbXG5cdFx0XHRcdCdtb3pSZXF1ZXN0RnVsbFNjcmVlbicsXG5cdFx0XHRcdCdtb3pDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0J21vekZ1bGxTY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0J21vekZ1bGxTY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0J21vemZ1bGxzY3JlZW5jaGFuZ2UnLFxuXHRcdFx0XHQnbW96ZnVsbHNjcmVlbmVycm9yJ1xuXHRcdFx0XSxcblx0XHRcdFtcblx0XHRcdFx0J21zUmVxdWVzdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHQnbXNFeGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCdtc0Z1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0J21zRnVsbHNjcmVlbkVuYWJsZWQnLFxuXHRcdFx0XHQnTVNGdWxsc2NyZWVuQ2hhbmdlJyxcblx0XHRcdFx0J01TRnVsbHNjcmVlbkVycm9yJ1xuXHRcdFx0XVxuXHRcdF07XG5cblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIGwgPSBmbk1hcC5sZW5ndGg7XG5cdFx0dmFyIHJldCA9IHt9O1xuXG5cdFx0Zm9yICg7IGkgPCBsOyBpKyspIHtcblx0XHRcdHZhbCA9IGZuTWFwW2ldO1xuXHRcdFx0aWYgKHZhbCAmJiB2YWxbMV0gaW4gZG9jdW1lbnQpIHtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHJldFtmbk1hcFswXVtpXV0gPSB2YWxbaV07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0pKCk7XG5cblx0dmFyIGV2ZW50TmFtZU1hcCA9IHtcblx0XHRjaGFuZ2U6IGZuLmZ1bGxzY3JlZW5jaGFuZ2UsXG5cdFx0ZXJyb3I6IGZuLmZ1bGxzY3JlZW5lcnJvclxuXHR9O1xuXG5cdHZhciBzY3JlZW5mdWxsID0ge1xuXHRcdHJlcXVlc3Q6IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRcdFx0dmFyIHJlcXVlc3QgPSBmbi5yZXF1ZXN0RnVsbHNjcmVlbjtcblxuXHRcdFx0XHR2YXIgb25GdWxsU2NyZWVuRW50ZXJlZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR0aGlzLm9mZignY2hhbmdlJywgb25GdWxsU2NyZWVuRW50ZXJlZCk7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHR9LmJpbmQodGhpcyk7XG5cblx0XHRcdFx0ZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdC8vIFdvcmsgYXJvdW5kIFNhZmFyaSA1LjEgYnVnOiByZXBvcnRzIHN1cHBvcnQgZm9yXG5cdFx0XHRcdC8vIGtleWJvYXJkIGluIGZ1bGxzY3JlZW4gZXZlbiB0aG91Z2ggaXQgZG9lc24ndC5cblx0XHRcdFx0Ly8gQnJvd3NlciBzbmlmZmluZywgc2luY2UgdGhlIGFsdGVybmF0aXZlIHdpdGhcblx0XHRcdFx0Ly8gc2V0VGltZW91dCBpcyBldmVuIHdvcnNlLlxuXHRcdFx0XHRpZiAoLyBWZXJzaW9uXFwvNVxcLjEoPzpcXC5cXGQrKT8gU2FmYXJpXFwvLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG5cdFx0XHRcdFx0ZWxlbVtyZXF1ZXN0XSgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW1bcmVxdWVzdF0oa2V5Ym9hcmRBbGxvd2VkID8gRWxlbWVudC5BTExPV19LRVlCT0FSRF9JTlBVVCA6IHt9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMub24oJ2NoYW5nZScsIG9uRnVsbFNjcmVlbkVudGVyZWQpO1xuXHRcdFx0fS5iaW5kKHRoaXMpKTtcblx0XHR9LFxuXHRcdGV4aXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuXHRcdFx0XHRpZiAoIXRoaXMuaXNGdWxsc2NyZWVuKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBvbkZ1bGxTY3JlZW5FeGl0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHRoaXMub2ZmKCdjaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FeGl0KTtcblx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdH0uYmluZCh0aGlzKTtcblxuXHRcdFx0XHRkb2N1bWVudFtmbi5leGl0RnVsbHNjcmVlbl0oKTtcblxuXHRcdFx0XHR0aGlzLm9uKCdjaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FeGl0KTtcblx0XHRcdH0uYmluZCh0aGlzKSk7XG5cdFx0fSxcblx0XHR0b2dnbGU6IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5pc0Z1bGxzY3JlZW4gPyB0aGlzLmV4aXQoKSA6IHRoaXMucmVxdWVzdChlbGVtKTtcblx0XHR9LFxuXHRcdG9uY2hhbmdlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHRoaXMub24oJ2NoYW5nZScsIGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdG9uZXJyb3I6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dGhpcy5vbignZXJyb3InLCBjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRvbjogZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGV2ZW50TmFtZSA9IGV2ZW50TmFtZU1hcFtldmVudF07XG5cdFx0XHRpZiAoZXZlbnROYW1lKSB7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b2ZmOiBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgZXZlbnROYW1lID0gZXZlbnROYW1lTWFwW2V2ZW50XTtcblx0XHRcdGlmIChldmVudE5hbWUpIHtcblx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyYXc6IGZuXG5cdH07XG5cblx0aWYgKCFmbikge1xuXHRcdGlmIChpc0NvbW1vbmpzKSB7XG5cdFx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2NyZWVuZnVsbCA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybjtcblx0fVxuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNjcmVlbmZ1bGwsIHtcblx0XHRpc0Z1bGxzY3JlZW46IHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gQm9vbGVhbihkb2N1bWVudFtmbi5mdWxsc2NyZWVuRWxlbWVudF0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZWxlbWVudDoge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVsZW1lbnRdO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZW5hYmxlZDoge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQvLyBDb2VyY2UgdG8gYm9vbGVhbiBpbiBjYXNlIG9mIG9sZCBXZWJLaXRcblx0XHRcdFx0cmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVuYWJsZWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGlmIChpc0NvbW1vbmpzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBzY3JlZW5mdWxsO1xuXHRcdC8vIFRPRE86IHJlbW92ZSB0aGlzIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb25cblx0XHRtb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gc2NyZWVuZnVsbDtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuc2NyZWVuZnVsbCA9IHNjcmVlbmZ1bGw7XG5cdH1cbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdj4gPGRpdiBpZD12aWRlby1wcmV2aWV3IG5nLXNob3c9JGN0cmwuc2hvd1ZpZGVvUHJldmlldyBjbGFzcz1cXFwidy0xMDAgaC0xMDAgZml4ZWQtdG9wIGJnLWRhcmtcXFwiPiA8aW1nIGlkPW92ZXJsYXkgbmctc2hvdz1cXFwiJGN0cmwuc2hvd1ZpZGVvSW5QcmV2aWV3ICYmICRjdHJsLm92ZXJsYXlMb2FkZWQgJiYgJGN0cmwudmlkZW9QbGF5aW5nXFxcIiBuZy1zdHlsZT0kY3RybC5nZXRPdmVybGF5U3R5bGVzKCkgbmctc3JjPXt7JGN0cmwub3ZlcmxheX19IGNsYXNzPVxcXCJmaXhlZCB6aW5kZXgtdmlkZW8tb3ZlcmxheVxcXCIvPiA8dmlkZW8gaWQ9dmlkZW8gbmctc2hvdz0kY3RybC5zaG93VmlkZW9JblByZXZpZXcgbmctc3R5bGU9JGN0cmwuZ2V0VmlkZW9TdHlsZXMoKSBjbGFzcz1cXFwiZml4ZWQtdG9wIHppbmRleC12aWRlb1xcXCIgcGxheXNpbmxpbmU+PC92aWRlbz4gPGNhbnZhcyBpZD1kaXNwbGF5LWNhbnZhcyBuZy1zaG93PSRjdHJsLnNob3dDYXB0dXJlSW5QcmV2aWV3IG5nLXN0eWxlPSRjdHJsLmdldENhbnZhc1N0eWxlcygpIGNsYXNzPVxcXCJmaXhlZCB6aW5kZXgtdmlkZW9cXFwiPjwvY2FudmFzPiA8Y2FudmFzIGlkPXVwbG9hZC1jYW52YXMgbmctc2hvdz1mYWxzZSBjbGFzcz1maXhlZD48L2NhbnZhcz4gPGxhYmVsIGNsYXNzPVxcXCJmaXhlZC1ib3R0b20gY2FtZXJhLWN0cmwtYmFyXFxcIj4gPHNwYW4gY2xhc3M9Y2FtZXJhLWN0cmwtYm94LXNtYWxsPiA8c3BhbiBpZD12aWRlby1jYW5jZWwgY2xhc3M9XFxcImNhbWVyYS1jdHJsLWJ0bi1zbWFsbCBjYW1lcmEtY3RybC1idG4tY2FuY2VsIGljb24gaWNvbi1jbG9zZVxcXCIgbmctaWY9JGN0cmwuc2hvd1ZpZGVvSW5QcmV2aWV3IG5nLWNsaWNrPSRjdHJsLm9uQ2FuY2VsQnRuQ2xpY2soKT48L3NwYW4+IDxzcGFuIGlkPWNhcHR1cmUtY2FuY2VsIGNsYXNzPVxcXCJjYW1lcmEtY3RybC1idG4tc21hbGwgY2FtZXJhLWN0cmwtYnRuLWNhbmNlbCBpY29uIGljb24tY2xvc2VcXFwiIG5nLWlmPSRjdHJsLnNob3dDYXB0dXJlSW5QcmV2aWV3IG5nLWNsaWNrPSRjdHJsLm9uUmVjYXB0dXJlQnRuQ2xpY2soKT48L3NwYW4+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9Y2FtZXJhLWN0cmwtYm94LWJpZz4gPHNwYW4gaWQ9dmlkZW8tY29uZmlybSBjbGFzcz1jYW1lcmEtY3RybC1idG4tYmlnIG5nLWlmPSRjdHJsLnNob3dWaWRlb0luUHJldmlldyBuZy1jbGljaz1cXFwiISRjdHJsLmNhcHR1cmVCdXR0b25EaXNhYmxlZCAmJiAkY3RybC5vbkNhcHR1cmVCdG5DbGljaygpXFxcIj4gPHNwYW4gY2xhc3M9Y2FtZXJhLWN0cmwtYnRuLWJpZy1pbm5lcj48L3NwYW4+IDwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1jYW1lcmEtY3RybC1ib3gtc21hbGw+IDxzcGFuIGlkPWNhcHR1cmUtY29uZmlybSBjbGFzcz1cXFwiY2FtZXJhLWN0cmwtYnRuLXNtYWxsIGNhbWVyYS1jdHJsLWJ0bi1jb25maXJtIGljb24gaWNvbi1jaGVja1xcXCIgbmctaWY9JGN0cmwuc2hvd0NhcHR1cmVJblByZXZpZXcgbmctY2xpY2s9JGN0cmwub25VcGxvYWRCdG5DbGljaygpPjwvc3Bhbj4gPC9zcGFuPiA8L2xhYmVsPiA8L2Rpdj4gPC9kaXY+IFwiOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jYW1lcmEtY2FwdHVyZS5sZXNzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jYW1lcmEtY2FwdHVyZS5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FtZXJhLWNhcHR1cmUubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNhbWVyYS1jdHJsLWJveC1zbWFsbHtkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NjBweDt3aWR0aDo2MHB4O21hcmdpbi1sZWZ0OjEwcHg7bWFyZ2luLXJpZ2h0OjEwcHg7dmVydGljYWwtYWxpZ246Ym90dG9tfS5jYW1lcmEtY3RybC1ib3gtYmlne2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo4NHB4O3dpZHRoOjg0cHg7bWFyZ2luLWxlZnQ6MzZweDttYXJnaW4tcmlnaHQ6MzZweDt2ZXJ0aWNhbC1hbGlnbjpib3R0b219LmNhbWVyYS1jdHJsLWJ0bi1jYW5jZWx7Y29sb3I6cmVkO2JhY2tncm91bmQtY29sb3I6I2Y4ZjlmYX0uY2FtZXJhLWN0cmwtYnRuLWNvbmZpcm17Y29sb3I6Z3JlZW47YmFja2dyb3VuZC1jb2xvcjojZjhmOWZhfS5jYW1lcmEtY3RybC1idG4tc21hbGx7ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OjYwcHg7d2lkdGg6NjBweDtwYWRkaW5nOjRweDttYXJnaW4tYm90dG9tOjA7Zm9udC1zaXplOjUycHg7bGluZS1oZWlnaHQ6MTt0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpub3dyYXA7dmVydGljYWwtYWxpZ246bWlkZGxlOy1tcy10b3VjaC1hY3Rpb246bWFuaXB1bGF0aW9uO3RvdWNoLWFjdGlvbjptYW5pcHVsYXRpb247Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQtaW1hZ2U6bm9uZTtib3JkZXItcmFkaXVzOjUwJX0uY2FtZXJhLWN0cmwtYnRuLWJpZy1pbm5lcntoZWlnaHQ6NjRweDt3aWR0aDo2NHB4O3BhZGRpbmc6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmOGY5ZmE7Ym9yZGVyOjFweCBzb2xpZDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXItY29sb3I6I2Y4ZjlmYX0uY2FtZXJhLWN0cmwtYnRuLWJpZywuY2FtZXJhLWN0cmwtYnRuLWJpZy1pbm5lcntkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tYm90dG9tOjA7dmVydGljYWwtYWxpZ246bWlkZGxlfS5jYW1lcmEtY3RybC1idG4tYmlne2hlaWdodDo4NHB4O3dpZHRoOjg0cHg7cGFkZGluZzoycHg7LW1zLXRvdWNoLWFjdGlvbjptYW5pcHVsYXRpb247dG91Y2gtYWN0aW9uOm1hbmlwdWxhdGlvbjtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwO2JhY2tncm91bmQtaW1hZ2U6bm9uZTtib3JkZXI6OHB4IHNvbGlkO2JvcmRlci1yYWRpdXM6NTAlO2JvcmRlci1jb2xvcjojZjhmOWZhfS5maXhlZHtwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjEwMzB9LmZpeGVkLXRvcHt0b3A6MH0uZml4ZWQtYm90dG9tLC5maXhlZC10b3B7cG9zaXRpb246Zml4ZWQ7cmlnaHQ6MDtsZWZ0OjA7ei1pbmRleDoxMDMwfS5maXhlZC1ib3R0b217Ym90dG9tOjB9LmNhbWVyYS1jdHJsLWJhcntwYWRkaW5nLXRvcDoxMHB4O3BhZGRpbmctYm90dG9tOjEwcHg7ei1pbmRleDoxMDMyIWltcG9ydGFudH0uYmctZGFya3tiYWNrZ3JvdW5kLWNvbG9yOiMzNDNhNDAhaW1wb3J0YW50fS56aW5kZXgtdmlkZW97ei1pbmRleDoxMDMwIWltcG9ydGFudH0uZGlzcGxheS1taXJyb3J7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGVYKC0xKTt0cmFuc2Zvcm06c2NhbGVYKC0xKX0uemluZGV4LXZpZGVvLW92ZXJsYXl7ei1pbmRleDoxMDMxIWltcG9ydGFudH0udy0xMDB7d2lkdGg6MTAwJSFpbXBvcnRhbnR9LmgtMTAwe2hlaWdodDoxMDAlIWltcG9ydGFudH1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvLyBTZXJ2aWNlIHJlc29sdmluZyB2aWRlbyBhbmQgY2FudmFzIHNjcmVlbiBzaXplc1xuY2xhc3MgQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICAkbG9nLFxuICAgIENhbWVyYU92ZXJsYXlIYW5kbGVyXG4gICkge1xuICAgIHRoaXMuJGxvZyA9ICRsb2c7XG4gICAgdGhpcy5DYW1lcmFPdmVybGF5SGFuZGxlciA9IENhbWVyYU92ZXJsYXlIYW5kbGVyO1xuICB9XG5cbiAgLyogR2V0IGhlaWdodCBhbmQgd2lkdGggb2YgdmlkZW8gaW4gcGVyY2VudGFnZSAqIDEwMFxuICAgKiBGdW5jdGlvbiBpcyBiYXNlZCBvZmYgdGhlIGZhY3QgdGhhdCB2aWRlbyBzdHJlYW0gd2lsbCBleHBhbmRcbiAgICogdG8gZmlsbCBvbmUgZGltZW5zaW9uIG9mIHRoZSBzY3JlZW4gYW5kIGJlIGNlbnRlcmVkIHdydCB0aGUgb3RoZXIgZGltZW5zaW9uXG4gICAqIFdlIG5lZWQgdG8ga25vdyB3aGljaCBkaW1lbnNpb24gaXQgaXNcbiAgICovXG4gIGdldFZpZGVvU3BlY2lmaWNhdGlvbnMoXG4gICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICApIHtcbiAgICB0aGlzLiRsb2cuZGVidWcoJ0NvbXB1dGluZyB2aWRlbyBzcGVjcycpO1xuICAgIGxldCB2aWRlb0hlaWdodEluUGVyY2VudGFnZSA9IDEwMDtcbiAgICBsZXQgdmlkZW9XaWR0aEluUGVyY2VudGFnZSA9IDEwMDtcblxuICAgIGlmIChoYXNOYXJyb3dWaWRlb0luUG9ydHJhaXRTY3JlZW4oXG4gICAgICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICAgICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgICApKSB7XG4gICAgICB0aGlzLiRsb2cuZGVidWcoJyh2aWRlbykgUG9ydHJhaXQgbmFycm93IHNjcmVlbicpO1xuICAgICAgY29uc3QgdmlkZW9SZXNSYXRpbyA9IHZpZGVvUmVzSGVpZ2h0IC8gdmlkZW9SZXNXaWR0aDtcbiAgICAgIGNvbnN0IHNjcmVlblJlc1JhdGlvID0gc2NyZWVuSGVpZ2h0IC8gc2NyZWVuV2lkdGg7XG4gICAgICB2aWRlb0hlaWdodEluUGVyY2VudGFnZSA9IHBhcnNlSW50KCh2aWRlb1Jlc1JhdGlvIC8gc2NyZWVuUmVzUmF0aW8pICogMTAwLCAxMCk7XG4gICAgfSBlbHNlIGlmIChoYXNOYXJyb3dWaWRlb0luTGFuZFNjYXBlU2NyZWVuKFxuICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgKSkge1xuICAgICAgdGhpcy4kbG9nLmRlYnVnKCcodmlkZW8pIExhbmRzY2FwZSBuYXJyb3cgc2NyZWVuJyk7XG4gICAgICBjb25zdCB2aWRlb1Jlc1JhdGlvID0gdmlkZW9SZXNXaWR0aCAvIHZpZGVvUmVzSGVpZ2h0O1xuICAgICAgY29uc3Qgc2NyZWVuUmVzUmF0aW8gPSBzY3JlZW5XaWR0aCAvIHNjcmVlbkhlaWdodDtcbiAgICAgIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UgPSBwYXJzZUludCgodmlkZW9SZXNSYXRpbyAvIHNjcmVlblJlc1JhdGlvKSAqIDEwMCwgMTApO1xuICAgIH1cbiAgICAvLyBXZSBzaG91bGQgbm90IGdldCBhIFwibm9ybWFsXCIgY2FzZSBoZXJlXG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyB3aWR0aCA6ICR7dmlkZW9XaWR0aEluUGVyY2VudGFnZX1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHZpZGVvIGhlaWdodCA6ICR7dmlkZW9IZWlnaHRJblBlcmNlbnRhZ2V9YCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsXG4gICAgICB2aWRlb1dpZHRoSW5QZXJjZW50YWdlXG4gICAgfTtcbiAgfVxuXG4gIC8qIEdldCBkaW1lbnNpb24sIG9mZnNldCBhbmQgcmVzb2x1dGlvbiBvZiBkcmF3aW5nIGZvciBjYW52YXNcbiAgICogRnVuY3Rpb24gaXMgYmFzZWQgb2ZmIHRoZSBmYWN0IHRoYXQgdmlkZW8gc3RyZWFtIHdpbGwgZXhwYW5kXG4gICAqIHRvIGZpbGwgb25lIGRpbWVuc2lvbiBvZiB0aGUgc2NyZWVuIGFuZCBiZSBjZW50ZXJlZCB3cnQgdGhlIG90aGVyIGRpbWVuc2lvblxuICAgKiBXZSBuZWVkIHRvIGtub3cgd2hpY2ggZGltZW5zaW9uIGl0IGlzXG4gICAqL1xuICBnZXRDYW52YXNTcGVjaWZpY2F0aW9ucyhcbiAgICB2aWRlb0hlaWdodEluUGVyY2VudGFnZSwgdmlkZW9XaWR0aEluUGVyY2VudGFnZSxcbiAgICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICkge1xuICAgIHRoaXMuJGxvZy5kZWJ1ZygnQ29tcHV0aW5nIGNhbnZhcyBzcGVjcycpO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgdmlkZW8gd2lkdGggOiAke3ZpZGVvV2lkdGhJblBlcmNlbnRhZ2V9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyBoZWlnaHQgOiAke3ZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlfWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1Zyhgc2NyZWVuIHdpZHRoIDogJHtzY3JlZW5XaWR0aH1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHNjcmVlbiBoZWlnaHQgOiAke3NjcmVlbkhlaWdodH1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHZpZGVvIHJlcyB3aWR0aCA6ICR7dmlkZW9SZXNXaWR0aH1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHZpZGVvIHJlcyBoZWlnaHQgOiAke3ZpZGVvUmVzSGVpZ2h0fWApO1xuXG4gICAgbGV0IGNhbnZhc0RpbWVuc2lvbnMgPSBudWxsO1xuXG4gICAgLy8gaGFuZGxlIGxheW91dCB3aGVyZSBhIGxhbmRzY2FwZSBzY3JlZW4gaGFzIGEgbG9uZyBhbmQgbmFycm93ZXIgY2FtZXJhIHdpbmRvdyBpbiBpdFxuICAgIGlmIChoYXNOYXJyb3dWaWRlb0luUG9ydHJhaXRTY3JlZW4oXG4gICAgICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICAgICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgICApKSB7XG4gICAgICB0aGlzLiRsb2cuZGVidWcoJyhjYW52YXMpIFBvcnRyYWl0IG5hcnJvdyBzY3JlZW4nKTtcbiAgICAgIGNhbnZhc0RpbWVuc2lvbnMgPSBnZXRDYW52YXNTcGVjc0ZvclBvcnRyYWl0U2NyZWVuV2l0aE5hcnJvd1ZpZGVvKFxuICAgICAgICB2aWRlb0hlaWdodEluUGVyY2VudGFnZSwgdmlkZW9XaWR0aEluUGVyY2VudGFnZSxcbiAgICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChoYXNOYXJyb3dWaWRlb0luTGFuZFNjYXBlU2NyZWVuKFxuICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgKSkge1xuICAgICAgdGhpcy4kbG9nLmRlYnVnKCcoY2FudmFzKSBMYW5kc2NhcGUgbmFycm93IHNjcmVlbicpO1xuICAgICAgY2FudmFzRGltZW5zaW9ucyA9IGdldENhbnZhc1NwZWNzRm9yTGFuZHNjYXBlU2NyZWVuV2l0aE5hcnJvd1ZpZGVvKFxuICAgICAgICB2aWRlb0hlaWdodEluUGVyY2VudGFnZSwgdmlkZW9XaWR0aEluUGVyY2VudGFnZSxcbiAgICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnKGNhbnZhcykgTm9ybWFsIHNjcmVlbicpO1xuICAgICAgY2FudmFzRGltZW5zaW9ucyA9IGdldENhbnZhc1NwZWNzKFxuICAgICAgICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICAgICAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQsIHdpZHRoLFxuICAgICAgeU9mZnNldCwgeE9mZnNldCxcbiAgICAgIHBhaW50SGVpZ2h0LCBwYWludFdpZHRoXG4gICAgfSA9IGNhbnZhc0RpbWVuc2lvbnM7XG5cbiAgICB0aGlzLiRsb2cuZGVidWcoYGNhbnZhcyB3aWR0aCA6ICR7d2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBjYW52YXMgaGVpZ2h0IDogJHtoZWlnaHR9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBjYW52YXMgeC1vZmZzZXQgOiAke3hPZmZzZXR9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBjYW52YXMgeS1vZmZzZXQgOiAke3lPZmZzZXR9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBjYW52YXMgd2lkdGggdG8gcGFpbnQgOiAke3BhaW50V2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBjYW52YXMgaGVpZ2h0IHRvIHBhaW50IDogJHtwYWludEhlaWdodH1gKTtcblxuICAgIHJldHVybiBjYW52YXNEaW1lbnNpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkaW1lbnNpb24sIG9mZnNldCBvZiBjYW1lcmEgb3ZlcmxheVxuICAgKi9cbiAgZ2V0T3ZlcmxheVNwZWNpZmljYXRpb25zKFxuICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgb3ZlcmxheU5hdHVyYWxIZWlnaHQsIG92ZXJsYXlOYXR1cmFsV2lkdGhcbiAgKSB7XG4gICAgY29uc3Qge1xuICAgICAgaGVpZ2h0OiBjb250YWluZXJIZWlnaHQsIHdpZHRoOiBjb250YWluZXJXaWR0aCxcbiAgICAgIHlPZmZzZXQ6IGNvbnRhaW5lcllPZmZzZXQsIHhPZmZzZXQ6IGNvbnRhaW5lclhPZmZzZXQsXG4gICAgfSA9IENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyLmdldE92ZXJsYXlDb250YWluZXIoc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCk7XG5cbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQ6IG92ZXJsYXlIZWlnaHQsIHdpZHRoOiBvdmVybGF5V2lkdGgsXG4gICAgICB5T2Zmc2V0OiBvdmVybGF5WU9mZnNldCwgeE9mZnNldDogb3ZlcmxheVhPZmZzZXQsXG4gICAgfSA9IHRoaXMuQ2FtZXJhT3ZlcmxheUhhbmRsZXIuZ2V0T3ZlcmxheVNwZWNpZmljYXRpb25zV3J0Q29udGFpbmVyKFxuICAgICAgY29udGFpbmVySGVpZ2h0LCBjb250YWluZXJXaWR0aCxcbiAgICAgIG92ZXJsYXlOYXR1cmFsSGVpZ2h0LCBvdmVybGF5TmF0dXJhbFdpZHRoXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IG92ZXJsYXlIZWlnaHQsXG4gICAgICB3aWR0aDogb3ZlcmxheVdpZHRoLFxuICAgICAgeU9mZnNldDogY29udGFpbmVyWU9mZnNldCArIG92ZXJsYXlZT2Zmc2V0LFxuICAgICAgeE9mZnNldDogY29udGFpbmVyWE9mZnNldCArIG92ZXJsYXlYT2Zmc2V0XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSAxOjEgYm94IGNvbnRhaW5lciBiYXNlZCBvbiBzY3JlZW4gc2l6ZSB0byByZW5kZXIgb3ZlcmxheVxuICAgKi9cbiAgc3RhdGljIGdldE92ZXJsYXlDb250YWluZXIoc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCkge1xuICAgIGlmIChDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlci5pc1NjcmVlblBvcnRyYWl0KHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IHNjcmVlbldpZHRoLFxuICAgICAgICB3aWR0aDogc2NyZWVuV2lkdGgsXG4gICAgICAgIHlPZmZzZXQ6IChzY3JlZW5IZWlnaHQgLSBzY3JlZW5XaWR0aCkgLyAyLjUsIC8vIFBsYWNlIGNvbnRhaW5lciBhYm92ZSBtaWRkbGVcbiAgICAgICAgeE9mZnNldDogMCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gaXNMYW5kc2NhcGVcbiAgICBjb25zdCBhdmFpbGFibGVIZWlnaHQgPSBzY3JlZW5IZWlnaHQgKiAwLjkwOyAvLyBMZWF2ZSB0aGUgYnRtIDEwJSBibGFua1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGF2YWlsYWJsZUhlaWdodCxcbiAgICAgIHdpZHRoOiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB5T2Zmc2V0OiAwLFxuICAgICAgeE9mZnNldDogKHNjcmVlbldpZHRoIC0gYXZhaWxhYmxlSGVpZ2h0KSAvIDIsXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBpc1NjcmVlblBvcnRyYWl0KHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpIHtcbiAgICByZXR1cm4gc2NyZWVuSGVpZ2h0ID49IHNjcmVlbldpZHRoO1xuICB9XG5cbiAgc3RhdGljIGlzU2NyZWVuTGFuZHNjYXBlKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpIHtcbiAgICByZXR1cm4gc2NyZWVuV2lkdGggPj0gc2NyZWVuSGVpZ2h0O1xuICB9XG59XG5cbi8qKlxuICogRnVuY3Rpb25zIGJlbG93IGhhbmRsZSBjYXNlcyB3aGVuIHNjcmVlbiBkaW1lbnNpb24gYW5kIHZpZGVvIHJlc29sdXRpb25cbiAqIHJlc29sdmUgaW50byBhIG5hcnJvdyB2aWRlbyBzY3JlZW4gd2l0aCB0aGluIGFuZCB1Z2x5IG1hcmdpbmVzIGF0IHNpZGVzXG4gKiBJbiB0aGlzIGNhc2Ugd2UgdHJ1bmNhdGUgdGhlIGRpbWVuc2lvbiBvZiB2aWRlbyBjYXVzaW5nIHRoZSB1Z2x5IG1hcmdpbmVzXG4gKiBhbmQgZ2V0IHZpZGVvIHRvIGZpbGwgdXAgdGhlIGVudGlyZSBzY3JlZW5cbiAqL1xuXG5mdW5jdGlvbiBoYXNOYXJyb3dWaWRlb0luUG9ydHJhaXRTY3JlZW4oc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCwgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGgpIHtcbiAgcmV0dXJuIENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyLmlzU2NyZWVuUG9ydHJhaXQoc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aClcbiAgICAmJiB2aWRlb1Jlc0hlaWdodCAvIHZpZGVvUmVzV2lkdGggPiBzY3JlZW5IZWlnaHQgLyBzY3JlZW5XaWR0aDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FudmFzU3BlY3NGb3JQb3J0cmFpdFNjcmVlbldpdGhOYXJyb3dWaWRlbyhcbiAgdmlkZW9IZWlnaHQsIHZpZGVvV2lkdGgsXG4gIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4pIHtcbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IHNjcmVlbkhlaWdodCxcbiAgICB3aWR0aDogc2NyZWVuV2lkdGgsXG4gICAgeU9mZnNldDogMCxcbiAgICB4T2Zmc2V0OiAwLFxuICAgIHBhaW50SGVpZ2h0OiBwYXJzZUludCh2aWRlb1Jlc0hlaWdodCAvICh2aWRlb0hlaWdodCAvIDEwMC4wKSwgMTApLFxuICAgIHBhaW50V2lkdGg6IHZpZGVvUmVzV2lkdGhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzTmFycm93VmlkZW9JbkxhbmRTY2FwZVNjcmVlbihzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLCB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aCkge1xuICByZXR1cm4gQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIuaXNTY3JlZW5MYW5kc2NhcGUoc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aClcbiAgICAmJiB2aWRlb1Jlc1dpZHRoIC8gdmlkZW9SZXNIZWlnaHQgPiBzY3JlZW5XaWR0aCAvIHNjcmVlbkhlaWdodDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FudmFzU3BlY3NGb3JMYW5kc2NhcGVTY3JlZW5XaXRoTmFycm93VmlkZW8oXG4gIHZpZGVvSGVpZ2h0LCB2aWRlb1dpZHRoLFxuICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuKSB7XG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBzY3JlZW5IZWlnaHQsXG4gICAgd2lkdGg6IHNjcmVlbldpZHRoLFxuICAgIHlPZmZzZXQ6IDAsXG4gICAgeE9mZnNldDogMCxcbiAgICBwYWludEhlaWdodDogdmlkZW9SZXNIZWlnaHQsXG4gICAgcGFpbnRXaWR0aDogcGFyc2VJbnQodmlkZW9SZXNXaWR0aCAvICh2aWRlb1dpZHRoIC8gMTAwKSwgMTApXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc1NwZWNzKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoKSB7XG4gIGNvbnN0IGhlaWdodE11bHQgPSBzY3JlZW5IZWlnaHQgLyB2aWRlb1Jlc0hlaWdodDtcbiAgY29uc3Qgd2lkdGhNdWx0ID0gc2NyZWVuV2lkdGggLyB2aWRlb1Jlc1dpZHRoO1xuICBsZXQgY2FudmFzV2lkdGggPSAwO1xuICBsZXQgY2FudmFzSGVpZ2h0ID0gMDtcbiAgbGV0IGNhbnZhc1hPZmZzZXQgPSAwO1xuICBsZXQgY2FudmFzWU9mZnNldCA9IDA7XG5cbiAgaWYgKGhlaWdodE11bHQgPT09IHdpZHRoTXVsdCkge1xuICAgIGNhbnZhc1dpZHRoID0gc2NyZWVuV2lkdGg7XG4gICAgY2FudmFzSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuICAgIGNhbnZhc1hPZmZzZXQgPSAwO1xuICAgIGNhbnZhc1lPZmZzZXQgPSAwO1xuICB9IGVsc2UgaWYgKGhlaWdodE11bHQgPiB3aWR0aE11bHQpIHtcbiAgICBjYW52YXNXaWR0aCA9IHNjcmVlbldpZHRoO1xuICAgIGNhbnZhc0hlaWdodCA9IHBhcnNlSW50KHdpZHRoTXVsdCAqIHZpZGVvUmVzSGVpZ2h0LCAxMCk7XG4gICAgY2FudmFzWE9mZnNldCA9IDA7XG4gICAgY2FudmFzWU9mZnNldCA9IHBhcnNlSW50KChzY3JlZW5IZWlnaHQgLSBjYW52YXNIZWlnaHQpIC8gMiwgMTApO1xuICB9IGVsc2Uge1xuICAgIGNhbnZhc1dpZHRoID0gcGFyc2VJbnQoaGVpZ2h0TXVsdCAqIHZpZGVvUmVzV2lkdGgsIDEwKTtcbiAgICBjYW52YXNIZWlnaHQgPSBzY3JlZW5IZWlnaHQ7XG4gICAgY2FudmFzWE9mZnNldCA9IHBhcnNlSW50KChzY3JlZW5XaWR0aCAtIGNhbnZhc1dpZHRoKSAvIDIsIDEwKTtcbiAgICBjYW52YXNZT2Zmc2V0ID0gMDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBjYW52YXNIZWlnaHQsXG4gICAgd2lkdGg6IGNhbnZhc1dpZHRoLFxuICAgIHlPZmZzZXQ6IGNhbnZhc1lPZmZzZXQsXG4gICAgeE9mZnNldDogY2FudmFzWE9mZnNldCxcbiAgICBwYWludEhlaWdodDogdmlkZW9SZXNIZWlnaHQsXG4gICAgcGFpbnRXaWR0aDogdmlkZW9SZXNXaWR0aFxuICB9O1xufVxuXG5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlci4kaW5qZWN0ID0gW1xuICAnJGxvZycsXG4gICdDYW1lcmFPdmVybGF5SGFuZGxlcidcbl07XG5cbmV4cG9ydCBkZWZhdWx0IENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyO1xuIiwiLy8gU2VydmljZSByZXNvbHZpbmcgdmlkZW8gYW5kIGNhbnZhcyBzY3JlZW4gc2l6ZXNcbmNsYXNzIENhbWVyYU92ZXJsYXlIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICkge1xuICAgIHRoaXMub3ZlcmxheVhNYXJnaW4gPSAwLjA3NTtcbiAgICB0aGlzLm92ZXJsYXlZTWFyZ2luID0gMC4wNzU7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZW4gYSBib3ggY29udGFpbmVyLCBwcm9kdWNlIG92ZXJsYXkgd2l0aCBjZXJ0YWluIGRpbWVuc2lvbnNcbiAgICogYW5kIGNlcnRhaW4gb2Zmc2V0cyB3cnQgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgZ2V0T3ZlcmxheVNwZWNpZmljYXRpb25zV3J0Q29udGFpbmVyKFxuICAgIGNvbnRhaW5lckhlaWdodCwgY29udGFpbmVyV2lkdGgsXG4gICAgb3ZlcmxheU5hdHVyYWxIZWlnaHQsIG92ZXJsYXlOYXR1cmFsV2lkdGhcbiAgKSB7XG4gICAgY29uc3Qgb3ZlcmxheUhlaWdodFdpZHRoUmF0aW8gPSBvdmVybGF5TmF0dXJhbEhlaWdodCAvIG92ZXJsYXlOYXR1cmFsV2lkdGg7XG4gICAgLy8gTWF4IHdpZHRoIGFuZCBoZWlnaHQgYXJlIGNvbnRhaW5lciB3aWR0aC9oZWlnaHQgd2l0aCBtYXJnaW5zIGFwcGxpZWRcbiAgICBjb25zdCBtYXhXaWR0aCA9IGNvbnRhaW5lcldpZHRoIC0gMiAqIGNvbnRhaW5lcldpZHRoICogdGhpcy5vdmVybGF5WE1hcmdpbjtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBjb250YWluZXJIZWlnaHQgLSAyICogY29udGFpbmVySGVpZ2h0ICogdGhpcy5vdmVybGF5WU1hcmdpbjtcblxuICAgIGxldCB3aWR0aDtcbiAgICBsZXQgaGVpZ2h0O1xuICAgIC8vIE92ZXJsYXkgZGltZW5zaW9uIGlzIGJlaW5nIHJlc3RyaWN0ZWQgYnkgd2lkdGhcbiAgICBpZiAobWF4V2lkdGggKiBvdmVybGF5SGVpZ2h0V2lkdGhSYXRpbyA+PSBtYXhIZWlnaHQpIHtcbiAgICAgIGhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgIHdpZHRoID0gaGVpZ2h0IC8gb3ZlcmxheUhlaWdodFdpZHRoUmF0aW87XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoID0gbWF4V2lkdGg7XG4gICAgICBoZWlnaHQgPSB3aWR0aCAqIG92ZXJsYXlIZWlnaHRXaWR0aFJhdGlvO1xuICAgIH1cblxuICAgIGNvbnN0IHhPZmZzZXQgPSAoY29udGFpbmVyV2lkdGggLSB3aWR0aCkgLyAyO1xuICAgIGNvbnN0IHlPZmZzZXQgPSAoY29udGFpbmVySGVpZ2h0IC0gaGVpZ2h0KSAvIDI7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0LFxuICAgICAgd2lkdGgsXG4gICAgICB5T2Zmc2V0LFxuICAgICAgeE9mZnNldFxuICAgIH07XG4gIH1cbn1cblxuQ2FtZXJhT3ZlcmxheUhhbmRsZXIuJGluamVjdCA9IFtcbl07XG5cbmV4cG9ydCBkZWZhdWx0IENhbWVyYU92ZXJsYXlIYW5kbGVyO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgVXBsb2FkQnV0dG9uIGZyb20gJy4vdXBsb2FkLWJ1dHRvbi5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmJ1dHRvbicsIFtdKVxuICAuY29tcG9uZW50KCd0d1VwbG9hZEJ1dHRvbicsIFVwbG9hZEJ1dHRvbilcbiAgLm5hbWU7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi91cGxvYWQtYnV0dG9uLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi91cGxvYWQtYnV0dG9uLmNvbnRyb2xsZXInO1xuXG5jb25zdCBVcGxvYWRCdXR0b24gPSB7XG4gIHRlbXBsYXRlLFxuICBjb250cm9sbGVyLFxuICBiaW5kaW5nczoge1xuICAgIG5hbWU6ICc8JyxcbiAgICBsYWJlbDogJzwnLFxuICAgIGlzU2Vjb25kYXJ5OiAnPCcsXG4gICAgc21hbGw6ICc8JyxcbiAgICBibG9jazogJzwnLFxuICAgIGFjY2VwdDogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgbXVsdGlwbGU6ICc8JyxcbiAgICBkaXNhYmxlZDogJzwnLFxuICAgIG9uQ2xpY2s6ICcmJyxcbiAgICBvbkNhcHR1cmU6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVcGxvYWRCdXR0b247XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGxhYmVsIGNsYXNzPWJ0biBuZy1jbGljaz0kY3RybC5vbkJ1dHRvbkNsaWNrKCkgbmctY2xhc3M9XFxcInsgJ2Rpc2FibGVkJzogJGN0cmwuZGlzYWJsZWQsXFxuICAgICAgICAgICAgICAnYnRuLXByaW1hcnknOiAhJGN0cmwuaXNTZWNvbmRhcnksXFxuICAgICAgICAgICAgICAnYnRuLWRlZmF1bHQnOiAkY3RybC5pc1NlY29uZGFyeSxcXG4gICAgICAgICAgICAgICdidG4tYmxvY2snOiAkY3RybC5ibG9jayxcXG4gICAgICAgICAgICAgICdidG4tc20nOiAkY3RybC5zbWFsbFxcbiAgICAgICAgICAgIH1cXFwiPiA8c3BhbiBuZy1pZj0kY3RybC5sYWJlbCBuZy1iaW5kPSRjdHJsLmxhYmVsPjwvc3Bhbj4gPHNwYW4gbmctaWY9ISRjdHJsLmxhYmVsIGNsYXNzPVxcXCJpY29uIGljb24tdXBsb2FkIG0tci0wXFxcIj48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5pc0xpdmVDYW1lcmFVcGxvYWQ+IDxpbnB1dCBuZy1pZj0hJGN0cmwubXVsdGlwbGUgdHctZmlsZS1pbnB1dCB0eXBlPWZpbGUgYWNjZXB0PVxcXCJ7eyAkY3RybC5hY2NlcHQgfX1cXFwiIGNsYXNzPVxcXCJ0dy1kcm9wcGFibGUtaW5wdXQgaGlkZGVuXFxcIiBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5hbWU9XFxcInt7ICRjdHJsLm5hbWUgfX1cXFwiIG9uLXVzZXItaW5wdXQ9JGN0cmwub25CdXR0b25DYXB0dXJlKCkgbmctbW9kZWw9JGN0cmwubW9kZWwgLz4gPGlucHV0IG5nLWlmPSRjdHJsLm11bHRpcGxlIHR3LWZpbGUtaW5wdXQgdHlwZT1maWxlIGFjY2VwdD1cXFwie3sgJGN0cmwuYWNjZXB0IH19XFxcIiBjbGFzcz1cXFwidHctZHJvcHBhYmxlLWlucHV0IGhpZGRlblxcXCIgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuYW1lPVxcXCJ7eyAkY3RybC5uYW1lIH19XFxcIiBvbi11c2VyLWlucHV0PSRjdHJsLm9uQnV0dG9uQ2FwdHVyZSgpIG5nLW1vZGVsPSRjdHJsLm1vZGVsIG11bHRpcGxlPW11bHRpcGxlIC8+IDwvc3Bhbj4gPC9sYWJlbD5cIjsiLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gIH1cblxuICBvbkJ1dHRvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLm9uQ2xpY2spIHtcbiAgICAgIHRoaXMub25DbGljaygpO1xuICAgIH1cbiAgfVxuXG4gIG9uQnV0dG9uQ2FwdHVyZSgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy4kZWxlbWVudFswXTtcbiAgICBjb25zdCB1cGxvYWRJbnB1dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLnR3LWRyb3BwYWJsZS1pbnB1dCcpO1xuICAgIGNvbnN0IGZpbGVzID0gdXBsb2FkSW5wdXQuZmlsZXM7XG5cbiAgICB0aGlzLm9uQ2FwdHVyZSh7IGZpbGVzIH0pO1xuICB9XG59XG5cbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnXTtcblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENhbWVyYUJ1dHRvbiBmcm9tICcuL2NhbWVyYS1idXR0b24uY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5jYW1lcmEtYnV0dG9uJywgW10pXG4gIC5jb21wb25lbnQoJ3R3Q2FtZXJhQnV0dG9uJywgQ2FtZXJhQnV0dG9uKVxuICAubmFtZTtcbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NhbWVyYS1idXR0b24uaHRtbCc7XG5pbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NhbWVyYS1idXR0b24uY29udHJvbGxlcic7XG5cbmNvbnN0IENhbWVyYUJ1dHRvbiA9IHtcbiAgdGVtcGxhdGUsXG4gIGNvbnRyb2xsZXIsXG4gIGJpbmRpbmdzOiB7XG4gICAgbGFiZWw6ICc8JyxcbiAgICBkaXNhYmxlZDogJzwnLFxuICAgIG9uQ2xpY2s6ICcmJyxcbiAgICBvbkNhcHR1cmU6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFCdXR0b247XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGxhYmVsIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIG5nLWNsaWNrPSRjdHJsLm9uQnV0dG9uQ2xpY2soKSBuZy1jbGFzcz1cXFwieyAnZGlzYWJsZWQnOiAkY3RybC5kaXNhYmxlZCB9XFxcIj4gPHNwYW4gbmctaWY9JGN0cmwubGFiZWwgbmctYmluZD0kY3RybC5sYWJlbD48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5sYWJlbCBjbGFzcz1cXFwiaWNvbiBpY29uLXVwbG9hZCBtLXItMFxcXCI+PC9zcGFuPiA8L2xhYmVsPiBcIjsiLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgb25CdXR0b25DbGljaygpIHtcbiAgICBpZiAodGhpcy5vbkNsaWNrKSB7XG4gICAgICB0aGlzLm9uQ2xpY2soKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsIlxuZnVuY3Rpb24gRmlsZUlucHV0RGlyZWN0aXZlKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogRmlsZUlucHV0Q29udHJvbGxlcixcbiAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICBzY29wZToge1xuICAgICAgb25Vc2VySW5wdXQ6ICcmJ1xuICAgIH1cbiAgfTtcbn1cblxuY2xhc3MgRmlsZUlucHV0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub25Vc2VySW5wdXRcbiAgICAgICAgJiYgdHlwZW9mIHRoaXMub25Vc2VySW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vblVzZXJJbnB1dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbkZpbGVJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnXTtcblxuZXhwb3J0IGRlZmF1bHQgRmlsZUlucHV0RGlyZWN0aXZlO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgTXVsdGlVcGxvYWQgZnJvbSAnLi9tdWx0aS11cGxvYWQuY29tcG9uZW50JztcbmltcG9ydCBEcmFnQW5kRHJvcCBmcm9tICcuLi8uLi9kcmFnLWFuZC1kcm9wJztcbmltcG9ydCBQcm9jZXNzaW5nQ2FyZCBmcm9tICcuLi9wcm9jZXNzaW5nLWNhcmQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLm11bHRpJywgW1xuICAgIFByb2Nlc3NpbmdDYXJkLFxuICAgIERyYWdBbmREcm9wXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3TXVsdGlVcGxvYWQnLCBNdWx0aVVwbG9hZClcbiAgLm5hbWU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL211bHRpLXVwbG9hZC5jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL211bHRpLXVwbG9hZC5odG1sJztcblxuY29uc3QgQ29tcG9uZW50ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgbmdNb2RlbDogJz0nLFxuICAgIG5nQ2hhbmdlOiAnJicsXG4gICAgbmFtZTogJ0AnLFxuICAgIGxhYmVsOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICBpY29uOiAnQCcsIC8vIGlsbHVzdHJhdGlvbiBpbiBpY29uIHNob3duIGluIHVwbG9hZCBib3hcblxuICAgIGJ1dHRvblRleHQ6ICdAJywgLy8gQnV0dG9uIHRleHQgc2hvd24gaW4gZGVmYXVsdCBzdGF0ZVxuICAgIHNlY29uZGFyeUJ1dHRvblRleHQ6ICdAJywgLy8gQnV0dG9uIHRleHQgc2hvd24gaW4gcHJvY2Vzc2luZyBzdGF0ZVxuXG4gICAgZHJvcHBpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hlbiBob3ZlcmluZyB3aXRoIGEgZmlsZVxuICAgIHByb2Nlc3NpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hpbGUgcHJvY2Vzc2luZy91cGxvYWRpbmdcbiAgICBzdWNjZXNzVGV4dDogJ0AnLCAvLyBUZXh0IGFmdGVyIHVwbG9hZCBpcyBzdWNjZXNzZnVsLCBzaG93biBxdWl0ZSBicmllZmx5IGJlZm9yZSBwcmV2aWV3XG4gICAgZmFpbHVyZVRleHQ6ICdAJyxcblxuICAgIHRvb0xhcmdlTWVzc2FnZTogJ0AnLFxuICAgIC8vIHdyb25nVHlwZU1lc3NhZ2U6ICdAJyxcblxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuXG4gICAgb25TdGFydDogJyYnLFxuICAgIG9uRmluaXNoOiAnJicsXG5cbiAgICBhY2NlcHQ6ICdAJyxcbiAgICBodHRwT3B0aW9uczogJzwnLFxuXG4gICAgbWF4U2l6ZTogJzwnLCAvLyBUT0RPIG1vdmUgdG8gbmdNYXg/XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICAkZWxlbWVudCxcbiAgICAkc2NvcGUsXG4gICAgJGF0dHJzLFxuICAgICR0aW1lb3V0LFxuICApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy5maWxlcyA9IFtdO1xuICAgIHRoaXMubW9kZWwgPSBbXTtcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gIH1cblxuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5pY29uKSB7XG4gICAgICB0aGlzLnZpZXdJY29uID0gY2hhbmdlcy5pY29uLmN1cnJlbnRWYWx1ZSA/IGNoYW5nZXMuaWNvbi5jdXJyZW50VmFsdWUgOiAndXBsb2FkJztcbiAgICB9XG4gIH1cblxuICBvbkZpbGVDYXB0dXJlKGZpbGVzKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZmlsZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJldHJpZXZlIGZpbGUnKTtcbiAgICB9XG5cbiAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25TdGFydCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25TdGFydCgpO1xuICAgIH1cblxuICAgIHRoaXMuZmlsZXMgPSBbLi4udGhpcy5maWxlcywgLi4uZmlsZXNdO1xuXG4gICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBvYmpEaXYgPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5wcm9jZXNzaW5nLWxpc3QnKTtcbiAgICAgIGlmIChvYmpEaXYpIHtcbiAgICAgICAgb2JqRGl2LnNjcm9sbFRvcCA9IG9iakRpdi5zY3JvbGxIZWlnaHQ7XG4gICAgICB9XG4gICAgfSwgNjAwKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc1N1Y2Nlc3MoaW5kZXgsIGZpbGUsIGRhdGFVcmwsIGlkKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5odHRwT3B0aW9ucyA/ICdpZCcgOiAnZGF0YVVybCc7XG5cbiAgICB0aGlzLmZpbGVzW2luZGV4XVtrZXldID0gdGhpcy5odHRwT3B0aW9ucyA/IGlkIDogZGF0YVVybDtcblxuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5maWxlcy5tYXAoZmlsZU9iamVjdCA9PiBmaWxlT2JqZWN0W2tleV0pLmZpbHRlcih2YWx1ZSA9PiAhIXZhbHVlKTtcblxuICAgIHRoaXMuc2V0TmdNb2RlbChtb2RlbCk7XG5cbiAgICBpZiAodGhpcy5vbkZpbmlzaCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25GaW5pc2goKTtcbiAgICB9XG4gIH1cblxuICBhcmVBbGxGaWxlc1Byb2Nlc3NlZCgpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmh0dHBPcHRpb25zID8gJ2lkJyA6ICdkYXRhVXJsJztcblxuICAgIGNvbnN0IHByb2Nlc3NpbmdGaWxlID0gdGhpcy5maWxlcy5zb21lKGZpbGUgPT4gZmlsZVtrZXldID09IG51bGwgJiYgZmlsZS5lcnJvciA9PSBudWxsKTtcblxuICAgIHJldHVybiAhcHJvY2Vzc2luZ0ZpbGU7XG4gIH1cblxuICBvblByb2Nlc3NGYWlsdXJlKGluZGV4LCBmaWxlLCBlcnJvcikge1xuICAgIHRoaXMuZmlsZXNbaW5kZXhdLmVycm9yID0gZXJyb3I7XG5cbiAgICBpZiAodGhpcy5vbkZpbmlzaCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25GaW5pc2goKTtcbiAgICB9XG4gIH1cblxuICBvblByb2Nlc3NDYW5jZWwoaW5kZXgpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmh0dHBPcHRpb25zID8gJ2lkJyA6ICdkYXRhVXJsJztcblxuICAgIHRoaXMuZmlsZXMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5maWxlcy5tYXAoZmlsZU9iamVjdCA9PiBmaWxlT2JqZWN0W2tleV0pLmZpbHRlcih2YWx1ZSA9PiAhIXZhbHVlKTtcblxuICAgIHRoaXMuc2V0TmdNb2RlbChtb2RlbCk7XG4gIH1cblxuICBvbkRyYWdFbnRlcigpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIG9uRHJhZ0xlYXZlKCkge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSBmYWxzZTtcbiAgfVxuXG4gIG9uRHJvcChmaWxlcykge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm9uRmlsZUNhcHR1cmUoZmlsZXMpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zZXROZ01vZGVsKG51bGwpO1xuICB9XG5cbiAgc2V0TmdNb2RlbCh2YWx1ZSkge1xuICAgIC8vIElmIG5nTW9kZWwgbm90IGFzc2lnbmFibGUsIHdlIGRvbid0IHdhbnQgdG8gZXJyb3IuXG4gICAgaWYgKHR5cGVvZiB0aGlzLiRhdHRycy5uZ01vZGVsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICAgIGlmICghJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHNjb3BlJyxcbiAgJyRhdHRycycsXG4gICckdGltZW91dCcsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcIndlbGwgZHJvcHBhYmxlIHAtci0wIHAtbC0wIHAtdC0xIHAtYi0wIG11bHRpLXVwbG9hZFxcXCIgdHctZHJvcD0kY3RybC5vbkRyb3AoZmlsZXMpIHR3LWRyYWctZW50ZXI9JGN0cmwub25EcmFnRW50ZXIoKSB0dy1kcmFnLWxlYXZlPSRjdHJsLm9uRHJhZ0xlYXZlKCkgbmctY2xhc3M9XFxcInsnZHJvcHBhYmxlLWRyb3BwaW5nJzogJGN0cmwuaXNEcm9wcGFibGV9XFxcIj4gPGRpdiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRyb3BwaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiPiA8dHctdXBsb2FkLWRyb3BwaW5nIGRyb3BwaW5nLXRleHQ9JGN0cmwuZHJvcHBpbmdUZXh0PjwvdHctdXBsb2FkLWRyb3BwaW5nPiA8L2Rpdj4gPGRpdiBuZy1pZj1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID09PSAwXFxcIiBjbGFzcz1cXFwiZW1wdHktcHJvY2Vzc2luZy1saXN0IGRyb3BwYWJsZS1kZWZhdWx0LWNhcmQgdGV4dC14cy1jZW50ZXIgcC10LTNcXFwiPiA8ZGl2IGNsYXNzPWVtcHR5LXNjcmVlbj4gPGRpdiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1zbSBtLWItMyBtLXQtM1xcXCI+IDxpbWcgbmctaWY9JGN0cmwuaGVscEltYWdlIG5nLXNyYz17eyRjdHJsLmhlbHBJbWFnZX19IGFsdD17eyRjdHJsLmxhYmVsfX0gY2xhc3M9XFxcInRodW1ibmFpbCB0ZXh0LXhzLWNlbnRlclxcXCIvPiA8c3BhbiBuZy1pZj0hJGN0cmwuaGVscEltYWdlIGNsYXNzPVxcXCJpY29uIGljb24te3skY3RybC52aWV3SWNvbn19IGljb24teHhsXFxcIj48L3NwYW4+IDwvZGl2PiA8aDQgbmctaWY9JGN0cmwubGFiZWwgY2xhc3M9bS1iLTE+e3skY3RybC5sYWJlbH19PC9oND4gPHAgbmctaWY9JGN0cmwucGxhY2Vob2xkZXIgY2xhc3M9XFxcInAtbC0zIHAtci0zXFxcIj4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvcD4gPC9kaXY+IDwvZGl2PiA8ZGl2IG5nLWlmPVxcXCIkY3RybC5maWxlcy5sZW5ndGggPiAwXFxcIiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRlZmF1bHQtY2FyZCBwLWwtMyBwcm9jZXNzaW5nLWxpc3RcXFwiPiA8ZGl2IG5nLXJlcGVhdD1cXFwiKGluZGV4LCBmaWxlKSBpbiAkY3RybC5maWxlc1xcXCIgY2xhc3M9cC1yLTMgbmctY2xhc3M9XFxcInsnbGFzdC1pdGVtJzogJGxhc3R9XFxcIj4gPHR3LXVwbG9hZC1wcm9jZXNzaW5nLW1pbmkgbmFtZT0kY3RybC5uYW1lIGZpbGU9ZmlsZSBvbi1zdWNjZXNzPVxcXCIkY3RybC5vblByb2Nlc3NTdWNjZXNzKGluZGV4LCBmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UpXFxcIiBvbi1mYWlsdXJlPVxcXCIkY3RybC5vblByb2Nlc3NGYWlsdXJlKGluZGV4LCBmaWxlLCBlcnJvcilcXFwiIG9uLWNhbmNlbD0kY3RybC5vblByb2Nlc3NDYW5jZWwoaW5kZXgpIG1heC1zaXplPSRjdHJsLm1heFNpemUgYWNjZXB0PSRjdHJsLmFjY2VwdCBodHRwLW9wdGlvbnM9JGN0cmwuaHR0cE9wdGlvbnMgcHJvY2Vzc2luZy1tZXNzYWdlPSRjdHJsLnByb2Nlc3NpbmdUZXh0IHN1Y2Nlc3MtbWVzc2FnZT0kY3RybC5zdWNjZXNzVGV4dCBlcnJvci1tZXNzYWdlPSRjdHJsLmZhaWx1cmVUZXh0IHZhbGlkYXRpb24tbWVzc2FnZXM9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzIHRvby1sYXJnZS1tZXNzYWdlPSRjdHJsLnRvb0xhcmdlTWVzc2FnZSBjYW5jZWwtdGV4dD0kY3RybC5jYW5jZWxUZXh0PjwvdHctdXBsb2FkLXByb2Nlc3NpbmctbWluaT4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPW0tYS0zPiA8dHctdXBsb2FkLWJ1dHRvbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkIG5hbWU9JGN0cmwubmFtZSBsYWJlbD1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID09PSAwID8gJGN0cmwuYnV0dG9uVGV4dCA6ICRjdHJsLnNlY29uZGFyeUJ1dHRvblRleHRcXFwiIGlzLXNlY29uZGFyeT1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID4gMFxcXCIgYWNjZXB0PSRjdHJsLmFjY2VwdCBtb2RlbD0kY3RybC5pbnB1dEZpbGUgZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBvbi1jYXB0dXJlPSRjdHJsLm9uRmlsZUNhcHR1cmUoZmlsZXMpIGJsb2NrPXRydWUgc21hbGw9dHJ1ZSBtdWx0aXBsZT10cnVlPjwvdHctdXBsb2FkLWJ1dHRvbj4gPC9kaXY+IDwvZGl2PiBcIjsiLCJmdW5jdGlvbiB0d0Ryb3AoJHBhcnNlLCAkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogKCkgPT4ge1xuXG4gICAgfSxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW0sIGF0dHIpID0+IHtcbiAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuICAgICAgZWxlbVswXS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gJHBhcnNlKGF0dHIudHdEcm9wKTtcblxuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICBmbihzY29wZSwge1xuICAgICAgICAgICAgZmlsZXM6IGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuXG50d0Ryb3AuJGluamVjdCA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInXTtcblxuZXhwb3J0IGRlZmF1bHQgdHdEcm9wO1xuIiwiZnVuY3Rpb24gdHdEcmFnRW50ZXIoJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAndHdEcm9wJyxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW0sIGF0dHIpID0+IHtcbiAgICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gJHBhcnNlKGF0dHIudHdEcmFnRW50ZXIpO1xuICAgICAgICBzY29wZS5jb3VudGVyKys7XG5cbiAgICAgICAgaWYgKHNjb3BlLmNvdW50ZXIgPj0gMSkge1xuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgZm4oc2NvcGUsIHsgJGV2ZW50OiBldmVudCB9KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuXG50d0RyYWdFbnRlci4kaW5qZWN0ID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZSddO1xuXG5leHBvcnQgZGVmYXVsdCB0d0RyYWdFbnRlcjtcbiIsImZ1bmN0aW9uIHR3RHJhZ0xlYXZlKCRwYXJzZSwgJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJ3R3RHJvcCcsXG4gICAgbGluazogKHNjb3BlLCBlbGVtLCBhdHRyKSA9PiB7XG4gICAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBmbiA9ICRwYXJzZShhdHRyLnR3RHJhZ0xlYXZlKTtcbiAgICAgICAgc2NvcGUuY291bnRlci0tO1xuXG4gICAgICAgIGlmIChzY29wZS5jb3VudGVyIDw9IDApIHtcbiAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgIGZuKHNjb3BlLCB7ICRldmVudDogZXZlbnQgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcbn1cblxudHdEcmFnTGVhdmUuJGluamVjdCA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnXTtcblxuZXhwb3J0IGRlZmF1bHQgdHdEcmFnTGVhdmU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2RhdGUuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kYXRlLmh0bWwnO1xuXG5jb25zdCBEYXRlQ29udHJvbCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6IHtcbiAgICAkbmdNb2RlbDogJ25nTW9kZWwnXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdNb2RlbDogJz0nLFxuICAgIHJlcXVpcmVkOiAnQCcsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIGRpc2FibGVkOiAnQCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIGxvY2FsZTogJ0AnLFxuICAgIHR3TG9jYWxlOiAnPCcsXG4gICAgbWluOiAnQCcsXG4gICAgbmdNaW46ICc8JyxcbiAgICBtYXg6ICdAJyxcbiAgICBuZ01heDogJzwnLFxuICAgIG1vZGVsVHlwZTogJ0AnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVDb250cm9sO1xuIiwiY2xhc3MgRGF0ZUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkZWxlbWVudCwgJGxvZywgJHNjb3BlLCBUd0RhdGVTZXJ2aWNlKSB7XG4gICAgY29uc3QgJG5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG5cbiAgICB0aGlzLkRhdGVTZXJ2aWNlID0gVHdEYXRlU2VydmljZTtcbiAgICB0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLm5nTW9kZWwpIHtcbiAgICAgIHRoaXMuYXBwbHlEYXRlTW9kZWxJZlZhbGlkT3JUaHJvd0Vycm9yKCk7XG4gICAgICB0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5tb2RlbFR5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWxUeXBlID09PSBTVFJJTkdfVFlQRSB8fCB0aGlzLm1vZGVsVHlwZSA9PT0gT0JKRUNUX1RZUEUpIHtcbiAgICAgICAgICB0aGlzLmRhdGVNb2RlbFR5cGUgPSB0aGlzLm1vZGVsVHlwZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbW9kZWxUeXBlLCBzaG91bGQgYmUgJHtTVFJJTkdfVFlQRX0gb3IgJHtPQkpFQ1RfVFlQRX1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kYXRlTW9kZWxUeXBlID0gT0JKRUNUX1RZUEU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF5ID0gbnVsbDtcbiAgICAgIHRoaXMubW9udGggPSAwO1xuICAgICAgdGhpcy55ZWFyID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnNldERhdGVSZXF1aXJlZCgpO1xuICAgIHRoaXMuc2V0RGF0ZURpc2FibGVkKCk7XG4gICAgdGhpcy5zZXREYXRlTG9jYWxlKCk7XG5cbiAgICB0aGlzLnNldE1vbnRocygpO1xuXG4gICAgdGhpcy5hZGRWYWxpZGF0b3JzKCRuZ01vZGVsKTtcbiAgICB0aGlzLmFkZFdhdGNoZXJzKCRzY29wZSwgJG5nTW9kZWwpO1xuICAgIGFkZEZvY3VzSGFuZGxlcnMoJGVsZW1lbnQpO1xuICAgIGFkZEJsdXJIYW5kbGVycygkZWxlbWVudCwgJG5nTW9kZWwpO1xuICB9XG5cblxuICBhcHBseURhdGVNb2RlbElmVmFsaWRPclRocm93RXJyb3IoKSB7XG4gICAgaWYgKHZhbGlkRGF0ZSh0aGlzLm5nTW9kZWwpKSB7XG4gICAgICB0aGlzLmRhdGVNb2RlbFR5cGUgPSB0eXBlb2YgdGhpcy5uZ01vZGVsID09PSAnc3RyaW5nJyA/IFNUUklOR19UWVBFIDogT0JKRUNUX1RZUEU7XG5cbiAgICAgIHRoaXMuZXhwbG9kZURhdGVNb2RlbCh0aGlzLm5nTW9kZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGUgbW9kZWwgcGFzc2VkIHNob3VsZCBlaXRoZXIgYmUgaW5zdGFuY2Ugb2YgJ1xuICAgICAgICArICdEYXRlIG9yIHZhbGlkIElTTzg2MDEgc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgc2V0TW9udGhzKCkge1xuICAgIHRoaXMuZGF0ZU1vbnRocyA9IHRoaXMuZ2V0TW9udGhzQmFzZWRPbkludGxTdXBwb3J0Rm9yTG9jYWxlKCk7XG4gIH1cblxuICBzZXREYXRlUmVxdWlyZWQoKSB7XG4gICAgdGhpcy5kYXRlUmVxdWlyZWQgPSB0aGlzLm5nUmVxdWlyZWQgIT09IHVuZGVmaW5lZFxuICAgICAgPyB0aGlzLm5nUmVxdWlyZWRcbiAgICAgIDogdGhpcy5yZXF1aXJlZCAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0RGF0ZURpc2FibGVkKCkge1xuICAgIHRoaXMuZGF0ZURpc2FibGVkID0gdGhpcy5uZ0Rpc2FibGVkICE9PSB1bmRlZmluZWRcbiAgICAgID8gdGhpcy5uZ0Rpc2FibGVkXG4gICAgICA6IHRoaXMuZGlzYWJsZWQgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHNldERhdGVMb2NhbGUoKSB7XG4gICAgaWYgKCF0aGlzLmxvY2FsZSkge1xuICAgICAgdGhpcy5sb2NhbGUgPSBERUZBVUxUX0xPQ0FMRV9FTjtcbiAgICB9XG4gICAgdGhpcy5tb250aEJlZm9yZURheSA9IHRoaXMuRGF0ZVNlcnZpY2UuaXNNb250aEJlZm9yZURheSh0aGlzLmxvY2FsZSk7XG4gIH1cblxuICBleHBsb2RlRGF0ZU1vZGVsKGRhdGUpIHtcbiAgICBjb25zdCBkYXRlT2JqID0gdHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnID8gbmV3IERhdGUoZGF0ZSkgOiBkYXRlO1xuXG4gICAgdGhpcy5kYXkgPSBkYXRlT2JqLmdldFVUQ0RhdGUoKTtcbiAgICB0aGlzLm1vbnRoID0gZGF0ZU9iai5nZXRVVENNb250aCgpO1xuICAgIHRoaXMueWVhciA9IGRhdGVPYmouZ2V0VVRDRnVsbFllYXIoKTtcbiAgfVxuXG4gIGFkZFZhbGlkYXRvcnMoJG5nTW9kZWwpIHtcbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5taW4gPSAodmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGxpbWl0ID0gcHJlcERhdGVMaW1pdEZvckNvbXBhcmlzb24odGhpcy5uZ01pbiwgdGhpcy5taW4pO1xuICAgICAgY29uc3QgZGF0ZVZhbHVlID0gcHJlcERhdGVWYWx1ZUZvckNvbXBhcmlzb24odmFsdWUpO1xuXG4gICAgICByZXR1cm4gIWxpbWl0IHx8ICFkYXRlVmFsdWUgfHwgZGF0ZVZhbHVlID49IGxpbWl0O1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5tYXggPSAodmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGxpbWl0ID0gcHJlcERhdGVMaW1pdEZvckNvbXBhcmlzb24odGhpcy5uZ01heCwgdGhpcy5tYXgpO1xuICAgICAgY29uc3QgZGF0ZVZhbHVlID0gcHJlcERhdGVWYWx1ZUZvckNvbXBhcmlzb24odmFsdWUpO1xuXG4gICAgICByZXR1cm4gIWxpbWl0IHx8ICFkYXRlVmFsdWUgfHwgZGF0ZVZhbHVlIDw9IGxpbWl0O1xuICAgIH07XG4gIH1cblxuICBhZGRXYXRjaGVycygkc2NvcGUsICRuZ01vZGVsKSB7XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwuZGF5JywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSAmJiB0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5tb250aCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5hZGp1c3RMYXN0RGF5KCk7XG4gICAgICAgICRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7IC8vIElucHV0IHdhdGNoZXIgZG9lc24ndCB3b3JrIGZvciBtb250aFxuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXNlZFdpdGhEYXRlKSB7XG4gICAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLnllYXInLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlICYmIHRoaXMuaW5pdGlhbGlzZWRXaXRoRGF0ZSkge1xuICAgICAgICAkbmdNb2RlbC4kc2V0RGlydHkoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nTW9kZWwnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgPT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbGlkRGF0ZSh0aGlzLm5nTW9kZWwpKSB7XG4gICAgICAgICRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgICB0aGlzLmV4cGxvZGVEYXRlTW9kZWwodGhpcy5uZ01vZGVsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nUmVxdWlyZWQnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0RGF0ZVJlcXVpcmVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ0Rpc2FibGVkJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldERhdGVEaXNhYmxlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubG9jYWxlJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldERhdGVMb2NhbGUoKTtcbiAgICAgICAgdGhpcy5zZXRNb250aHMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdldE1vbnRoc0Jhc2VkT25JbnRsU3VwcG9ydEZvckxvY2FsZSgpIHtcbiAgICBjb25zdCBtb250aE5hbWVzID0gdGhpcy5EYXRlU2VydmljZS5nZXRNb250aE5hbWVzRm9yTG9jYWxlKHRoaXMubG9jYWxlKTtcblxuICAgIHJldHVybiBleHRlbmRNb250aHNXaXRoSWRzKG1vbnRoTmFtZXMpO1xuICB9XG5cbiAgY29tYmluZURhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuRGF0ZVNlcnZpY2UuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIE51bWJlcih0aGlzLnllYXIpLFxuICAgICAgTnVtYmVyKHRoaXMubW9udGgpLFxuICAgICAgTnVtYmVyKHRoaXMuZGF5KVxuICAgICk7XG4gIH1cblxuICB1cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIHtcbiAgICB0aGlzLmFkanVzdExhc3REYXkoKTtcblxuICAgIGlmICghaXNFeHBsb2RlZERhdGVQYXR0ZXJuQ29ycmVjdCh0aGlzLnllYXIsIHRoaXMubW9udGgsIHRoaXMuZGF5KSkge1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGVPYmogPSB0aGlzLmNvbWJpbmVEYXRlKCk7XG5cbiAgICBpZiAodGhpcy5kYXRlTW9kZWxUeXBlID09PSBTVFJJTkdfVFlQRSkge1xuICAgICAgY29uc3QgaXNvU3RyaW5nID0gZGF0ZU9iai50b0lTT1N0cmluZygpO1xuICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGlzb1N0cmluZy5zdWJzdHJpbmcoMCwgaXNvU3RyaW5nLmluZGV4T2YoJ1QnKSk7XG5cbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZShkYXRlU3RyaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGRhdGVPYmopO1xuICAgIH1cbiAgfVxuXG4gIGFkanVzdExhc3REYXkoKSB7XG4gICAgY29uc3QgZGF5ID0gTnVtYmVyKHRoaXMuZGF5KTtcbiAgICBjb25zdCBtb250aCA9IE51bWJlcih0aGlzLm1vbnRoKTtcbiAgICBjb25zdCB5ZWFyID0gTnVtYmVyKHRoaXMueWVhcik7XG5cbiAgICBjb25zdCBsYXN0VVRDRGF5Rm9yTW9udGhBbmRZZWFyID0gdGhpcy5EYXRlU2VydmljZS5nZXRMYXN0RGF5T2ZNb250aCh5ZWFyLCBtb250aCk7XG5cbiAgICBpZiAoZGF5ID4gbGFzdFVUQ0RheUZvck1vbnRoQW5kWWVhcikge1xuICAgICAgLy8gVXNpbmcgc2V0Vmlld1ZhbHVlIGRvZXMgbm90IHVwZGF0ZSBET00sIG9ubHkgbW9kZWwuXG4gICAgICB0aGlzLmRheSA9IHBhcnNlSW50KGxhc3RVVENEYXlGb3JNb250aEFuZFllYXIsIDEwKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgREVGQVVMVF9MT0NBTEVfRU4gPSAnZW4nO1xuY29uc3QgU1RSSU5HX1RZUEUgPSAnc3RyaW5nJztcbmNvbnN0IE9CSkVDVF9UWVBFID0gJ29iamVjdCc7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc051bWVyaWNTdHJpbmcodmFsdWUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhaXNOYU4oTnVtYmVyKHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGlzRXhwbG9kZWREYXRlUGF0dGVybkNvcnJlY3QoeWVhciwgbW9udGgsIGRheSkge1xuICByZXR1cm4gaXNOdW1iZXIoeWVhcilcbiAgICAmJiBpc051bWJlcihkYXkpXG4gICAgJiYgKGlzTnVtYmVyKG1vbnRoKSB8fCBpc051bWVyaWNTdHJpbmcobW9udGgpKTtcbn1cblxuZnVuY3Rpb24gdmFsaWREYXRlKGRhdGUpIHtcbiAgcmV0dXJuIHZhbGlkRGF0ZU9iamVjdChkYXRlKSB8fCB2YWxpZERhdGVTdHJpbmcoZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkRGF0ZU9iamVjdChkYXRlT2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0ZU9iaikgPT09ICdbb2JqZWN0IERhdGVdJ1xuICAgICYmICFpc05hTihkYXRlT2JqLmdldFRpbWUoKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG59XG5cbmZ1bmN0aW9uIHZhbGlkRGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIHJldHVybiB0eXBlb2YgZGF0ZVN0cmluZyA9PT0gJ3N0cmluZycgJiYgdmFsaWREYXRlT2JqZWN0KG5ldyBEYXRlKGRhdGVTdHJpbmcpKTtcbn1cblxuZnVuY3Rpb24gcHJlcERhdGVMaW1pdEZvckNvbXBhcmlzb24obmdMaW1pdCwgYXR0ckxpbWl0KSB7XG4gIGxldCBsaW1pdCA9IG5nTGltaXQgfHwgYXR0ckxpbWl0O1xuXG4gIGlmICghbGltaXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGltaXQgPSB0eXBlb2YgbGltaXQgPT09ICdzdHJpbmcnID8gbmV3IERhdGUobGltaXQpIDogbGltaXQ7XG4gIGlmICghdmFsaWREYXRlT2JqZWN0KGxpbWl0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbGltaXQ7XG59XG5cbmZ1bmN0aW9uIHByZXBEYXRlVmFsdWVGb3JDb21wYXJpc29uKGRhdGVWYWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIGRhdGVWYWx1ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZShkYXRlVmFsdWUpIDogZGF0ZVZhbHVlO1xufVxuXG5mdW5jdGlvbiBleHRlbmRNb250aHNXaXRoSWRzKG1vbnRoTmFtZXMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycm93LWJvZHktc3R5bGVcbiAgcmV0dXJuIG1vbnRoTmFtZXMubWFwKChtb250aE5hbWUsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBpbmRleCxcbiAgICAgIGxhYmVsOiBtb250aE5hbWVcbiAgICB9O1xuICB9KTtcbn1cblxuLy8gVE9ETyBiZWhhdmlvdXIgb2YgZm9jdXMvYmx1ciBjb3VsZCBiZSBpbXByb3ZlZCB0byBwcmV2ZW50IG11bHRpcGxlIGZpcmVzXG5mdW5jdGlvbiBhZGRGb2N1c0hhbmRsZXJzKCRlbGVtZW50KSB7XG4gIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgY29uc3QgZGF5SW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9ZGF5XScpO1xuICBjb25zdCB5ZWFySW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9eWVhcl0nKTtcblxuICBkYXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+IHtcbiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfSk7XG5cbiAgeWVhcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQmx1ckhhbmRsZXJzKCRlbGVtZW50LCAkbmdNb2RlbCkge1xuICBsZXQgZGF5VG91Y2hlZDtcbiAgbGV0IHllYXJUb3VjaGVkO1xuXG4gIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgY29uc3QgZGF5SW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9ZGF5XScpO1xuICBjb25zdCB5ZWFySW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9eWVhcl0nKTtcblxuICBkYXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgIGRheVRvdWNoZWQgPSB0cnVlO1xuICAgIGlmIChkYXlUb3VjaGVkICYmIHllYXJUb3VjaGVkKSB7XG4gICAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHllYXJJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgIHllYXJUb3VjaGVkID0gdHJ1ZTtcbiAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gIH0pO1xufVxuXG5EYXRlQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJGxvZycsXG4gICckc2NvcGUnLFxuICAnVHdEYXRlU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9cm93PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNSB0dy1kYXRlLW1vbnRoLWNvbHVtblxcXCIgbmctaWY9JGN0cmwubW9udGhCZWZvcmVEYXk+IDxsYWJlbCBjbGFzcz1zci1vbmx5Pk1vbnRoPC9sYWJlbD4gPHR3LXNlbGVjdCBuYW1lPW1vbnRoIGNsYXNzPXR3LWRhdGUtbW9udGggbmctbW9kZWw9JGN0cmwubW9udGggbmctY2hhbmdlPSRjdHJsLnVwZGF0ZURhdGVNb2RlbEFuZFZhbGlkYXRpb25DbGFzc2VzKCkgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLmRhdGVEaXNhYmxlZCBvcHRpb25zPSRjdHJsLmRhdGVNb250aHM+IDwvdHctc2VsZWN0PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLXNtLTMgdHctZGF0ZS1kYXktY29sdW1uXFxcIj4gPGxhYmVsIGNsYXNzPXNyLW9ubHk+RGF5PC9sYWJlbD4gPGlucHV0IHR5cGU9bnVtYmVyIG5hbWU9ZGF5IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdHctZGF0ZS1kYXlcXFwiIG5nLW1vZGVsPSRjdHJsLmRheSBuZy1jaGFuZ2U9JGN0cmwudXBkYXRlRGF0ZU1vZGVsQW5kVmFsaWRhdGlvbkNsYXNzZXMoKSBwbGFjZWhvbGRlcj1ERCBtaW49MSBuZy1taW49MSBuZy1kaXNhYmxlZD0kY3RybC5kYXRlRGlzYWJsZWQgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIHR3LWZvY3VzYWJsZS8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNSB0dy1kYXRlLW1vbnRoLWNvbHVtblxcXCIgbmctaWY9ISRjdHJsLm1vbnRoQmVmb3JlRGF5PiA8bGFiZWwgY2xhc3M9c3Itb25seT5Nb250aDwvbGFiZWw+IDx0dy1zZWxlY3QgbmFtZT1tb250aCBjbGFzcz10dy1kYXRlLW1vbnRoIG5nLW1vZGVsPSRjdHJsLm1vbnRoIG5nLWNoYW5nZT0kY3RybC51cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIG5nLXJlcXVpcmVkPSRjdHJsLmRhdGVSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5kYXRlRGlzYWJsZWQgb3B0aW9ucz0kY3RybC5kYXRlTW9udGhzPiA8L3R3LXNlbGVjdD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbC1zbS00IHR3LWRhdGUteWVhci1jb2x1bW5cXFwiPiA8bGFiZWwgY2xhc3M9c3Itb25seT5ZZWFyPC9sYWJlbD4gPGlucHV0IHR5cGU9bnVtYmVyIG5hbWU9eWVhciBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHR3LWRhdGUteWVhclxcXCIgcGxhY2Vob2xkZXI9WVlZWSBuZy1tb2RlbD0kY3RybC55ZWFyIG5nLWNoYW5nZT0kY3RybC51cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIG5nLW1pbj0kY3RybC5taW4uZ2V0RnVsbFllYXIoKSBuZy1tYXg9JGN0cmwubWF4LmdldEZ1bGxZZWFyKCkgbWF4bGVuZ3RoPTQgbmctbWF4bGVuZ3RoPTQgbmctZGlzYWJsZWQ9JGN0cmwuZGF0ZURpc2FibGVkIG5nLXJlcXVpcmVkPSRjdHJsLmRhdGVSZXF1aXJlZCB0dy1mb2N1c2FibGUvPiA8L2Rpdj4gPC9kaXY+IFwiOyIsIlxuZnVuY3Rpb24gRGF0ZVNlcnZpY2UoKSB7XG4gIHRoaXMuZ2V0TG9jYWxlRGF0ZSA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0TG9jYWxlTW9udGggPSAoZGF0ZSkgPT4ge1xuICAgIGlmICghZGF0ZSkgeyBkYXRlID0gbmV3IERhdGUoKTsgfVxuICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRMb2NhbGVGdWxsWWVhciA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfTtcblxuICAvLyBnZXQgVVRDIGRhdGUgZm9yIHVzZXJzIGN1cnJlbnQgZGF5XG4gIHRoaXMuZ2V0TG9jYWxlVG9kYXkgPSAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgdGhpcy5nZXRMb2NhbGVGdWxsWWVhcihub3cpLFxuICAgICAgdGhpcy5nZXRMb2NhbGVNb250aChub3cpLFxuICAgICAgdGhpcy5nZXRMb2NhbGVEYXRlKG5vdylcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDRGF0ZSA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDTW9udGggPSAoZGF0ZSkgPT4ge1xuICAgIGlmICghZGF0ZSkgeyBkYXRlID0gbmV3IERhdGUoKTsgfVxuICAgIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENGdWxsWWVhciA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ1RvZGF5ID0gKCkgPT4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIHRoaXMuZ2V0VVRDRnVsbFllYXIobm93KSxcbiAgICAgIHRoaXMuZ2V0VVRDTW9udGgobm93KSxcbiAgICAgIHRoaXMuZ2V0VVRDRGF0ZShub3cpXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldExhc3REYXlPZk1vbnRoID0gKHllYXIsIG1vbnRoKSA9PiB7XG4gICAgY29uc3QgbGFzdERheSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyh5ZWFyLCBtb250aCArIDEsIDApO1xuICAgIHJldHVybiBsYXN0RGF5LmdldFVUQ0RhdGUoKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMgPSAoeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpID0+IHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXkpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoaG91cnMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENNaW51dGVzKG1pbnV0ZXMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENTZWNvbmRzKHNlY29uZHMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENNaWxsaXNlY29uZHMoMCk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH07XG5cbiAgdGhpcy5nZXRMb2NhbGVEYXRlRnJvbVBhcnRzID0gKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF5KTtcbiAgICBkYXRlLnNldEhvdXJzKGhvdXJzIHx8IDApO1xuICAgIGRhdGUuc2V0TWludXRlcyhtaW51dGVzIHx8IDApO1xuICAgIGRhdGUuc2V0U2Vjb25kcyhzZWNvbmRzIHx8IDApO1xuICAgIGRhdGUuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgIHJldHVybiBkYXRlO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGF0ZVBhcnRzRnJvbUlzbyA9IChpc29EYXRlKSA9PiB7XG4gICAgbGV0IGhvdXJzT2Zmc2V0ID0gMDtcbiAgICBsZXQgbWludXRlc09mZnNldCA9IDA7XG5cbiAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQoaXNvRGF0ZS5zdWJzdHIoMCwgNCksIDEwKTtcbiAgICBjb25zdCBtb250aCA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDUsIDIpLCAxMCkgLSAxO1xuICAgIGNvbnN0IGRheSA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDgsIDIpLCAxMCk7XG4gICAgY29uc3QgaG91cnMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxMSwgMiksIDEwKSB8fCAwO1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxNCwgMiksIDEwKSB8fCAwO1xuICAgIGNvbnN0IHNlY29uZHMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxNywgMiksIDEwKSB8fCAwO1xuXG4gICAgLy8gSXQncyBwb3NzaWJsZSBmb3IgdGhlIGRhdGUgdG8gbWF0Y2ggdGhlIG9mZnNldCByZWdleFxuICAgIGNvbnN0IHN0cmluZ0FmdGVyRGF0ZSA9IGlzb0RhdGUuc3Vic3RyaW5nKDEwKTtcbiAgICBjb25zdCBvZmZzZXRSZWdleCA9ICdbKy1dezF9WzAtOV17Mn0oOlswLTldezJ9KT8kJztcbiAgICBjb25zdCBvZmZzZXQgPSBzdHJpbmdBZnRlckRhdGUubWF0Y2gob2Zmc2V0UmVnZXgpO1xuXG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgLy8gVE9ETyBpZiB0aGVyZSBhcmUgbWlsbGlzZWNvbmRzLCBuZWVkIHRvIGFkanVzdCB0aGlzXG4gICAgICBob3Vyc09mZnNldCA9IHBhcnNlSW50KG9mZnNldFswXS5zdWJzdHIoMSwgMiksIDEwKSB8fCAwO1xuICAgICAgbWludXRlc09mZnNldCA9IHBhcnNlSW50KG9mZnNldFswXS5zdWJzdHIoNCwgMiksIDEwKSB8fCAwO1xuXG4gICAgICBpZiAob2Zmc2V0WzBdLnN1YnN0cigwLCAxKSA9PT0gJy0nKSB7XG4gICAgICAgIGhvdXJzT2Zmc2V0ICo9IC0xO1xuICAgICAgICBtaW51dGVzT2Zmc2V0ICo9IC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGhvdXJzT2Zmc2V0LCBtaW51dGVzT2Zmc2V0XTtcbiAgfTtcblxuICB0aGlzLmlzSXNvU3RyaW5nVmFsaWQgPSAoaXNvRGF0ZSkgPT4ge1xuICAgIGNvbnN0IGRhdGVTZWN0aW9uID0gJ1swLTldezR9LVswLTldezJ9LVswLTldezJ9JztcbiAgICBjb25zdCB0aW1lU2VjdGlvbiA9ICdUWzAtOV17Mn06WzAtOV17Mn06WzAtOV17Mn0nO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kU2VjdGlvbiA9ICcoLlswLTldezN9KT8nO1xuICAgIGNvbnN0IHpvbmVTZWN0aW9uID0gJyhafFsrLC1dWzAtOV17Mn0oOlswLTldezJ9KT8pJztcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke2RhdGVTZWN0aW9ufSgke3RpbWVTZWN0aW9ufSR7bWlsbGlzZWNvbmRTZWN0aW9ufSR7em9uZVNlY3Rpb259KT8kYCk7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoaXNvRGF0ZSk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENEYXRlRnJvbUlzbyA9IChpc29EYXRlKSA9PiB7XG4gICAgaWYgKCF0aGlzLmlzSXNvU3RyaW5nVmFsaWQoaXNvRGF0ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IFtcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRheSxcbiAgICAgIGhvdXJzLFxuICAgICAgbWludXRlcyxcbiAgICAgIHNlY29uZHMsXG4gICAgICBob3Vyc09mZnNldCxcbiAgICAgIG1pbnV0ZXNPZmZzZXRcbiAgICBdID0gdGhpcy5nZXREYXRlUGFydHNGcm9tSXNvKGlzb0RhdGUpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIHllYXIsIG1vbnRoLCBkYXksXG4gICAgICBob3VycyArIGhvdXJzT2Zmc2V0LCBtaW51dGVzICsgbWludXRlc09mZnNldCwgc2Vjb25kc1xuICAgICk7XG4gIH07XG5cblxuICAvLyBTdW5kYXkgaXMgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIGluIEpTXG4gIHRoaXMuZ2V0RGF5TmFtZXNGb3JMb2NhbGUgPSAobG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkYXlzID0gW107XG4gICAgY29uc3QgdmFsaWRGb3JtYXQgPSBnZXRWYWxpZERhdGVGb3JtYXQoZm9ybWF0KTtcbiAgICBmb3IgKGxldCBkYXkgPSAwOyBkYXkgPCA3OyBkYXkrKykge1xuICAgICAgZGF5cy5wdXNoKHRoaXMuZ2V0RGF5TmFtZUZvckxvY2FsZShkYXksIGxvY2FsZSwgdmFsaWRGb3JtYXQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRheXM7XG4gIH07XG5cbiAgdGhpcy5nZXREYXlOYW1lRm9yTG9jYWxlID0gKGRheU9mV2VlaywgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0RGF5TmFtZSA9IGdldERlZmF1bHREYXlOYW1lKGRheU9mV2VlaywgbG9jYWxlLCBmb3JtYXQpO1xuICAgIGlmIChkZWZhdWx0RGF5TmFtZSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHREYXlOYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkTG9jYWxlID0gZ2V0VmFsaWRMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCB2YWxpZEZvcm1hdCA9IGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cygyMDA2LCAwLCBkYXlPZldlZWsgKyAxKTsgLy8gMjAwNiBzdGFydGVkIHdpdGggYSBTdW5kYXlcblxuICAgIGNvbnN0IGxvY2FsRGF0ZU5hbWUgPSBnZXRMb2NhbGlzZWREYXRlTmFtZShkYXRlLCB2YWxpZExvY2FsZSwgeyB3ZWVrZGF5OiAnbG9uZycgfSk7XG5cbiAgICByZXR1cm4gbG9jYWxEYXRlTmFtZSB8fCBnZXREZWZhdWx0RGF5TmFtZShkYXlPZldlZWssICdlbi1HQicsIHZhbGlkRm9ybWF0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXREZWZhdWx0RGF5TmFtZShkYXlPZldlZWssIGxvY2FsZSwgZm9ybWF0KSB7XG4gICAgbGV0IGRlZmF1bHREYXlOYW1lO1xuICAgIGNvbnN0IGxhbmd1YWdlID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG5cbiAgICBpZiAoREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0VbbGFuZ3VhZ2VdKSB7XG4gICAgICBkZWZhdWx0RGF5TmFtZSA9IERFRkFVTFRfREFZX05BTUVTX0JZX0xBTkdVQUdFW2xhbmd1YWdlXVtkYXlPZldlZWtdO1xuICAgIH1cblxuICAgIGlmIChkZWZhdWx0RGF5TmFtZSkge1xuICAgICAgaWYgKGZvcm1hdCA9PT0gJ3Nob3J0Jykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERheU5hbWUuc3Vic3RyKDAsIDMpO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdCA9PT0gJ25hcnJvdycpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXlOYW1lLnN1YnN0cigwLCAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZhdWx0RGF5TmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRoaXMuZ2V0TW9udGhOYW1lc0ZvckxvY2FsZSA9IChsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGNvbnN0IG1vbnRocyA9IFtdO1xuICAgIGNvbnN0IHZhbGlkRm9ybWF0ID0gZ2V0VmFsaWREYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgICBmb3IgKGxldCBtb250aCA9IDA7IG1vbnRoIDwgMTI7IG1vbnRoKyspIHtcbiAgICAgIG1vbnRocy5wdXNoKHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKG1vbnRoLCBsb2NhbGUsIHZhbGlkRm9ybWF0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vbnRocztcbiAgfTtcblxuICB0aGlzLmdldE1vbnRoTmFtZUZvckxvY2FsZSA9IChtb250aCwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0TW9udGhOYW1lID0gZ2V0RGVmYXVsdE1vbnRoTmFtZShtb250aCwgbG9jYWxlLCBmb3JtYXQpO1xuXG4gICAgaWYgKGRlZmF1bHRNb250aE5hbWUpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TW9udGhOYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkTG9jYWxlID0gZ2V0VmFsaWRMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCB2YWxpZEZvcm1hdCA9IGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gICAgLy8gRGF5IGluIG1pZGRsZSBvZiBtb250aCBhdm9pZHMgdGltZXpvbmUgaXNzdWVzXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cygyMDAwLCBtb250aCwgMTUpO1xuICAgIGlmIChmb3JtYXQgPT09ICdzaG9ydCcpIHtcbiAgICAgIG1vbnRoID0gZ2V0TG9jYWxpc2VkRGF0ZU5hbWUoZGF0ZSwgdmFsaWRMb2NhbGUsIHsgbW9udGg6ICdsb25nJyB9KTtcbiAgICAgIHJldHVybiAobW9udGgubGVuZ3RoID4gNCkgPyBtb250aC5zbGljZSgwLCAzKSA6IG1vbnRoO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbE1vbnRoTmFtZSA9IGdldExvY2FsaXNlZERhdGVOYW1lKGRhdGUsIHZhbGlkTG9jYWxlLCB7IG1vbnRoOiAnbG9uZycgfSk7XG5cbiAgICByZXR1cm4gbG9jYWxNb250aE5hbWUgfHwgZ2V0RGVmYXVsdE1vbnRoTmFtZShtb250aCwgJ2VuLUdCJywgdmFsaWRGb3JtYXQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRNb250aE5hbWUobW9udGgsIGxvY2FsZSwgZm9ybWF0KSB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcblxuICAgIGlmIChsYW5ndWFnZVxuICAgICAgJiYgREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRVtsYW5ndWFnZV1cbiAgICAgICYmIChmb3JtYXQgIT09ICdzaG9ydCcgfHwgbGFuZ3VhZ2UgPT09ICdqYScpKSB7XG4gICAgICByZXR1cm4gREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRVtsYW5ndWFnZV1bbW9udGhdO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICB0aGlzLmdldFdlZWtkYXkgPSAoeWVhciwgbW9udGgsIGRheSkgPT4ge1xuICAgIGNvbnN0IHV0Y0RhdGUgPSB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMoeWVhciwgbW9udGgsIGRheSk7XG4gICAgcmV0dXJuIHV0Y0RhdGUuZ2V0VVRDRGF5KCk7XG4gIH07XG5cbiAgdGhpcy5pc01vbnRoQmVmb3JlRGF5ID0gKGxvY2FsZSkgPT4ge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICByZXR1cm4gKChsYW5nID09PSAnamEnKSB8fCAobG9jYWxlICYmIGxvY2FsZS5pbmRleE9mKCdVUycsIGxvY2FsZS5sZW5ndGggLSAyKSAhPT0gLTEpKTtcbiAgfTtcblxuICB0aGlzLmlzWWVhckJlZm9yZU1vbnRoID0gKGxvY2FsZSkgPT4ge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICByZXR1cm4gKGxhbmcgPT09ICdqYScpO1xuICB9O1xuXG4gIHRoaXMuYWRkWWVhcnMgPSAoZGF0ZSwgeWVhcnMpID0+IHRoaXMuYWRkVG9EYXRlKGRhdGUsIHllYXJzLCAwLCAwKTtcbiAgdGhpcy5hZGRNb250aHMgPSAoZGF0ZSwgbW9udGhzKSA9PiB0aGlzLmFkZFRvRGF0ZShkYXRlLCAwLCBtb250aHMsIDApO1xuICB0aGlzLmFkZERheXMgPSAoZGF0ZSwgZGF5cykgPT4gdGhpcy5hZGRUb0RhdGUoZGF0ZSwgMCwgMCwgZGF5cyk7XG5cbiAgdGhpcy5hZGRUb0RhdGUgPSAoZGF0ZSwgeWVhcnMsIG1vbnRocywgZGF5cykgPT4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHllYXJzLFxuICAgIGRhdGUuZ2V0VVRDTW9udGgoKSArIG1vbnRocyxcbiAgICBkYXRlLmdldFVUQ0RhdGUoKSArIGRheXNcbiAgKTtcblxuICB0aGlzLmdldExvY2FsZVRpbWVTdHJpbmcgPSAoZGF0ZSwgbG9jYWxlKSA9PiB0aGlzLmdldFRpbWVTdHJpbmcoXG4gICAgZGF0ZS5nZXRIb3VycygpLFxuICAgIGRhdGUuZ2V0TWludXRlcygpLFxuICAgIGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgIGxvY2FsZVxuICApO1xuXG4gIHRoaXMuZ2V0VGltZVN0cmluZyA9IChob3VycywgbWludXRlcywgc2Vjb25kcywgbG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuXG4gICAgaWYgKGhvdXJzIDwgMTApIHtcbiAgICAgIGhvdXJzID0gYDAke2hvdXJzfWA7XG4gICAgfVxuICAgIGlmIChtaW51dGVzIDwgMTApIHtcbiAgICAgIG1pbnV0ZXMgPSBgMCR7bWludXRlc31gO1xuICAgIH1cblxuICAgIGlmIChsYW5nID09PSAnZW4nKSB7XG4gICAgICBjb25zdCBhbXBtID0gaG91cnMgPj0gMTIgPyAncG0nIDogJ2FtJztcbiAgICAgIGhvdXJzICU9IDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICAgIGhvdXJzID0gMTI7XG4gICAgICB9XG4gICAgICBpZiAobWludXRlcyA9PT0gJzAwJykge1xuICAgICAgICByZXR1cm4gYCR7aG91cnN9JHthbXBtfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlc30ke2FtcG19YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXN9YDtcbiAgfTtcblxuICB0aGlzLmdldFllYXJBbmRNb250aFByZXNlbnRhdGlvbiA9ICh5ZWFyLCBtb250aCwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCB5ZWFyTmFtZSA9IGdldFllYXJOYW1lKHllYXIsIGxvY2FsZSk7XG4gICAgY29uc3QgbW9udGhOYW1lID0gdGhpcy5nZXRNb250aE5hbWVGb3JMb2NhbGUobW9udGgsIGxvY2FsZSwgZm9ybWF0IHx8ICdsb25nJyk7XG5cbiAgICBjb25zdCBsYW5ndWFnZSA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IGRlbGltaXRlciA9IGdldERlbGltaXRlcihsYW5ndWFnZSk7XG5cbiAgICBpZiAodGhpcy5pc1llYXJCZWZvcmVNb250aChsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gW3llYXJOYW1lLCBtb250aE5hbWVdLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIFttb250aE5hbWUsIHllYXJOYW1lXS5qb2luKGRlbGltaXRlcik7XG4gIH07XG5cbiAgdGhpcy5nZXRZZWFyTW9udGhEYXRlUHJlc2VudGF0aW9uID0gKHllYXIsIG1vbnRoLCBkYXksIGxvY2FsZSwgZm9ybWF0KSA9PiB7XG4gICAgY29uc3QgeWVhck5hbWUgPSBnZXRZZWFyTmFtZSh5ZWFyLCBsb2NhbGUpO1xuICAgIGNvbnN0IG1vbnRoTmFtZSA9IHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKG1vbnRoLCBsb2NhbGUsIGZvcm1hdCB8fCAnbG9uZycpO1xuICAgIGNvbnN0IGRhdGVOYW1lID0gZ2V0RGF0ZU5hbWUoZGF5LCBsb2NhbGUpO1xuXG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBkZWxpbWl0ZXIgPSBnZXREZWxpbWl0ZXIobGFuZ3VhZ2UpO1xuXG4gICAgaWYgKHRoaXMuaXNZZWFyQmVmb3JlTW9udGgobG9jYWxlKSkge1xuICAgICAgcmV0dXJuIFt5ZWFyTmFtZSwgbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc01vbnRoQmVmb3JlRGF5KGxvY2FsZSkpIHtcbiAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBbbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICAgICAgcmV0dXJuIGAke2RhdGVTdHJpbmd9LCAke3llYXJOYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiBbZGF0ZU5hbWUsIG1vbnRoTmFtZSwgeWVhck5hbWVdLmpvaW4oZGVsaW1pdGVyKTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZU5vdyA9ICgpID0+IG5ldyBEYXRlKCk7XG5cbiAgdGhpcy5nZXRVVENOb3cgPSAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBub3cuZ2V0VVRDTW9udGgoKSxcbiAgICAgIG5vdy5nZXRVVENEYXRlKCksXG4gICAgICBub3cuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG5vdy5nZXRVVENNaW51dGVzKCksXG4gICAgICBub3cuZ2V0VVRDU2Vjb25kcygpXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZURhdGVTdHJpbmcgPSAoZGF0ZSwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICAvLyBDaGVjayB0aGF0IHRoZSBkYXRlIGV4aXN0c1xuICAgIGlmICghZGF0ZS5nZXRGdWxsWWVhcikge1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSB2YXJpYWJsZXNcbiAgICBjb25zdCBub3cgPSB0aGlzLmdldExvY2FsZU5vdygpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZVN0cmluZyhcbiAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRIb3VycygpLFxuICAgICAgZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0RGF5KCksXG4gICAgICBsb2NhbGUsXG4gICAgICBkYXRlIC0gbm93LFxuICAgICAgbm93LmdldEZ1bGxZZWFyKCksXG4gICAgICBmb3JtYXRcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDRGF0ZVN0cmluZyA9IChkYXRlLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIC8vIENoZWNrIHRoYXQgdGhlIGRhdGUgZXhpc3RzXG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBjb25zdCBub3cgPSB0aGlzLmdldFVUQ05vdygpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZVN0cmluZyhcbiAgICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0VVRDTW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF5KCksXG4gICAgICBsb2NhbGUsXG4gICAgICBkYXRlIC0gbm93LFxuICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBmb3JtYXRcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGF0ZVN0cmluZyA9IChcbiAgICB5ZWFyLFxuICAgIG1vbnRoLFxuICAgIGRheSxcbiAgICBob3VycyxcbiAgICBtaW51dGVzLFxuICAgIHNlY29uZHMsXG4gICAgZGF5T2ZXZWVrLFxuICAgIGxvY2FsZSxcbiAgICBvZmZzZXQsXG4gICAgY3VycmVudFllYXIsXG4gICAgZm9ybWF0XG4gICkgPT4ge1xuICAgIGNvbnN0IHNpeERheXMgPSAxNDQgKiA2MCAqIDYwICogMTAwMDtcbiAgICBjb25zdCBlaWdodERheXMgPSA4ICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuICAgIGNvbnN0IGhhc1RpbWUgPSBNYXRoLmFicyhvZmZzZXQpIDwgc2l4RGF5cyAmJiBmb3JtYXQgIT09ICdsb25nJztcbiAgICBjb25zdCBoYXNEYXRlID0gIWhhc1RpbWU7XG4gICAgY29uc3QgaGFzV2Vla2RheSA9IE1hdGguYWJzKG9mZnNldCkgPCBlaWdodERheXMgfHwgZm9ybWF0ID09PSAnbG9uZyc7XG4gICAgY29uc3QgaGFzTW9udGggPSAhaGFzV2Vla2RheSB8fCBmb3JtYXQgPT09ICdsb25nJztcbiAgICBjb25zdCBoYXNZZWFyID0gKCFoYXNXZWVrZGF5ICYmIGN1cnJlbnRZZWFyICE9PSB5ZWFyKSB8fCBmb3JtYXQgPT09ICdsb25nJztcblxuICAgIGNvbnN0IHllYXJOYW1lID0gaGFzWWVhciA/IGdldFllYXJOYW1lKHllYXIsIGxvY2FsZSkgOiAnJztcbiAgICBjb25zdCBtb250aE5hbWUgPSBoYXNNb250aCA/IHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKFxuICAgICAgbW9udGgsXG4gICAgICBsb2NhbGUsXG4gICAgICBmb3JtYXQgPT09ICdzaG9ydCcgPyAnc2hvcnQnIDogJ2xvbmcnXG4gICAgKSA6ICcnO1xuICAgIGNvbnN0IGRhdGVOYW1lID0gaGFzRGF0ZSA/IGdldERhdGVOYW1lKGRheSwgbG9jYWxlKSA6ICcnO1xuICAgIGNvbnN0IHdlZWtkYXlOYW1lID0gaGFzV2Vla2RheSA/IHRoaXMuZ2V0RGF5TmFtZUZvckxvY2FsZShcbiAgICAgIGRheU9mV2VlayxcbiAgICAgIGxvY2FsZSxcbiAgICAgIGZvcm1hdCA9PT0gJ3Nob3J0JyA/ICdzaG9ydCcgOiAnbG9uZydcbiAgICApIDogJyc7XG4gICAgY29uc3QgdGltZU5hbWUgPSBoYXNUaW1lID8gdGhpcy5nZXRUaW1lU3RyaW5nKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBsb2NhbGUpIDogJyc7XG5cbiAgICByZXR1cm4gdGhpcy5jb21iaW5lRGF0ZVBhcnRzKHllYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lLCB0aW1lTmFtZSwgd2Vla2RheU5hbWUsIGxvY2FsZSk7XG4gIH07XG5cbiAgdGhpcy5jb21iaW5lRGF0ZVBhcnRzID0gKHllYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lLCB0aW1lTmFtZSwgZGF5TmFtZSwgbG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IGRlbGltaXRlciA9IGdldERlbGltaXRlcihsYW5nKTtcblxuICAgIGxldCBkYXRlU3RyaW5nO1xuXG4gICAgaWYgKHRoaXMuaXNZZWFyQmVmb3JlTW9udGgobG9jYWxlKSkge1xuICAgICAgZGF0ZVN0cmluZyA9IFt5ZWFyTmFtZSwgbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpLnRyaW0oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNb250aEJlZm9yZURheShsb2NhbGUpKSB7XG4gICAgICBkYXRlU3RyaW5nID0gW21vbnRoTmFtZSwgZGF0ZU5hbWVdLmpvaW4oZGVsaW1pdGVyKS50cmltKCk7XG4gICAgICBpZiAoeWVhck5hbWUpIHtcbiAgICAgICAgZGF0ZVN0cmluZyArPSBgLCAke3llYXJOYW1lfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmcgPSBbZGF0ZU5hbWUsIG1vbnRoTmFtZSwgeWVhck5hbWVdLmpvaW4oZGVsaW1pdGVyKS50cmltKCk7XG4gICAgfVxuXG4gICAgaWYgKGRheU5hbWUpIHtcbiAgICAgIGlmIChsYW5nID09PSAnamEnKSB7XG4gICAgICAgIHJldHVybiBgJHtkYXRlU3RyaW5nfSAke3RpbWVOYW1lfSAoJHtkYXlOYW1lfSlgLnRyaW0oKTtcbiAgICAgIH1cbiAgICAgIC8vIEZvciBsb25nZXIgZGF0ZXMgdXNlIGEgY29tbWFcbiAgICAgIGlmIChtb250aE5hbWUgfHwgeWVhck5hbWUpIHtcbiAgICAgICAgZGF0ZVN0cmluZyA9IGAke2RheU5hbWV9LCAke2RhdGVTdHJpbmd9YC50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlU3RyaW5nID0gYCR7ZGF5TmFtZX0gJHtkYXRlU3RyaW5nfWAudHJpbSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBkYXRlU3RyaW5nID0gYCR7ZGF0ZVN0cmluZ30gJHt0aW1lTmFtZX1gO1xuXG4gICAgcmV0dXJuIGRhdGVTdHJpbmcudHJpbSgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERhdGVOYW1lKGRheU9mTW9udGgsIGxvY2FsZSkge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBzdWZmaXggPSBnZXRTdWZmaXgoREFZX1NVRkZJWEVTX0JZX0xBTkdVQUdFLCBkYXlPZk1vbnRoLCBsYW5nKSB8fCAnJztcbiAgICByZXR1cm4gYCR7ZGF5T2ZNb250aH0ke3N1ZmZpeH1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0WWVhck5hbWUoeWVhciwgbG9jYWxlKSB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IHN1ZmZpeCA9IGdldFN1ZmZpeChZRUFSX1NVRkZJWEVTX0JZX0xBTkdVQUdFLCB5ZWFyLCBsYW5nKTtcbiAgICByZXR1cm4gYCR7eWVhcn0ke3N1ZmZpeH1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TG9jYWxpc2VkRGF0ZU5hbWUoZGF0ZSwgbG9jYWxlLCBmb3JtYXR0aW5nT2JqZWN0KSB7XG4gICAgaWYgKCFkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IG5hbWUgPSBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZyhsb2NhbGUsIGZvcm1hdHRpbmdPYmplY3QpO1xuXG4gICAgaWYgKGlzTG9jYWxlVHJhbnNsYXRpb25SZXF1aXJlc1N0cmlwcGluZyhsb2NhbGUpKSB7XG4gICAgICAvLyBzdHJpcCBvdXQgYW55IG51bWJlcnMsIHNwYWNlcywgY29tbWFzIGFuZCBkb3RzIGluIGNhc2UgYnJvd3NlciAoY291Z2guLi5TYWZhcmkpXG4gICAgICAvLyBkb2Vzbid0IHJlc3BlY3QgZm9ybWF0XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bMC05XXxcXHN8LHxcXC4vZywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBjb25zdCB2YWxpZEZvcm1hdHMgPSBbJ25hcnJvdycsICdzaG9ydCcsICdsb25nJ107XG4gICAgaWYgKCFmb3JtYXQgfHwgdmFsaWRGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA8IDApIHtcbiAgICAgIHJldHVybiAnbG9uZyc7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWxpZExvY2FsZShsb2NhbGUpIHtcbiAgICBpZiAoIWlzSW50bFN1cHBvcnRlZEZvckxvY2FsZShsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gJ2VuLUdCJztcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW50bFN1cHBvcnRlZEZvckxvY2FsZShsb2NhbGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3VwcG9ydGVkTG9jYWxlcyA9IHdpbmRvdy5JbnRsLkRhdGVUaW1lRm9ybWF0LnN1cHBvcnRlZExvY2FsZXNPZihbbG9jYWxlXSk7XG4gICAgICByZXR1cm4gc3VwcG9ydGVkTG9jYWxlcy5sZW5ndGggPiAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNMb2NhbGVUcmFuc2xhdGlvblJlcXVpcmVzU3RyaXBwaW5nKGxvY2FsZSkge1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgaWYgKGxhbmcgPT09ICdqYScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpIHtcbiAgICBpZiAoIWxvY2FsZSkge1xuICAgICAgcmV0dXJuICdlbic7XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGUuc3Vic3RyaW5nKDAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVsaW1pdGVyKGxhbmcpIHtcbiAgICByZXR1cm4gKERFTElNSVRFUlNfQllfTEFOR1VBR0VbbGFuZ10gIT09IHVuZGVmaW5lZCkgPyBERUxJTUlURVJTX0JZX0xBTkdVQUdFW2xhbmddIDogJyAnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3VmZml4KHN1ZmZpeGVzLCB2YWx1ZSwgbGFuZykge1xuICAgIGlmICghc3VmZml4ZXNbbGFuZ10pIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKHN1ZmZpeGVzW2xhbmddLmV4YWN0TWF0Y2ggJiYgc3VmZml4ZXNbbGFuZ10uZXhhY3RNYXRjaFt2YWx1ZV0pIHtcbiAgICAgIHJldHVybiBzdWZmaXhlc1tsYW5nXS5leGFjdE1hdGNoW3ZhbHVlXTtcbiAgICB9XG4gICAgaWYgKHN1ZmZpeGVzW2xhbmddLmVuZHNXaXRoICYmIHN1ZmZpeGVzW2xhbmddLmVuZHNXaXRoW3ZhbHVlICUgMTBdKSB7XG4gICAgICByZXR1cm4gc3VmZml4ZXNbbGFuZ10uZW5kc1dpdGhbdmFsdWUgJSAxMF07XG4gICAgfVxuICAgIHJldHVybiBzdWZmaXhlc1tsYW5nXS5kZWZhdWx0O1xuICB9XG5cbiAgY29uc3QgREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRSA9IHtcbiAgICBlbjogW1xuICAgICAgJ0phbnVhcnknLFxuICAgICAgJ0ZlYnJ1YXJ5JyxcbiAgICAgICdNYXJjaCcsXG4gICAgICAnQXByaWwnLFxuICAgICAgJ01heScsXG4gICAgICAnSnVuZScsXG4gICAgICAnSnVseScsXG4gICAgICAnQXVndXN0JyxcbiAgICAgICdTZXB0ZW1iZXInLFxuICAgICAgJ09jdG9iZXInLFxuICAgICAgJ05vdmVtYmVyJyxcbiAgICAgICdEZWNlbWJlcidcbiAgICBdLFxuICAgIGphOiBbXG4gICAgICAnMeaciCcsXG4gICAgICAnMuaciCcsXG4gICAgICAnM+aciCcsXG4gICAgICAnNOaciCcsXG4gICAgICAnNeaciCcsXG4gICAgICAnNuaciCcsXG4gICAgICAnN+aciCcsXG4gICAgICAnOOaciCcsXG4gICAgICAnOeaciCcsXG4gICAgICAnMTDmnIgnLFxuICAgICAgJzEx5pyIJyxcbiAgICAgICcxMuaciCdcbiAgICBdXG4gIH07XG5cbiAgY29uc3QgREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0UgPSB7XG4gICAgZW46IFtcbiAgICAgICdTdW5kYXknLFxuICAgICAgJ01vbmRheScsXG4gICAgICAnVHVlc2RheScsXG4gICAgICAnV2VkbmVzZGF5JyxcbiAgICAgICdUaHVyc2RheScsXG4gICAgICAnRnJpZGF5JyxcbiAgICAgICdTYXR1cmRheSdcbiAgICBdLFxuICAgIGphOiBbXG4gICAgICAn5pelJywgJ+aciCcsICfngasnLCAn5rC0JywgJ+acqCcsICfph5EnLCAn5ZyfJ1xuICAgIF1cbiAgfTtcblxuICBjb25zdCBEQVlfU1VGRklYRVNfQllfTEFOR1VBR0UgPSB7XG4gICAgZW46IHtcbiAgICAgIGV4YWN0TWF0Y2g6IHtcbiAgICAgICAgMTE6ICd0aCcsXG4gICAgICAgIDEyOiAndGgnLFxuICAgICAgICAxMzogJ3RoJ1xuICAgICAgfSxcbiAgICAgIGVuZHNXaXRoOiB7XG4gICAgICAgIDE6ICdzdCcsXG4gICAgICAgIDI6ICduZCcsXG4gICAgICAgIDM6ICdyZCdcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiAndGgnXG4gICAgfSxcbiAgICBkZToge1xuICAgICAgZGVmYXVsdDogJy4nXG4gICAgfSxcbiAgICBmaToge1xuICAgICAgZGVmYXVsdDogJy4nXG4gICAgfSxcbiAgICBqYToge1xuICAgICAgZGVmYXVsdDogJ+aXpSdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgWUVBUl9TVUZGSVhFU19CWV9MQU5HVUFHRSA9IHtcbiAgICBqYToge1xuICAgICAgZGVmYXVsdDogJ+W5tCdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgREVMSU1JVEVSU19CWV9MQU5HVUFHRSA9IHtcbiAgICBqYTogJydcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0ZVNlcnZpY2U7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kYXRlLWZvcm1hdC5odG1sJztcblxuY29uc3QgRGF0ZURpc3BsYXkgPSB7XG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIGRhdGU6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICBmb3JtYXQ6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlRGlzcGxheTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3BhbiB0dy10b29sLXRpcCBkYXRhLW9yaWdpbmFsLXRpdGxlPVxcXCJ7eyAkY3RybC5kYXRlIHwgdHdEYXRlRm9ybWF0IDogJGN0cmwubG9jYWxlIDogJ2xvbmcnIH19XFxcIj4gPHNwYW4gY2xhc3M9XFxcImhpZGRlbi14cyBoaWRkZW4tc21cXFwiPiB7eyAkY3RybC5kYXRlIHwgdHdEYXRlRm9ybWF0IDogJGN0cmwubG9jYWxlIDogJGN0cmwuZm9ybWF0IH19IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImhpZGRlbi1tZCBoaWRkZW4tbGcgaGlkZGVuLXhsXFxcIj4ge3sgJGN0cmwuZGF0ZSB8IHR3RGF0ZUZvcm1hdCA6ICRjdHJsLmxvY2FsZSA6ICdzaG9ydCcgfX0gPC9zcGFuPiA8L3NwYW4+IFwiOyIsIlxuZnVuY3Rpb24gRGF0ZUZvcm1hdEZpbHRlcihUd0RhdGVTZXJ2aWNlKSB7XG4gIHJldHVybiAoZGF0ZVN1cHBsaWVkLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGlmICghZGF0ZVN1cHBsaWVkKSB7XG4gICAgICByZXR1cm4gZGF0ZVN1cHBsaWVkO1xuICAgIH1cbiAgICBsZXQgZGF0ZSA9IGRhdGVTdXBwbGllZDtcblxuICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRhdGUgPSBUd0RhdGVTZXJ2aWNlLmdldFVUQ0RhdGVGcm9tSXNvKGRhdGUpO1xuXG4gICAgICBjb25zdCBkYXRlT25seSA9IG5ldyBSZWdFeHAoJ15bMC05XXs0fS1bMC05XXsyfS1bMC05XXsyfSQnKTsgLy8geXl5eS1tbS1kZFxuICAgICAgaWYgKGRhdGVPbmx5LnRlc3QoZGF0ZVN1cHBsaWVkKSkge1xuICAgICAgICByZXR1cm4gVHdEYXRlU2VydmljZS5nZXRVVENEYXRlU3RyaW5nKGRhdGUsIGxvY2FsZSwgZm9ybWF0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWRhdGUpIHsgcmV0dXJuIGRhdGVTdXBwbGllZDsgfVxuICAgIC8vIFVzZSBsb2NhbGUgdGltZXpvbmVcbiAgICByZXR1cm4gVHdEYXRlU2VydmljZS5nZXRMb2NhbGVEYXRlU3RyaW5nKGRhdGUsIGxvY2FsZSwgZm9ybWF0KTtcbiAgfTtcbn1cblxuRGF0ZUZvcm1hdEZpbHRlci4kaW5qZWN0ID0gWydUd0RhdGVTZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVGb3JtYXRGaWx0ZXI7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2Zvcm0tY29udHJvbC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2Zvcm0tY29udHJvbC5odG1sJztcblxuY29uc3QgRm9ybUNvbnRyb2wgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICByZXF1aXJlOiB7XG4gICAgJG5nTW9kZWw6ICduZ01vZGVsJ1xuICB9LFxuICBiaW5kaW5nczoge1xuICAgIHR5cGU6ICdAJyxcbiAgICBuYW1lOiAnQCcsXG4gICAgaWQ6ICdAJyxcbiAgICBsYWJlbDogJ0AnLFxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG4gICAgc3RlcDogJ0AnLFxuICAgIGxvY2FsZTogJ0AnLFxuICAgIHVwbG9hZEFjY2VwdDogJ0AnLFxuICAgIHVwbG9hZEljb246ICdAJyxcbiAgICB1cGxvYWRUb29MYXJnZU1lc3NhZ2U6ICdAJyxcbiAgICBvcHRpb25zOiAnPCcsXG5cbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdDaGFuZ2U6ICcmJyxcbiAgICBuZ0ZvY3VzOiAnJicsXG4gICAgbmdCbHVyOiAnJicsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcblxuICAgIC8vIG5nTWlubGVuZ3RoL25nTWF4bGVuZ3RoIGhhdmUgZGVmYXVsdCBiZWhhdmlvdXIgdGhhdCBjYW5ub3QgYmUgb3ZlcnJpZGRlblxuICAgIG5nTWlubGVuZ3RoOiAnPHR3TWlubGVuZ3RoJyxcbiAgICBuZ01heGxlbmd0aDogJzx0d01heGxlbmd0aCcsXG4gICAgbmdNaW46ICc8JyxcbiAgICBuZ01heDogJzwnLFxuICAgIG5nUGF0dGVybjogJzwnLFxuXG4gICAgdXBsb2FkT3B0aW9uczogJzwnLFxuICAgIGhlbHBPcHRpb25zOiAnPCcsXG4gICAgdGV4dEZvcm1hdDogJzwnLFxuICAgIHZhbGlkYXRpb25Bc3luYzogJzwnLFxuICAgIHBlcnNpc3RBc3luYzogJzwnLFxuICAgIG9uQXN5bmNGYWlsdXJlOiAnJicsXG4gICAgb25Bc3luY1N1Y2Nlc3M6ICcmJyxcbiAgICAvLyBMaXZlIGNhcHR1cmUgcGFyYW1ldGVycyBmb3IgdXBsb2FkIGNvbXBvbmVudFxuICAgIGZpbGVVcGxvYWRTb3VyY2U6ICc8JyxcbiAgICBjYW1lcmFPcHRpb25zOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2w7XG4iLCJsZXQgJGN0cmw7XG5cbmNsYXNzIEZvcm1Db250cm9sQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBsYW1lLCBidXQgbmVjZXNzYXJ5IGR1ZSB0byB0aGUgd2F5IHR3VXBsb2FkJ3MgY2FsbGJhY2tzIHdvcmtcbiAgICAvLyBCZWNhdXNlIHRoZXkgdXNlICc9Jywgbm90ICcmJywgd2UgbG9zZSByZWZlcmVuY2UgdG8gdGhpcyBjb250cm9sbGVyLlxuICAgICRjdHJsID0gdGhpcztcbiAgfVxuXG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy4kbmdNb2RlbCA9IHRoaXMuJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIHRoaXMuYWRkVmFsaWRhdG9ycygpO1xuXG4gICAgaWYgKCF0aGlzLnVwbG9hZE9wdGlvbnMpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZSgpIHtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuXG4gICAgLy8gUGFzcyBpbnRlcm5hbCB2YWx1ZSB0aHJvdWdoIG91ciB2YWxpZGF0b3JzXG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMuaW50ZXJuYWxNb2RlbCk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9XG5cbiAgYmx1cigpIHtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIG9uQXN5bmNVcGxvYWRTdWNjZXNzKGZpbGUsIHJlc3BvbnNlKSB7XG4gICAgaWYgKCRjdHJsLm9uQXN5bmNTdWNjZXNzKSB7XG4gICAgICAkY3RybC5vbkFzeW5jU3VjY2Vzcyh7IHJlc3BvbnNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBvbkFzeW5jVXBsb2FkRmFpbHVyZShyZXNwb25zZSkge1xuICAgIGlmICgkY3RybC5vbkFzeW5jRmFpbHVyZSkge1xuICAgICAgJGN0cmwub25Bc3luY0ZhaWx1cmUoeyByZXNwb25zZSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogYXV0b2NvbXBsZXRlIGhpZGVzIG91ciBmb3JtIGhlbHAgc28gd2UgbmVlZCB0byBkaXNhYmxlIGl0IHdoZW4gaGVscCB0ZXh0XG4gICAqIGlzIHByZXNlbnQuIENocm9tZSBpZ25vcmVzIGF1dG9jb21wbGV0ZT1vZmYsIHRoZSBvbmx5IHdheSB0byBkaXNhYmxlIGl0IGlzXG4gICAqIHRvIHByb3ZpZGUgYW4gJ2ludmFsaWQnIHZhbHVlLCBmb3Igd2hpY2ggJ2Rpc2FibGVkJyBzZXJ2ZXMuXG4gICAqL1xuICBnZXRBdXRvY29tcGxldGVTdGF0dXMoKSB7XG4gICAgcmV0dXJuICh0aGlzLmhlbHBPcHRpb25zICYmIHRoaXMuaGVscE9wdGlvbnMubWVzc2FnZSkgPyAnZGlzYWJsZWQnIDogJ29uJztcbiAgfVxuXG4gIGFkZFZhbGlkYXRvcnMoKSB7XG4gICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRuZ01vZGVsO1xuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdGhpcy5uZ1JlcXVpcmVkO1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5taW5sZW5ndGggPSAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ3RleHQnIHx8ICF0aGlzLm5nTWlubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPj0gdGhpcy5uZ01pbmxlbmd0aDtcbiAgICB9O1xuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICAgIGlmICh0aGlzLnR5cGUgIT09ICd0ZXh0JyB8fCAhdGhpcy5uZ01heGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoIDw9IHRoaXMubmdNYXhsZW5ndGg7XG4gICAgfTtcblxuICAgIC8vIE1pbiBhbmQgbWF4IGRvIG5vdCB3b3JrIG9uIGN1c3RvbSBlbGVtZW50cywgYWRkIG1hbnVhbCB2YWxpZGF0b3JzXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWluID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5uZ01pbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAmJiB0eXBlb2YgdGhpcy5uZ01pbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IHRoaXMubmdNaW47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnZGF0ZSdcbiAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiB0eXBlb2YgdGhpcy5uZ01pbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IHRoaXMubmdNaW47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnZGF0ZSdcbiAgICAgICAgJiYgdmFsdWUgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAgICYmIHRoaXMubmdNaW4gaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSB0aGlzLm5nTWluO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1heCA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgICBpZiAodHlwZW9mIHRoaXMubmdNYXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcidcbiAgICAgICAgJiYgdHlwZW9mIHRoaXMubmdNYXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8PSB0aGlzLm5nTWF4O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RhdGUnXG4gICAgICAgICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgJiYgdHlwZW9mIHRoaXMubmdNYXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8PSB0aGlzLm5nTWF4O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RhdGUnXG4gICAgICAgICYmIHZhbHVlIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgICAmJiB0aGlzLm5nTWF4IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPD0gdGhpcy5uZ01heDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKChtb2RlbFZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmludGVybmFsTW9kZWwgPSBtb2RlbFZhbHVlO1xuICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cblxuRm9ybUNvbnRyb2xDb250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IG5nLXN3aXRjaD0kY3RybC50eXBlPiA8ZGl2IG5nLXN3aXRjaC13aGVuPXJhZGlvIGNsYXNzPXJhZGlvIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6ICRjdHJsLm5nRGlzYWJsZWQsICdyYWRpby1sZyc6IG9wdGlvbi5zZWNvbmRhcnl9XFxcIiBuZy1yZXBlYXQ9XFxcIm9wdGlvbiBpbiAkY3RybC5vcHRpb25zXFxcIj4gPGxhYmVsPiA8dHctcmFkaW8gbmFtZT17eyRjdHJsLm5hbWV9fSBuZy12YWx1ZT1vcHRpb24udmFsdWUgbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZShvcHRpb24udmFsdWUpIG5nLWNsaWNrPSRjdHJsLmNoYW5nZShvcHRpb24udmFsdWUpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCk+PC90dy1yYWRpbz4ge3tvcHRpb24ubGFiZWx9fSA8c21hbGwgbmctaWY9b3B0aW9uLnNlY29uZGFyeT57e29wdGlvbi5zZWNvbmRhcnl9fTwvc21hbGw+IDwvbGFiZWw+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPWNoZWNrYm94IGNsYXNzPWNoZWNrYm94IG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6ICRjdHJsLm5nRGlzYWJsZWR9XFxcIj4gPGxhYmVsPiA8dHctY2hlY2tib3ggbmFtZT17eyRjdHJsLm5hbWV9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWNsaWNrPSRjdHJsLmNoYW5nZSgpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCk+PC90dy1jaGVja2JveD4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvbGFiZWw+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPXNlbGVjdD4gPHR3LXNlbGVjdCBuYW1lPXt7JGN0cmwubmFtZX19IG9wdGlvbnM9JGN0cmwub3B0aW9ucyBmaWx0ZXI9XFxcInt7ICRjdHJsLm9wdGlvbnMubGVuZ3RoID4gOSA/ICcgJyA6ICcnIH19XFxcIiBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpPjwvdHctc2VsZWN0PiA8L2Rpdj4gPGRpdiBuZy1zd2l0Y2gtd2hlbj1maWxlPiA8dHctdXBsb2FkIG5hbWU9e3skY3RybC5uYW1lfX0gbGFiZWw9e3skY3RybC5sYWJlbH19IGljb249e3skY3RybC51cGxvYWRJY29ufX0gaGVscC1pbWFnZT17eyRjdHJsLmhlbHBPcHRpb25zLmltYWdlfX0gcGxhY2Vob2xkZXI9e3skY3RybC5wbGFjZWhvbGRlcn19IGFjY2VwdD17eyRjdHJsLnVwbG9hZEFjY2VwdH19IGNvbXBsZXRlLXRleHQ9e3skY3RybC5sYWJlbH19IGJ1dHRvbi10ZXh0PXt7JGN0cmwudXBsb2FkT3B0aW9ucy5idXR0b25UZXh0fX0gY2FuY2VsLXRleHQ9e3skY3RybC51cGxvYWRPcHRpb25zLmNhbmNlbFRleHR9fSBwcm9jZXNzaW5nLXRleHQ9XFxcInt7ICRjdHJsLnVwbG9hZE9wdGlvbnMucHJvY2Vzc2luZ1RleHQgfX1cXFwiIHN1Y2Nlc3MtdGV4dD1cXFwie3sgJGN0cmwudXBsb2FkT3B0aW9ucy5zdWNjZXNzVGV4dCB9fVxcXCIgZmFpbHVyZS10ZXh0PVxcXCJ7eyAkY3RybC51cGxvYWRPcHRpb25zLmZhaWx1cmVUZXh0IH19XFxcIiB2YWxpZGF0aW9uLW1lc3NhZ2VzPSRjdHJsLnVwbG9hZE9wdGlvbnMudmFsaWRhdGlvbk1lc3NhZ2VzIHZpZXctaW1hZ2UtdGV4dD17eyRjdHJsLnVwbG9hZE9wdGlvbnMudmlld0ltYWdlVGV4dH19IHRvby1sYXJnZS1tZXNzYWdlPXt7JGN0cmwudXBsb2FkVG9vTGFyZ2VNZXNzYWdlfX0gbWF4LXNpemU9JGN0cmwubmdNYXggbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIGh0dHAtb3B0aW9ucz0kY3RybC5wZXJzaXN0QXN5bmMgc291cmNlPSRjdHJsLmZpbGVVcGxvYWRTb3VyY2UgY2FtZXJhLW92ZXJsYXk9e3skY3RybC5jYW1lcmFPcHRpb25zLm92ZXJsYXl9fSBjYW1lcmEtZGlyZWN0aW9uPXt7JGN0cmwuY2FtZXJhT3B0aW9ucy5kaXJlY3Rpb259fSBvbi1zdWNjZXNzPSRjdHJsLm9uQXN5bmNVcGxvYWRTdWNjZXNzIG9uLWZhaWx1cmU9JGN0cmwub25Bc3luY1VwbG9hZEZhaWx1cmU+PC90dy11cGxvYWQ+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPWRhdGV8ZGF0ZS10aW1lIG5nLXN3aXRjaC13aGVuLXNlcGFyYXRvcj18PiA8dHctZGF0ZSBuYW1lPXt7JGN0cmwubmFtZX19IGxvY2FsZT17eyRjdHJsLmxvY2FsZX19IG5nLW1pbj0kY3RybC5uZ01pbiBuZy1tYXg9JGN0cmwubmdNYXggbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIG1vZGVsLXR5cGU9c3RyaW5nPjwvdHctZGF0ZT4gPC9kaXY+IDxkaXYgbmctc3dpdGNoLXdoZW49dGVsPiA8dHctdGVsZXBob25lIG5hbWU9XFxcInt7ICRjdHJsLm5hbWUgfX1cXFwiIHBsYWNlaG9sZGVyPVxcXCJ7eyAkY3RybC5wbGFjZWhvbGRlciB9fVxcXCIgbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDMwMCB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIGxvY2FsZT1cXFwie3sgJGN0cmwubG9jYWxlIH19XFxcIiBzZWFyY2gtcGxhY2Vob2xkZXI9XFxcIiBcXFwiPjwvdHctdGVsZXBob25lPiA8L2Rpdj4gPGlucHV0IG5nLXN3aXRjaC13aGVuPW51bWJlciBuYW1lPXt7JGN0cmwubmFtZX19IHR5cGU9bnVtYmVyIHN0ZXA9e3skY3RybC5zdGVwfX0gY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbmctbWluPSRjdHJsLm5nTWluIG5nLW1heD0kY3RybC5uZ01heCBhdXRvY29tcGxldGU9XFxcInt7ICRjdHJsLmdldEF1dG9jb21wbGV0ZVN0YXR1cygpIH19XFxcIi8+IDxpbnB1dCBuZy1zd2l0Y2gtd2hlbj1oaWRkZW4gbmFtZT17eyRjdHJsLm5hbWV9fSB0eXBlPWhpZGRlbiBuZy1tb2RlbD0kY3RybC5uZ01vZGVsIC8+IDxpbnB1dCBuZy1zd2l0Y2gtd2hlbj1wYXNzd29yZCBuYW1lPXt7JGN0cmwubmFtZX19IHR5cGU9cGFzc3dvcmQgY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbmctbWlubGVuZ3RoPSRjdHJsLm5nTWlubGVuZ3RoIG5nLW1heGxlbmd0aD0kY3RybC5uZ01heGxlbmd0aCBhdXRvY29tcGxldGU9XFxcInt7ICRjdHJsLmdldEF1dG9jb21wbGV0ZVN0YXR1cygpIH19XFxcIi8+IDx0ZXh0YXJlYSBuZy1zd2l0Y2gtd2hlbj10ZXh0YXJlYSBuYW1lPXt7JGN0cmwubmFtZX19IGNsYXNzPWZvcm0tY29udHJvbCBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDMwMCB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLXBhdHRlcm49JGN0cmwubmdQYXR0ZXJuIG5nLW1pbmxlbmd0aD0kY3RybC5uZ01pbmxlbmd0aCBuZy1tYXhsZW5ndGg9JGN0cmwubmdNYXhsZW5ndGggbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgYXV0b2NvbXBsZXRlPVxcXCJ7eyAkY3RybC5nZXRBdXRvY29tcGxldGVTdGF0dXMoKSB9fVxcXCI+PC90ZXh0YXJlYT4gPGlucHV0IG5nLXN3aXRjaC1kZWZhdWx0IG5hbWU9e3skY3RybC5uYW1lfX0gdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDMwMCB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLXBhdHRlcm49JGN0cmwubmdQYXR0ZXJuIG5nLW1pbmxlbmd0aD0kY3RybC5uZ01pbmxlbmd0aCBuZy1tYXhsZW5ndGg9JGN0cmwubmdNYXhsZW5ndGggbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgdHctdGV4dC1mb3JtYXQ9XFxcInt7ICRjdHJsLnRleHRGb3JtYXQgfX1cXFwiIGF1dG9jb21wbGV0ZT1cXFwie3sgJGN0cmwuZ2V0QXV0b2NvbXBsZXRlU3RhdHVzKCkgfX1cXFwiLz4gPC9kaXY+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vZmllbGQuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9maWVsZC5odG1sJztcblxuY29uc3QgRmllbGQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIG5hbWU6ICdAJyxcbiAgICBtb2RlbDogJz0nLFxuICAgIGluaXRpYWxGaWVsZDogJzxmaWVsZCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgcmVxdWlyZWQ6ICc8JyxcbiAgICB1cGxvYWRPcHRpb25zOiAnPCcsXG4gICAgY2hhbmdlSGFuZGxlcjogJyY/b25DaGFuZ2UnLFxuICAgIGZvY3VzSGFuZGxlcjogJyY/b25Gb2N1cycsXG4gICAgYmx1ckhhbmRsZXI6ICcmP29uQmx1cicsXG4gICAgZXJyb3JNZXNzYWdlOiAnPCcsXG4gICAgd2FybmluZ01lc3NhZ2U6ICc8JyxcbiAgICB2YWxpZGF0aW9uTWVzc2FnZXM6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGaWVsZDtcbiIsImNsYXNzIEZpZWxkQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFJlcXVpcmVtZW50c1NlcnZpY2UpIHtcbiAgICB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UgPSBSZXF1aXJlbWVudHNTZXJ2aWNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuaW5pdGlhbEZpZWxkKSB7XG4gICAgICB0aGlzLmZpZWxkID0gY29weUpTT04odGhpcy5pbml0aWFsRmllbGQpO1xuXG4gICAgICB0aGlzLmNvbnRyb2wgPSB0aGlzLmZpZWxkLmNvbnRyb2wgPyB0aGlzLmZpZWxkLmNvbnRyb2xcbiAgICAgICAgOiB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UuZ2V0Q29udHJvbFR5cGUoY2hhbmdlcy5pbml0aWFsRmllbGQuY3VycmVudFZhbHVlKTtcblxuICAgICAgLy8gVE9ETyB3ZSBzaG91bGQgcHJvYmFibHkgZG8gdGhpcyBhdCBmaWVsZHNldCBsZXZlbCwgc28gdGhlIG1vZGVsIGlzIGF2YWlsYWJsZVxuICAgICAgaWYgKHRoaXMuZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICAgICAgdGhpcy5SZXF1aXJlbWVudHNTZXJ2aWNlLnByZXBWYWx1ZXNBc3luYyh0aGlzLmZpZWxkLCB7fSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWVsZCBpcyByZXF1aXJlZCwgYW5kIG9ubHkgYWxsb3dzIG9uZSB2YWx1ZSwgc2V0IGl0IHRvIHRoYXRcbiAgICAgIGlmICh0aGlzLnJlcXVpcmVkICYmIHRoaXMuZmllbGQuZW51bSAmJiB0aGlzLmZpZWxkLmVudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLmZpZWxkLmVudW1bMF07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpZWxkLmRlZmF1bHQgJiYgIXRoaXMubW9kZWwpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMuZmllbGQuZGVmYXVsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzICYmICF0aGlzLmZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcykge1xuICAgICAgICB0aGlzLmZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyA9IHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNIYW5kbGVyKSB7XG4gICAgICB0aGlzLmZvY3VzSGFuZGxlcigpO1xuICAgIH1cbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5ibHVySGFuZGxlcikge1xuICAgICAgdGhpcy5ibHVySGFuZGxlcigpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2hhbmdlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKHRoaXMuY2hhbmdlSGFuZGxlcikge1xuICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyKHsgdmFsdWU6IG5ld1ZhbHVlIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5lcnJvck1lc3NhZ2UpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmVycm9yTWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICBvblBlcnNpc3RBc3luY0ZhaWx1cmUocmVzcG9uc2UpIHtcbiAgICAvLyBJbnRlcnJvZ2F0ZSByZXNwb25zZSBhbmQgZXh0cmFjdCBlcnJvciBtZXNzYWdlXG4gICAgaWYgKCF0aGlzLnVwbG9hZE9wdGlvbnMpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAvLyBXaGVuIHdlIGRvIGlkIHByZSBldmFsLCB3ZSBnZXQgZXJyb3IgbWVzc2FnZXMgYW5kIHZhbGlkYXRpb25zIGJhY2sgaW5cbiAgICAgIC8vIHRoZSByZXNwb25zZSwgZXh0cmFjdCB0aGVtIGFuZCBwYXNzIGJhY2sgdG8gYmUgc2hvd24gaW4gdGhlIHVwbG9hZC5cbiAgICAgIHRoaXMuZXh0cmFjdEVycm9ycyhyZXNwb25zZS5kYXRhKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLm9yaWdpbmFsRGF0YSkge1xuICAgICAgLy8gZnJvbnRlbmQtY29tbW9uIGhhcyBhbiBpbnRlcmNlcHRvciB0aGF0IHNvbWV0aW1lcyBjaGFuZ2VzIHRoZSByZXNwb25zZVxuICAgICAgLy8gZm9ybWF0LCBtb3ZpbmcgdGhlIHJlc3BvbnNlIGRhdGEgdW5kZXIgYSBuZXcga2V5ICdvcmlnaW5hbERhdGEnXG4gICAgICB0aGlzLmV4dHJhY3RFcnJvcnMocmVzcG9uc2Uub3JpZ2luYWxEYXRhKTtcbiAgICB9XG4gIH1cblxuICBleHRyYWN0RXJyb3JzKGRhdGEpIHtcbiAgICAvLyBOb3RlOiBlcnJvciBkYXRhIGNhbiBtYW5pcHVsYXRlZCBieSBpbnRlcmNlcHRvcnMsIHRoaXMgZW5zdXJlcyB3ZSBzdGlsbCBnZXQgZGF0YSBuZWVkZWRcbiAgICBpZiAoZGF0YS5tZXNzYWdlKSB7XG4gICAgICB0aGlzLnVwbG9hZE9wdGlvbnMuZmFpbHVyZVRleHQgPSBkYXRhLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YS5lcnJvcnMpKSB7XG4gICAgICB0aGlzLnVwbG9hZE9wdGlvbnMudmFsaWRhdGlvbk1lc3NhZ2VzID0gZGF0YS5lcnJvcnMubWFwKGVycm9yID0+IGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIG9uUGVyc2lzdEFzeW5jU3VjY2VzcyhyZXNwb25zZSkge1xuICAgIGlmICghdGhpcy51cGxvYWRPcHRpb25zKSB7XG4gICAgICB0aGlzLnVwbG9hZE9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBUaGVzZSBhcmUgdG9vIHNwZWNpZmljIHRvIG9uZSB1c2UgY2FzZS5cbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucy5zdWNjZXNzVGV4dCA9IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgc2l6ZU9mKG9iaikge1xuICAgIHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA6IDA7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaXNGZWVkYmFja0RldGFjaGVkKGNvbnRyb2xUeXBlKSB7XG4gICAgaWYgKGNvbnRyb2xUeXBlID09PSAnZGF0ZSdcbiAgICAgICAgfHwgY29udHJvbFR5cGUgPT09ICdmaWxlJ1xuICAgICAgICB8fCBjb250cm9sVHlwZSA9PT0gJ3JhZGlvJ1xuICAgICAgICB8fCBjb250cm9sVHlwZSA9PT0gJ3RlbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weUpTT04ob2JqKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG5GaWVsZENvbnRyb2xsZXIuJGluamVjdCA9IFsnVHdSZXF1aXJlbWVudHNTZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHR3LWZpZWxkLXt7ICRjdHJsLm5hbWUgfX1cXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICdoYXMtZXJyb3InOiAkY3RybC5maWVsZC5lcnJvck1lc3NhZ2UgfHwgJGN0cmwuZXJyb3JNZXNzYWdlLFxcbiAgICAnaGFzLXdhcm5pbmcnOiAkY3RybC5maWVsZC53YXJuaW5nTWVzc2FnZSB8fCAkY3RybC53YXJuaW5nTWVzc2FnZSxcXG4gICAgJ2hpZGRlbic6ICRjdHJsLmZpZWxkLmhpZGRlblxcbiAgfVxcXCI+IDxsYWJlbCBjbGFzcz1jb250cm9sLWxhYmVsIG5nLWlmPVxcXCIkY3RybC5jb250cm9sICE9PSAnZmlsZSdcXFwiPiB7eyRjdHJsLmZpZWxkLnRpdGxlfX0gPC9sYWJlbD4gPHR3LWZvcm0tY29udHJvbCBuYW1lPVxcXCJ7eyAkY3RybC5uYW1lIH19XFxcIiBsYWJlbD1cXFwie3sgJGN0cmwuZmllbGQudGl0bGUgfX1cXFwiIHR5cGU9XFxcInt7ICRjdHJsLmNvbnRyb2wgfCBsb3dlcmNhc2UgfX1cXFwiIHBsYWNlaG9sZGVyPVxcXCJ7eyAkY3RybC5maWVsZC5wbGFjZWhvbGRlciB9fVxcXCIgaGVscC1vcHRpb25zPSRjdHJsLmZpZWxkLmhlbHAgbG9jYWxlPVxcXCJ7eyAkY3RybC5sb2NhbGUgfX1cXFwiIHVwbG9hZC1hY2NlcHQ9XFxcInt7ICRjdHJsLmZpZWxkLmFjY2VwdCB9fVxcXCIgdXBsb2FkLWljb249XFxcInt7ICRjdHJsLmZpZWxkLmljb24gfX1cXFwiIHVwbG9hZC10b28tbGFyZ2UtbWVzc2FnZT1cXFwie3sgJGN0cmwuZmllbGQudG9vTGFyZ2VNZXNzYWdlIH19XFxcIiBvcHRpb25zPSRjdHJsLmZpZWxkLnZhbHVlcyB1cGxvYWQtb3B0aW9ucz0kY3RybC51cGxvYWRPcHRpb25zIG5nLW1vZGVsPSRjdHJsLm1vZGVsIG5nLWZvY3VzPSRjdHJsLm9uRm9jdXMoKSBuZy1ibHVyPSRjdHJsLm9uQmx1cigpIG5nLWNoYW5nZT0kY3RybC5vbkNoYW5nZSgkY3RybC5tb2RlbCkgbmctcmVxdWlyZWQ9JGN0cmwucmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwuZmllbGQuZGlzYWJsZWQgdHctbWlubGVuZ3RoPVxcXCIkY3RybC5maWVsZC5taW5sZW5ndGggfHwgJGN0cmwuZmllbGQubWluTGVuZ3RoXFxcIiB0dy1tYXhsZW5ndGg9XFxcIiRjdHJsLmZpZWxkLm1heGxlbmd0aCB8fCAkY3RybC5maWVsZC5tYXhMZW5ndGhcXFwiIG5nLW1pbj0kY3RybC5maWVsZC5taW5pbXVtIG5nLW1heD0kY3RybC5maWVsZC5tYXhpbXVtIG5nLXBhdHRlcm49JGN0cmwuZmllbGQucGF0dGVybiB0ZXh0LWZvcm1hdD0kY3RybC5maWVsZC5kaXNwbGF5Rm9ybWF0IHZhbGlkYXRpb24tYXN5bmM9JGN0cmwuZmllbGQudmFsaWRhdGlvbkFzeW5jIHBlcnNpc3QtYXN5bmM9JGN0cmwuZmllbGQucGVyc2lzdEFzeW5jIGZpbGUtdXBsb2FkLXNvdXJjZT0kY3RybC5maWVsZC5zb3VyY2VUeXBlIGNhbWVyYS1vcHRpb25zPSRjdHJsLmZpZWxkLmNhbWVyYSBvbi1hc3luYy1zdWNjZXNzPSRjdHJsLm9uUGVyc2lzdEFzeW5jU3VjY2VzcyhyZXNwb25zZSkgb24tYXN5bmMtZmFpbHVyZT0kY3RybC5vblBlcnNpc3RBc3luY0ZhaWx1cmUocmVzcG9uc2UpIHR3LXZhbGlkYXRpb24+PC90dy1mb3JtLWNvbnRyb2w+IDxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LWRhbmdlciBlcnJvci1tZXNzYWdlc1xcXCIgbmctaWY9XFxcIiRjdHJsLnNpemVPZigkY3RybC5maWVsZC52YWxpZGF0aW9uTWVzc2FnZXMpID4gMCB8fCAkY3RybC5lcnJvck1lc3NhZ2VcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2FsZXJ0LWRldGFjaCc6ICRjdHJsLmlzRmVlZGJhY2tEZXRhY2hlZCgkY3RybC5jb250cm9sKVxcbiAgICB9XFxcIj4gPGRpdiBuZy1yZXBlYXQ9XFxcIih2YWxpZGF0aW9uVHlwZSwgdmFsaWRhdGlvbk1lc3NhZ2UpIGluICRjdHJsLmZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyB0cmFjayBieSAkaW5kZXhcXFwiIGNsYXNzPVxcXCJlcnJvci17eyB2YWxpZGF0aW9uVHlwZSB8IGxvd2VyY2FzZSB9fVxcXCI+IHt7dmFsaWRhdGlvbk1lc3NhZ2V9fSA8L2Rpdj4gPGRpdiBjbGFzcz1lcnJvci1wcm92aWRlZCBuZy1pZj0kY3RybC5lcnJvck1lc3NhZ2U+IHt7ICRjdHJsLmVycm9yTWVzc2FnZSB9fSA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcXFwiIG5nLWlmPSRjdHJsLndhcm5pbmdNZXNzYWdlIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2FsZXJ0LWRldGFjaCc6ICRjdHJsLmlzRmVlZGJhY2tEZXRhY2hlZCgkY3RybC5jb250cm9sKVxcbiAgICB9XFxcIj4ge3sgJGN0cmwud2FybmluZ01lc3NhZ2UgfX0gPC9kaXY+IDxkaXYgbmctaWY9JGN0cmwuZmllbGQuaGVscCBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZm9jdXNcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2FsZXJ0LWRldGFjaCc6ICRjdHJsLmlzRmVlZGJhY2tEZXRhY2hlZCgkY3RybC5jb250cm9sKVxcbiAgICB9XFxcIj4gPHNwYW4gbmctaWY9JGN0cmwuZmllbGQuaGVscC5tZXNzYWdlPiB7eyAkY3RybC5maWVsZC5oZWxwLm1lc3NhZ2UgfX0gPC9zcGFuPiA8dWwgbmctaWY9JGN0cmwuZmllbGQuaGVscC5saXN0IGNsYXNzPWxpc3QtdW5zdHlsZWQ+IDxsaSBuZy1yZXBlYXQ9XFxcImhlbHBNZXNzYWdlIGluICRjdHJsLmZpZWxkLmhlbHAubGlzdFxcXCI+e3sgaGVscE1lc3NhZ2UgfX08L2xpPiA8L3VsPiA8aW1nIG5nLWlmPVxcXCIkY3RybC5maWVsZC5oZWxwLmltYWdlICYmICRjdHJsLmNvbnRyb2wgIT09ICdmaWxlJ1xcXCIgbmctc3JjPXt7JGN0cmwuZmllbGQuaGVscC5pbWFnZX19IGFsdD1cXFwie3sgJGN0cmwuZmllbGQudGl0bGUgfX1cXFwiIGNsYXNzPVxcXCJ0aHVtYm5haWwgbS15LTJcXFwiLz4gPC9kaXY+IDwvZGl2PiBcIjsiLCJmdW5jdGlvbiBSZXF1aXJlbWVudHNTZXJ2aWNlKCRodHRwKSB7XG4gIHRoaXMucHJlcFJlcXVpcmVtZW50cyA9IChhbHRlcm5hdGl2ZXMpID0+IHtcbiAgICBpZiAoIWFsdGVybmF0aXZlcyB8fCAhYWx0ZXJuYXRpdmVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHByZXBwZWRBbHRlcm5hdGl2ZXMgPSBjb3B5T2YoYWx0ZXJuYXRpdmVzKTtcblxuICAgIHByZXBwZWRBbHRlcm5hdGl2ZXMuZm9yRWFjaCgoYWx0ZXJuYXRpdmUpID0+IHtcbiAgICAgIGlmIChhbHRlcm5hdGl2ZS5wcmVwYXJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJlcExlZ2FjeUFsdGVybmF0aXZlcyhhbHRlcm5hdGl2ZSk7XG5cbiAgICAgIGFsdGVybmF0aXZlLnByb3BlcnRpZXMgPSB0aGlzLnByZXBGaWVsZHMoYWx0ZXJuYXRpdmUucHJvcGVydGllcyB8fCBhbHRlcm5hdGl2ZS5maWVsZHMpO1xuXG4gICAgICAvLyBJZiB3ZSdyZSBzdGlsbCB0cmVhdGluZyB0eXBlIGFzIGEgc3BlY2lhbCBjYXNlLCBtb3ZlIGl0IHRvIGEgaGlkZGVuIHZhbHVlXG4gICAgICBpZiAoYWx0ZXJuYXRpdmUudHlwZVxuICAgICAgICAgICYmIGFsdGVybmF0aXZlLnR5cGUgIT09ICdvYmplY3QnXG4gICAgICAgICAgJiYgIWFsdGVybmF0aXZlLnR5cGVzKSB7XG4gICAgICAgIGFsdGVybmF0aXZlLnByb3BlcnRpZXMudHlwZSA9IHtcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBlbnVtOiBbYWx0ZXJuYXRpdmUudHlwZV0sXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgYWx0ZXJuYXRpdmUudHlwZSA9ICdvYmplY3QnO1xuICAgICAgfVxuXG4gICAgICBhbHRlcm5hdGl2ZS5wcmVwYXJlZCA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJlcHBlZEFsdGVybmF0aXZlcztcbiAgfTtcblxuICB0aGlzLnByZXBGaWVsZHMgPSAoZmllbGRzLCBtb2RlbCwgdmFsaWRhdGlvbk1lc3NhZ2VzKSA9PiB7XG4gICAgaWYgKCFmaWVsZHMpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBsZXQgcHJlcGFyZWRGaWVsZHMgPSBjb3B5T2YoZmllbGRzKTtcblxuICAgIHByZXBhcmVkRmllbGRzID0gZmxhdHRlbkZpZWxkc1dpdGhHcm91cHMocHJlcGFyZWRGaWVsZHMpO1xuICAgIHByZXBhcmVkRmllbGRzID0gdHJhbnNmb3JtRmllbGRBcnJheVRvTWFwKHByZXBhcmVkRmllbGRzKTtcbiAgICBwcmVwYXJlZEZpZWxkcyA9IHRyYW5zZm9ybU5lc3RlZEtleXNUb05lc3RlZFNwZWNzKHByZXBhcmVkRmllbGRzKTtcblxuICAgIE9iamVjdC5rZXlzKHByZXBhcmVkRmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHByZXBhcmVkRmllbGRzW2tleV0gPSB0aGlzLnByZXBGaWVsZChwcmVwYXJlZEZpZWxkc1trZXldLCBtb2RlbCwgdmFsaWRhdGlvbk1lc3NhZ2VzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcmVwYXJlZEZpZWxkcztcbiAgfTtcblxuICB0aGlzLnByZXBGaWVsZCA9IChmaWVsZCwgbW9kZWwsIHZhbGlkYXRpb25NZXNzYWdlcykgPT4ge1xuICAgIGNvbnN0IHByZXBhcmVkRmllbGQgPSBjb3B5T2YoZmllbGQpO1xuXG4gICAgdGhpcy5wcmVwTGVnYWN5UHJvcHMocHJlcGFyZWRGaWVsZCk7XG4gICAgdGhpcy5wcmVwVHlwZShwcmVwYXJlZEZpZWxkKTtcbiAgICB0aGlzLnByZXBQYXR0ZXJuKHByZXBhcmVkRmllbGQpO1xuICAgIHRoaXMucHJlcFZhbHVlc0FzeW5jKHByZXBhcmVkRmllbGQsIG1vZGVsKTtcbiAgICB0aGlzLnByZXBWYWxpZGF0aW9uTWVzc2FnZXMocHJlcGFyZWRGaWVsZCwgdmFsaWRhdGlvbk1lc3NhZ2VzKTtcbiAgICB0aGlzLnByZXBIZWxwKHByZXBhcmVkRmllbGQpO1xuXG4gICAgcmV0dXJuIHByZXBhcmVkRmllbGQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluIGFuIG9sZGVyIGZvcm1hdCB3ZSBoYWQgYW4gZXh0cmEgZmllbGRHcm91cCBsZXZlbCwgaGVyZSB3ZSBmbGF0dGVuIHRoYXQgb3V0XG4gICAqIFNvIHRoZSBpbm5lciBhcnJheXMgb2YgZmllbGRzIHdpdGhpbiB0aGUgZGlmZmVyZW50IGZpZWxkIGdyb3VwcyBhcmUgZmxhdHRlbmVkXG4gICAqIHRvIGEgc2luZ2xlIGFycmF5LCB3aGljaCBpcyByZXR1cm5lZC5cbiAgICovXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GaWVsZHNXaXRoR3JvdXBzKGZpZWxkcykge1xuICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgbGV0IGZsYXR0ZW5lZEZpZWxkcyA9IFtdO1xuICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBncm91cCB3aXRoIG5lc3RlZCBmaWVsZHMsIGJyZWFrIHRoZW0gb3V0LlxuICAgICAgICBpZiAoZmllbGQuZmllbGRzKSB7XG4gICAgICAgICAgZmxhdHRlbmVkRmllbGRzID0gZmxhdHRlbmVkRmllbGRzLmNvbmNhdChmbGF0dGVuRmllbGRXaXRoR3JvdXAoZmllbGQsIGZpZWxkLmZpZWxkcykpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLmdyb3VwKSB7XG4gICAgICAgICAgZmxhdHRlbmVkRmllbGRzID0gZmxhdHRlbmVkRmllbGRzLmNvbmNhdChmbGF0dGVuRmllbGRXaXRoR3JvdXAoZmllbGQsIGZpZWxkLmdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGl0J3MgYSByZWd1bGFyIGZpZWxkLCBqdXN0IGFkZCBpdC5cbiAgICAgICAgICBmbGF0dGVuZWRGaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZsYXR0ZW5lZEZpZWxkcztcbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GaWVsZFdpdGhHcm91cChmaWVsZCwgc3ViRmllbGRzKSB7XG4gICAgLy8gSWYgZmlyc3QgZmllbGQgZG9lc24ndCBoYXZlIGEgbGFiZWwsIHVzZSB0aGUgb25lIGZyb20gdGhlIGdyb3VwXG4gICAgaWYgKGZpZWxkLm5hbWUgJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLm5hbWUpIHtcbiAgICAgIHN1YkZpZWxkc1swXS5uYW1lID0gZmllbGQubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQud2lkdGggJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLndpZHRoKSB7XG4gICAgICBzdWJGaWVsZHNbMF0ud2lkdGggPSBmaWVsZC53aWR0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3YXMgYSB0b29sdGlwIGF0IGZpZWxkR3JvdXAgbGV2ZWwgbW92ZSBpdCB0byBmaXJzdCBmaWVsZC5cbiAgICBpZiAoZmllbGQudG9vbHRpcCAmJiBzdWJGaWVsZHMubGVuZ3RoICYmICFzdWJGaWVsZHNbMF0uaGVscFRleHQpIHtcbiAgICAgIHN1YkZpZWxkc1swXS5oZWxwVGV4dCA9IGZpZWxkLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLmluZm8gJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLmhlbHBUZXh0KSB7XG4gICAgICBzdWJGaWVsZHNbMF0uaGVscFRleHQgPSBmaWVsZC5pbmZvO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGFyZSB0d28gcGFydHMgb2YgdGhpcyBncm91cCwgcmVuZGVyIHRoZW0gc2lkZSBieSBzaWRlXG4gICAgaWYgKHN1YkZpZWxkcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHN1YkZpZWxkcy5mb3JFYWNoKChuZXN0ZWRGaWVsZCkgPT4ge1xuICAgICAgICBuZXN0ZWRGaWVsZC53aWR0aCA9ICdtZCc7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgdGhyZWUgcGFydHMsIHJlbmRlciB0aGUgZmlyc3QgdHdvIHNpZGUgYnkgc2lkZVxuICAgIGlmIChzdWJGaWVsZHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBzdWJGaWVsZHNbMF0ud2lkdGggPSAnbWQnO1xuICAgICAgc3ViRmllbGRzWzFdLndpZHRoID0gJ21kJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3ViRmllbGRzO1xuICB9XG5cbiAgLypcbiAgICogU29tZSBvbGRlciByZXF1aXJlbWVudHMgcmV0dXJuIGFuIGFycmF5IG9mIGZpZWxkcywgd2hlcmUgaXQgc2hvdWxkIGJlIGEgbWFwXG4gICAqIGZyb20gdGhlIHByb3BlcnR5IG5hbWUgdG8gdGhlIHNwZWMuICBUaGlzIGNvbnZlcnRzIGFycmF5cyB0byBtYXBzLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJhbnNmb3JtRmllbGRBcnJheVRvTWFwKGZpZWxkcykge1xuICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgY29uc3QgZmllbGRNYXAgPSB7fTtcbiAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBmaWVsZC5rZXkgfHwgZmllbGQubmFtZTtcbiAgICAgICAgZGVsZXRlIGZpZWxkLmtleTtcblxuICAgICAgICBmaWVsZE1hcFtrZXldID0gY29weU9mKGZpZWxkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpZWxkTWFwO1xuICAgIH1cbiAgICByZXR1cm4gZmllbGRzO1xuICB9XG5cbiAgLypcbiAgICogU29tZSBvbGRlciBmb3JtYXQgcmV0dXJuIGtleXMgbGlrZSAnYWRkcmVzcy5jaXR5JywgZXhwZWN0aW5nIHRoZSB2YWx1ZSBvZlxuICAgKiBjaXR5IHRvIGJlIG5lc3RlZCBpbnNpZGUgYW4gYWRkcmVzcyBvYmplY3QuICBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBzcGVjIG9mXG4gICAqIHR5cGUgJ29iamVjdCcsIGFuZCBuZXN0cyBzdWNoIGZpZWxkcyBpbnNpZGUgb2YgaXQuICBXaGVuIHdlIHJlbmRlciB3ZSBwYXNzXG4gICAqIHRoaXMgb2JqZWN0IHNwZWMgdG8gYSBuZXN0ZWQgZmllbGRzZXQuXG4gICAqL1xuICBmdW5jdGlvbiB0cmFuc2Zvcm1OZXN0ZWRLZXlzVG9OZXN0ZWRTcGVjcyhmaWVsZE1hcCkge1xuICAgIGlmIChmaWVsZE1hcCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGluZyBhIG1hcCBvZiBmaWVsZHMsIG5vdCBhbiBhcnJheScpO1xuICAgIH1cblxuICAgIGNvbnN0IG5lc3RlZEZpZWxkcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGZpZWxkTWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAvLyBJZiB0aGUga2V5IGNvbnRhaW5zIGEgcGVyaW9kIHdlIG5lZWQgdG8gbmVzdCB0aGUgZmllbGRzIGluIGFub3RoZXIgb2JqZWN0XG4gICAgICAgIGNvbnN0IHBhdGhTZWN0aW9ucyA9IGtleS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBuZXN0ZWRLZXkgPSBwYXRoU2VjdGlvbnNbMF07XG5cbiAgICAgICAgLy8gSWYgdGhpcyBzdWIgb2JqZWN0IGRvZXNuJ3QgZXhpc3QgeWV0LCBjcmVhdGUgaXRcbiAgICAgICAgaWYgKCFuZXN0ZWRGaWVsZHNbbmVzdGVkS2V5XSkge1xuICAgICAgICAgIG5lc3RlZEZpZWxkc1tuZXN0ZWRLZXldID0ge1xuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbmVzdGVkRmllbGRzW25lc3RlZEtleV0ucHJvcGVydGllc1twYXRoU2VjdGlvbnNbMV1dID0gZmllbGRNYXBba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5lc3RlZEZpZWxkc1trZXldID0gZmllbGRNYXBba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmVzdGVkRmllbGRzO1xuICB9XG5cbiAgdGhpcy5wcmVwVHlwZSA9IChmaWVsZCkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBmaWVsZC50eXBlICYmIGZpZWxkLnR5cGUudG9Mb3dlckNhc2UgJiYgZmllbGQudHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgZmllbGQudHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGZpZWxkLmZvcm1hdCA9ICdkYXRlJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuY29udHJvbCA9ICdwYXNzd29yZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ2Jvb2xlYW4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGlmICghZmllbGQuY29udHJvbCkge1xuICAgICAgICAgIGZpZWxkLmNvbnRyb2wgPSAnc2VsZWN0JztcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgZmllbGQudHlwZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIGZpZWxkLmNvbnRyb2wgPSAncmFkaW8nO1xuICAgICAgICBkZWxldGUgZmllbGQudHlwZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1cGxvYWQnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGZpZWxkLmZvcm1hdCA9ICdiYXNlNjR1cmwnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RlbCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuZm9ybWF0ID0gJ3Bob25lJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuY29udHJvbCA9ICd0ZXh0YXJlYSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG5cbiAgICBpZiAoIWZpZWxkLmNvbnRyb2wgJiYgZmllbGQudHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGZpZWxkLmNvbnRyb2wgPSB0aGlzLmdldENvbnRyb2xUeXBlKGZpZWxkKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwTGVnYWN5QWx0ZXJuYXRpdmVzID0gKGFsdGVybmF0aXZlKSA9PiB7XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS50aXRsZSAmJiBhbHRlcm5hdGl2ZS5sYWJlbCkge1xuICAgICAgYWx0ZXJuYXRpdmUudGl0bGUgPSBhbHRlcm5hdGl2ZS5sYWJlbDtcbiAgICB9XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS50aXRsZSkge1xuICAgICAgYWx0ZXJuYXRpdmUudGl0bGUgPSBnZXROYW1lRnJvbVR5cGUoYWx0ZXJuYXRpdmUudHlwZSk7XG4gICAgfVxuICAgIGlmICghYWx0ZXJuYXRpdmUudHlwZSAmJiBhbHRlcm5hdGl2ZS5uYW1lKSB7XG4gICAgICBhbHRlcm5hdGl2ZS50eXBlID0gYWx0ZXJuYXRpdmUubmFtZTtcbiAgICB9XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS5kZXNjcmlwdGlvbiAmJiBhbHRlcm5hdGl2ZS50b29sdGlwKSB7XG4gICAgICBhbHRlcm5hdGl2ZS5kZXNjcmlwdGlvbiA9IGFsdGVybmF0aXZlLnRvb2x0aXA7XG4gICAgfVxuICAgIGlmIChhbHRlcm5hdGl2ZS5maWVsZEdyb3VwcyAmJiAhYWx0ZXJuYXRpdmUuZmllbGRzKSB7XG4gICAgICBhbHRlcm5hdGl2ZS5maWVsZHMgPSBmbGF0dGVuRmllbGRzV2l0aEdyb3VwcyhhbHRlcm5hdGl2ZS5maWVsZEdyb3Vwcyk7XG4gICAgICBkZWxldGUgYWx0ZXJuYXRpdmUuZmllbGRHcm91cHM7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucHJlcExlZ2FjeVByb3BzID0gKGZpZWxkKSA9PiB7XG4gICAgaWYgKGZpZWxkLm5hbWUgJiYgIWZpZWxkLnRpdGxlKSB7XG4gICAgICBmaWVsZC50aXRsZSA9IGZpZWxkLm5hbWU7XG4gICAgICBkZWxldGUgZmllbGQubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsaWRhdGlvblJlZ2V4cCkge1xuICAgICAgZmllbGQucGF0dGVybiA9IGZpZWxkLnZhbGlkYXRpb25SZWdleHA7XG4gICAgICBkZWxldGUgZmllbGQudmFsaWRhdGlvblJlZ2V4cDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQubWluKSB7XG4gICAgICBmaWVsZC5taW5pbXVtID0gZmllbGQubWluO1xuICAgICAgZGVsZXRlIGZpZWxkLm1pbjtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQubWF4KSB7XG4gICAgICBmaWVsZC5tYXhpbXVtID0gZmllbGQubWF4O1xuICAgICAgZGVsZXRlIGZpZWxkLm1heDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQuZXhhbXBsZSAmJiAhZmllbGQucGxhY2Vob2xkZXIpIHtcbiAgICAgIGZpZWxkLnBsYWNlaG9sZGVyID0gZmllbGQuZXhhbXBsZTtcbiAgICAgIGRlbGV0ZSBmaWVsZC5leGFtcGxlO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC50b29sdGlwICYmICFmaWVsZC5oZWxwVGV4dCkge1xuICAgICAgZmllbGQuaGVscFRleHQgPSBmaWVsZC50b29sdGlwO1xuICAgICAgZGVsZXRlIGZpZWxkLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlc0FsbG93ZWQgJiYgIWZpZWxkLnZhbHVlcykge1xuICAgICAgZmllbGQudmFsdWVzID0gZmllbGQudmFsdWVzQWxsb3dlZDtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWx1ZXNBbGxvd2VkO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC52YWx1ZXMgJiYgZmllbGQudmFsdWVzLm1hcCkge1xuICAgICAgZmllbGQudmFsdWVzID0gdGhpcy5wcmVwTGVnYWN5VmFsdWVzKGZpZWxkLnZhbHVlcyk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlICYmICFmaWVsZC5kZWZhdWx0KSB7XG4gICAgICBmaWVsZC5kZWZhdWx0ID0gZmllbGQudmFsdWU7XG4gICAgICBkZWxldGUgZmllbGQudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlcykge1xuICAgICAgLy8gSW4gc29tZSBsZWdhY3kgYXJyYXlzIHRoZSBmaXJzdCB2YWx1ZSBpcyBhIHBsYWNlaG9sZGVyLCBleHRyYWN0IGl0LlxuICAgICAgaWYgKGZpZWxkLnZhbHVlc1xuICAgICAgICAmJiBmaWVsZC52YWx1ZXMubGVuZ3RoXG4gICAgICAgICYmIGZpZWxkLnZhbHVlc1swXVxuICAgICAgICAmJiAhZmllbGQudmFsdWVzWzBdLnZhbHVlXG4gICAgICAgICYmIGZpZWxkLnZhbHVlc1swXS5sYWJlbFxuICAgICAgICAmJiAhZmllbGQucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgZmllbGQucGxhY2Vob2xkZXIgPSBmaWVsZC52YWx1ZXNbMF0ubGFiZWw7XG4gICAgICAgIGZpZWxkLnZhbHVlcyA9IGZpZWxkLnZhbHVlcy5zbGljZSgxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwTGVnYWN5VmFsdWVzID0gdmFsdWVzID0+IHZhbHVlcy5tYXAocHJlcExlZ2FjeVZhbHVlKTtcblxuICBmdW5jdGlvbiBwcmVwTGVnYWN5VmFsdWUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlLmxhYmVsICYmIHZhbHVlLnRpdGxlKSB7XG4gICAgICB2YWx1ZS5sYWJlbCA9IHZhbHVlLnRpdGxlO1xuICAgICAgZGVsZXRlIHZhbHVlLnRpdGxlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlLmxhYmVsICYmIHZhbHVlLm5hbWUpIHtcbiAgICAgIHZhbHVlLmxhYmVsID0gdmFsdWUubmFtZTtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5uYW1lO1xuICAgIH1cblxuICAgIGlmICghdmFsdWUudmFsdWUgJiYgdmFsdWUuY29kZSkge1xuICAgICAgdmFsdWUudmFsdWUgPSB2YWx1ZS5jb2RlO1xuICAgICAgZGVsZXRlIHZhbHVlLmNvZGU7XG4gICAgfVxuICAgIGlmICghdmFsdWUudmFsdWUgJiYgdmFsdWUua2V5KSB7XG4gICAgICB2YWx1ZS52YWx1ZSA9IHZhbHVlLmtleTtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5rZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdGhpcy5wcmVwUGF0dGVybiA9IChmaWVsZCkgPT4ge1xuICAgIGlmIChmaWVsZC5wYXR0ZXJuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBSZWdFeHAoZmllbGQucGF0dGVybik7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ0FQSSByZWdleHAgaXMgaW52YWxpZCcpO1xuICAgICAgICBkZWxldGUgZmllbGQucGF0dGVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGZpZWxkLnBhdHRlcm47XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucHJlcFZhbHVlc0FzeW5jID0gKGZpZWxkLCBtb2RlbCkgPT4ge1xuICAgIGlmICghZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcG9zdERhdGEgPSB7fTtcbiAgICBpZiAoZmllbGQudmFsdWVzQXN5bmMucGFyYW1zXG4gICAgICAmJiBmaWVsZC52YWx1ZXNBc3luYy5wYXJhbXMubGVuZ3RoKSB7XG4gICAgICBwb3N0RGF0YSA9IHRoaXMuZ2V0UGFyYW1WYWx1ZXNGcm9tTW9kZWwobW9kZWwsIGZpZWxkLnZhbHVlc0FzeW5jLnBhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gUmV0cnkgb25jZSBvbiBmYWlsdXJlXG4gICAgdGhpcy5mZXRjaFZhbHVlc0FzeW5jKGZpZWxkLCBwb3N0RGF0YSlcbiAgICAgIC5jYXRjaCgoKSA9PiB0aGlzLmZldGNoVmFsdWVzQXN5bmMoZmllbGQsIHBvc3REYXRhKSk7XG4gIH07XG5cbiAgdGhpcy5mZXRjaFZhbHVlc0FzeW5jID0gKGZpZWxkLCBwb3N0RGF0YSkgPT4gJGh0dHAoe1xuICAgIG1ldGhvZDogZmllbGQudmFsdWVzQXN5bmMubWV0aG9kIHx8ICdHRVQnLFxuICAgIHVybDogZmllbGQudmFsdWVzQXN5bmMudXJsLFxuICAgIGRhdGE6IHBvc3REYXRhIHx8IHt9XG4gIH0pLnRoZW4oXG4gICAgKHJlc3BvbnNlKSA9PiB7IGZpZWxkLnZhbHVlcyA9IHRoaXMucHJlcExlZ2FjeVZhbHVlcyhyZXNwb25zZS5kYXRhKTsgfVxuICApO1xuXG4gIHRoaXMuZ2V0UGFyYW1WYWx1ZXNGcm9tTW9kZWwgPSAobW9kZWwsIHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICBwYXJhbXMuZm9yRWFjaCgocGFyYW0pID0+IHtcbiAgICAgIGlmIChtb2RlbFtwYXJhbS5rZXldKSB7XG4gICAgICAgIGRhdGFbcGFyYW0ucGFyYW1ldGVyTmFtZV0gPSBtb2RlbFtwYXJhbS5rZXldO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbS5yZXF1aXJlZCkge1xuICAgICAgICAvLyBUT0RPIFByb2JsZW0sIHBhcmFtZXRlciBpcyByZXF1aXJlZCwgYnV0IGRhdGEgaXMgbWlzc2luZy5cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICB0aGlzLnByZXBWYWxpZGF0aW9uTWVzc2FnZXMgPSAoZmllbGQpID0+IHtcbiAgICBpZiAoZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzICYmIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5taW5pbXVtKSB7XG4gICAgICBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWluID0gZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1pbmltdW07XG4gICAgICBkZWxldGUgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1pbmltdW07XG4gICAgfVxuICAgIGlmIChmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMgJiYgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1heGltdW0pIHtcbiAgICAgIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXggPSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4aW11bTtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4aW11bTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwSGVscCA9IChmaWVsZCkgPT4ge1xuICAgIGlmICghZmllbGQuaGVscFxuICAgICAgJiYgKGZpZWxkLmhlbHBUZXh0IHx8IGZpZWxkLmhlbHBJbWFnZSB8fCBmaWVsZC5oZWxwTGlzdCB8fCBmaWVsZC51cGxvYWRQbGFjZWhvbGRlckltYWdlKSkge1xuICAgICAgZmllbGQuaGVscCA9IHt9O1xuICAgIH1cbiAgICBpZiAoZmllbGQuaGVscFRleHQpIHtcbiAgICAgIGZpZWxkLmhlbHAubWVzc2FnZSA9IGZpZWxkLmhlbHBUZXh0O1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBUZXh0O1xuICAgIH1cbiAgICBpZiAoZmllbGQuaGVscEltYWdlKSB7XG4gICAgICBmaWVsZC5oZWxwLmltYWdlID0gZmllbGQuaGVscEltYWdlO1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBJbWFnZTtcbiAgICB9XG4gICAgLy8gaGVscEltYWdlIGRvZXMgbm90IGhhdmUgc2FtZSBsaW5lYWdlIHBsYWNlaG9sZGVyIGltYWdlXG4gICAgLy8gMiBmaWVsZHMgY2FuIG92ZXJ3cml0ZSBlYWNoIG90aGVyIHNhZmVseSAob25seSBvbmUgd2lsbCBiZSBwcmVzZW50IGF0IGEgdGltZSlcbiAgICBpZiAoZmllbGQudXBsb2FkUGxhY2Vob2xkZXJJbWFnZSkge1xuICAgICAgZmllbGQuaGVscC5pbWFnZSA9IGZpZWxkLnVwbG9hZFBsYWNlaG9sZGVySW1hZ2U7XG4gICAgICBkZWxldGUgZmllbGQudXBsb2FkUGxhY2Vob2xkZXJJbWFnZTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmxpc3QpIHtcbiAgICAgIGZpZWxkLmhlbHAubGlzdCA9IGZpZWxkLmhlbHBMaXN0O1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBMaXN0O1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldFJlcXVpcmVkRmllbGRzID0gZ2V0UmVxdWlyZWRGaWVsZHM7XG4gIHRoaXMuZ2V0Q29udHJvbFR5cGUgPSBnZXRDb250cm9sVHlwZTtcbn1cblxuLyoqXG4gKiBPbGRlciBzdHlsZSBmb3JtYXQgaGFkIHJlcXVpcmVkIGFzIGEgcHJvcGVydHkgb2YgZmllbGRzLCBpbiBKU09OIHNjaGVtYSBpdFxuICogc2hvdWxkIGJlIGEgc2VwYXJhdGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXNcbiAqL1xuZnVuY3Rpb24gZ2V0UmVxdWlyZWRGaWVsZHMoZmllbGRzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGZpZWxkcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGZpZWxkIG1hcCcpO1xuICB9XG4gIC8vIFJldHVybiBhcnJheSBvZiBrZXlzIHRoYXQgaGF2ZSByZXF1aXJlZCBzZXRcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGZpZWxkcykuZmlsdGVyKHByb3BlcnR5ID0+IGZpZWxkc1twcm9wZXJ0eV0ucmVxdWlyZWQpO1xufVxuXG5mdW5jdGlvbiBnZXRDb250cm9sVHlwZShmaWVsZCkge1xuICBpZiAoZmllbGQuY29udHJvbCkge1xuICAgIHJldHVybiBmaWVsZC5jb250cm9sLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgaWYgKGZpZWxkLmhpZGRlbikge1xuICAgIHJldHVybiAnaGlkZGVuJztcbiAgfVxuICBpZiAoZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICByZXR1cm4gJ3NlbGVjdCc7XG4gIH1cbiAgaWYgKGZpZWxkLnZhbHVlcyAmJiBmaWVsZC52YWx1ZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGdldFNlbGVjdGlvblR5cGUoZmllbGQpO1xuICB9XG5cbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBnZXRDb250cm9sRm9yU3RyaW5nRm9ybWF0KGZpZWxkLmZvcm1hdCk7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiAnY2hlY2tib3gnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ3RleHQnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbnRyb2xGb3JTdHJpbmdGb3JtYXQoZm9ybWF0KSB7XG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgICByZXR1cm4gJ2RhdGUnO1xuICAgIGNhc2UgJ2Jhc2U2NHVybCc6XG4gICAgICByZXR1cm4gJ2ZpbGUnO1xuICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgIHJldHVybiAncGFzc3dvcmQnO1xuICAgIGNhc2UgJ3VyaSc6XG4gICAgICByZXR1cm4gJ3RleHQnOyAvLyAndXJsJzsgLSBub3QgaW1wbGVtZW50ZWRcbiAgICBjYXNlICdlbWFpbCc6XG4gICAgICByZXR1cm4gJ3RleHQnOyAvLyAnZW1haWwnOyAtIG5vdCBpbXBsZW1lbnRlZFxuICAgIGNhc2UgJ3Bob25lJzpcbiAgICAgIHJldHVybiAndGVsJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICd0ZXh0JztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25UeXBlKGZpZWxkKSB7XG4gIGlmIChmaWVsZC5jb250cm9sKSB7XG4gICAgcmV0dXJuIGZpZWxkLmNvbnRyb2w7XG4gIH1cblxuICBpZiAoZmllbGQudHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gJ3NlbGVjdCc7XG4gIH1cblxuICBpZiAoZmllbGQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIHJldHVybiAncmFkaW8nO1xuICB9XG5cbiAgY29uc3QgdmFsdWVzID0gZmllbGQuZW51bSB8fCBmaWVsZC52YWx1ZXM7XG4gIGlmICh2YWx1ZXMpIHtcbiAgICByZXR1cm4gdmFsdWVzLmxlbmd0aCA+IDMgPyAnc2VsZWN0JyA6ICdyYWRpbyc7XG4gIH1cbiAgcmV0dXJuICdzZWxlY3QnO1xufVxuXG5mdW5jdGlvbiBjb3B5T2Yob2JqKSB7XG4gIC8vIE9iamVjdC5hc3NpZ24gaXMgbmljZXIsIGJ1dCBsYWNrcyBpZSBzdXBwb3J0XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG4vKipcbiAqIFNvbWUgb2xkZXIgcmVxdWlybWVudHMgZm9ybWF0cyBkbyBub3QgaW5jbHVkZSBhIGxhYmVsIGZvciBhbHRlcm5hdGl2ZXNcbiAqL1xuZnVuY3Rpb24gZ2V0TmFtZUZyb21UeXBlKHRhYlR5cGUpIHtcbiAgaWYgKHRhYlR5cGUgJiYgdGFiVHlwZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgdGFiTmFtZVdpdGhTcGFjZXMgPSB0YWJUeXBlLnRvTG93ZXJDYXNlKCkuc3BsaXQoJ18nKS5qb2luKCcgJyk7IC8vIFN0cmluZy5yZXBsYWNlIG1ldGhvZCBvbmx5IHJlcGxhY2VzIGZpcnN0IGluc3RhbmNlXG4gICAgcmV0dXJuIHRhYk5hbWVXaXRoU3BhY2VzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGFiTmFtZVdpdGhTcGFjZXMuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5cblJlcXVpcmVtZW50c1NlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnXTtcblxuZXhwb3J0IGRlZmF1bHQgUmVxdWlyZW1lbnRzU2VydmljZTtcbiIsImltcG9ydCBWYWxpZGF0aW9uQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2wtdmFsaWRhdGlvbi5jb250cm9sbGVyLmpzJztcblxuZnVuY3Rpb24gVHdWYWxpZGF0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZToge1xuICAgICAgJG5nTW9kZWw6ICduZ01vZGVsJyxcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IFZhbGlkYXRpb25Db250cm9sbGVyXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFR3VmFsaWRhdGlvbjtcbiIsIlxuY2xhc3MgVmFsaWRhdGlvbkNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgY29uc3QgZm9ybUdyb3VwID0gVHdEb21TZXJ2aWNlLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnZhbGlkJywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgdmFsaWRhdGlvbiB0b29sdGlwc1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLnZhbGlkYXRpb24gPSAoKSA9PiB7XG4gICAgICAvLyBFdmFsdWF0ZSBhZnRlciBuZ01vZGVsIHVwZGF0ZXMsIHdlIGFyZSBzdGlsbCBpbiB2YWxpZGF0aW9uIGNoYWluXG4gICAgICAkc2NvcGUuJGV2YWxBc3luYygoKSA9PiB7XG4gICAgICAgIGNoZWNrTW9kZWxBbmRVcGRhdGUoJG5nTW9kZWwsIGZvcm1Hcm91cCwgZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBUaGUgZmlyc3QgdGltZSB3ZSBibHVyLCBtb2RlbCBpcyBzdGlsbCBwcmlzdGluZSB3aGVuIHZhbGlkYXRpb24gb2NjdXJzLCBzbyBwZXJmb3JtIGFnYWluLlxuICAgIGNvbnN0IG9uQmx1ciA9ICgpID0+IHtcbiAgICAgIC8vIEN1c3RvbSBlbGVtZW50cyBtdXN0IHRyaWdnZXIgYmx1ciBtYW51YWxseSBmb3IgY29ycmVjdCBiZWhhdmlvdXJcbiAgICAgICRzY29wZS4kZXZhbEFzeW5jKCgpID0+IHtcbiAgICAgICAgY2hlY2tNb2RlbEFuZFVwZGF0ZSgkbmdNb2RlbCwgZm9ybUdyb3VwLCBlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrTW9kZWxBbmRVcGRhdGUobmdNb2RlbCwgZm9ybUdyb3VwLCBlbGVtZW50KSB7XG4gIGlmIChuZ01vZGVsLiR2YWxpZCkge1xuICAgIGlmIChmb3JtR3JvdXApIHtcbiAgICAgIGZvcm1Hcm91cC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgICB9XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuZ01vZGVsLiR0b3VjaGVkICYmIG5nTW9kZWwuJGRpcnR5KSB7XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgICAvLyBTZXQgYXJpYSBpbnZhbGlkIGZvciBzY3JlZW4gcmVhZGVyc1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnLCAndHJ1ZScpO1xuICB9XG59XG5cblZhbGlkYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckZWxlbWVudCcsICdUd0RvbVNlcnZpY2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdGlvbkNvbnRyb2xsZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4vY2hlY2tib3gnO1xuaW1wb3J0IFJhZGlvIGZyb20gJy4vcmFkaW8nO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuL3NlbGVjdCc7XG5pbXBvcnQgVXBsb2FkIGZyb20gJy4vdXBsb2FkJztcbmltcG9ydCBEYXRlQ29udHJvbCBmcm9tICcuL2RhdGUnO1xuaW1wb3J0IERhdGVMb29rdXAgZnJvbSAnLi9kYXRlLWxvb2t1cCc7XG5pbXBvcnQgQ3VycmVuY3lJbnB1dCBmcm9tICcuL2N1cnJlbmN5LWlucHV0JztcbmltcG9ydCBBbW91bnRDdXJyZW5jeVNlbGVjdCBmcm9tICcuL2Ftb3VudC1jdXJyZW5jeS1zZWxlY3QnO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJy4vZm9ybS1jb250cm9sJztcbmltcG9ydCBGaWVsZCBmcm9tICcuL2ZpZWxkJztcbmltcG9ydCBGaWVsZHNldCBmcm9tICcuL2ZpZWxkc2V0JztcbmltcG9ydCBSZXF1aXJlbWVudHNGb3JtIGZyb20gJy4vcmVxdWlyZW1lbnRzLWZvcm0nO1xuaW1wb3J0IEZvY3VzYWJsZSBmcm9tICcuL2ZvY3VzYWJsZSc7XG5pbXBvcnQgRGVmaW5pdGlvbkxpc3QgZnJvbSAnLi9kZWZpbml0aW9uLWxpc3QnO1xuaW1wb3J0IFRlbGVwaG9uZSBmcm9tICcuL3RlbGVwaG9uZSc7XG5pbXBvcnQgU3VibWl0IGZyb20gJy4vc3VibWl0JztcblxuLy8gRGVwcmVjYXRlZFxuaW1wb3J0IFVwbG9hZERyb3BwYWJsZSBmcm9tICcuL3VwbG9hZC1kcm9wcGFibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3JtcycsIFtcbiAgQ2hlY2tib3gsXG4gIFJhZGlvLFxuICBTZWxlY3QsXG4gIFVwbG9hZCxcbiAgRGF0ZUNvbnRyb2wsXG4gIERhdGVMb29rdXAsXG4gIEN1cnJlbmN5SW5wdXQsXG4gIEFtb3VudEN1cnJlbmN5U2VsZWN0LFxuICBGb3JtQ29udHJvbCxcbiAgRmllbGQsXG4gIEZpZWxkc2V0LFxuICBSZXF1aXJlbWVudHNGb3JtLFxuICBGb2N1c2FibGUsXG4gIERlZmluaXRpb25MaXN0LFxuICBUZWxlcGhvbmUsXG4gIFN1Ym1pdCxcbiAgVXBsb2FkRHJvcHBhYmxlXG5dKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRmllbGRzZXQgZnJvbSAnLi9maWVsZHNldC5jb21wb25lbnQnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4uL2ZpZWxkJztcbmltcG9ydCBSZXF1aXJlbWVudHNTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcXVpcmVtZW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5maWVsZHNldCcsIFtcbiAgICBGaWVsZCxcbiAgICBSZXF1aXJlbWVudHNTZXJ2aWNlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3RmllbGRzZXQnLCBGaWVsZHNldCkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFRhYnMgZnJvbSAnLi90YWJzLmNvbXBvbmVudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5uYXZpZ2F0aW9uLnRhYnMnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdUYWJzJywgVGFicykubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgVGV4dEZvcm1hdCBmcm9tICcuL3RleHQtZm9ybWF0JztcbmltcG9ydCBEYXRlRm9ybWF0IGZyb20gJy4vZGF0ZS1mb3JtYXQnO1xuaW1wb3J0IE51bWJlckZvcm1hdCBmcm9tICcuL251bWJlci1mb3JtYXQnO1xuaW1wb3J0IEN1cnJlbmN5Rm9ybWF0IGZyb20gJy4vY3VycmVuY3ktZm9ybWF0JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhci5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybWF0dGluZycsIFtcbiAgVGV4dEZvcm1hdCxcbiAgRGF0ZUZvcm1hdCxcbiAgTnVtYmVyRm9ybWF0LFxuICBDdXJyZW5jeUZvcm1hdFxuXSkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IE51bWJlckNvbXBvbmVudCBmcm9tICcuL251bWJlci1mb3JtYXQuY29tcG9uZW50JztcbmltcG9ydCBOdW1iZXJGaWx0ZXIgZnJvbSAnLi9udW1iZXItZm9ybWF0LmZpbHRlcic7XG5pbXBvcnQgTG9jYWxlU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9sb2NhbGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybWF0dGluZy5udW1iZXInLCBbTG9jYWxlU2VydmljZV0pXG4gIC5jb21wb25lbnQoJ3R3TnVtYmVyRm9ybWF0JywgTnVtYmVyQ29tcG9uZW50KVxuICAuZmlsdGVyKCd0d051bWJlckZvcm1hdCcsIE51bWJlckZpbHRlcilcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuaW1wb3J0IEZvcm1WYWxpZGF0aW9uIGZyb20gJy4vZm9ybS12YWxpZGF0aW9uJztcbmltcG9ydCBDb250cm9sVmFsaWRhdGlvbiBmcm9tICcuL2NvbnRyb2wtdmFsaWRhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXIubW9kdWxlKCd0dy5zdHlsZWd1aWRlLnZhbGlkYXRpb24nLCBbXG4gIEZvcm1WYWxpZGF0aW9uLFxuICBDb250cm9sVmFsaWRhdGlvblxuXSkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgTG9hZGVyIGZyb20gJy4vbG9hZGVyJztcbmltcG9ydCBQcm9jZXNzIGZyb20gJy4vcHJvY2Vzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXIubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmxvYWRpbmcnLCBbXG4gIExvYWRlcixcbiAgUHJvY2Vzc1xuXSkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgJy4vcG9seWZpbGwnO1xuXG5pbXBvcnQgRm9ybXMgZnJvbSAnLi9mb3Jtcyc7XG5pbXBvcnQgVmFsaWRhdGlvbiBmcm9tICcuL3ZhbGlkYXRpb24nO1xuaW1wb3J0IEZvcm1hdHRpbmcgZnJvbSAnLi9mb3JtYXR0aW5nJztcbmltcG9ydCBTZXJ2aWNlcyBmcm9tICcuL3NlcnZpY2VzJztcblxuaW1wb3J0IEhlbHAgZnJvbSAnLi9oZWxwJztcbmltcG9ydCBMYXlvdXQgZnJvbSAnLi9sYXlvdXQnO1xuaW1wb3J0IExvYWRpbmcgZnJvbSAnLi9sb2FkaW5nJztcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vbmF2aWdhdGlvbic7XG5cbi8vIERFUFJFQ0FURUQgVGhpcyBpcyByZXF1aXJlZCB0byBzdXBwb3J0IG9sZCB1c2FnZXMgb2YgdGhlIHN1YiBtb2R1bGVzIHdoZW5cbi8vIGltcG9ydGluZyB0aGUgZnVsbCBKUyBsaWJyYXJ5LlxuaW1wb3J0IE9sZEZvcm1Db21wb25lbnRNb2R1bGUgZnJvbSAnLi9mb3JtLWNvbXBvbmVudHMuanMnO1xuaW1wb3J0IE9sZEZvcm1WYWxpZGF0aW9uTW9kdWxlIGZyb20gJy4vZm9ybS12YWxpZGF0aW9uLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhci5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUtY29tcG9uZW50cycsIFtcbiAgRm9ybXMsXG4gIFZhbGlkYXRpb24sXG4gIEZvcm1hdHRpbmcsXG4gIFNlcnZpY2VzLFxuICBIZWxwLFxuICBMYXlvdXQsXG4gIExvYWRpbmcsXG4gIE5hdmlnYXRpb24sXG4gIE9sZEZvcm1Db21wb25lbnRNb2R1bGUsXG4gIE9sZEZvcm1WYWxpZGF0aW9uTW9kdWxlXG5dKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRGF0ZUxvb2t1cCBmcm9tICcuL2RhdGUtbG9va3VwLmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgRGF0ZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZGF0ZSc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMuZGF0ZS1sb29rdXAnLCBbXG4gICAgRGF0ZVNlcnZpY2UsXG4gICAgRG9tU2VydmljZVxuICBdKVxuICAuY29tcG9uZW50KCd0d0RhdGVMb29rdXAnLCBEYXRlTG9va3VwKS5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9kYXRlLWxvb2t1cC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2RhdGUtbG9va3VwLmh0bWwnO1xuXG5jb25zdCBEYXRlTG9va3VwID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZToge1xuICAgICRuZ01vZGVsOiAnbmdNb2RlbCdcbiAgfSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdDaGFuZ2U6ICcmJyxcbiAgICBuZ01pbjogJzwnLFxuICAgIG5nTWF4OiAnPCcsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBwbGFjZWhvbGRlcjogJ0AnLFxuICAgIHNpemU6ICdAJyxcbiAgICBsb2NhbGU6ICdAJyxcbiAgICBsYWJlbDogJ0AnLFxuICAgIHNob3J0RGF0ZTogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVMb29rdXA7XG4iLCJcbmNsYXNzIERhdGVMb29rdXBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsICRzY29wZSwgJHRpbWVvdXQsIFR3RGF0ZVNlcnZpY2UsIFR3RG9tU2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdGhpcy5EYXRlU2VydmljZSA9IFR3RGF0ZVNlcnZpY2U7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLnllYXJPZmZzZXQgPSAwO1xuXG4gICAgdGhpcy5hZGRWYWxpZGF0b3JzKCRuZ01vZGVsLCAkZWxlbWVudCk7XG4gICAgdGhpcy5hZGRXYXRjaGVycygkc2NvcGUsICRuZ01vZGVsKTtcblxuICAgICRuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goKG5ld0RhdGUpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJWaWV3KG5ld0RhdGUpO1xuICAgICAgcmV0dXJuIG5ld0RhdGU7XG4gICAgfSk7XG5cbiAgICB0aGlzLmZvcm1Hcm91cCA9IFR3RG9tU2VydmljZS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUodGhpcy5lbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuXG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0bicpWzBdO1xuICAgIGNvbnN0IGJ1dHRvbkdyb3VwID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0bi1ncm91cCcpWzBdO1xuICAgIGNvbnN0IGRyb3Bkb3duID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2Ryb3Bkb3duLW1lbnUnKVswXTtcblxuICAgIGNvbnN0IG9uRm9jdXNPdXQgPSAoKSA9PiB7XG4gICAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICAgIC8vIElmIGJ1dHRvbiBpc24ndCBmb2N1c2VkIGFuZCBkcm9wZG93biBub3Qgb3BlbiwgdGhlbiBibHVyXG4gICAgICAgIGlmIChidXR0b24gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgICAmJiAhYnV0dG9uR3JvdXAuY2xhc3NMaXN0LmNvbnRhaW5zKCdvcGVuJykpIHtcbiAgICAgICAgICBpZiAodGhpcy5mb3JtR3JvdXApIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTUwKTsgLy8gbmVlZCB0aW1lb3V0IGJlY2F1c2UgdXNpbmcgZHJvcGRvd24uanMsXG4gICAgfTtcblxuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uRm9jdXNPdXQpO1xuICAgIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0Jywgb25Gb2N1c091dCk7XG5cbiAgICB0aGlzLnNldExvY2FsZSh0aGlzLmxvY2FsZSk7XG5cbiAgICB0aGlzLnVwZGF0ZU1pbkRhdGVWaWV3KHRoaXMubmdNaW4pO1xuICAgIHRoaXMudXBkYXRlTWF4RGF0ZVZpZXcodGhpcy5uZ01heCk7XG5cbiAgICB0aGlzLmJ1dHRvbiA9IGJ1dHRvbjtcbiAgfVxuXG4gIG9wZW5Mb29rdXAoKSB7XG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICAgIHRoaXMubW9kZSA9ICdkYXknO1xuXG4gICAgbGV0IHZpZXdEYXRlID0gdGhpcy5uZ01vZGVsO1xuICAgIGlmICh0aGlzLm5nTWluICYmIHRoaXMubmdNb2RlbCA8IHRoaXMubmdNaW4pIHtcbiAgICAgIHZpZXdEYXRlID0gdGhpcy5uZ01pbjtcbiAgICB9XG4gICAgaWYgKHRoaXMubmdNYXggJiYgdGhpcy5uZ01vZGVsID4gdGhpcy5uZ01heCkge1xuICAgICAgdmlld0RhdGUgPSB0aGlzLm5nTWF4O1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyVmlldyh2aWV3RGF0ZSk7XG5cbiAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IG1vbnRoTGFiZWwgPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHctZGF0ZS1sb29rdXAtbW9udGgtbGFiZWwnKVswXTtcbiAgICAgIG1vbnRoTGFiZWwuZm9jdXMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGVjdERheSgkZXZlbnQsIGRheSwgbW9udGgsIHllYXIpIHtcbiAgICBpZiAodGhpcy5pc0RheURpc2FibGVkKGRheSwgbW9udGgsIHllYXIpKSB7XG4gICAgICAvLyBEb24ndCBjbG9zZSBkcm9wZG93biwgZG9uJ3Qgc2V0IG1vZGVsXG4gICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGF5ID0gZGF5O1xuICAgIC8vIEFsd2F5cyBzZXQgbW9kZWwgdG8gVVRDIGRhdGVzXG4gICAgdGhpcy5zZXRNb2RlbCh0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ0RhdGVGcm9tUGFydHMoeWVhciwgbW9udGgsIGRheSkpO1xuICAgIHJlc2V0Rm9jdXModGhpcy5lbGVtZW50KTtcbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyRGF0ZVByZXNlbnRhdGlvbigpO1xuICB9XG5cbiAgc2VsZWN0TW9udGgoJGV2ZW50LCBtb250aCwgeWVhcikge1xuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5pc01vbnRoRGlzYWJsZWQobW9udGgsIHllYXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubW9udGggPSBtb250aDtcbiAgICB0aGlzLndlZWtzID0gdGhpcy5nZXRUYWJsZVN0cnVjdHVyZSgpO1xuICAgIHRoaXMubW9kZSA9ICdkYXknO1xuICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJEYXRlUHJlc2VudGF0aW9uKCk7XG4gIH1cblxuICBzZWxlY3RZZWFyKCRldmVudCwgeWVhcikge1xuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5pc1llYXJEaXNhYmxlZCh5ZWFyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnllYXIgPSB5ZWFyO1xuICAgIHRoaXMubW9kZSA9ICdtb250aCc7XG4gICAgdGhpcy51cGRhdGVDYWxlbmRhckRhdGVQcmVzZW50YXRpb24oKTtcbiAgfVxuXG4gIG1vbnRoQmVmb3JlKCRldmVudCkge1xuICAgIC8vIFByZXZlbnQgZHJvcGRvd24gY2xvc2luZ1xuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5tb250aCA9PT0gMCkge1xuICAgICAgdGhpcy55ZWFyLS07XG4gICAgICB0aGlzLm1vbnRoID0gMTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW9udGgtLTtcbiAgICB9XG4gICAgdGhpcy53ZWVrcyA9IHRoaXMuZ2V0VGFibGVTdHJ1Y3R1cmUoKTtcbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyRGF0ZVByZXNlbnRhdGlvbigpO1xuICB9XG5cbiAgeWVhckJlZm9yZSgkZXZlbnQpIHtcbiAgICAvLyBQcmV2ZW50IGRyb3Bkb3duIGNsb3NpbmdcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy55ZWFyLS07XG4gICAgdGhpcy53ZWVrcyA9IHRoaXMuZ2V0VGFibGVTdHJ1Y3R1cmUoKTtcbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyRGF0ZVByZXNlbnRhdGlvbigpO1xuICB9XG5cbiAgbW9udGhBZnRlcigkZXZlbnQpIHtcbiAgICAvLyBQcmV2ZW50IGRyb3Bkb3duIGNsb3NpbmdcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHRoaXMubW9udGggPT09IDExKSB7XG4gICAgICB0aGlzLnllYXIrKztcbiAgICAgIHRoaXMubW9udGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1vbnRoKys7XG4gICAgfVxuICAgIHRoaXMud2Vla3MgPSB0aGlzLmdldFRhYmxlU3RydWN0dXJlKCk7XG4gICAgdGhpcy51cGRhdGVDYWxlbmRhckRhdGVQcmVzZW50YXRpb24oKTtcbiAgfVxuXG4gIHllYXJBZnRlcigkZXZlbnQpIHtcbiAgICAvLyBQcmV2ZW50IGRyb3Bkb3duIGNsb3NpbmdcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy55ZWFyKys7XG4gICAgdGhpcy53ZWVrcyA9IHRoaXMuZ2V0VGFibGVTdHJ1Y3R1cmUoKTtcbiAgICB0aGlzLnVwZGF0ZUNhbGVuZGFyRGF0ZVByZXNlbnRhdGlvbigpO1xuICB9XG5cbiAgaXNDdXJyZW50bHlTZWxlY3RlZChkYXksIG1vbnRoLCB5ZWFyKSB7XG4gICAgcmV0dXJuIGRheSA9PT0gdGhpcy5zZWxlY3RlZERhdGVcbiAgICAgICYmIG1vbnRoID09PSB0aGlzLnNlbGVjdGVkTW9udGhcbiAgICAgICYmIHllYXIgPT09IHRoaXMuc2VsZWN0ZWRZZWFyO1xuICB9XG5cbiAgaXNEYXlEaXNhYmxlZChkYXksIG1vbnRoLCB5ZWFyKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNZZWFyRGlzYWJsZWQoeWVhcilcbiAgICAgIHx8IHRoaXMuaXNNb250aERpc2FibGVkKG1vbnRoLCB5ZWFyKVxuICAgICAgfHwgKHllYXIgPT09IHRoaXMubWluWWVhciAmJiBtb250aCA9PT0gdGhpcy5taW5Nb250aCAmJiBkYXkgPCB0aGlzLm1pbkRheSlcbiAgICAgIHx8ICh5ZWFyID09PSB0aGlzLm1heFllYXIgJiYgbW9udGggPT09IHRoaXMubWF4TW9udGggJiYgZGF5ID4gdGhpcy5tYXhEYXkpO1xuICB9XG5cbiAgaXNNb250aERpc2FibGVkKG1vbnRoLCB5ZWFyKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNZZWFyRGlzYWJsZWQoeWVhcilcbiAgICAgIHx8ICh5ZWFyID09PSB0aGlzLm1pblllYXIgJiYgbW9udGggPCB0aGlzLm1pbk1vbnRoKVxuICAgICAgfHwgKHllYXIgPT09IHRoaXMubWF4WWVhciAmJiBtb250aCA+IHRoaXMubWF4TW9udGgpO1xuICB9XG5cbiAgaXNZZWFyRGlzYWJsZWQoeWVhcikge1xuICAgIHJldHVybiAodGhpcy5taW5ZZWFyICYmIHllYXIgPCB0aGlzLm1pblllYXIpIHx8ICh0aGlzLm1heFllYXIgJiYgeWVhciA+IHRoaXMubWF4WWVhcik7XG4gIH1cblxuICBzd2l0Y2hUb01vbnRocyhldmVudCkge1xuICAgIHRoaXMuZmluZEFjdGl2ZUxpbmsoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLm1vZGUgPSAnbW9udGgnO1xuICB9XG5cbiAgc3dpdGNoVG9ZZWFycyhldmVudCkge1xuICAgIHRoaXMuZmluZEFjdGl2ZUxpbmsoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB0aGlzLm1vZGUgPSAneWVhcic7XG4gIH1cblxuICBzZXRZZWFyT2Zmc2V0KCRldmVudCwgYWRkdGlvbmFsT2Zmc2V0KSB7XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMueWVhck9mZnNldCArPSBhZGR0aW9uYWxPZmZzZXQ7XG4gIH1cblxuICBidXR0b25Gb2N1cygpIHtcbiAgICBpZiAodGhpcy5mb3JtR3JvdXApIHtcbiAgICAgIHRoaXMuZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH1cblxuICBhZGRWYWxpZGF0b3JzKCRuZ01vZGVsKSB7XG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWluID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICAgIGlmICh2YWx1ZSAmJiB0aGlzLm5nTWluICYmIHZhbHVlIDwgdGhpcy5uZ01pbikge1xuICAgICAgICBpZiAodGhpcy5mb3JtR3JvdXApIHtcbiAgICAgICAgICB0aGlzLmZvcm1Hcm91cC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1heCA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgICBpZiAodmFsdWUgJiYgdGhpcy5uZ01heCAmJiB2YWx1ZSA+IHRoaXMubmdNYXgpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9ybUdyb3VwKSB7XG4gICAgICAgICAgdGhpcy5mb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnaGFzLWVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfVxuXG4gIGFkZFdhdGNoZXJzKCRzY29wZSwgJG5nTW9kZWwpIHtcbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5sb2NhbGUnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgJiYgbmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0TG9jYWxlKG5ld1ZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nUmVxdWlyZWQnLCAoKSA9PiB7XG4gICAgICAkbmdNb2RlbC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nTWluJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1pbkRhdGVWaWV3KHRoaXMubmdNaW4pO1xuICAgICAgICAkbmdNb2RlbC4kdmFsaWRhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLnNob3J0RGF0ZScsICgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlU2VsZWN0ZWREYXRlUHJlc2VudGF0aW9uKCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ01heCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVNYXhEYXRlVmlldyh0aGlzLm5nTWF4KTtcbiAgICAgICAgJG5nTW9kZWwuJHZhbGlkYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ01vZGVsJywgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ0RhdGUobmV3VmFsdWUpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkTW9udGggPSB0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ01vbnRoKG5ld1ZhbHVlKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFllYXIgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ0Z1bGxZZWFyKG5ld1ZhbHVlKTtcbiAgICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZERhdGVQcmVzZW50YXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUNhbGVuZGFyVmlldyh2aWV3RGF0ZSkge1xuICAgIGlmICghdmlld0RhdGUgfHwgIXZpZXdEYXRlLmdldFVUQ0RhdGUpIHtcbiAgICAgIC8vIFdlIHdhbnQgdXNlcidzICd0b2RheScgaW4gVVRDXG4gICAgICB2aWV3RGF0ZSA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0TG9jYWxlVG9kYXkoKTtcbiAgICB9XG5cbiAgICAvLyBQcm92aWRlZCBkYXRlcyBzaG91bGQgdXNlIFVUQ1xuICAgIHRoaXMuZGF5ID0gdGhpcy5EYXRlU2VydmljZS5nZXRVVENEYXRlKHZpZXdEYXRlKTtcbiAgICB0aGlzLm1vbnRoID0gdGhpcy5EYXRlU2VydmljZS5nZXRVVENNb250aCh2aWV3RGF0ZSk7XG4gICAgdGhpcy55ZWFyID0gdGhpcy5EYXRlU2VydmljZS5nZXRVVENGdWxsWWVhcih2aWV3RGF0ZSk7XG5cbiAgICB0aGlzLndlZWtzID0gdGhpcy5nZXRUYWJsZVN0cnVjdHVyZSgpO1xuXG4gICAgdGhpcy51cGRhdGVDYWxlbmRhckRhdGVQcmVzZW50YXRpb24oKTtcbiAgfVxuXG4gIGdldFRhYmxlU3RydWN0dXJlKCkge1xuICAgIGxldCBmaXJzdERheU9mTW9udGggPSB0aGlzLkRhdGVTZXJ2aWNlLmdldFdlZWtkYXkodGhpcy55ZWFyLCB0aGlzLm1vbnRoLCAxKTtcbiAgICBpZiAoZmlyc3REYXlPZk1vbnRoID09PSAwKSB7XG4gICAgICBmaXJzdERheU9mTW9udGggPSA3O1xuICAgIH1cbiAgICBjb25zdCBkYXlzSW5Nb250aCA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0TGFzdERheU9mTW9udGgodGhpcy55ZWFyLCB0aGlzLm1vbnRoKTtcblxuICAgIGxldCB3ZWVrID0gW107XG4gICAgY29uc3Qgd2Vla3MgPSBbXTtcbiAgICBsZXQgaTtcblxuICAgIC8vIFBhZCBmaXJzdCB3ZWVrXG4gICAgZm9yIChpID0gMTsgaSA8IGZpcnN0RGF5T2ZNb250aDsgaSsrKSB7XG4gICAgICB3ZWVrLnB1c2goZmFsc2UpO1xuICAgIH1cbiAgICAvLyBGaWxsIGluIGRheXNcbiAgICBmb3IgKGkgPSAxOyBpIDw9IGRheXNJbk1vbnRoOyBpKyspIHtcbiAgICAgIHdlZWsucHVzaChpKTtcbiAgICAgIGlmICgoKGZpcnN0RGF5T2ZNb250aCArIGkpIC0gMSkgJSA3ID09PSAwKSB7XG4gICAgICAgIHdlZWtzLnB1c2god2Vlayk7XG4gICAgICAgIHdlZWsgPSBbXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHdlZWsubGVuZ3RoKSB7XG4gICAgICAvLyBQYWQgbGFzdCB3ZWVrXG4gICAgICBmb3IgKGkgPSB3ZWVrLmxlbmd0aDsgaSA8IDc7IGkrKykge1xuICAgICAgICB3ZWVrLnB1c2goZmFsc2UpO1xuICAgICAgfVxuICAgICAgd2Vla3MucHVzaCh3ZWVrKTtcbiAgICB9XG4gICAgcmV0dXJuIHdlZWtzO1xuICB9XG5cbiAgc2V0TG9jYWxlKGxvY2FsZSkge1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICB0aGlzLmxvY2FsZSA9ICdlbi1HQic7XG4gICAgfVxuICAgIHRoaXMubW9udGhCZWZvcmVEYXkgPSB0aGlzLkRhdGVTZXJ2aWNlLmlzTW9udGhCZWZvcmVEYXkodGhpcy5sb2NhbGUpO1xuICAgIHRoaXMubW9udGhzT2ZZZWFyID0gdGhpcy5EYXRlU2VydmljZS5nZXRNb250aE5hbWVzRm9yTG9jYWxlKHRoaXMubG9jYWxlLCAnbG9uZycpO1xuICAgIHRoaXMuc2hvcnRNb250aHNPZlllYXIgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldE1vbnRoTmFtZXNGb3JMb2NhbGUodGhpcy5sb2NhbGUsICdzaG9ydCcpO1xuXG4gICAgLy8gSlMgZGF5cyBzdGFydCBmcm9tIFN1bmRheSwgYnV0IHdlIHByZXNlbnQgZnJvbSBNb25kYXlcbiAgICBjb25zdCBqc0RheXMgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldERheU5hbWVzRm9yTG9jYWxlKHRoaXMubG9jYWxlLCAnc2hvcnQnKTtcbiAgICBjb25zdCBqc1Nob3J0RGF5cyA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0RGF5TmFtZXNGb3JMb2NhbGUodGhpcy5sb2NhbGUsICduYXJyb3cnKTtcbiAgICBqc0RheXMucHVzaChqc0RheXMuc2hpZnQoKSk7XG4gICAganNTaG9ydERheXMucHVzaChqc1Nob3J0RGF5cy5zaGlmdCgpKTtcbiAgICB0aGlzLmRheXNPZldlZWsgPSBqc0RheXM7XG4gICAgdGhpcy5zaG9ydERheXNPZldlZWsgPSBqc1Nob3J0RGF5cztcbiAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkRGF0ZVByZXNlbnRhdGlvbigpO1xuICB9XG5cbiAgdXBkYXRlU2VsZWN0ZWREYXRlUHJlc2VudGF0aW9uKCkge1xuICAgIHRoaXMuc2VsZWN0ZWREYXRlRm9ybWF0dGVkID0gdGhpcy5EYXRlU2VydmljZS5nZXRZZWFyTW9udGhEYXRlUHJlc2VudGF0aW9uKFxuICAgICAgdGhpcy5zZWxlY3RlZFllYXIsXG4gICAgICB0aGlzLnNlbGVjdGVkTW9udGgsXG4gICAgICB0aGlzLnNlbGVjdGVkRGF0ZSxcbiAgICAgIHRoaXMubG9jYWxlLFxuICAgICAgdGhpcy5zaG9ydERhdGUgPyAnc2hvcnQnIDogJ2xvbmcnXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZUNhbGVuZGFyRGF0ZVByZXNlbnRhdGlvbigpIHtcbiAgICB0aGlzLnllYXJNb250aEZvcm1hdHRlZCA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0WWVhckFuZE1vbnRoUHJlc2VudGF0aW9uKFxuICAgICAgdGhpcy55ZWFyLFxuICAgICAgdGhpcy5tb250aCxcbiAgICAgIHRoaXMubG9jYWxlLFxuICAgICAgdGhpcy5zaG9ydERhdGUgPyAnc2hvcnQnIDogJ2xvbmcnXG4gICAgKTtcbiAgfVxuXG4gIG1vdmVEYXRlVG9XaXRoaW5SYW5nZShkYXRlLCBtaW4sIG1heCkge1xuICAgIGlmICghZGF0ZSkge1xuICAgICAgZGF0ZSA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0TG9jYWxlVG9kYXkoKTtcbiAgICB9XG4gICAgaWYgKG1pbiAmJiBtaW4gPiBkYXRlKSB7XG4gICAgICByZXR1cm4gbWluO1xuICAgIH1cbiAgICBpZiAobWF4ICYmIG1heCA8IGRhdGUpIHtcbiAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgc2V0TW9kZWwobW9kZWxEYXRlKSB7XG4gICAgbW9kZWxEYXRlID0gdGhpcy5tb3ZlRGF0ZVRvV2l0aGluUmFuZ2UobW9kZWxEYXRlLCB0aGlzLm5nTWluLCB0aGlzLm5nTWF4KTtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUobW9kZWxEYXRlKTtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuXG4gICAgdGhpcy51cGRhdGVDYWxlbmRhclZpZXcobW9kZWxEYXRlKTtcbiAgfVxuXG4gIHVwZGF0ZU1pbkRhdGVWaWV3KG1pbkRhdGUpIHtcbiAgICBpZiAobWluRGF0ZSAmJiBtaW5EYXRlLmdldFVUQ0RhdGUpIHtcbiAgICAgIHRoaXMubWluRGF5ID0gdGhpcy5EYXRlU2VydmljZS5nZXRVVENEYXRlKG1pbkRhdGUpO1xuICAgICAgdGhpcy5taW5Nb250aCA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0VVRDTW9udGgobWluRGF0ZSk7XG4gICAgICB0aGlzLm1pblllYXIgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ0Z1bGxZZWFyKG1pbkRhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1pbkRheSA9IG51bGw7XG4gICAgICB0aGlzLm1pbk1vbnRoID0gbnVsbDtcbiAgICAgIHRoaXMubWluWWVhciA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlTWF4RGF0ZVZpZXcobWF4RGF0ZSkge1xuICAgIGlmIChtYXhEYXRlICYmIG1heERhdGUuZ2V0VVRDRGF0ZSkge1xuICAgICAgdGhpcy5tYXhEYXkgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ0RhdGUobWF4RGF0ZSk7XG4gICAgICB0aGlzLm1heE1vbnRoID0gdGhpcy5EYXRlU2VydmljZS5nZXRVVENNb250aChtYXhEYXRlKTtcbiAgICAgIHRoaXMubWF4WWVhciA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0VVRDRnVsbFllYXIobWF4RGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWF4RGF5ID0gbnVsbDtcbiAgICAgIHRoaXMubWF4TW9udGggPSBudWxsO1xuICAgICAgdGhpcy5tYXhZZWFyID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvLyBLZXlkb3duIGFzIGtleXByZXNzIGRpZCBub3Qgd29yayBpbiBjaHJvbWUvc2FmYXJpXG4gIGtleUhhbmRsZXIoZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMubmdNb2RlbCkge1xuICAgICAgLy8gQWx3YXlzIHNldCBtb2RlbCB0byBVVEMgZGF0ZXNcbiAgICAgIGNvbnN0IG5ld0RhdGUgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ0RhdGVGcm9tUGFydHMoXG4gICAgICAgIHRoaXMueWVhcixcbiAgICAgICAgdGhpcy5tb250aCxcbiAgICAgICAgdGhpcy5kYXlcbiAgICAgICk7XG4gICAgICB0aGlzLnNldE1vZGVsKG5ld0RhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNoYXJhY3RlckNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5jaGFyQ29kZSB8fCBldmVudC5rZXlDb2RlO1xuXG4gICAgaWYgKGNoYXJhY3RlckNvZGUgPT09IDM3KSB7IC8vIExlZnQgYXJyb3cga2V5XG4gICAgICB0aGlzLmFkanVzdERhdGUodGhpcy5tb2RlLCB0aGlzLm5nTW9kZWwsIC0xLCAtMSwgLTEpO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyQ29kZSA9PT0gMzgpIHsgLy8gVXAgYXJyb3cga2V5XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IGJyb3dzZXIgc2Nyb2xsXG4gICAgICB0aGlzLmFkanVzdERhdGUodGhpcy5tb2RlLCB0aGlzLm5nTW9kZWwsIC03LCAtNCwgLTQpO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyQ29kZSA9PT0gMzkpIHsgLy8gUmlnaHQgYXJyb3cga2V5XG4gICAgICB0aGlzLmFkanVzdERhdGUodGhpcy5tb2RlLCB0aGlzLm5nTW9kZWwsIDEsIDEsIDEpO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyQ29kZSA9PT0gNDApIHsgLy8gRG93biBhcnJvdyBrZXlcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgYnJvd3NlciBzY3JvbGxcbiAgICAgIHRoaXMuYWRqdXN0RGF0ZSh0aGlzLm1vZGUsIHRoaXMubmdNb2RlbCwgNywgNCwgNCk7XG4gICAgfVxuXG4gICAgdGhpcy5maW5kQWN0aXZlTGluaygpO1xuICB9XG5cbiAgZmluZEFjdGl2ZUxpbmsoKSB7XG4gICAgLy8gUGVyZm9ybSBhZnRlciBjdXJyZW50IGRpZ2VzdFxuICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgYWN0aXZlTGluayA9IHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhY3RpdmUnKVswXTtcbiAgICAgIGlmIChhY3RpdmVMaW5rKSB7XG4gICAgICAgIGFjdGl2ZUxpbmsuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkanVzdERhdGUobW9kZSwgZGF0ZSwgZGF5cywgbW9udGhzLCB5ZWFycykge1xuICAgIGxldCBuZXdEYXRlID0gZGF0ZTtcbiAgICBpZiAobW9kZSA9PT0gJ2RheScpIHtcbiAgICAgIG5ld0RhdGUgPSB0aGlzLkRhdGVTZXJ2aWNlLmFkZERheXMoZGF0ZSwgZGF5cyk7XG4gICAgfVxuICAgIGlmIChtb2RlID09PSAnbW9udGgnKSB7XG4gICAgICBuZXdEYXRlID0gdGhpcy5EYXRlU2VydmljZS5hZGRNb250aHMoZGF0ZSwgbW9udGhzKTtcbiAgICB9XG4gICAgaWYgKG1vZGUgPT09ICd5ZWFyJykge1xuICAgICAgbmV3RGF0ZSA9IHRoaXMuRGF0ZVNlcnZpY2UuYWRkWWVhcnMoZGF0ZSwgeWVhcnMpO1xuICAgIH1cbiAgICB0aGlzLnNldE1vZGVsKG5ld0RhdGUpO1xuICB9XG5cbiAgY2FsY3VsYXRlWWVhcihyb3csIGNvbHVtbikge1xuICAgIHJldHVybiAodGhpcy55ZWFyIC0gKHRoaXMueWVhciAlIDIwKSkgKyByb3cgKyBjb2x1bW4gKyB0aGlzLnllYXJPZmZzZXQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRGb2N1cyhlbGVtZW50KSB7XG4gIGNvbnN0IGJ1dHRvbiA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpWzBdO1xuICBpZiAoYnV0dG9uKSB7XG4gICAgYnV0dG9uLmZvY3VzKCk7XG4gIH1cbn1cblxuRGF0ZUxvb2t1cENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckdGltZW91dCcsXG4gICdUd0RhdGVTZXJ2aWNlJyxcbiAgJ1R3RG9tU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVMb29rdXBDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tYmxvY2sgZHJvcGRvd25cXFwiIG5nLWtleWRvd249JGN0cmwua2V5SGFuZGxlcigkZXZlbnQpPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWlucHV0IGRyb3Bkb3duLXRvZ2dsZSB0dy1kYXRlLWxvb2t1cC1idXR0b25cXFwiIGRhdGEtdG9nZ2xlPWRyb3Bkb3duIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2xpY2s9JGN0cmwub3Blbkxvb2t1cCgpIG5nLWZvY3VzPSRjdHJsLmJ1dHRvbkZvY3VzKCkgbmctY2xhc3M9XFxcIntcXG4gICAgICAnYnRuLXNtJzogJGN0cmwuc2l6ZSA9PT0nc20nLFxcbiAgICAgICdidG4tbGcnOiAkY3RybC5zaXplID09PSdsZydcXG4gICAgfVxcXCI+IDxzcGFuIG5nLWlmPSRjdHJsLmxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsIHNtYWxsIG0tci0xXFxcIj57eyRjdHJsLmxhYmVsfX08L3NwYW4+PHNwYW4gbmctaWY9ISRjdHJsLm5nTW9kZWwgY2xhc3M9XFxcImZvcm0tY29udHJvbC1wbGFjZWhvbGRlciB0dy1kYXRlLWxvb2t1cC1wbGFjZWhvbGRlciB2aXNpYmxlLXhzLWlubGluZSB2aXNpYmxlLXNtLWlubGluZSB2aXNpYmxlLW1kLWlubGluZSB2aXNpYmxlLWxnLWlubGluZSB2aXNpYmxlLXhsLWlubGluZVxcXCI+IHt7JGN0cmwucGxhY2Vob2xkZXJ9fSA8L3NwYW4+PHNwYW4gbmctaWY9JGN0cmwubmdNb2RlbCBjbGFzcz10dy1kYXRlLWxvb2t1cC1zZWxlY3RlZD4ge3skY3RybC5zZWxlY3RlZERhdGVGb3JtYXR0ZWR9fSA8L3NwYW4+IDxzcGFuIGNsYXNzPWNhcmV0Pjwvc3Bhbj4gPC9idXR0b24+IDxkaXYgY2xhc3M9ZHJvcGRvd24tbWVudT4gPGRpdiBuZy1pZj1cXFwiJGN0cmwubW9kZSA9PT0neWVhcidcXFwiIGNsYXNzPXR3LWRhdGUtbG9va3VwLXllYXJzPiA8ZGl2IGNsYXNzPVxcXCJ0ZXh0LXhzLWNlbnRlciBwLXQtMSBwLWItMlxcXCI+IDxkaXYgY2xhc3M9XFxcInB1bGwteHMtbGVmdCBwLWItMlxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgbmctY2xpY2s9XFxcIiRjdHJsLnNldFllYXJPZmZzZXQoJGV2ZW50LCAtMjApXFxcIiBjbGFzcz1cXFwidGV4dC1uby1kZWNvcmF0aW9uIHR3LWRhdGUtbG9va3VwLXByZXZpb3VzLXllYXJzXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1sZWZ0IGljb24tbGdcXFwiPjwvc3Bhbj4gPC9hPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicHVsbC14cy1yaWdodCBwLWItMlxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgbmctY2xpY2s9XFxcIiRjdHJsLnNldFllYXJPZmZzZXQoJGV2ZW50LCAyMClcXFwiIGNsYXNzPVxcXCJ0ZXh0LW5vLWRlY29yYXRpb24gdHctZGF0ZS1sb29rdXAtbmV4dC15ZWFyc1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tcmlnaHQgaWNvbi1sZ1xcXCI+PC9zcGFuPiA8L2E+IDwvZGl2PiA8L2Rpdj4gPHRhYmxlIGNsYXNzPVxcXCJ0YWJsZSB0YWJsZS1jb25kZW5zZWQgdGFibGUtYm9yZGVyZWQgdGFibGUtY2FsZW5kYXIgbS1iLTBcXFwiPjx0aGVhZCBjbGFzcz1zci1vbmx5PiA8dHI+IDx0aCBjb2xzcGFuPTQ+e3skY3RybC5wbGFjZWhvbGRlcn19PC90aD4gPC90cj4gPC90aGVhZD4gPHRib2R5PiA8dHIgbmctcmVwZWF0PVxcXCJyb3cgaW4gWzAsNCw4LDEyLDE2XVxcXCI+IDx0ZCBuZy1yZXBlYXQ9XFxcImNvbCBpbiBbMCwxLDIsM11cXFwiPiA8YSBocmVmPVxcXCJcXFwiIG5nLWNsaWNrPVxcXCIkY3RybC5zZWxlY3RZZWFyKCRldmVudCwgJGN0cmwuY2FsY3VsYXRlWWVhcihyb3csIGNvbCkpXFxcIiBuZy1kaXNhYmxlZD1cXFwiJGN0cmwuaXNZZWFyRGlzYWJsZWQoJGN0cmwuY2FsY3VsYXRlWWVhcihyb3csIGNvbCkpXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICAgICAgICAgICAgICdhY3RpdmUnOiAkY3RybC5zZWxlY3RlZFllYXIgPT09ICRjdHJsLmNhbGN1bGF0ZVllYXIocm93LCBjb2wpXFxuICAgICAgICAgICAgICAgIH1cXFwiIGNsYXNzPXR3LWRhdGUtbG9va3VwLXllYXItb3B0aW9uPiB7eyRjdHJsLmNhbGN1bGF0ZVllYXIocm93LCBjb2wpfX0gPC9hPiA8L3RkPiA8L3RyPiA8L3Rib2R5PiA8L3RhYmxlPiA8L2Rpdj4gPGRpdiBuZy1pZj1cXFwiJGN0cmwubW9kZSA9PT0nbW9udGgnXFxcIiBjbGFzcz10dy1kYXRlLWxvb2t1cC1tb250aHM+IDxkaXYgY2xhc3M9XFxcInRleHQteHMtY2VudGVyIHAtdC0xIHAtYi0yXFxcIj4gPGRpdiBjbGFzcz1wdWxsLXhzLWxlZnQ+IDxhIGhyZWY9XFxcIlxcXCIgbmctY2xpY2s9JGN0cmwueWVhckJlZm9yZSgkZXZlbnQpIGNsYXNzPXRleHQtbm8tZGVjb3JhdGlvbj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1sZWZ0IGljb24tbGdcXFwiPjwvc3Bhbj4gPC9hPiA8L2Rpdj4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC5zd2l0Y2hUb1llYXJzKCRldmVudCkgY2xhc3M9dHctZGF0ZS1sb29rdXAteWVhci1sYWJlbD4ge3skY3RybC55ZWFyfX0gPC9hPiA8ZGl2IGNsYXNzPXB1bGwteHMtcmlnaHQ+IDxhIGhyZWY9XFxcIlxcXCIgbmctY2xpY2s9JGN0cmwueWVhckFmdGVyKCRldmVudCkgY2xhc3M9dGV4dC1uby1kZWNvcmF0aW9uPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLXJpZ2h0IGljb24tbGdcXFwiPjwvc3Bhbj4gPC9hPiA8L2Rpdj4gPC9kaXY+IDx0YWJsZSBjbGFzcz1cXFwidGFibGUgdGFibGUtY29uZGVuc2VkIHRhYmxlLWJvcmRlcmVkIHRhYmxlLWNhbGVuZGFyIG0tYi0wXFxcIj48dGhlYWQgY2xhc3M9c3Itb25seT4gPHRyPiA8dGggY29sc3Bhbj0zPnt7JGN0cmwucGxhY2Vob2xkZXJ9fTwvdGg+IDwvdHI+IDwvdGhlYWQ+IDx0Ym9keT4gPHRyIG5nLXJlcGVhdD1cXFwicm93IGluIFswLDQsOF1cXFwiPiA8dGQgbmctcmVwZWF0PVxcXCJjb2wgaW4gWzAsMSwyLDNdXFxcIj4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz1cXFwiJGN0cmwuc2VsZWN0TW9udGgoJGV2ZW50LCByb3crY29sLCAkY3RybC55ZWFyKVxcXCIgbmctZGlzYWJsZWQ9XFxcIiRjdHJsLmlzTW9udGhEaXNhYmxlZChyb3cgKyBjb2wsICRjdHJsLnllYXIpXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICAgICAgICAgICAgICdhY3RpdmUnOiAkY3RybC5zZWxlY3RlZE1vbnRoID09PSAocm93ICsgY29sKSAmJiAkY3RybC5zZWxlY3RlZFllYXIgPT09ICRjdHJsLnllYXJcXG4gICAgICAgICAgICAgICAgfVxcXCIgY2xhc3M9dHctZGF0ZS1sb29rdXAtbW9udGgtb3B0aW9uPiB7eyRjdHJsLnNob3J0TW9udGhzT2ZZZWFyW3Jvdytjb2xdIHwgbGltaXRUbzo1fX0gPC9hPiA8L3RkPiA8L3RyPiA8L3Rib2R5PiA8L3RhYmxlPiA8L2Rpdj4gPGRpdiBuZy1pZj1cXFwiJGN0cmwubW9kZSA9PT0nZGF5J1xcXCIgY2xhc3M9dHctZGF0ZS1sb29rdXAtZGF5cz4gPGRpdiBjbGFzcz1cXFwidGV4dC14cy1jZW50ZXIgcC10LTEgcC1iLTJcXFwiPiA8ZGl2IGNsYXNzPXB1bGwteHMtbGVmdD4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC5tb250aEJlZm9yZSgkZXZlbnQpIGNsYXNzPVxcXCJ0ZXh0LW5vLWRlY29yYXRpb24gdHctZGF0ZS1sb29rdXAtcHJldmlvdXMtbW9udGhcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWxlZnQgaWNvbi1sZ1xcXCI+PC9zcGFuPiA8L2E+IDwvZGl2PiA8YSBocmVmPVxcXCJcXFwiIG5nLWNsaWNrPSRjdHJsLnN3aXRjaFRvWWVhcnMoJGV2ZW50KSBjbGFzcz10dy1kYXRlLWxvb2t1cC1tb250aC1sYWJlbD4ge3skY3RybC55ZWFyTW9udGhGb3JtYXR0ZWR9fSA8L2E+IDxkaXYgY2xhc3M9cHVsbC14cy1yaWdodD4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC5tb250aEFmdGVyKCRldmVudCkgY2xhc3M9XFxcInRleHQtbm8tZGVjb3JhdGlvbiB0dy1kYXRlLWxvb2t1cC1uZXh0LW1vbnRoXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1yaWdodCBpY29uLWxnXFxcIj48L3NwYW4+IDwvYT4gPC9kaXY+IDwvZGl2PiA8dGFibGUgY2xhc3M9XFxcInRhYmxlIHRhYmxlLWNvbmRlbnNlZCB0YWJsZS1ib3JkZXJlZCB0YWJsZS1jYWxlbmRhciBtLWItMFxcXCI+PHRoZWFkPiA8dHI+IDx0aCBuZy1yZXBlYXQ9XFxcImRheSBpbiAkY3RybC5kYXlzT2ZXZWVrIHRyYWNrIGJ5ICRpbmRleFxcXCI+IDxzcGFuIGNsYXNzPWhpZGRlbi14cz57e2RheSB8IGxpbWl0VG8gOiAzfX08L3NwYW4+IDxzcGFuIGNsYXNzPXZpc2libGUteHMtaW5saW5lLWJsb2NrPnt7JGN0cmwuc2hvcnREYXlzT2ZXZWVrWyRpbmRleF0gfCBsaW1pdFRvIDogMn19PC9zcGFuPiA8L3RoPiA8L3RyPiA8L3RoZWFkPiA8dGJvZHk+IDx0ciBuZy1yZXBlYXQ9XFxcIndlZWsgaW4gJGN0cmwud2Vla3NcXFwiPiA8dGQgbmctcmVwZWF0PVxcXCJkYXkgaW4gd2VlayB0cmFjayBieSAkaW5kZXhcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgICAgICAgICAgICdkZWZhdWx0JzogJGluZGV4ID4gNFxcbiAgICAgICAgICAgICAgfVxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgdGl0bGU9XFxcInt7ZGF5fX0ge3skY3RybC5tb250aHNPZlllYXJbJGN0cmwubW9udGhdfX0ge3skY3RybC55ZWFyfX1cXFwiIG5nLWlmPWRheSBuZy1jbGljaz1cXFwiJGN0cmwuc2VsZWN0RGF5KCRldmVudCwgZGF5LCAkY3RybC5tb250aCwgJGN0cmwueWVhcilcXFwiIG5nLWRpc2FibGVkPVxcXCIkY3RybC5pc0RheURpc2FibGVkKGRheSwgJGN0cmwubW9udGgsICRjdHJsLnllYXIpXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICAgICAgICAgICAgICdhY3RpdmUnOiAkY3RybC5pc0N1cnJlbnRseVNlbGVjdGVkKGRheSwgJGN0cmwubW9udGgsICRjdHJsLnllYXIpXFxuICAgICAgICAgICAgICAgIH1cXFwiIGNsYXNzPXR3LWRhdGUtbG9va3VwLWRheS1vcHRpb24gdGFiaW5kZXg9MD4ge3tkYXl9fSA8L2E+IDwvdGQ+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiOyIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IEN1cnJlbmN5SW5wdXQgZnJvbSAnLi9jdXJyZW5jeS1pbnB1dC5jb21wb25lbnQuanMnO1xuaW1wb3J0IEN1cnJlbmN5U2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jdXJyZW5jeSc7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4uL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5jdXJyZW5jeS1pbnB1dCcsIFtcbiAgICBDdXJyZW5jeVNlcnZpY2UsXG4gICAgRm9jdXNhYmxlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3Q3VycmVuY3lJbnB1dCcsIEN1cnJlbmN5SW5wdXQpLm5hbWU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2N1cnJlbmN5LWlucHV0LmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY3VycmVuY3ktaW5wdXQuaHRtbCc7XG5cbmNvbnN0IEN1cnJlbmN5SW5wdXQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICByZXF1aXJlOiB7XG4gICAgJG5nTW9kZWw6ICduZ01vZGVsJ1xuICB9LFxuICB0cmFuc2NsdWRlOiB7XG4gICAgYWRkb246ICc/YWRkb24nXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdNb2RlbDogJz0nLFxuICAgIG5nQ2hhbmdlOiAnJicsXG4gICAgbmdNaW46ICc8JyxcbiAgICBuZ01heDogJzwnLFxuICAgIG5nUmVxdWlyZWQ6ICc8JyxcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgY3VycmVuY3k6ICc9JyxcbiAgICBjdXJyZW5jeUNvZGU6ICdAJyxcbiAgICBwbGFjZWhvbGRlcjogJ0AnLFxuICAgIHNpemU6ICdAJyxcbiAgICBsb2NhbGU6ICdAJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDdXJyZW5jeUlucHV0O1xuIiwiXG5jbGFzcyBDdXJyZW5jeUlucHV0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCAkc2NvcGUsICR0aW1lb3V0LCBUd0N1cnJlbmN5U2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcblxuICAgIHRoaXMuQ3VycmVuY3lTZXJ2aWNlID0gVHdDdXJyZW5jeVNlcnZpY2U7XG4gICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgIHRoaXMuc2hvd0RlY2ltYWxzID0gdHJ1ZTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nTW9kZWwnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLmN1cnJlbmN5JywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNob3dEZWNpbWFscyA9IHRoaXMuQ3VycmVuY3lTZXJ2aWNlLmdldERlY2ltYWxzKG5ld1ZhbHVlKSA+IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnB1dCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0JylbMF07XG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICAgICRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2N1cnJlbmN5LWNvZGUnKSAmJiBjb25zb2xlICYmIGNvbnNvbGUubG9nKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5sb2coJ2N1cnJlbmN5IGNvZGUgaXMgZGVwcmVjYXRlZCBpbiB0d0N1cnJlbmN5SW5wdXQsIHBsZWFzZSB1c2UgY3VycmVuY3kuJyk7XG4gICAgfVxuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWluID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLm5nTWluID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLm5nTWluID09PSBudWxsIHx8ICFpc051bWJlcih2aWV3VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmlld1ZhbHVlID49IHRoaXMubmdNaW47XG4gICAgfTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1heCA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5uZ01heCA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5uZ01heCA9PT0gbnVsbCB8fCAhaXNOdW1iZXIodmlld1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZpZXdWYWx1ZSA8PSB0aGlzLm5nTWF4O1xuICAgIH07XG4gIH1cblxuICBjaGFuZ2VkSW5wdXRWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5uZ0NoYW5nZSkge1xuICAgICAgLy8gJHRpbWVvdXQgaXMgbmVlZGVkIHRvIGdldCB0aGUgbGFzdCBuZ01vZGVsIHZhbHVlLlxuICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy80NTU4XG4gICAgICB0aGlzLiR0aW1lb3V0KHRoaXMubmdDaGFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbn1cblxuQ3VycmVuY3lJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckdGltZW91dCcsXG4gICdUd0N1cnJlbmN5U2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IEN1cnJlbmN5SW5wdXRDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9aW5wdXQtZ3JvdXAgbmctY2xhc3M9XFxcIntcXG4gICdpbnB1dC1ncm91cC1zbSc6ICRjdHJsLnNpemUgPT09ICdzbScsXFxuICAnaW5wdXQtZ3JvdXAtbGcnOiAkY3RybC5zaXplID09PSAnbGcnLFxcbiAgJ2Rpc2FibGVkJzogJGN0cmwubmdEaXNhYmxlZFxcbn1cXFwiPiA8aW5wdXQgdHlwZT10ZXh0IGF1dG9jb21wbGV0ZT1vZmYgbmFtZT1hbW91bnQgc3RlcD1hbnkgY2xhc3M9XFxcImZvcm0tY29udHJvbCBwLXItMFxcXCIgcGxhY2Vob2xkZXI9e3skY3RybC5wbGFjZWhvbGRlcn19IHNob3ctZGVjaW1hbHM9JGN0cmwuc2hvd0RlY2ltYWxzIHR3LWZvY3VzYWJsZSB0dy1udW1iZXItaW5wdXQtZm9ybWF0dGVyIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2VkSW5wdXRWYWx1ZSgpIG5nLW1vZGVsPSRjdHJsLm5nTW9kZWwgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCAvPiA8c3BhbiBjbGFzcz1cXFwiaGVsbG8td29ybGQgaW5wdXQtZ3JvdXAtYWRkb24gdHctY3VycmVuY3ktaW5wdXQtY29kZSBwLWwtMVxcXCI+IDxzcGFuIG5nLXRyYW5zY2x1ZGU9YWRkb24+PC9zcGFuPiB7eyAkY3RybC5jdXJyZW5jeSB8fCAkY3RybC5jdXJyZW5jeUNvZGUgfX0gPC9zcGFuPiA8L2Rpdj4gXCI7IiwiXG5mdW5jdGlvbiBDdXJyZW5jeVNlcnZpY2UoKSB7XG4gIGNvbnN0IGN1cnJlbmN5RGVjaW1hbHMgPSB7XG4gICAgQklGOiAwLFxuICAgIEJZUjogMCxcbiAgICBDTFA6IDAsXG4gICAgREpGOiAwLFxuICAgIEdORjogMCxcbiAgICBKUFk6IDAsXG4gICAgS01GOiAwLFxuICAgIEtSVzogMCxcbiAgICBNR0E6IDAsXG4gICAgUFlHOiAwLFxuICAgIFJXRjogMCxcbiAgICBWTkQ6IDAsXG4gICAgVlVWOiAwLFxuICAgIFhBRjogMCxcbiAgICBYT0Y6IDAsXG4gICAgWFBGOiAwLFxuICAgIC8vIHRlY2huaWNhbGx5IEhVRiBkb2VzIGhhdmUgZGVjaW1hbHMsIGJ1dCBkdWUgdG8gdGhlIGV4Y2hhbmdlIHJhdGUgYmFua3NcbiAgICAvLyBkbyBub3QgYWNjZXB0IGRlY2ltYWwgYW1vdW50c1xuICAgIEhVRjogMCxcblxuICAgIEJIRDogMyxcbiAgICBKT0Q6IDMsXG4gICAgS1dEOiAzLFxuICAgIE9NUjogMyxcbiAgICBUTkQ6IDNcbiAgfTtcblxuICB0aGlzLmdldERlY2ltYWxzID0gKGN1cnJlbmN5KSA9PiB7XG4gICAgaWYgKGN1cnJlbmN5XG4gICAgICAmJiBjdXJyZW5jeS50b1VwcGVyQ2FzZVxuICAgICAgJiYgdHlwZW9mIGN1cnJlbmN5RGVjaW1hbHNbY3VycmVuY3kudG9VcHBlckNhc2UoKV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gY3VycmVuY3lEZWNpbWFsc1tjdXJyZW5jeS50b1VwcGVyQ2FzZSgpXTtcbiAgICB9XG4gICAgcmV0dXJuIDI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEN1cnJlbmN5U2VydmljZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9zZWxlY3QnO1xuaW1wb3J0IEFtb3VudEN1cnJlbmN5U2VsZWN0IGZyb20gJy4vYW1vdW50LWN1cnJlbmN5LXNlbGVjdC5jb21wb25lbnQuanMnO1xuaW1wb3J0IEN1cnJlbmN5U2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9jdXJyZW5jeSc7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4uL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5hbW91bnQtY3VycmVuY3ktc2VsZWN0JywgW1xuICAgIFNlbGVjdCxcbiAgICBDdXJyZW5jeVNlcnZpY2UsXG4gICAgRm9jdXNhYmxlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3QW1vdW50Q3VycmVuY3lTZWxlY3QnLCBBbW91bnRDdXJyZW5jeVNlbGVjdCkubmFtZTtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vYW1vdW50LWN1cnJlbmN5LXNlbGVjdC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2Ftb3VudC1jdXJyZW5jeS1zZWxlY3QuaHRtbCc7XG5cbmNvbnN0IEFtb3VudEN1cnJlbmN5U2VsZWN0ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZToge1xuICAgICRuZ01vZGVsOiAnbmdNb2RlbCdcbiAgfSxcbiAgdHJhbnNjbHVkZToge1xuICAgIGFkZG9uOiAnP2FkZG9uJ1xuICB9LFxuICBiaW5kaW5nczoge1xuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ01pbjogJzwnLFxuICAgIG5nTWF4OiAnPCcsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBuZ0NoYW5nZTogJyYnLFxuXG4gICAgLyogQmVnaW4gZGVwcmVjYXRlZCAqL1xuICAgIGFtb3VudFJlYWRPbmx5OiAnPCcsXG4gICAgb25BbW91bnRDaGFuZ2U6ICcmJyxcbiAgICAvKiBFbmQgZGVwcmVjYXRlZCAqL1xuXG4gICAgY3VycmVuY3k6ICc9JyxcbiAgICBjdXJyZW5jaWVzOiAnPCcsXG4gICAgb25DdXJyZW5jeUNoYW5nZTogJyYnLFxuICAgIGN1cnJlbmN5RmlsdGVyUGxhY2Vob2xkZXI6ICdAJyxcblxuICAgIGN1c3RvbUFjdGlvbkxhYmVsOiAnPCcsXG4gICAgb25DdXN0b21BY3Rpb246ICcmJyxcblxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG5cbiAgICBzaXplOiAnQCcsXG4gICAgbG9jYWxlOiAnQCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQW1vdW50Q3VycmVuY3lTZWxlY3Q7XG4iLCJcbmNsYXNzIEFtb3VudEN1cnJlbmN5U2VsZWN0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCAkc2NvcGUsICR0aW1lb3V0LCBUd0N1cnJlbmN5U2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgIHRoaXMuc2hvd0RlY2ltYWxzID0gdHJ1ZTtcbiAgICB0aGlzLkN1cnJlbmN5U2VydmljZSA9IFR3Q3VycmVuY3lTZXJ2aWNlO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5jdXJyZW5jeScsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAmJiBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5zaG93RGVjaW1hbHMgPSB0aGlzLkN1cnJlbmN5U2VydmljZS5nZXREZWNpbWFscyhuZXdWYWx1ZSkgPiAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgaW5wdXQgPSAkZWxlbWVudFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKVswXTtcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICB9KTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1pbiA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5uZ01pbiA9PT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5uZ01pbiA9PT0gbnVsbCB8fCAhaXNOdW1iZXIodmlld1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZpZXdWYWx1ZSA+PSB0aGlzLm5nTWluO1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5tYXggPSAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMubmdNYXggPT09ICd1bmRlZmluZWQnIHx8IHRoaXMubmdNYXggPT09IG51bGwgfHwgIWlzTnVtYmVyKHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2aWV3VmFsdWUgPD0gdGhpcy5uZ01heDtcbiAgICB9O1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnb24tYW1vdW50LWNoYW5nZScpICYmIGNvbnNvbGUgJiYgY29uc29sZS5sb2cpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmxvZygnb25BbW91bnRDaGFuZ2UgaXMgZGVwcmVjYXRlZCBpbiB0d0Ftb3VudEN1cnJlbmN5U2VsZWN0LCBwbGVhc2UgdXNlIG5nQ2hhbmdlLicpO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZWRBbW91bnQoKSB7XG4gICAgaWYgKHRoaXMubmdDaGFuZ2UpIHtcbiAgICAgIC8vICR0aW1lb3V0IGlzIG5lZWRlZCB0byBnZXQgdGhlIGxhc3QgbmdNb2RlbCB2YWx1ZS5cbiAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDU1OFxuICAgICAgdGhpcy4kdGltZW91dCh0aGlzLm5nQ2hhbmdlKTtcbiAgICB9XG4gICAgLyogRGVwcmVjYXRlZCAqL1xuICAgIGlmICh0aGlzLm9uQW1vdW50Q2hhbmdlKSB7XG4gICAgICAvLyAkdGltZW91dCBpcyBuZWVkZWQgdG8gZ2V0IHRoZSBsYXN0IG5nTW9kZWwgdmFsdWUuXG4gICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzQ1NThcbiAgICAgIHRoaXMuJHRpbWVvdXQodGhpcy5vbkFtb3VudENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlZEN1cnJlbmN5KCkge1xuICAgIGlmICh0aGlzLm9uQ3VycmVuY3lDaGFuZ2UpIHtcbiAgICAgIHRoaXMuJHRpbWVvdXQodGhpcy5vbkN1cnJlbmN5Q2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICBjdXN0b21BY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMub25DdXN0b21BY3Rpb24pIHtcbiAgICAgIHRoaXMub25DdXN0b21BY3Rpb24oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG59XG5cbkFtb3VudEN1cnJlbmN5U2VsZWN0Q29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHNjb3BlJyxcbiAgJyR0aW1lb3V0JyxcbiAgJ1R3Q3VycmVuY3lTZXJ2aWNlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgQW1vdW50Q3VycmVuY3lTZWxlY3RDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9aW5wdXQtZ3JvdXAgbmctY2xhc3M9XFxcIntcXG4gICAgJ2lucHV0LWdyb3VwLXNtJzogJGN0cmwuc2l6ZSA9PT0gJ3NtJyxcXG4gICAgJ2lucHV0LWdyb3VwLWxnJzogJGN0cmwuc2l6ZSA9PT0gJ2xnJyxcXG4gICAgJ2Rpc2FibGVkJzogJGN0cmwubmdEaXNhYmxlZFxcbiAgfVxcXCI+IDxpbnB1dCB0eXBlPXRleHQgYXV0b2NvbXBsZXRlPW9mZiBuYW1lPWFtb3VudCBzdGVwPWFueSBjbGFzcz1mb3JtLWNvbnRyb2wgcGxhY2Vob2xkZXI9XFxcInt7ICRjdHJsLnBsYWNlaG9sZGVyIH19XFxcIiB0dy1mb2N1c2FibGUgc2hvdy1kZWNpbWFscz0kY3RybC5zaG93RGVjaW1hbHMgdHctbnVtYmVyLWlucHV0LWZvcm1hdHRlciBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlZEFtb3VudCgpIG5nLW1vZGVsPSRjdHJsLm5nTW9kZWwgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCAvPiA8c3BhbiBjbGFzcz1pbnB1dC1ncm91cC1hZGRvbiBuZy1jbGFzcz1cXFwieydpbnB1dC1sZyc6ICRjdHJsLnNpemUgPT09J2xnJ31cXFwiIG5nLXRyYW5zY2x1ZGU9YWRkb24+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYnRuIGFtb3VudC1jdXJyZW5jeS1zZWxlY3QtYnRuXFxcIj4gPHR3LXNlbGVjdCBuZy1tb2RlbD0kY3RybC5jdXJyZW5jeSBuZy1yZXF1aXJlZD10cnVlIHNpemU9XFxcInt7ICRjdHJsLnNpemUgfX1cXFwiIGludmVyc2U9dHJ1ZSBkcm9wZG93bi1yaWdodD14cyBkcm9wZG93bi13aWR0aD1sZyBoaWRlLWN1cnJlbmN5PXhzIGhpZGUtbm90ZT10cnVlIGhpZGUtc2Vjb25kYXJ5PXRydWUgb3B0aW9ucz0kY3RybC5jdXJyZW5jaWVzIGZpbHRlcj1cXFwie3sgJGN0cmwuY3VycmVuY3lGaWx0ZXJQbGFjZWhvbGRlciB9fVxcXCIgbmctY2hhbmdlPSRjdHJsLmNoYW5nZWRDdXJyZW5jeSgpPiA8YSBocmVmPVxcXCJcXFwiIG5nLWlmPSEhJGN0cmwuY3VzdG9tQWN0aW9uTGFiZWwgbmctY2xpY2s9JGN0cmwub25DdXN0b21BY3Rpb24oKT4ge3sgJGN0cmwuY3VzdG9tQWN0aW9uTGFiZWwgfX0gPC9hPiA8L3R3LXNlbGVjdD4gPC9zcGFuPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9maWVsZHNldC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2ZpZWxkc2V0Lmh0bWwnO1xuaW1wb3J0ICcuL2ZpZWxkc2V0Lmxlc3MnO1xuXG5jb25zdCBGaWVsZHNldCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbW9kZWw6ICc9JyxcbiAgICBpbml0aWFsRmllbGRzOiAnPGZpZWxkcycsXG4gICAgcmVxdWlyZWRGaWVsZHM6ICc8JyxcbiAgICB1cGxvYWRPcHRpb25zOiAnPCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgdGl0bGU6ICdAJyxcbiAgICBkZXNjcmlwdGlvbjogJ0AnLFxuICAgIG9uTW9kZWxDaGFuZ2U6ICcmPycsXG4gICAgb25SZWZyZXNoUmVxdWlyZW1lbnRzOiAnJj8nLFxuICAgIG9uRmllbGRGb2N1czogJyY/JyxcbiAgICBvbkZpZWxkQmx1cjogJyY/JyxcbiAgICBvbkZpZWxkQ2hhbmdlOiAnJj8nLFxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuICAgIGVycm9yTWVzc2FnZXM6ICc8JyxcbiAgICB3YXJuaW5nTWVzc2FnZXM6ICc8JyxcbiAgICBpc1ZhbGlkOiAnPT8nLFxuICAgIG5hcnJvdzogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkc2V0O1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmNsYXNzIEZpZWxkc2V0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFR3UmVxdWlyZW1lbnRzU2VydmljZSwgJHNjb3BlLCAkdGltZW91dCkge1xuICAgIHRoaXMuUmVxdWlyZW1lbnRzU2VydmljZSA9IFR3UmVxdWlyZW1lbnRzU2VydmljZTtcbiAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gIH1cblxuICAkb25Jbml0KCkge1xuICAgIGlmICghdGhpcy5tb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbCA9IHt9O1xuICAgIH1cbiAgICBpZiAoIXRoaXMucmVxdWlyZWRGaWVsZHMpIHtcbiAgICAgIHRoaXMucmVxdWlyZWRGaWVsZHMgPSBbXTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzKSB7XG4gICAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcyA9IHtcbiAgICAgICAgcmVxdWlyZWQ6ICdSZXF1aXJlZCcsXG4gICAgICAgIHBhdHRlcm46ICdJbmNvcnJlY3QgZm9ybWF0JyxcbiAgICAgICAgbWluOiAnVGhlIHZhbHVlIGlzIHRvbyBsb3cnLFxuICAgICAgICBtYXg6ICdUaGUgdmFsdWUgaXMgdG9vIGhpZ2gnLFxuICAgICAgICBtaW5sZW5ndGg6ICdUaGUgdmFsdWUgaXMgdG9vIHNob3J0JyxcbiAgICAgICAgbWF4bGVuZ3RoOiAnVGhlIHZhbHVlIGlzIHRvbyBsb25nJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aGlzLiRzY29wZS4kd2F0Y2goJ3R3RmllbGRzZXQuJHZhbGlkJywgKHZhbGlkaXR5KSA9PiB7XG4gICAgICB0aGlzLmlzVmFsaWQgPSB2YWxpZGl0eTtcbiAgICB9KTtcblxuICAgIC8vIFRPRE8gY2FuIHdlIGFkZCBhc3luY3ZhbGlkYXRvciBoZXJlPyAtIHByb2Igbm90XG4gIH1cblxuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBjb25zdCBmaWVsZHNDaGFuZ2VkID0gY2hhbmdlcy5pbml0aWFsRmllbGRzO1xuICAgIGlmIChmaWVsZHNDaGFuZ2VkKSB7XG4gICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKGZpZWxkc0NoYW5nZWQuY3VycmVudFZhbHVlLCBmaWVsZHNDaGFuZ2VkLnByZXZpb3VzVmFsdWUpKSB7XG4gICAgICAgIHRoaXMuZmllbGRzID0gdGhpcy5SZXF1aXJlbWVudHNTZXJ2aWNlLnByZXBGaWVsZHMoXG4gICAgICAgICAgZmllbGRzQ2hhbmdlZC5jdXJyZW50VmFsdWUsXG4gICAgICAgICAgdGhpcy5tb2RlbCxcbiAgICAgICAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlc1xuICAgICAgICApO1xuXG4gICAgICAgIGlmICghdGhpcy5yZXF1aXJlZEZpZWxkcyB8fCAhdGhpcy5yZXF1aXJlZEZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnJlcXVpcmVkRmllbGRzID0gdGhpcy5SZXF1aXJlbWVudHNTZXJ2aWNlLmdldFJlcXVpcmVkRmllbGRzKHRoaXMuZmllbGRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZpZWxkRm9jdXMoa2V5LCBmaWVsZCkge1xuICAgIGlmICh0aGlzLm9uRmllbGRGb2N1cykge1xuICAgICAgdGhpcy5vbkZpZWxkRm9jdXMoeyBrZXksIGZpZWxkIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZpZWxkQmx1cihrZXksIGZpZWxkKSB7XG4gICAgaWYgKHRoaXMub25GaWVsZEJsdXIpIHtcbiAgICAgIHRoaXMub25GaWVsZEJsdXIoeyBrZXksIGZpZWxkIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZpZWxkQ2hhbmdlKHZhbHVlLCBrZXksIGZpZWxkKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1vZGVsW2tleV07XG4gICAgfVxuICAgIGlmICh0aGlzLm9uRmllbGRDaGFuZ2UpIHtcbiAgICAgIHRoaXMub25GaWVsZENoYW5nZSh7IHZhbHVlLCBrZXksIGZpZWxkIH0pO1xuICAgIH1cblxuICAgIC8vIFdlIHJlbW92ZSBjdXN0b20gZXJyb3IgbWVzc2FnZXMgb24gY2hhbmdlLCBhcyB0aGV5J3JlIG5vIGxvbmdlciByZWxldmFudFxuICAgIGlmICh0aGlzLmVycm9yTWVzc2FnZXMgJiYgdGhpcy5lcnJvck1lc3NhZ2VzW2tleV0pIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmVycm9yTWVzc2FnZXNba2V5XTtcbiAgICB9XG5cbiAgICAvLyBEZWxheSBzbyBtb2RlbCBjYW4gdXBkYXRlXG4gICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5vbk1vZGVsQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZSh7IG1vZGVsOiB0aGlzLm1vZGVsIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmllbGQucmVmcmVzaFJlcXVpcmVtZW50c09uQ2hhbmdlICYmIHRoaXMub25SZWZyZXNoUmVxdWlyZW1lbnRzKSB7XG4gICAgICAgIHRoaXMub25SZWZyZXNoUmVxdWlyZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZWZyZXNoUmVxdWlyZW1lbnRzKCkge1xuICAgIGlmICh0aGlzLm9uUmVmcmVzaFJlcXVpcmVtZW50cykge1xuICAgICAgdGhpcy5vblJlZnJlc2hSZXF1aXJlbWVudHMoKTtcbiAgICB9XG4gIH1cblxuICBpc1JlcXVpcmVkKGtleSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRoaXMucmVxdWlyZWRGaWVsZHMpICYmIHRoaXMucmVxdWlyZWRGaWVsZHMuaW5kZXhPZihrZXkpID49IDA7XG4gIH1cbn1cblxuRmllbGRzZXRDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICdUd1JlcXVpcmVtZW50c1NlcnZpY2UnLFxuICAnJHNjb3BlJyxcbiAgJyR0aW1lb3V0J1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgRmllbGRzZXRDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxmaWVsZHNldCBuZy1mb3JtPXR3RmllbGRzZXQ+IDxsZWdlbmQgbmctaWY9JGN0cmwudGl0bGU+e3sgJGN0cmwudGl0bGUgfX08L2xlZ2VuZD4gPHAgY2xhc3M9dGV4dC1tYXgtd2lkdGggbmctaWY9JGN0cmwuZGVzY3JpcHRpb24+e3sgJGN0cmwuZGVzY3JpcHRpb24gfX08L3A+IDxkaXYgY2xhc3M9XFxcInJvdyByb3ctZXF1YWwtaGVpZ2h0XFxcIj4gPGRpdiBjbGFzcz1jb2wteHMtMTIgbmctaGlkZT1maWVsZC5oaWRkZW4gbmctcmVwZWF0PVxcXCIoa2V5LCBmaWVsZCkgaW4gJGN0cmwuZmllbGRzXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICAgJ2NvbC1zbS00JzogISRjdHJsLm5hcnJvdyAgJiYgZmllbGQud2lkdGggPT09ICdzbScsXFxuICAgICAgICAnY29sLXNtLTYnOiAhJGN0cmwubmFycm93ICAmJiBmaWVsZC53aWR0aCA9PT0gJ21kJyxcXG4gICAgICAgICdjb2wtc20tMTInOiAkY3RybC5uYXJyb3cgfHwgZmllbGQud2lkdGggPT09ICdsZydcXG4gICAgICB9XFxcIj4gPHR3LWZpZWxkIG5nLWlmPVxcXCJmaWVsZC50eXBlICE9PSAnb2JqZWN0J1xcXCIgbmFtZT1cXFwie3sga2V5IH19XFxcIiBtb2RlbD0kY3RybC5tb2RlbFtrZXldIGZpZWxkPWZpZWxkIHJlcXVpcmVkPSRjdHJsLmlzUmVxdWlyZWQoa2V5KSBsb2NhbGU9XFxcInt7ICRjdHJsLmxvY2FsZSB9fVxcXCIgdXBsb2FkLW9wdGlvbnM9JGN0cmwudXBsb2FkT3B0aW9ucyB3YXJuaW5nLW1lc3NhZ2U9JGN0cmwud2FybmluZ01lc3NhZ2VzW2tleV0gZXJyb3ItbWVzc2FnZT0kY3RybC5lcnJvck1lc3NhZ2VzW2tleV0gdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXMgb24tY2hhbmdlPVxcXCIkY3RybC5maWVsZENoYW5nZSh2YWx1ZSwga2V5LCBmaWVsZClcXFwiIG9uLWZvY3VzPVxcXCIkY3RybC5maWVsZEZvY3VzKGtleSwgZmllbGQpXFxcIiBvbi1ibHVyPVxcXCIkY3RybC5maWVsZEJsdXIoa2V5LCBmaWVsZClcXFwiIGNsYXNzPXR3LWZpZWxkLWZ1bGwtd2lkdGg+IDwvdHctZmllbGQ+IDx0dy1maWVsZHNldCBuZy1pZj1cXFwiZmllbGQudHlwZSA9PT0gJ29iamVjdCdcXFwiIG1vZGVsPSRjdHJsLm1vZGVsW2tleV0gZmllbGRzPWZpZWxkLnByb3BlcnRpZXMgbG9jYWxlPVxcXCJ7eyAkY3RybC5sb2NhbGUgfX1cXFwiIHRpdGxlPVxcXCJ7eyBmaWVsZC50aXRsZSB9fVxcXCIgZGVzY3JpcHRpb249XFxcInt7IGZpZWxkLmRlc2NyaXB0aW9uIH19XFxcIiB1cGxvYWQtb3B0aW9ucz0kY3RybC51cGxvYWRPcHRpb25zIHdhcm5pbmctbWVzc2FnZXM9JGN0cmwud2FybmluZ01lc3NhZ2VzW2tleV0gZXJyb3ItbWVzc2FnZXM9JGN0cmwuZXJyb3JNZXNzYWdlc1trZXldIHZhbGlkYXRpb24tbWVzc2FnZXM9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzIG9uLXJlZnJlc2gtcmVxdWlyZW1lbnRzPSRjdHJsLnJlZnJlc2hSZXF1aXJlbWVudHMoKSBvbi1maWVsZC1jaGFuZ2U9XFxcIiRjdHJsLmZpZWxkQ2hhbmdlKHZhbHVlLCBrZXksIGZpZWxkKVxcXCIgb24tZmllbGQtZm9jdXM9XFxcIiRjdHJsLmZpZWxkRm9jdXMoa2V5LCBmaWVsZClcXFwiIG9uLWZpZWxkLWJsdXI9XFxcIiRjdHJsLmZpZWxkQmx1cihrZXksIGZpZWxkKVxcXCIgY2xhc3M9dHctZmllbGQtZnVsbC13aWR0aD4gPC90dy1maWVsZHNldD4gPC9kaXY+IDwvZGl2PiA8L2ZpZWxkc2V0PiBcIjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZmllbGRzZXQubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZmllbGRzZXQubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZpZWxkc2V0Lmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi50dy1maWVsZC1mdWxsLXdpZHRoe2ZsZXg6MX1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBSZXF1aXJlbWVudHNGb3JtIGZyb20gJy4vcmVxdWlyZW1lbnRzLWZvcm0uY29tcG9uZW50LmpzJztcbmltcG9ydCBUYWJzIGZyb20gJy4uLy4uL25hdmlnYXRpb24vdGFicyc7XG5pbXBvcnQgRmllbGRzZXQgZnJvbSAnLi4vZmllbGRzZXQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMucmVxdWlyZW1lbnRzLWZvcm0nLCBbXG4gICAgVGFicyxcbiAgICBGaWVsZHNldFxuICBdKVxuICAuY29tcG9uZW50KCd0d1JlcXVpcmVtZW50c0Zvcm0nLCBSZXF1aXJlbWVudHNGb3JtKS5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9yZXF1aXJlbWVudHMtZm9ybS5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3JlcXVpcmVtZW50cy1mb3JtLmh0bWwnO1xuXG5jb25zdCBSZXF1aXJlbWVudHNGb3JtID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBtb2RlbDogJz0nLFxuICAgIG9uTW9kZWxDaGFuZ2U6ICcmJyxcbiAgICByZXF1aXJlbWVudHM6ICc8JyxcbiAgICB1cGxvYWRPcHRpb25zOiAnPCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgb25SZWZyZXNoUmVxdWlyZW1lbnRzOiAnJj8nLFxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuICAgIGVycm9yTWVzc2FnZXM6ICc8JyxcbiAgICBpc1ZhbGlkOiAnPT8nXG4gIH1cbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVxdWlyZW1lbnRzRm9ybTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5jbGFzcyBSZXF1aXJlbWVudHNGb3JtQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFJlcXVpcmVtZW50c1NlcnZpY2UpIHtcbiAgICB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UgPSBSZXF1aXJlbWVudHNTZXJ2aWNlO1xuXG4gICAgaWYgKCF0aGlzLm1vZGVsKSB7XG4gICAgICB0aGlzLm1vZGVsID0ge307XG4gICAgfVxuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICBpZiAodGhpcy5yZXF1aXJlbWVudHMgJiYgdGhpcy5yZXF1aXJlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5hY3RpdmVJbmRleCA9IDA7XG4gICAgfVxuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMucmVxdWlyZW1lbnRzKSB7XG4gICAgICB0aGlzLm9uUmVxdWlyZW1lbnRzQ2hhbmdlKFxuICAgICAgICBjaGFuZ2VzLnJlcXVpcmVtZW50cy5jdXJyZW50VmFsdWUsXG4gICAgICAgIGNoYW5nZXMucmVxdWlyZW1lbnRzLnByZXZpb3VzVmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgb25UYWJDaGFuZ2UoaW5kZXgpIHtcbiAgICB0aGlzLnN3aXRjaFRhYihpbmRleCwgdGhpcy5hY3RpdmVJbmRleCk7XG4gICAgdGhpcy5hY3RpdmVJbmRleCA9IGluZGV4O1xuICB9XG5cbiAgc3dpdGNoVGFiKG5ld0luZGV4LCBvbGRJbmRleCkge1xuICAgIGlmIChuZXdJbmRleCA9PT0gb2xkSW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbGVhblJlcXVpcmVtZW50c01vZGVsKFxuICAgICAgdGhpcy5tb2RlbCxcbiAgICAgIHRoaXMucmVxdWlyZW1lbnRzICYmIHRoaXMucmVxdWlyZW1lbnRzW29sZEluZGV4XSxcbiAgICAgIHRoaXMucmVxdWlyZW1lbnRzICYmIHRoaXMucmVxdWlyZW1lbnRzW25ld0luZGV4XVxuICAgICk7XG4gIH1cblxuICBvbkZpZWxkc2V0UmVmcmVzaFJlcXVpcmVtZW50cygpIHtcbiAgICBpZiAodGhpcy5vblJlZnJlc2hSZXF1aXJlbWVudHMpIHtcbiAgICAgIHRoaXMub25SZWZyZXNoUmVxdWlyZW1lbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgb25GaWVsZHNldE1vZGVsQ2hhbmdlKG1vZGVsKSB7XG4gICAgaWYgKHRoaXMub25Nb2RlbENoYW5nZSkge1xuICAgICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHsgbW9kZWwgfSk7XG4gICAgfVxuICB9XG5cbiAgb25SZXF1aXJlbWVudHNDaGFuZ2UobmV3UmVxdWlyZW1lbnRzLCBvbGRSZXF1aXJlbWVudHMpIHtcbiAgICBpZiAoYW5ndWxhci5lcXVhbHMobmV3UmVxdWlyZW1lbnRzLCBvbGRSZXF1aXJlbWVudHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gV2UgbmVlZCB0byBwcmVwYXJlIHRoZSBuZXcgQU5EIG9sZCwgYmVjYXVzZSB0aGUgdGhlIGJpbmRpbmcgaXMgbm90XG4gICAgLy8gdXBkYXRlZCB3aGVuIHdlIHByZXBhcmUsIHNvIHRoZSBvbGRWYWx1ZSB3aWxsIG5vdCBiZSBwcmVwcGVkLlxuICAgIGNvbnN0IG5ld1ByZXBhcmVkID0gdGhpcy5SZXF1aXJlbWVudHNTZXJ2aWNlLnByZXBSZXF1aXJlbWVudHMobmV3UmVxdWlyZW1lbnRzKTtcbiAgICBjb25zdCBvbGRQcmVwYXJlZCA9IHRoaXMuUmVxdWlyZW1lbnRzU2VydmljZS5wcmVwUmVxdWlyZW1lbnRzKG9sZFJlcXVpcmVtZW50cyk7XG5cbiAgICB0aGlzLnJlcXVpcmVtZW50cyA9IG5ld1ByZXBhcmVkO1xuICAgIHRoaXMudGFicyA9IHRoaXMucmVxdWlyZW1lbnRzLm1hcChyZXF1aXJlbWVudCA9PiByZXF1aXJlbWVudC50aXRsZSk7XG5cbiAgICAvLyBJZiBhY3RpdmVJbmRleCBpcyBpbnZhbGlkLCBjb3JyZWN0IGl0XG4gICAgaWYgKCghdGhpcy5hY3RpdmVJbmRleFxuICAgICAgfHwgKHRoaXMuYWN0aXZlSW5kZXggJiYgIXRoaXMucmVxdWlyZW1lbnRzW3RoaXMuYWN0aXZlSW5kZXhdKSlcbiAgICAgICYmIHRoaXMucmVxdWlyZW1lbnRzLmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSAwO1xuICAgIH1cblxuICAgIGNsZWFuUmVxdWlyZW1lbnRzTW9kZWwoXG4gICAgICB0aGlzLm1vZGVsLFxuICAgICAgb2xkUHJlcGFyZWRbdGhpcy5hY3RpdmVJbmRleF0sXG4gICAgICBuZXdQcmVwYXJlZFt0aGlzLmFjdGl2ZUluZGV4XVxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5SZXF1aXJlbWVudHNNb2RlbChtb2RlbCwgb2xkUmVxdWlyZW1lbnRzLCBuZXdSZXF1aXJlbWVudHMpIHtcbiAgaWYgKCFvbGRSZXF1aXJlbWVudHNcbiAgICB8fCAhbmV3UmVxdWlyZW1lbnRzXG4gICAgfHwgIW9sZFJlcXVpcmVtZW50cy5wcm9wZXJ0aWVzXG4gICAgfHwgIW5ld1JlcXVpcmVtZW50cy5wcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb2xkRmllbGROYW1lcyA9IGdldEZpZWxkTmFtZXNGcm9tUmVxdWlyZW1lbnQob2xkUmVxdWlyZW1lbnRzKTtcbiAgY29uc3QgbmV3RmllbGROYW1lcyA9IGdldEZpZWxkTmFtZXNGcm9tUmVxdWlyZW1lbnQobmV3UmVxdWlyZW1lbnRzKTtcblxuICBjb25zdCBvYnNvbGV0ZUZpZWxkTmFtZXMgPSBvbGRGaWVsZE5hbWVzLmZpbHRlcihcbiAgICBmaWVsZE5hbWUgPT4gbmV3RmllbGROYW1lcy5pbmRleE9mKGZpZWxkTmFtZSkgPCAwXG4gICk7XG5cbiAgb2Jzb2xldGVGaWVsZE5hbWVzLmZvckVhY2goKGZpZWxkTmFtZSkgPT4ge1xuICAgIGRlbGV0ZSBtb2RlbFtmaWVsZE5hbWVdO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RmllbGROYW1lc0Zyb21SZXF1aXJlbWVudChtb2RlbFJlcXVpcmVtZW50KSB7XG4gIGlmICghbW9kZWxSZXF1aXJlbWVudCB8fCAhbW9kZWxSZXF1aXJlbWVudC5wcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1vZGVsUmVxdWlyZW1lbnQucHJvcGVydGllcykgfHwgW107XG59XG5cblJlcXVpcmVtZW50c0Zvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbXG4gICdUd1JlcXVpcmVtZW50c1NlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBSZXF1aXJlbWVudHNGb3JtQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8dHctdGFicyBuZy1pZj1cXFwiJGN0cmwucmVxdWlyZW1lbnRzLmxlbmd0aCA+IDFcXFwiIHRhYnM9JGN0cmwudGFicyBvbi1jaGFuZ2U9JGN0cmwub25UYWJDaGFuZ2UoaW5kZXgpIGFjdGl2ZT0kY3RybC5hY3RpdmVJbmRleD4gPC90dy10YWJzPiA8ZGl2IGNsYXNzPXRhYi1jb250ZW50IG5nLWZvcm09dHdGb3JtIG5nLWlmPVxcXCIkY3RybC5yZXF1aXJlbWVudHMubGVuZ3RoID4gMFxcXCI+IDxkaXYgY2xhc3M9XFxcInRhYi1wYW5lIGFjdGl2ZVxcXCI+IDxwIG5nLWlmPSRjdHJsLnJlcXVpcmVtZW50c1skY3RybC5hY3RpdmVJbmRleF0uZGVzY3JpcHRpb24+IHt7ICRjdHJsLnJlcXVpcmVtZW50c1skY3RybC5hY3RpdmVJbmRleF0uZGVzY3JpcHRpb24gfX0gPC9wPiA8dHctZmllbGRzZXQgZmllbGRzPSRjdHJsLnJlcXVpcmVtZW50c1skY3RybC5hY3RpdmVJbmRleF0ucHJvcGVydGllcyBtb2RlbD0kY3RybC5tb2RlbCBvbi1tb2RlbC1jaGFuZ2U9JGN0cmwub25GaWVsZHNldE1vZGVsQ2hhbmdlKG1vZGVsKSB1cGxvYWQtb3B0aW9ucz0kY3RybC51cGxvYWRPcHRpb25zIGxvY2FsZT17eyRjdHJsLmxvY2FsZX19IG9uLXJlZnJlc2gtcmVxdWlyZW1lbnRzPSRjdHJsLm9uRmllbGRzZXRSZWZyZXNoUmVxdWlyZW1lbnRzKCkgdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXMgZXJyb3ItbWVzc2FnZXM9JGN0cmwuZXJyb3JNZXNzYWdlcyBpcy12YWxpZD0kY3RybC5pc1ZhbGlkPiA8L3R3LWZpZWxkc2V0PiA8L2Rpdj4gPC9kaXY+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vdGFicy5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RhYnMuaHRtbCc7XG5cbmNvbnN0IFRhYnMgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHRhYnM6ICc8JyxcbiAgICBhY3RpdmU6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhYnM7XG4iLCJjbGFzcyBUYWJzQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICghdGhpcy5hY3RpdmUgJiYgdGhpcy50YWJzICYmIHRoaXMudGFicy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB9XG4gIH1cblxuICBzd2l0Y2hUYWIoaW5kZXgpIHtcbiAgICB0aGlzLmFjdGl2ZSA9IGluZGV4O1xuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgaW5kZXggfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhYnNDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjx1bCBuZy1pZj1cXFwiJGN0cmwudGFicy5sZW5ndGggPiAwXFxcIiBjbGFzcz1cXFwibmF2IG5hdi10YWJzIG0tYi0zXFxcIj4gPGxpIG5nLXJlcGVhdD1cXFwidGFiIGluICRjdHJsLnRhYnMgdHJhY2sgYnkgJGluZGV4XFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICdhY3RpdmUnOiAkY3RybC5hY3RpdmUgPT09ICRpbmRleFxcbiAgICB9XFxcIj4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC5zd2l0Y2hUYWIoJGluZGV4KT4ge3sgdGFiIH19IDwvYT4gPC9saT4gPC91bD4gXCI7IiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRGVmaW5pdGlvbkxpc3QgZnJvbSAnLi9kZWZpbml0aW9uLWxpc3QuY29tcG9uZW50LmpzJztcblxuaW1wb3J0IEZvcm1hdHRpbmcgZnJvbSAnLi4vLi4vZm9ybWF0dGluZyc7XG5pbXBvcnQgUmVxdWlyZW1lbnRzU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9yZXF1aXJlbWVudHMnO1xuaW1wb3J0IERhdGVTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUucmVxdWlyZW1lbnRzLmRlZmluaXRpb24tbGlzdCcsIFtcbiAgICBGb3JtYXR0aW5nLFxuICAgIFJlcXVpcmVtZW50c1NlcnZpY2UsXG4gICAgRGF0ZVNlcnZpY2VcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdEZWZpbml0aW9uTGlzdCcsIERlZmluaXRpb25MaXN0KS5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9kZWZpbml0aW9uLWxpc3QuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kZWZpbml0aW9uLWxpc3QuaHRtbCc7XG5cbmNvbnN0IERlZmluaXRpb25MaXN0ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBtb2RlbDogJzwnLFxuICAgIGluaXRpYWxGaWVsZHM6ICc8ZmllbGRzJyxcbiAgICBsb2NhbGU6ICdAJyxcbiAgICB0aXRsZTogJ0AnLFxuICAgIG5hcnJvdzogJzwnLFxuICAgIGxheW91dDogJ0AnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IERlZmluaXRpb25MaXN0O1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmNsYXNzIERlZmluaXRpb25MaXN0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFR3UmVxdWlyZW1lbnRzU2VydmljZSkge1xuICAgIHRoaXMuUmVxdWlyZW1lbnRzU2VydmljZSA9IFR3UmVxdWlyZW1lbnRzU2VydmljZTtcblxuICAgIHRoaXMubGF5b3V0ID0gdGhpcy5sYXlvdXQgfHwgJ3ZlcnRpY2FsJztcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGNvbnN0IGZpZWxkc0NoYW5nZWQgPSBjaGFuZ2VzLmluaXRpYWxGaWVsZHM7XG4gICAgaWYgKGZpZWxkc0NoYW5nZWQpIHtcbiAgICAgIGlmICghYW5ndWxhci5lcXVhbHMoZmllbGRzQ2hhbmdlZC5jdXJyZW50VmFsdWUsIGZpZWxkc0NoYW5nZWQucHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgICAgdGhpcy5maWVsZHMgPSB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UucHJlcEZpZWxkcyhcbiAgICAgICAgICBmaWVsZHNDaGFuZ2VkLmN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICB0aGlzLm1vZGVsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGdldFZhbHVlTGFiZWwob3B0aW9ucywgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChvcHRpb25zW2ldLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gb3B0aW9uc1tpXS5sYWJlbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIG1hc2sodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IEFycmF5KHZhbHVlLmxlbmd0aCArIDEpLmpvaW4oJyonKTtcbiAgfVxufVxuXG5EZWZpbml0aW9uTGlzdENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJ1R3UmVxdWlyZW1lbnRzU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IERlZmluaXRpb25MaXN0Q29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPW0tdC0xPiA8aDQgbmctaWY9JGN0cmwudGl0bGUgbmctYmluZD0kY3RybC50aXRsZSBjbGFzcz1cXFwicGFnZS1oZWFkZXIgcC10LTNcXFwiPiA8L2g0PiA8L2Rpdj4gPGRpdiBuZy1jbGFzcz1cXFwieydyb3cgcm93LWVxdWFsLWhlaWdodCc6ICRjdHJsLmxheW91dCA9PT0gJ3ZlcnRpY2FsJ31cXFwiPiA8ZGl2IG5nLWNsYXNzPVxcXCJ7J2NvbC14cy0xMiBjb2wtc20tNic6ICEkY3RybC5uYXJyb3cgJiYgJGN0cmwubGF5b3V0ID09PSAndmVydGljYWwnfVxcXCIgbmctcmVwZWF0PVxcXCIoa2V5LCBmaWVsZCkgaW4gJGN0cmwuZmllbGRzIHRyYWNrIGJ5ICRpbmRleFxcXCIgbmctaWY9XFxcIiRjdHJsLm1vZGVsW2tleV0gJiYgIWZpZWxkLmhpZGRlblxcXCI+IDxkbCBuZy1pZj0hZmllbGQuZ3JvdXAgbmctY2xhc3M9XFxcInsnZGwtaG9yaXpvbnRhbC1pdGVtJzogJGN0cmwubGF5b3V0ID09PSAnanVzdGlmaWVkJywgJ2RsLWhvcml6b250YWwnOiAkY3RybC5sYXlvdXQgPT09ICdob3Jpem9udGFsJ31cXFwiPiA8ZHQgbmctYmluZD1maWVsZC50aXRsZT48L2R0PiA8ZGQgbmctc3dpdGNoPWZpZWxkLmNvbnRyb2wgY2xhc3M9dGV4dC13b3JkLWJyZWFrPiA8c3BhbiBuZy1zd2l0Y2gtd2hlbj1zZWxlY3R8cmFkaW8gbmctc3dpdGNoLXdoZW4tc2VwYXJhdG9yPXw+IHt7ICRjdHJsLmdldFZhbHVlTGFiZWwoZmllbGQudmFsdWVzLCAkY3RybC5tb2RlbFtrZXldKSB9fSA8L3NwYW4+IDxzcGFuIG5nLXN3aXRjaC13aGVuPWRhdGU+IHt7ICRjdHJsLm1vZGVsW2tleV0gfCB0d0RhdGVGb3JtYXQ6ICRjdHJsLmxvY2FsZSB9fSA8L3NwYW4+IDxzcGFuIG5nLXN3aXRjaC13aGVuPW51bWJlcj4ge3sgJGN0cmwubW9kZWxba2V5XSB8IHR3TnVtYmVyRm9ybWF0OiAkY3RybC5sb2NhbGUgfX0gPC9zcGFuPiA8c3BhbiBuZy1zd2l0Y2gtd2hlbj1wYXNzd29yZD4ge3sgJGN0cmwubWFzaygkY3RybC5tb2RlbFtrZXldKSB9fSA8L3NwYW4+IDxkaXYgbmctc3dpdGNoLXdoZW49ZmlsZSBjbGFzcz10aHVtYm5haWw+IDxpbWcgYWx0PVxcXCJ7eyBmaWVsZC50aXRsZSB9fVxcXCIgbmctc3JjPVxcXCJ7eyAkY3RybC5tb2RlbFtrZXldIH19XFxcIiBuZy1hdHRyLWFsdD1cXFwie3sgZmllbGQudGl0bGUgfX1cXFwiLz4gPC9kaXY+IDxzcGFuIG5nLXN3aXRjaC1kZWZhdWx0PiB7eyAkY3RybC5tb2RlbFtrZXldIHwgdHdUZXh0Rm9ybWF0OiBmaWVsZC5kaXNwbGF5Rm9ybWF0IH19IDwvc3Bhbj4gPC9kZD4gPC9kbD4gPGRsIG5nLWlmPWZpZWxkLmdyb3VwIG5nLWNsYXNzPVxcXCJ7J2RsLWhvcml6b250YWwtaXRlbSc6ICRjdHJsLmxheW91dCA9PT0gJ2p1c3RpZmllZCcsICdkbC1ob3Jpem9udGFsJzogJGN0cmwubGF5b3V0ID09PSAnaG9yaXpvbnRhbCd9XFxcIj4gPGR0IG5nLWJpbmQ9ZmllbGQudGl0bGU+PC9kdD4gPGRkIGNsYXNzPXRleHQtd29yZC1icmVhaz4gPHNwYW4gbmctcmVwZWF0PVxcXCJmaWVsZFNlY3Rpb24gaW4gZmllbGQuZ3JvdXBcXFwiPiA8c3BhbiBuZy1zd2l0Y2g9ZmllbGRTZWN0aW9uLmNvbnRyb2w+IDxzcGFuIG5nLXN3aXRjaC13aGVuPXNlbGVjdHxyYWRpbyBuZy1zd2l0Y2gtd2hlbi1zZXBhcmF0b3I9fD4ge3sgJGN0cmwuZ2V0VmFsdWVMYWJlbChmaWVsZFNlY3Rpb24udmFsdWVzLCAkY3RybC5tb2RlbFtmaWVsZFNlY3Rpb24ua2V5XSkgfX0gPC9zcGFuPiA8c3BhbiBuZy1zd2l0Y2gtd2hlbj1kYXRlPiB7eyAkY3RybC5tb2RlbFtmaWVsZFNlY3Rpb24ua2V5XSB8IHR3RGF0ZUZvcm1hdDogJGN0cmwubG9jYWxlIH19IDwvc3Bhbj4gPHNwYW4gbmctc3dpdGNoLXdoZW49bnVtYmVyPiB7eyAkY3RybC5tb2RlbFtmaWVsZFNlY3Rpb24ua2V5XSB8IHR3TnVtYmVyRm9ybWF0OiAkY3RybC5sb2NhbGUgfX0gPC9zcGFuPiA8c3BhbiBuZy1zd2l0Y2gtd2hlbj1wYXNzd29yZD4ge3sgJGN0cmwubWFzaygkY3RybC5tb2RlbFtmaWVsZFNlY3Rpb24ua2V5XSkgfX0gPC9zcGFuPiA8ZGl2IG5nLXN3aXRjaC13aGVuPWZpbGUgY2xhc3M9dGh1bWJuYWlsPiA8aW1nIGFsdD1cXFwie3sgZmllbGQudGl0bGUgfX1cXFwiIG5nLXNyYz1cXFwie3sgJGN0cmwubW9kZWxbZmllbGRTZWN0aW9uLmtleV0gfX1cXFwiIG5nLWF0dHItYWx0PVxcXCJ7eyBmaWVsZC50aXRsZSB9fVxcXCIvPiA8L2Rpdj4gPHNwYW4gbmctc3dpdGNoLWRlZmF1bHQ+IHt7ICRjdHJsLm1vZGVsW2ZpZWxkU2VjdGlvbi5rZXldIHwgdHdUZXh0Rm9ybWF0OiBmaWVsZFNlY3Rpb24uZGlzcGxheUZvcm1hdCB9fSA8L3NwYW4+IDwvc3Bhbj4gPC9zcGFuPiA8L2RkPiA8L2RsPiA8L2Rpdj4gPC9kaXY+IFwiOyIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFVuZG9TdGFja0ZhY3RvcnkgZnJvbSAnLi91bmRvLXN0YWNrLnNlcnZpY2UuanMnO1xuaW1wb3J0IFRleHRGb3JtYXRTZXJ2aWNlIGZyb20gJy4vdGV4dC1mb3JtYXQuc2VydmljZS5qcyc7XG5pbXBvcnQgVGV4dEZvcm1hdERpcmVjdGl2ZSBmcm9tICcuL3RleHQtZm9ybWF0LmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgVGV4dEZvcm1hdEZpbHRlciBmcm9tICcuL3RleHQtZm9ybWF0LmZpbHRlci5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3JtYXR0aW5nLnRleHQtZm9ybWF0JywgW10pXG4gIC5zZXJ2aWNlKCdUd1VuZG9TdGFja0ZhY3RvcnknLCBVbmRvU3RhY2tGYWN0b3J5KVxuICAuc2VydmljZSgnVHdUZXh0Rm9ybWF0U2VydmljZScsIFRleHRGb3JtYXRTZXJ2aWNlKVxuICAuZGlyZWN0aXZlKCd0d1RleHRGb3JtYXQnLCBUZXh0Rm9ybWF0RGlyZWN0aXZlKVxuICAuZmlsdGVyKCd0d1RleHRGb3JtYXQnLCBUZXh0Rm9ybWF0RmlsdGVyKS5uYW1lO1xuIiwiZnVuY3Rpb24gVW5kb1N0YWNrRmFjdG9yeSgpIHtcbiAgdGhpcy5uZXcgPSAoKSA9PiBuZXcgVW5kb1N0YWNrKCk7XG59XG5cbi8qKlxuICogQnJvd3NlcnMgc2VlbSB0byBpbXBsZW1lbnQgdW5kbyBhcyBhbiBhc3luYyBmdW5jdGlvbiwgaXQgd2Fzbid0XG4gKiBwb3NzaWJsZSB0byBnZXQgYWRlcXVhdGUgYmVoYXZpb3VyIHVzaW5nIHRoZSBkZWZhdWx0IGV2ZW50LCBzbyB3ZSBidWlsZFxuICogb3VyIG93biB1bmRvIHN0YWNrLlxuICovXG5mdW5jdGlvbiBVbmRvU3RhY2soKSB7XG4gIGxldCBwb2ludGVyID0gMDtcbiAgbGV0IHN0YWNrID0gW107XG5cbiAgdGhpcy5yZXNldCA9ICh2YWx1ZSkgPT4ge1xuICAgIHN0YWNrID0gW3ZhbHVlXTtcbiAgICBwb2ludGVyID0gMDtcbiAgfTtcblxuICB0aGlzLmFkZCA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmIChzdGFjay5sZW5ndGggLSAxID4gcG9pbnRlcikge1xuICAgICAgc3RhY2sgPSBzdGFjay5zbGljZSgwLCBwb2ludGVyICsgMSk7XG4gICAgfVxuICAgIGlmIChzdGFja1twb2ludGVyXSAhPT0gdmFsdWUpIHtcbiAgICAgIHN0YWNrLnB1c2godmFsdWUpO1xuICAgICAgcG9pbnRlcisrO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnVuZG8gPSAoKSA9PiB7XG4gICAgaWYgKHBvaW50ZXIgPj0gMCAmJiB0eXBlb2Ygc3RhY2tbcG9pbnRlciAtIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcG9pbnRlci0tO1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2tbcG9pbnRlcl07XG4gIH07XG5cbiAgdGhpcy5yZWRvID0gKCkgPT4ge1xuICAgIGlmIChwb2ludGVyIDwgc3RhY2subGVuZ3RoICYmIHR5cGVvZiBzdGFja1twb2ludGVyICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwb2ludGVyKys7XG4gICAgfVxuICAgIHJldHVybiBzdGFja1twb2ludGVyXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVW5kb1N0YWNrRmFjdG9yeTtcbiIsImZ1bmN0aW9uIFRleHRGb3JtYXRTZXJ2aWNlKCkge1xuICB0aGlzLmZvcm1hdFVzaW5nUGF0dGVybiA9ICh2YWx1ZSwgcGF0dGVybikgPT4ge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gJyc7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBsZXQgbmV3VmFsdWUgPSAnJztcbiAgICBsZXQgc2VwYXJhdG9ycyA9IDA7XG4gICAgbGV0IGNoYXJhY3RlcnNUb0FsbG9jYXRlID0gdmFsdWUubGVuZ3RoO1xuICAgIGxldCBwb3NpdGlvbiA9IDA7XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyc1RvQWxsb2NhdGUpIHtcbiAgICAgIGlmIChwb3NpdGlvbklzU2VwYXJhdG9yKHBhdHRlcm4sIHBvc2l0aW9uKSkge1xuICAgICAgICBuZXdWYWx1ZSArPSBwYXR0ZXJuW3Bvc2l0aW9uXTtcbiAgICAgICAgc2VwYXJhdG9ycysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUgKz0gdmFsdWVbcG9zaXRpb24gLSBzZXBhcmF0b3JzXTtcbiAgICAgICAgY2hhcmFjdGVyc1RvQWxsb2NhdGUtLTtcbiAgICAgIH1cbiAgICAgIHBvc2l0aW9uKys7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VwYXJhdG9yc0FmdGVyQ3Vyc29yID0gdGhpcy5jb3VudFNlcGFyYXRvcnNBZnRlckN1cnNvcihwYXR0ZXJuLCBwb3NpdGlvbik7XG4gICAgaWYgKHNlcGFyYXRvcnNBZnRlckN1cnNvcikge1xuICAgICAgbmV3VmFsdWUgKz0gcGF0dGVybi5zdWJzdHIocG9zaXRpb24sIHNlcGFyYXRvcnNBZnRlckN1cnNvcik7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgfTtcblxuICB0aGlzLnVuZm9ybWF0VXNpbmdQYXR0ZXJuID0gKHZhbHVlLCBwYXR0ZXJuKSA9PiB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBhdHRlcm4gIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBvc2l0aW9uSXNTZXBhcmF0b3IocGF0dGVybiwgaSkpIHtcbiAgICAgICAgLy8gTm90IHZlcnkgZWZmaWNpZW50LCBidXQgcmVnZXggdHJpY2t5IGJlY2F1c2Ugb2Ygc3BlY2lhbCBjaGFyYWN0ZXJzXG4gICAgICAgIHdoaWxlICh2YWx1ZS5pbmRleE9mKHBhdHRlcm5baV0pID49IDApIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocGF0dGVybltpXSwgJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICB0aGlzLnJlZm9ybWF0VXNpbmdQYXR0ZXJuID0gKHZhbHVlLCBuZXdQYXR0ZXJuLCBvbGRQYXR0ZXJuKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBvbGRQYXR0ZXJuID09PSAndW5kZWZpbmVkJykge1xuICAgICAgb2xkUGF0dGVybiA9IG5ld1BhdHRlcm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZvcm1hdFVzaW5nUGF0dGVybihcbiAgICAgIHRoaXMudW5mb3JtYXRVc2luZ1BhdHRlcm4odmFsdWUsIG9sZFBhdHRlcm4pLFxuICAgICAgbmV3UGF0dGVyblxuICAgICk7XG4gIH07XG5cbiAgdGhpcy5jb3VudFNlcGFyYXRvcnNCZWZvcmVDdXJzb3IgPSAocGF0dGVybiwgcG9zaXRpb24pID0+IHtcbiAgICBsZXQgc2VwYXJhdG9ycyA9IDA7XG4gICAgd2hpbGUgKHBvc2l0aW9uSXNTZXBhcmF0b3IocGF0dGVybiwgcG9zaXRpb24gLSBzZXBhcmF0b3JzIC0gMSkpIHtcbiAgICAgIHNlcGFyYXRvcnMrKztcbiAgICB9XG4gICAgcmV0dXJuIHNlcGFyYXRvcnM7XG4gIH07XG5cbiAgdGhpcy5jb3VudFNlcGFyYXRvcnNBZnRlckN1cnNvciA9IChwYXR0ZXJuLCBwb3NpdGlvbikgPT4ge1xuICAgIGxldCBzZXBhcmF0b3JzID0gMDtcbiAgICB3aGlsZSAocG9zaXRpb25Jc1NlcGFyYXRvcihwYXR0ZXJuLCBwb3NpdGlvbiArIHNlcGFyYXRvcnMpKSB7XG4gICAgICBzZXBhcmF0b3JzKys7XG4gICAgfVxuICAgIHJldHVybiBzZXBhcmF0b3JzO1xuICB9O1xuXG4gIC8vIEhvdyBsb25nIHdpbGwgYSB2YWx1ZSBiZSBhZnRlciBzZXBhcmF0b3JzIGhhdmUgYmVlbiBpbnNlcnRlZFxuICB0aGlzLmNvdW50U2VwYXJhdG9yc0luQXBwZW5kZWRWYWx1ZSA9IChwYXR0ZXJuLCBwb3NpdGlvbiwgdmFsdWUpID0+IHtcbiAgICBsZXQgc2VwYXJhdG9ycyA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCB0b0FsbG9jYXRlID0gdmFsdWUubGVuZ3RoO1xuICAgIHdoaWxlICh0b0FsbG9jYXRlKSB7XG4gICAgICBpZiAocG9zaXRpb25Jc1NlcGFyYXRvcihwYXR0ZXJuLCBwb3NpdGlvbiArIGkpKSB7XG4gICAgICAgIHNlcGFyYXRvcnMrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvQWxsb2NhdGUtLTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHNlcGFyYXRvcnM7XG4gIH07XG5cbiAgdGhpcy5jb3VudFNlcGFyYXRvcnNJblBhdHRlcm4gPSAocGF0dGVybikgPT4ge1xuICAgIGxldCBzZXBhcmF0b3JzID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwb3NpdGlvbklzU2VwYXJhdG9yKHBhdHRlcm4sIGkpKSB7XG4gICAgICAgIHNlcGFyYXRvcnMrKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcGFyYXRvcnM7XG4gIH07XG5cbiAgZnVuY3Rpb24gcG9zaXRpb25Jc1NlcGFyYXRvcihwYXR0ZXJuLCBwb3NpdGlvbikge1xuICAgIHJldHVybiBwYXR0ZXJuW3Bvc2l0aW9uXSAmJiBwYXR0ZXJuW3Bvc2l0aW9uXSAhPT0gJyonO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRGb3JtYXRTZXJ2aWNlO1xuIiwiaW1wb3J0IFRleHRGb3JtYXRDb250cm9sbGVyIGZyb20gJy4vdGV4dC1mb3JtYXQuY29udHJvbGxlci5qcyc7XG5cbmZ1bmN0aW9uIFRleHRGb3JtYXQoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgc2NvcGU6IHtcbiAgICAgIG5nTW9kZWw6ICc8JyxcbiAgICAgIHR3VGV4dEZvcm1hdDogJ0AnXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiBUZXh0Rm9ybWF0Q29udHJvbGxlclxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBUZXh0Rm9ybWF0O1xuIiwiXG5jbGFzcyBUZXh0Rm9ybWF0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICRlbGVtZW50LFxuICAgICR0aW1lb3V0LFxuICAgICRzY29wZSxcbiAgICBUd1RleHRGb3JtYXRTZXJ2aWNlLFxuICAgIFR3VW5kb1N0YWNrRmFjdG9yeVxuICApIHtcbiAgICB0aGlzLmtleWRvd25Db3VudCA9IDA7XG4gICAgdGhpcy5wYXR0ZXJuID0gJyc7XG5cbiAgICB0aGlzLnVuZG9TdGFjayA9IFR3VW5kb1N0YWNrRmFjdG9yeS5uZXcoKTtcbiAgICB0aGlzLiRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLlRleHRGb3JtYXRTZXJ2aWNlID0gVHdUZXh0Rm9ybWF0U2VydmljZTtcblxuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuXG4gICAgLy8gV2UgbmVlZCB0aGUgZm9ybWF0dGVyIGZvciBleHRlcm5hbCBtb2RlbCBjaGFuZ2VzXG4gICAgdGhpcy4kbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKHZhbHVlID0+ICh0aGlzLnBhdHRlcm5cbiAgICAgID8gVHdUZXh0Rm9ybWF0U2VydmljZS5mb3JtYXRVc2luZ1BhdHRlcm4odmFsdWUsIHRoaXMucGF0dGVybilcbiAgICAgIDogdmFsdWUpKTtcblxuICAgIHRoaXMuJG5nTW9kZWwuJHBhcnNlcnMucHVzaCh2YWx1ZSA9PiAodGhpcy5wYXR0ZXJuXG4gICAgICA/IFR3VGV4dEZvcm1hdFNlcnZpY2UudW5mb3JtYXRVc2luZ1BhdHRlcm4odmFsdWUsIHRoaXMucGF0dGVybilcbiAgICAgIDogdmFsdWUpKTtcblxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMub25DaGFuZ2UoZXZlbnQpO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLm9uS2V5ZG93bihldmVudCk7XG4gICAgfSk7XG4gICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLm9uUGFzdGUoZXZlbnQpO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjdXQnLCAoZXZlbnQpID0+IHtcbiAgICAgIHRoaXMub25DdXQoZXZlbnQpO1xuICAgIH0pO1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjb3B5JywgKGV2ZW50KSA9PiB7XG4gICAgICB0aGlzLm9uQ29weShldmVudCk7XG4gICAgfSk7XG5cbiAgICAvLyBtaW4vbWF4IGxlbmd0aCB2YWxpZGF0b3JzIHVzZSB2aWV3VmFsdWUgd2hpY2ggaXMgc3RpbGwgZm9ybWF0dGVkLlxuICAgIC8vIEFmdGVyIGluc3RhbnRpYXRpb24gb3ZlcnJpZGUgdGhlbSB0byB1bmZvcm1hdCB2aWV3IHZhbHVlLlxuICAgIHRoaXMucmVwbGFjZUxlbmd0aFZhbGlkYXRvcnMoXG4gICAgICB0aGlzLiRuZ01vZGVsLFxuICAgICAgdGhpcy5UZXh0Rm9ybWF0U2VydmljZSxcbiAgICAgIHRoaXMuJHRpbWVvdXRcbiAgICApO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwudHdUZXh0Rm9ybWF0JywgKG5ld1ZhbHVlKSA9PiB7XG4gICAgICB0aGlzLm9uUGF0dGVybkNoYW5nZShuZXdWYWx1ZSk7XG4gICAgfSk7XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIHRoaXMub25Nb2RlbENoYW5nZShuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIH0pO1xuXG4gICAgdGhpcy51bmRvU3RhY2sucmVzZXQodGhpcy5lbGVtZW50LnZhbHVlKTtcbiAgfVxuXG4gIG9uTW9kZWxDaGFuZ2UobmV3TW9kZWwsIG9sZE1vZGVsKSB7XG4gICAgaWYgKG5ld01vZGVsID09PSBvbGRNb2RlbCB8fCAhdGhpcy5wYXR0ZXJuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJlc2VydmUgc2VsZWN0aW9uIHJhbmdlIGFmdGVyIGZvcm1hdHRpbmdcbiAgICBjb25zdCBzZWxlY3Rpb25TdGFydCA9IHRoaXMuZWxlbWVudC5zZWxlY3Rpb25TdGFydDtcbiAgICBjb25zdCBzZWxlY3Rpb25FbmQgPSB0aGlzLmVsZW1lbnQuc2VsZWN0aW9uRW5kO1xuXG4gICAgdGhpcy5yZWZvcm1hdENvbnRyb2wodGhpcy5lbGVtZW50LCBuZXdNb2RlbCk7XG4gICAgdGhpcy5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCk7XG4gIH1cblxuICBvblBhdHRlcm5DaGFuZ2UobmV3UGF0dGVybiwgb2xkUGF0dGVybikge1xuICAgIGlmIChuZXdQYXR0ZXJuID09PSBvbGRQYXR0ZXJuKSB7XG4gICAgICB0aGlzLnBhdHRlcm4gPSBuZXdQYXR0ZXJuO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChuZXdQYXR0ZXJuICYmIG5ld1BhdHRlcm4uaW5kZXhPZignfHwnKSA+IDApIHtcbiAgICAgIHRoaXMucGF0dGVybiA9IG5ld1BhdHRlcm4uc3Vic3RyaW5nKDAsIG5ld1BhdHRlcm4uaW5kZXhPZignfHwnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGF0dGVybiA9IG5ld1BhdHRlcm47XG4gICAgfVxuXG4gICAgbGV0IHZpZXdWYWx1ZSA9IHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICBpZiAob2xkUGF0dGVybikge1xuICAgICAgdmlld1ZhbHVlID0gdGhpcy5UZXh0Rm9ybWF0U2VydmljZS51bmZvcm1hdFVzaW5nUGF0dGVybih2aWV3VmFsdWUsIG9sZFBhdHRlcm4pO1xuICAgIH1cbiAgICBpZiAobmV3UGF0dGVybikge1xuICAgICAgLy8gdGhpcy5wYXR0ZXJuIGlzIGNvcnJlY3QgaGVyZSBhcyB3ZSBwcm9jZXNzIHRoZSBuZXdQYXR0ZXJuXG4gICAgICB2aWV3VmFsdWUgPSB0aGlzLlRleHRGb3JtYXRTZXJ2aWNlLmZvcm1hdFVzaW5nUGF0dGVybih2aWV3VmFsdWUsIHRoaXMucGF0dGVybik7XG4gICAgfVxuXG4gICAgdGhpcy51bmRvU3RhY2sucmVzZXQodmlld1ZhbHVlKTtcbiAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSB2aWV3VmFsdWU7XG4gIH1cblxuICByZWZvcm1hdENvbnRyb2woZWxlbWVudCwgb3JpZ2luYWxWYWx1ZSkge1xuICAgIGlmICghb3JpZ2luYWxWYWx1ZSkge1xuICAgICAgb3JpZ2luYWxWYWx1ZSA9IGVsZW1lbnQudmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLlRleHRGb3JtYXRTZXJ2aWNlLnJlZm9ybWF0VXNpbmdQYXR0ZXJuKFxuICAgICAgb3JpZ2luYWxWYWx1ZSxcbiAgICAgIHRoaXMucGF0dGVyblxuICAgICk7XG5cbiAgICAvLyBEb24ndCByZXNldCB2YWx1ZSB1bmxlc3Mgd2UgbmVlZCB0by5cbiAgICBpZiAobmV3VmFsdWUgIT09IG9yaWdpbmFsVmFsdWUpIHtcbiAgICAgIGVsZW1lbnQudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZSgpIHtcbiAgICBpZiAoIXRoaXMucGF0dGVybikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlZm9ybWF0Q29udHJvbCh0aGlzLmVsZW1lbnQpO1xuICAgIHRoaXMudW5kb1N0YWNrLmFkZCh0aGlzLmVsZW1lbnQudmFsdWUpO1xuICB9XG5cbiAgb25QYXN0ZShldmVudCkge1xuICAgIGlmICghdGhpcy5wYXR0ZXJuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5lbGVtZW50LnNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IGNsaXBib2FyZERhdGEgPSBldmVudC5jbGlwYm9hcmREYXRhIHx8IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICAgIGNvbnN0IHBhc3RlZERhdGEgPSBjbGlwYm9hcmREYXRhLmdldERhdGEoJ1RleHQnKTtcblxuICAgIGNvbnN0IHNlcGFyYXRvcnNJblBhc3RlID0gdGhpcy5UZXh0Rm9ybWF0U2VydmljZS5jb3VudFNlcGFyYXRvcnNJbkFwcGVuZGVkVmFsdWUoXG4gICAgICB0aGlzLnBhdHRlcm4sXG4gICAgICBzZWxlY3Rpb25TdGFydCxcbiAgICAgIHBhc3RlZERhdGFcbiAgICApO1xuXG4gICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHNlbGVjdGlvblN0YXJ0ICsgcGFzdGVkRGF0YS5sZW5ndGggKyBzZXBhcmF0b3JzSW5QYXN0ZTtcbiAgICAgIHRoaXMucmVmb3JtYXRDb250cm9sKHRoaXMuZWxlbWVudCk7XG4gICAgICB0aGlzLnVuZG9TdGFjay5hZGQodGhpcy5lbGVtZW50LnZhbHVlKTtcbiAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKG5ld1Bvc2l0aW9uLCBuZXdQb3NpdGlvbik7XG4gICAgfSk7XG4gIH1cblxuICBvbktleWRvd24oZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMucGF0dGVybikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmtleWRvd25Db3VudCsrO1xuICAgIGNvbnN0IGN1cnJlbnRLZXlkb3duQ291bnQgPSB0aGlzLmtleWRvd25Db3VudDtcbiAgICBjb25zdCBrZXkgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xuICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0ID0gZXZlbnQudGFyZ2V0LnNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IHNlbGVjdGlvbkVuZCA9IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25FbmQ7XG5cbiAgICBpZiAocmVzZXJ2ZWRLZXlzLmluZGV4T2Yoa2V5KSA+PSAwIHx8IGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSkge1xuICAgICAgaWYgKGtleSA9PT0ga2V5cy56ICYmIChldmVudC5tZXRhS2V5IHx8IGV2ZW50LmN0cmxLZXkpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSB0aGlzLnVuZG9TdGFjay51bmRvKCk7XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSBrZXlzLnkgJiYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuY3RybEtleSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IHRoaXMudW5kb1N0YWNrLnJlZG8oKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuYWZ0ZXJLZXlkb3duKFxuICAgICAgICBrZXksXG4gICAgICAgIGN1cnJlbnRLZXlkb3duQ291bnQsXG4gICAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgICAgdGhpcy5wYXR0ZXJuLFxuICAgICAgICBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgc2VsZWN0aW9uRW5kXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgYWZ0ZXJLZXlkb3duKGtleSwgY3VycmVudEtleWRvd25Db3VudCwgZWxlbWVudCwgcGF0dGVybiwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCkge1xuICAgIGxldCBuZXdWYWw7XG4gICAgLy8gSWYgZGVsZXRpbmcgbW92ZSBiYWNrXG4gICAgaWYgKGtleSA9PT0ga2V5cy5iYWNrc3BhY2UpIHtcbiAgICAgIG5ld1ZhbCA9IHRoaXMuZG9CYWNrc3BhY2UoZWxlbWVudCwgcGF0dGVybiwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCk7XG5cbiAgICAgIC8vIEFsc28gdHJpZ2dlciBtb2RlbCB1cGRhdGUsIG5vdCBzdXJlIHdoeSBuZWNlc3NhcnkuLi5cbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZShuZXdWYWwpO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBrZXlzLmRlbGV0ZSkge1xuICAgICAgbmV3VmFsID0gdGhpcy5kb0RlbGV0ZShlbGVtZW50LCBwYXR0ZXJuLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKTtcblxuICAgICAgLy8gQWxzbyB0cmlnZ2VyIG1vZGVsIHVwZGF0ZSwgbm90IHN1cmUgd2h5IG5lY2Vzc2FyeS4uLlxuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKG5ld1ZhbCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmtleWRvd25Db3VudCA9PT0gY3VycmVudEtleWRvd25Db3VudCkge1xuICAgICAgLy8gSWYgYW5vdGhlciBrZXlkb3duIG9jY3VycmVkIGJlZm9yZSB3ZSB3ZXJlIGFibGUgdG8gcmVwb3NpdGlvbiB0aGVcbiAgICAgIC8vIGN1cnNvciwgd2UgZG8gbm90IHdhbnQgdG8gc2V0IGl0IHRvIGFuIG91dCBvZiBkYXRlIHZhbHVlLlxuICAgICAgdGhpcy5kb0tleXByZXNzKGVsZW1lbnQsIHBhdHRlcm4sIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpO1xuICAgIH1cbiAgfVxuXG4gIGRvQmFja3NwYWNlKGVsZW1lbnQsIHBhdHRlcm4sIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpIHtcbiAgICBlbGVtZW50LnZhbHVlID0gdGhpcy5nZXRGb3JtYXR0ZWRWYWx1ZUFmdGVyQmFja3NwYWNlKFxuICAgICAgZWxlbWVudCxcbiAgICAgIHBhdHRlcm4sXG4gICAgICBzZWxlY3Rpb25TdGFydCxcbiAgICAgIHNlbGVjdGlvbkVuZFxuICAgICk7XG5cbiAgICB0aGlzLnVuZG9TdGFjay5hZGQoZWxlbWVudC52YWx1ZSk7XG5cbiAgICBjb25zdCBuZXdQb3NpdGlvbiA9IHRoaXMuZ2V0UG9zaXRpb25BZnRlckJhY2tzcGFjZShcbiAgICAgIHBhdHRlcm4sXG4gICAgICBlbGVtZW50LFxuICAgICAgc2VsZWN0aW9uU3RhcnQsXG4gICAgICBzZWxlY3Rpb25FbmRcbiAgICApO1xuXG4gICAgdGhpcy5zZXRTZWxlY3Rpb24obmV3UG9zaXRpb24sIG5ld1Bvc2l0aW9uKTtcblxuICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICB9XG5cbiAgZ2V0Rm9ybWF0dGVkVmFsdWVBZnRlckJhY2tzcGFjZShlbGVtZW50LCBwYXR0ZXJuLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSB7XG4gICAgbGV0IHJlbW92ZVN0YXJ0O1xuICAgIGxldCByZW1vdmVFbmQ7XG4gICAgbGV0IG5ld1ZhbCA9IGVsZW1lbnQudmFsdWU7XG4gICAgY29uc3Qgc2VwYXJhdG9yc0JlZm9yZUN1cnNvciA9IHRoaXMuVGV4dEZvcm1hdFNlcnZpY2UuY291bnRTZXBhcmF0b3JzQmVmb3JlQ3Vyc29yKFxuICAgICAgcGF0dGVybixcbiAgICAgIHNlbGVjdGlvblN0YXJ0XG4gICAgKTtcblxuICAgIGlmIChzZXBhcmF0b3JzQmVmb3JlQ3Vyc29yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIG1vcmUgc2VwYXJhdG9ycywgd2UgbXVzdCByZW1vdmUgb25lIGxlc3MgY2hhcmFjdGVyXG4gICAgICBjb25zdCBhZGp1c3QgPSAoc2VwYXJhdG9yc0JlZm9yZUN1cnNvciA+IDEgPyAxIDogMCk7XG5cbiAgICAgIGlmIChzZWxlY3Rpb25TdGFydCAhPT0gc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgIC8vIEEgcmFuZ2UgaXMgc2VsZWN0ZWQsIHJlbW92ZSBvbmUgbGVzcyBjaGFyYWN0ZXIgZnJvbSBzdGFydFxuICAgICAgICByZW1vdmVTdGFydCA9IChzZWxlY3Rpb25TdGFydCAtIHNlcGFyYXRvcnNCZWZvcmVDdXJzb3IpICsgMTtcbiAgICAgICAgcmVtb3ZlRW5kID0gc2VsZWN0aW9uU3RhcnQgLSBhZGp1c3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVTdGFydCA9IHNlbGVjdGlvblN0YXJ0IC0gc2VwYXJhdG9yc0JlZm9yZUN1cnNvcjtcbiAgICAgICAgcmVtb3ZlRW5kID0gc2VsZWN0aW9uU3RhcnQgLSBhZGp1c3Q7XG4gICAgICB9XG4gICAgICBuZXdWYWwgPSByZW1vdmVDaGFyYWN0ZXJzKGVsZW1lbnQudmFsdWUsIHJlbW92ZVN0YXJ0LCByZW1vdmVFbmQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLlRleHRGb3JtYXRTZXJ2aWNlLnJlZm9ybWF0VXNpbmdQYXR0ZXJuKG5ld1ZhbCwgcGF0dGVybik7XG4gIH1cblxuICBkb0RlbGV0ZShlbGVtZW50LCBwYXR0ZXJuLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSB7XG4gICAgZWxlbWVudC52YWx1ZSA9IHRoaXMuZ2V0Rm9ybWF0dGVkVmFsdWVBZnRlckRlbGV0ZShcbiAgICAgIGVsZW1lbnQsXG4gICAgICBwYXR0ZXJuLFxuICAgICAgc2VsZWN0aW9uU3RhcnQsXG4gICAgICBzZWxlY3Rpb25FbmRcbiAgICApO1xuXG4gICAgdGhpcy51bmRvU3RhY2suYWRkKGVsZW1lbnQudmFsdWUpO1xuICAgIC8vIFB1dCBjdXJzb3IgYmFjayB3aGVyZSBpdCBzdGFydGVkXG4gICAgdGhpcy5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvblN0YXJ0KTtcblxuICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICB9XG5cbiAgc2V0U2VsZWN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB0aGlzLmVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7XG4gIH1cblxuICBnZXRGb3JtYXR0ZWRWYWx1ZUFmdGVyRGVsZXRlKGVsZW1lbnQsIHBhdHRlcm4sIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpIHtcbiAgICBsZXQgcmVtb3ZlU3RhcnQ7XG4gICAgbGV0IHJlbW92ZUVuZDtcbiAgICBsZXQgbmV3VmFsID0gZWxlbWVudC52YWx1ZTtcbiAgICBjb25zdCBzZXBhcmF0b3JzQWZ0ZXJDdXJzb3IgPSB0aGlzLlRleHRGb3JtYXRTZXJ2aWNlLmNvdW50U2VwYXJhdG9yc0FmdGVyQ3Vyc29yKFxuICAgICAgcGF0dGVybixcbiAgICAgIHNlbGVjdGlvblN0YXJ0XG4gICAgKTtcblxuICAgIGlmIChzZXBhcmF0b3JzQWZ0ZXJDdXJzb3IpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgbW9yZSBzZXBhcmF0b3JzLCB3ZSBtdXN0IHJlbW92ZSBvbmUgbGVzcyBjaGFyYWN0ZXJcbiAgICAgIGNvbnN0IGFkanVzdCA9IChzZXBhcmF0b3JzQWZ0ZXJDdXJzb3IgPiAxID8gMCA6IDEpO1xuXG4gICAgICBpZiAoc2VsZWN0aW9uU3RhcnQgIT09IHNlbGVjdGlvbkVuZCkge1xuICAgICAgICAvLyBBIHJhbmdlIGlzIHNlbGVjdGVkLCByZW1vdmUgb25lIGxlc3MgY2hhcmFjdGVyIGZyb20gc3RhcnRcbiAgICAgICAgcmVtb3ZlU3RhcnQgPSBzZWxlY3Rpb25TdGFydCArIGFkanVzdDtcbiAgICAgICAgcmVtb3ZlRW5kID0gc2VsZWN0aW9uU3RhcnQgKyBzZXBhcmF0b3JzQWZ0ZXJDdXJzb3IgKyBhZGp1c3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGNoYXJhY3RlciBhZnRlciB0aGUgc2VwYXJhdG9yc1xuICAgICAgICByZW1vdmVTdGFydCA9IHNlbGVjdGlvblN0YXJ0ICsgc2VwYXJhdG9yc0FmdGVyQ3Vyc29yO1xuICAgICAgICByZW1vdmVFbmQgPSBzZWxlY3Rpb25TdGFydCArIHNlcGFyYXRvcnNBZnRlckN1cnNvciArIDE7XG4gICAgICB9XG5cbiAgICAgIG5ld1ZhbCA9IHJlbW92ZUNoYXJhY3RlcnMoZWxlbWVudC52YWx1ZSwgcmVtb3ZlU3RhcnQsIHJlbW92ZUVuZCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLlRleHRGb3JtYXRTZXJ2aWNlLnJlZm9ybWF0VXNpbmdQYXR0ZXJuKG5ld1ZhbCwgcGF0dGVybik7XG4gIH1cblxuICBkb0tleXByZXNzKGVsZW1lbnQsIHBhdHRlcm4sIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpIHtcbiAgICAvLyBUaGUgcGFyc2VyIGFscmVhZHkgY2FsbGVkIHRoaXMsIGJ1dCBkb2luZyBpdCBhZnRlciBhcHBlbmRzIHRoZSBuZXh0IHNlcGFyYXRvclxuICAgIHRoaXMucmVmb3JtYXRDb250cm9sKGVsZW1lbnQpO1xuICAgIHRoaXMudW5kb1N0YWNrLmFkZChlbGVtZW50LnZhbHVlKTtcblxuICAgIGNvbnN0IG5ld1Bvc2l0aW9uID0gdGhpcy5nZXRQb3NpdGlvbkFmdGVyS2V5cHJlc3MoXG4gICAgICBwYXR0ZXJuLFxuICAgICAgZWxlbWVudCxcbiAgICAgIHNlbGVjdGlvblN0YXJ0LFxuICAgICAgc2VsZWN0aW9uRW5kXG4gICAgKTtcbiAgICB0aGlzLnNldFNlbGVjdGlvbihuZXdQb3NpdGlvbiwgbmV3UG9zaXRpb24pO1xuICB9XG5cbiAgZ2V0UG9zaXRpb25BZnRlckJhY2tzcGFjZShwYXR0ZXJuLCBlbGVtZW50LCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKSB7XG4gICAgY29uc3Qgc2VwYXJhdG9yc0JlZm9yZSA9IHRoaXMuVGV4dEZvcm1hdFNlcnZpY2UuY291bnRTZXBhcmF0b3JzQmVmb3JlQ3Vyc29yKFxuICAgICAgcGF0dGVybixcbiAgICAgIHNlbGVjdGlvblN0YXJ0XG4gICAgKTtcbiAgICBjb25zdCBpc1JhbmdlID0gKHNlbGVjdGlvblN0YXJ0ICE9PSBzZWxlY3Rpb25FbmQpO1xuICAgIC8vIElmIGEgcmFuZ2Ugd2FzIHNlbGVjdGVkLCB3ZSBkb24ndCBkZWxldGUgYSBjaGFyYWN0ZXIgYmVmb3JlIGN1cnNvclxuICAgIGNvbnN0IHByb3Bvc2VkUG9zaXRpb24gPSBzZWxlY3Rpb25TdGFydCAtIHNlcGFyYXRvcnNCZWZvcmUgLSAoaXNSYW5nZSA/IDAgOiAxKTtcbiAgICByZXR1cm4gcHJvcG9zZWRQb3NpdGlvbiArIHRoaXMuVGV4dEZvcm1hdFNlcnZpY2UuY291bnRTZXBhcmF0b3JzQWZ0ZXJDdXJzb3IoXG4gICAgICBwYXR0ZXJuLFxuICAgICAgcHJvcG9zZWRQb3NpdGlvblxuICAgICk7XG4gIH1cblxuICBnZXRQb3NpdGlvbkFmdGVyS2V5cHJlc3MocGF0dGVybiwgZWxlbWVudCwgc2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCkge1xuICAgIGxldCBzZXBhcmF0b3JzQWZ0ZXI7XG4gICAgaWYgKHNlbGVjdGlvblN0YXJ0ICE9PSBzZWxlY3Rpb25FbmQpIHtcbiAgICAgIHNlcGFyYXRvcnNBZnRlciA9IHRoaXMuVGV4dEZvcm1hdFNlcnZpY2UuY291bnRTZXBhcmF0b3JzQWZ0ZXJDdXJzb3IoXG4gICAgICAgIHBhdHRlcm4sXG4gICAgICAgIHNlbGVjdGlvblN0YXJ0XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPIHRoaXMgd29ya3MgYnV0IGlzIGhhcmQgdG8gdW5kZXJzdGFuZFxuICAgICAgc2VwYXJhdG9yc0FmdGVyID0gdGhpcy5UZXh0Rm9ybWF0U2VydmljZS5jb3VudFNlcGFyYXRvcnNBZnRlckN1cnNvcihcbiAgICAgICAgcGF0dGVybixcbiAgICAgICAgc2VsZWN0aW9uU3RhcnRcbiAgICAgICk7XG4gICAgICBpZiAoc2VwYXJhdG9yc0FmdGVyID09PSAwKSB7XG4gICAgICAgIHNlcGFyYXRvcnNBZnRlciA9IHRoaXMuVGV4dEZvcm1hdFNlcnZpY2UuY291bnRTZXBhcmF0b3JzQWZ0ZXJDdXJzb3IoXG4gICAgICAgICAgcGF0dGVybixcbiAgICAgICAgICBzZWxlY3Rpb25TdGFydCArIDFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGlvblN0YXJ0ICsgMSArIHNlcGFyYXRvcnNBZnRlcjtcbiAgfVxuXG4gIG9uQ3V0KCkge1xuICAgIGlmICghdGhpcy5wYXR0ZXJuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5lbGVtZW50LnNlbGVjdGlvblN0YXJ0O1xuICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5yZWZvcm1hdENvbnRyb2wodGhpcy5lbGVtZW50KTtcbiAgICAgIHRoaXMudW5kb1N0YWNrLmFkZCh0aGlzLmVsZW1lbnQudmFsdWUpO1xuXG4gICAgICAvLyBBbHNvIG1vdmUgY3Vyc29yIHRvIHRoZSByaWdodCBvZiBhbnkgc2VwYXJhdG9yc1xuICAgICAgY29uc3QgbmV3UG9zaXRpb24gPSBzZWxlY3Rpb25TdGFydFxuICAgICAgICArIHRoaXMuVGV4dEZvcm1hdFNlcnZpY2UuY291bnRTZXBhcmF0b3JzQWZ0ZXJDdXJzb3IoXG4gICAgICAgICAgdGhpcy5wYXR0ZXJuLFxuICAgICAgICAgIHNlbGVjdGlvblN0YXJ0XG4gICAgICAgICk7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvbihuZXdQb3NpdGlvbiwgbmV3UG9zaXRpb24pO1xuICAgIH0pO1xuICB9XG5cbiAgb25Db3B5KCkge1xuICAgIGlmICghdGhpcy5wYXR0ZXJuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJlc2V0IHNlbGVjdGlvbiBhcyBvdGhlcndpc2UgbG9zdFxuICAgIGNvbnN0IHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5lbGVtZW50LnNlbGVjdGlvblN0YXJ0O1xuICAgIGNvbnN0IHNlbGVjdGlvbkVuZCA9IHRoaXMuZWxlbWVudC5zZWxlY3Rpb25FbmQ7XG5cbiAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2V0U2VsZWN0aW9uKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVwbGFjZUxlbmd0aFZhbGlkYXRvcnMoJG5nTW9kZWwsIFRleHRGb3JtYXRTZXJ2aWNlLCAkdGltZW91dCkge1xuICAgIC8vIFdlIG11c3Qgd2FpdCB1bnRpbCB0aGUgZGVmYXVsdCBkaXJlY3RpdmVzIGhhdmUgbG9hZGVkIGJlZm9yZSByZXBsYWNpbmdcbiAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbE1pbkxlbmd0aCA9ICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aDtcbiAgICAgIGNvbnN0IG9yaWdpbmFsTWF4TGVuZ3RoID0gJG5nTW9kZWwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoO1xuICAgICAgY29uc3Qgb3JpZ2luYWxQYXR0ZXJuID0gJG5nTW9kZWwuJHZhbGlkYXRvcnMucGF0dGVybjtcblxuICAgICAgaWYgKG9yaWdpbmFsTWluTGVuZ3RoKSB7XG4gICAgICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IG9yaWdpbmFsTWluTGVuZ3RoKFxuICAgICAgICAgIG1vZGVsVmFsdWUsXG4gICAgICAgICAgVGV4dEZvcm1hdFNlcnZpY2UudW5mb3JtYXRVc2luZ1BhdHRlcm4odmlld1ZhbHVlLCB0aGlzLnBhdHRlcm4pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAob3JpZ2luYWxNYXhMZW5ndGgpIHtcbiAgICAgICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4gb3JpZ2luYWxNYXhMZW5ndGgoXG4gICAgICAgICAgbW9kZWxWYWx1ZSxcbiAgICAgICAgICBUZXh0Rm9ybWF0U2VydmljZS51bmZvcm1hdFVzaW5nUGF0dGVybih2aWV3VmFsdWUsIHRoaXMucGF0dGVybilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcmlnaW5hbFBhdHRlcm4pIHtcbiAgICAgICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMucGF0dGVybiA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IG9yaWdpbmFsUGF0dGVybihcbiAgICAgICAgICBtb2RlbFZhbHVlLFxuICAgICAgICAgIFRleHRGb3JtYXRTZXJ2aWNlLnVuZm9ybWF0VXNpbmdQYXR0ZXJuKHZpZXdWYWx1ZSwgdGhpcy5wYXR0ZXJuKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoYXJhY3RlcnModmFsdWUsIGZpcnN0LCBsYXN0KSB7XG4gIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgZmlyc3QgLSAxKSArIHZhbHVlLnN1YnN0cmluZyhsYXN0IC0gMSwgdmFsdWUubGVuZ3RoKTtcbn1cblxuY29uc3Qga2V5cyA9IHtcbiAgY21kOiAyMjQsXG4gIGNtZExlZnQ6IDkxLFxuICBjbWRSaWdodDogOTMsXG4gIGJhY2tzcGFjZTogOCxcbiAgdGFiOiA5LFxuICBlbnRlcjogMTMsXG4gIHNoaWZ0OiAxNixcbiAgY3RybDogMTcsXG4gIGFsdDogMTgsXG4gIGVuZDogMzUsXG4gIGhvbWU6IDM2LFxuICBsZWZ0OiAzNyxcbiAgdXA6IDM4LFxuICByaWdodDogMzksXG4gIGRvd246IDQwLFxuICBkZWxldGU6IDQ2LFxuICB5OiA4OSxcbiAgejogOTBcbn07XG5cbmNvbnN0IHJlc2VydmVkS2V5cyA9IFtcbiAga2V5cy5jbWQsXG4gIGtleXMuY21kTGVmdCxcbiAga2V5cy5jbWRSaWdodCxcbiAga2V5cy5lbnRlcixcbiAga2V5cy5zaGlmdCxcbiAga2V5cy5jdHJsLFxuICBrZXlzLmFsdCxcbiAga2V5cy5sZWZ0LFxuICBrZXlzLnVwLFxuICBrZXlzLnJpZ2h0LFxuICBrZXlzLmRvd25cbl07XG5cblRleHRGb3JtYXRDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckZWxlbWVudCcsXG4gICckdGltZW91dCcsXG4gICckc2NvcGUnLFxuICAnVHdUZXh0Rm9ybWF0U2VydmljZScsXG4gICdUd1VuZG9TdGFja0ZhY3RvcnknLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dEZvcm1hdENvbnRyb2xsZXI7XG4iLCJmdW5jdGlvbiBUZXh0Rm9ybWF0RmlsdGVyKFRleHRGb3JtYXRTZXJ2aWNlKSB7XG4gIHJldHVybiAoaW5wdXQsIHBhdHRlcm4pID0+IHtcbiAgICBpbnB1dCA9IGlucHV0IHx8ICcnO1xuICAgIGlmICghcGF0dGVybikge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAocGF0dGVybi5pbmRleE9mKCd8fCcpID4gMCkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc3Vic3RyaW5nKDAsIHBhdHRlcm4uaW5kZXhPZignfHwnKSk7XG4gICAgfVxuICAgIHJldHVybiBUZXh0Rm9ybWF0U2VydmljZS5mb3JtYXRVc2luZ1BhdHRlcm4oaW5wdXQsIHBhdHRlcm4pO1xuICB9O1xufVxuXG5UZXh0Rm9ybWF0RmlsdGVyLiRpbmplY3QgPSBbJ1R3VGV4dEZvcm1hdFNlcnZpY2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dEZvcm1hdEZpbHRlcjtcbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL251bWJlci1mb3JtYXQuaHRtbCc7XG5cbmNvbnN0IE51bWJlckRpc3BsYXkgPSB7XG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIGFtb3VudDogJzwnLFxuICAgIHByZWNpc2lvbjogJzwnLFxuICAgIGxvY2FsZTogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE51bWJlckRpc3BsYXk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwie3sgJGN0cmwuYW1vdW50IHwgdHdOdW1iZXJGb3JtYXQgOiAkY3RybC5wcmVjaXNpb24gOiAkY3RybC5sb2NhbGUgfX0gXCI7IiwiZnVuY3Rpb24gTnVtYmVyRm9ybWF0RmlsdGVyKExvY2FsZVNlcnZpY2UpIHtcbiAgcmV0dXJuIChudW1iZXIsIHByZWNpc2lvbiwgbG9jYWxlKSA9PiB7XG4gICAgaWYgKCFudW1iZXIpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdzdHJpbmcnICYmIE51bWJlcihudW1iZXIpKSB7XG4gICAgICBudW1iZXIgPSBOdW1iZXIobnVtYmVyKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgdXNlR3JvdXBpbmc6IHRydWVcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgcHJlY2lzaW9uID09PSAnbnVtYmVyJykge1xuICAgICAgb3B0aW9ucy5taW5pbXVtRnJhY3Rpb25EaWdpdHMgPSBwcmVjaXNpb247XG4gICAgICBvcHRpb25zLm1heGltdW1GcmFjdGlvbkRpZ2l0cyA9IHByZWNpc2lvbjtcblxuICAgICAgaWYgKCFpc051bWJlckxvY2FsZVN1cHBvcnRlZCgpKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIudG9GaXhlZChwcmVjaXNpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsb2NhbGUpIHtcbiAgICAgIHJldHVybiBudW1iZXIudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtYmVyLnRvTG9jYWxlU3RyaW5nKExvY2FsZVNlcnZpY2UuZ2V0Q3VycmVudCgpLCBvcHRpb25zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXJMb2NhbGVTdXBwb3J0ZWQoKSB7XG4gIGNvbnN0IG51bSA9IDEyMzQ7XG4gIGNvbnN0IG51bVN0cmluZyA9IG51bS50b0xvY2FsZVN0cmluZygnZW4tR0InKTtcbiAgcmV0dXJuIG51bVN0cmluZyA9PT0gJzEsMjM0Jztcbn1cblxuTnVtYmVyRm9ybWF0RmlsdGVyLiRpbmplY3QgPSBbXG4gICdUd0xvY2FsZVNlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBOdW1iZXJGb3JtYXRGaWx0ZXI7XG4iLCJmdW5jdGlvbiBMb2NhbGVTZXJ2aWNlKCkge1xuICB0aGlzLmxvY2FsZSA9ICdlbi1HQic7XG4gIHRoaXMucmVnZXggPSAvXlthLXpdezJ9KC1bQS1aXVtBLVpdKT8kLztcbiAgdGhpcy5sb3dlckNhc2VDb3VudHJ5ID0gL15bYS16XXsyfSgtW2Etel1bYS16XSk/JC87XG5cbiAgdGhpcy5nZXRDdXJyZW50ID0gKCkgPT4gdGhpcy5sb2NhbGU7XG5cbiAgdGhpcy5zZXRDdXJyZW50ID0gKG5ld0xvY2FsZSkgPT4ge1xuICAgIGlmICh0aGlzLmlzVmFsaWQobmV3TG9jYWxlKSkge1xuICAgICAgdGhpcy5sb2NhbGUgPSBuZXdMb2NhbGU7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubG93ZXJDYXNlQ291bnRyeS50ZXN0KG5ld0xvY2FsZSkpIHtcbiAgICAgIHRoaXMubG9jYWxlID0gY2hhbmdlQ291bnRyeVRvVXBwZXJDYXNlKG5ld0xvY2FsZSk7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhbGU7XG4gICAgfVxuXG4gICAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIGNvbnNvbGUud2FybihgSW5jb3JyZWN0IGxvY2FsZTogJHtuZXdMb2NhbGV9YCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9XG4gICAgdGhpcy5sb2NhbGUgPSAnZW4tR0InO1xuICAgIHJldHVybiB0aGlzLmxvY2FsZTtcbiAgfTtcblxuICB0aGlzLmlzVmFsaWQgPSB0ZXN0TG9jYWxlID0+IHRoaXMucmVnZXgudGVzdCh0ZXN0TG9jYWxlKTtcblxuICB0aGlzLmdldENvdW50cnlGcm9tTG9jYWxlID0gbG9jYWxlID0+IHRoaXMuaXNWYWxpZChsb2NhbGUpICYmIGxvY2FsZS5zbGljZSgzLCA1KTtcblxuICBmdW5jdGlvbiBjaGFuZ2VDb3VudHJ5VG9VcHBlckNhc2UobG93ZXJDYXNlTG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvd2VyQ2FzZUxvY2FsZS5zbGljZSgwLCAzKSArIGxvd2VyQ2FzZUxvY2FsZS5zbGljZSgzLCA1KS50b1VwcGVyQ2FzZSgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvY2FsZVNlcnZpY2U7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDdXJyZW5jeUNvbXBvbmVudCBmcm9tICcuL2N1cnJlbmN5LWZvcm1hdC5jb21wb25lbnQnO1xuaW1wb3J0IEN1cnJlbmN5RmlsdGVyIGZyb20gJy4vY3VycmVuY3ktZm9ybWF0LmZpbHRlcic7XG5pbXBvcnQgQ3VycmVuY3lTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2N1cnJlbmN5JztcbmltcG9ydCBOdW1iZXJGb3JtYXQgZnJvbSAnLi4vbnVtYmVyLWZvcm1hdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3JtYXR0aW5nLmN1cnJlbmN5JywgW0N1cnJlbmN5U2VydmljZSwgTnVtYmVyRm9ybWF0XSlcbiAgLmNvbXBvbmVudCgndHdDdXJyZW5jeUZvcm1hdCcsIEN1cnJlbmN5Q29tcG9uZW50KVxuICAuZmlsdGVyKCd0d0N1cnJlbmN5Rm9ybWF0JywgQ3VycmVuY3lGaWx0ZXIpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY3VycmVuY3ktZm9ybWF0Lmh0bWwnO1xuXG5jb25zdCBDdXJyZW5jeUZvcm1hdCA9IHtcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgYW1vdW50OiAnPCcsXG4gICAgY3VycmVuY3k6ICc8JyxcbiAgICBsb2NhbGU6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDdXJyZW5jeUZvcm1hdDtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCJ7eyAkY3RybC5hbW91bnQgfCB0d0N1cnJlbmN5Rm9ybWF0IDogJGN0cmwuY3VycmVuY3kgOiAkY3RybC5sb2NhbGUgfX0gXCI7IiwiZnVuY3Rpb24gQ3VycmVuY3lGb3JtYXRGaWx0ZXIoJGZpbHRlciwgQ3VycmVuY3lTZXJ2aWNlLCBudW1iZXJGb3JtYXRGaWx0ZXIpIHtcbiAgcmV0dXJuIChudW1iZXIsIGN1cnJlbmN5LCBsb2NhbGUpID0+IHtcbiAgICBsZXQgcHJlY2lzaW9uO1xuXG4gICAgaWYgKHR5cGVvZiBudW1iZXIgPT09ICdzdHJpbmcnICYmIE51bWJlcihudW1iZXIpKSB7XG4gICAgICBudW1iZXIgPSBOdW1iZXIobnVtYmVyKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbnVtYmVyIGlzIGFuIGludGVnZXIgZG9uJ3Qgc2hvdyBkZWNpbWFsc1xuICAgIGlmIChudW1iZXIgPT09IHBhcnNlSW50KG51bWJlciwgMTApKSB7XG4gICAgICBwcmVjaXNpb24gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmVjaXNpb24gPSBDdXJyZW5jeVNlcnZpY2UuZ2V0RGVjaW1hbHMoY3VycmVuY3kpO1xuICAgIH1cblxuICAgIHJldHVybiBgJHtudW1iZXJGb3JtYXRGaWx0ZXIobnVtYmVyLCBwcmVjaXNpb24sIGxvY2FsZSl9ICR7Y3VycmVuY3l9YDtcbiAgfTtcbn1cblxuQ3VycmVuY3lGb3JtYXRGaWx0ZXIuJGluamVjdCA9IFtcbiAgJyRmaWx0ZXInLFxuICAnVHdDdXJyZW5jeVNlcnZpY2UnLFxuICAndHdOdW1iZXJGb3JtYXRGaWx0ZXInXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDdXJyZW5jeUZvcm1hdEZpbHRlcjtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFRlbGVwaG9uZUNvbnRyb2wgZnJvbSAnLi90ZWxlcGhvbmUuY29tcG9uZW50LmpzJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvbSc7XG5pbXBvcnQgTG9jYWxlU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9sb2NhbGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudGVsZXBob25lJywgW1xuICAgIERvbVNlcnZpY2UsXG4gICAgTG9jYWxlU2VydmljZVxuICBdKVxuICAuY29tcG9uZW50KCd0d1RlbGVwaG9uZScsIFRlbGVwaG9uZUNvbnRyb2wpLm5hbWU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL3RlbGVwaG9uZS5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbGVwaG9uZS5odG1sJztcblxuY29uc3QgVGVsZXBob25lQ29udHJvbCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdNb2RlbDogJz0nLFxuICAgIG5nUmVxdWlyZWQ6ICc8JyxcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgbmdDaGFuZ2U6ICcmJyxcbiAgICBsb2NhbGU6ICdAJyxcbiAgICBwbGFjZWhvbGRlcjogJ0AnLFxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiAnQCcsXG4gIH0sXG4gIHRyYW5zY2x1ZGU6IHRydWUsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZWxlcGhvbmVDb250cm9sO1xuIiwiaW1wb3J0IGNvdW50cnlMaXN0IGZyb20gJy4vY291bnRyaWVzLmpzb24nO1xuXG5jbGFzcyBUZWxlcGhvbmVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsICR0aW1lb3V0LCBMb2NhbGVTZXJ2aWNlLCBEb21TZXJ2aWNlKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLkxvY2FsZVNlcnZpY2UgPSBMb2NhbGVTZXJ2aWNlO1xuICAgIHRoaXMuRG9tU2VydmljZSA9IERvbVNlcnZpY2U7XG4gICAgdGhpcy5jb3VudHJpZXMgPSBjb3VudHJ5TGlzdDtcbiAgfVxuXG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy5jYWxsaW5nQ29kZXMgPSBjb2Rlc1RvT3B0aW9ucyhjb3VudHJ5TGlzdCk7XG5cbiAgICB0aGlzLmZvcm1Hcm91cCA9IHRoaXMuRG9tU2VydmljZS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoXG4gICAgICB0aGlzLiRlbGVtZW50WzBdLFxuICAgICAgJ2Zvcm0tZ3JvdXAnXG4gICAgKTtcblxuICAgIHRoaXMuY2hhcmFjdGVyc1RvUmVtb3ZlID0gL1tcXHMuLV0vZztcbiAgICB0aGlzLm1vZGVsUGF0dGVybiA9IC9eXFwrWzAtOV0qJC87XG5cbiAgICBpZiAodGhpcy5uZ01vZGVsKSB7XG4gICAgICAvLyBUcmlnZ2VyIG9uY2Ugb24gbG9hZCBtYW51YWxseVxuICAgICAgdGhpcy5leHBsb2RlTnVtYmVyTW9kZWwodGhpcy5uZ01vZGVsKTtcbiAgICB9XG5cbiAgICB0aGlzLiRuZ01vZGVsID0gdGhpcy4kZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG5cbiAgICAvLyBVc2UgZm9ybWF0dGVycyBwaXBlbGluZSB0byBzcGxpdCB2YWx1ZXMgcGFzc2VkIGluXG4gICAgdGhpcy4kbmdNb2RlbC4kZm9ybWF0dGVycy51bnNoaWZ0KChtb2RlbFZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmV4cGxvZGVOdW1iZXJNb2RlbChtb2RlbFZhbHVlKTtcbiAgICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kbmdNb2RlbC4kdmFsaWRhdG9ycy5wYXR0ZXJuID0gdmlld1ZhbHVlID0+IHRoaXMubW9kZWxQYXR0ZXJuLnRlc3Qodmlld1ZhbHVlKTtcbiAgICB0aGlzLiRuZ01vZGVsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IHZpZXdWYWx1ZSA9PiB2aWV3VmFsdWUgJiYgdmlld1ZhbHVlLmxlbmd0aCA+IDY7XG5cbiAgICAvLyBPbmNlIGxvYWRlZCBhZGQgYSBwYXJzZXIgdG8gcmVtb3ZlIHNwZWNpYWwgY2hhcmFjdGVycyBmcm9tIHN1ZmZpeFxuICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5zdWZmaXhNb2RlbENvbnRyb2xsZXIgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2lucHV0W3R5cGU9dGVsXScpLmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICAgIGlmICh0aGlzLnN1ZmZpeE1vZGVsQ29udHJvbGxlciAmJiB0aGlzLnN1ZmZpeE1vZGVsQ29udHJvbGxlci4kcGFyc2Vycykge1xuICAgICAgICB0aGlzLnN1ZmZpeE1vZGVsQ29udHJvbGxlci4kcGFyc2Vyc1xuICAgICAgICAgIC51bnNoaWZ0KHZpZXdWYWx1ZSA9PiB2aWV3VmFsdWUucmVwbGFjZSh0aGlzLmNoYXJhY3RlcnNUb1JlbW92ZSwgJycpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmxvY2FsZSAmJiAhdGhpcy5uZ01vZGVsKSB7XG4gICAgICB0aGlzLnNldERlZmF1bHRQcmVmaXgoKTtcbiAgICB9XG4gIH1cblxuICBleHBsb2RlTnVtYmVyTW9kZWwobnVtYmVyKSB7XG4gICAgY29uc3QgY291bnRyeSA9IGZpbmRDb3VudHJ5QnlQcmVmaXgobnVtYmVyLCB0aGlzLmNvdW50cmllcyk7XG4gICAgaWYgKGlzVmFsaWRQaG9uZU51bWJlcihudW1iZXIpKSB7XG4gICAgICBpZiAoY291bnRyeSkge1xuICAgICAgICB0aGlzLnByZWZpeCA9IGNvdW50cnkucGhvbmU7XG4gICAgICAgIHRoaXMuc3VmZml4ID0gbnVtYmVyLnN1YnN0cmluZyhjb3VudHJ5LnBob25lLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gY291bnRyeS5waG9uZUZvcm1hdCB8fCAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJlZml4ID0gJyc7XG4gICAgICAgIHRoaXMuc3VmZml4ID0gbnVtYmVyLnN1YnN0cmluZygxKTtcbiAgICAgICAgdGhpcy5mb3JtYXQgPSAnJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXREZWZhdWx0UHJlZml4KCk7XG4gICAgfVxuICB9XG5cbiAgb25QcmVmaXhDaGFuZ2UocHJlZml4KSB7XG4gICAgY29uc3QgY291bnRyeSA9IGZpbmRDb3VudHJ5QnlQcmVmaXgocHJlZml4LCB0aGlzLmNvdW50cmllcyk7XG4gICAgaWYgKGNvdW50cnkpIHtcbiAgICAgIHRoaXMuZm9ybWF0ID0gY291bnRyeS5waG9uZUZvcm1hdCB8fCAnJztcbiAgICB9XG4gICAgdGhpcy5vblZhbHVlQ2hhbmdlKHByZWZpeCwgdGhpcy5zdWZmaXgpO1xuICB9XG5cbiAgb25TdWZmaXhDaGFuZ2UoKSB7XG4gICAgdGhpcy5vblZhbHVlQ2hhbmdlKFxuICAgICAgdGhpcy5wcmVmaXgsXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnkgYXMgJHBhcnNlciBkaWQgaXQgYWxyZWFkeSwgYnV0IG90aGVyd2lzZSB0ZXN0IGZhaWxzLi4uXG4gICAgICB0aGlzLnN1ZmZpeCAmJiB0aGlzLnN1ZmZpeC5yZXBsYWNlKHRoaXMuY2hhcmFjdGVyc1RvUmVtb3ZlLCAnJylcbiAgICApO1xuICB9XG5cbiAgb25WYWx1ZUNoYW5nZShwcmVmaXgsIHN1ZmZpeCkge1xuICAgIGxldCBjb21iaW5lZDtcblxuICAgIGlmIChzdWZmaXgpIHtcbiAgICAgIGNvbWJpbmVkID0gKHByZWZpeCB8fCAnKycpICsgc3VmZml4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21iaW5lZCA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGNvbWJpbmVkKTtcblxuICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgfVxuXG4gIHNldERlZmF1bHRQcmVmaXgoKSB7XG4gICAgY29uc3QgbG9jYWxlQ291bnRyeSA9IHRoaXMuTG9jYWxlU2VydmljZS5nZXRDb3VudHJ5RnJvbUxvY2FsZSh0aGlzLmxvY2FsZSk7XG4gICAgY29uc3QgY291bnRyeSA9IGZpbmRDb3VudHJ5QnlDb2RlKGxvY2FsZUNvdW50cnksIHRoaXMuY291bnRyaWVzKTtcblxuICAgIGlmIChjb3VudHJ5KSB7XG4gICAgICB0aGlzLnByZWZpeCA9IGNvdW50cnkucGhvbmU7XG4gICAgICB0aGlzLmZvcm1hdCA9IGNvdW50cnkucGhvbmVGb3JtYXQgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJlZml4ID0gJys0NCc7XG4gICAgfVxuICB9XG5cbiAgb25Gb2N1cygpIHtcbiAgICB0aGlzLiRlbGVtZW50WzBdLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgdGhpcy4kZWxlbWVudFswXS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICB0aGlzLnZhbGlkYXRlKCk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICBpZiAodGhpcy5mb3JtR3JvdXApIHtcbiAgICAgIGlmICh0aGlzLiRuZ01vZGVsLiRpbnZhbGlkICYmIHRoaXMuJG5nTW9kZWwuJHRvdWNoZWQpIHtcbiAgICAgICAgdGhpcy5mb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnaGFzLWVycm9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZvcm1Hcm91cC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNWYWxpZFBob25lTnVtYmVyKHBob25lTnVtYmVyKSB7XG4gIHJldHVybiB0eXBlb2YgcGhvbmVOdW1iZXIgPT09ICdzdHJpbmcnXG4gICAgJiYgcGhvbmVOdW1iZXIubGVuZ3RoID4gNFxuICAgICYmIHBob25lTnVtYmVyLnN1YnN0cmluZygwLCAxKSA9PT0gJysnO1xufVxuXG5mdW5jdGlvbiBmaW5kQ291bnRyeUJ5UHJlZml4KG51bWJlciwgY291bnRyaWVzKSB7XG4gIGlmIChjb3VudHJpZXMgJiYgY291bnRyaWVzLmxlbmd0aCAmJiBudW1iZXIgJiYgbnVtYmVyLmxlbmd0aCA+IDEpIHtcbiAgICAvLyBGaW5kIGxvbmdlc3QgbWF0Y2hpbmcgcHJlZml4XG4gICAgY29uc3QgbWF0Y2hpbmdDb2RlcyA9IGNvdW50cmllcy5maWx0ZXIoY291bnRyeSA9PiBudW1iZXIuaW5kZXhPZihjb3VudHJ5LnBob25lKSA9PT0gMCk7XG5cbiAgICBpZiAobWF0Y2hpbmdDb2RlcyAmJiBtYXRjaGluZ0NvZGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG1hdGNoaW5nQ29kZXMucmVkdWNlKChhLCBiKSA9PiAoYS5waG9uZS5sZW5ndGggPiBiLnBob25lLmxlbmd0aCA/IGEgOiBiKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRDb3VudHJ5QnlDb2RlKGNvZGUsIGNvdW50cmllcykge1xuICBpZiAoY291bnRyaWVzICYmIGNvdW50cmllcy5sZW5ndGggJiYgY29kZSAmJiBjb2RlLmxlbmd0aCA9PT0gMikge1xuICAgIC8vIEZpbmQgbG9uZ2VzdCBtYXRjaGluZyBwcmVmaXhcbiAgICBjb25zdCBtYXRjaGluZ0NvZGVzID0gY291bnRyaWVzLmZpbHRlcihjb3VudHJ5ID0+IGNvZGUgPT09IGNvdW50cnkuaXNvMik7XG5cbiAgICBpZiAobWF0Y2hpbmdDb2RlcyAmJiBtYXRjaGluZ0NvZGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG1hdGNoaW5nQ29kZXMucmVkdWNlKChhLCBiKSA9PiAoYS5waG9uZS5sZW5ndGggPiBiLnBob25lLmxlbmd0aCA/IGEgOiBiKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUHJlZml4TWFwKGNvdW50cmllcykge1xuICBjb25zdCBkaWFsbGluZ0NvZGVNYXAgPSB7fTtcblxuICBjb3VudHJpZXMuZm9yRWFjaCgoY291bnRyeSkgPT4ge1xuICAgIGlmICghZGlhbGxpbmdDb2RlTWFwW2NvdW50cnkucGhvbmVdKSB7XG4gICAgICBkaWFsbGluZ0NvZGVNYXBbY291bnRyeS5waG9uZV0gPSB7XG4gICAgICAgIGNvZGU6IGNvdW50cnkucGhvbmUsXG4gICAgICAgIGlzbzM6IFtdLFxuICAgICAgICBuYW1lczogW11cbiAgICAgIH07XG4gICAgfVxuICAgIGRpYWxsaW5nQ29kZU1hcFtjb3VudHJ5LnBob25lXS5pc28zLnB1c2goY291bnRyeS5pc28zKTtcbiAgICBkaWFsbGluZ0NvZGVNYXBbY291bnRyeS5waG9uZV0ubmFtZXMucHVzaChjb3VudHJ5Lm5hbWUpO1xuICB9KTtcblxuICByZXR1cm4gZGlhbGxpbmdDb2RlTWFwO1xufVxuXG5mdW5jdGlvbiBjb2Rlc1RvT3B0aW9ucyhjb3VudHJpZXMpIHtcbiAgY29uc3QgZGlhbGxpbmdDb2RlTWFwID0gZ2VuZXJhdGVQcmVmaXhNYXAoY291bnRyaWVzKTtcblxuICByZXR1cm4gT2JqZWN0LmtleXMoZGlhbGxpbmdDb2RlTWFwKVxuICAgIC5zb3J0KChhLCBiKSA9PiAocGFyc2VJbnQoYS5zdWJzdHJpbmcoMSksIDEwKSA8IHBhcnNlSW50KGIuc3Vic3RyaW5nKDEpLCAxMCkgPyAtMSA6IDEpKVxuICAgIC5tYXAocGhvbmUgPT4gKHtcbiAgICAgIHZhbHVlOiBwaG9uZSxcbiAgICAgIGxhYmVsOiBwaG9uZSxcbiAgICAgIG5vdGU6IGRpYWxsaW5nQ29kZU1hcFtwaG9uZV0uaXNvMy5qb2luKCcsICcpLFxuICAgICAgc2VhcmNoYWJsZTogZGlhbGxpbmdDb2RlTWFwW3Bob25lXS5uYW1lcy5qb2luKCcsICcpXG4gICAgfSkpO1xufVxuXG5UZWxlcGhvbmVDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckZWxlbWVudCcsXG4gICckdGltZW91dCcsXG4gICdUd0xvY2FsZVNlcnZpY2UnLFxuICAnVHdEb21TZXJ2aWNlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgVGVsZXBob25lQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPXJvdz4gPGRpdiBjbGFzcz1jb2wteHMtNT4gPHR3LXNlbGVjdCBuYW1lPXBob25lTnVtYmVyUHJlZml4IG9wdGlvbnM9JGN0cmwuY2FsbGluZ0NvZGVzIG5nLW1vZGVsPSRjdHJsLnByZWZpeCBuZy1jaGFuZ2U9JGN0cmwub25QcmVmaXhDaGFuZ2UoJGN0cmwucHJlZml4KSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWZvY3VzPSRjdHJsLm9uRm9jdXMoKSBuZy1ibHVyPSRjdHJsLm9uQmx1cigpIHBsYWNlaG9sZGVyPSsgZmlsdGVyPVxcXCJ7eyAkY3RybC5zZWFyY2hQbGFjZWhvbGRlciB9fVxcXCIgZHJvcGRvd24td2lkdGg9bWQgaGlkZS1ub3RlPXRydWU+PC90dy1zZWxlY3Q+IDwvZGl2PiA8ZGl2IGNsYXNzPWNvbC14cy03PiA8aW5wdXQgdHlwZT10ZWwgbmFtZT1waG9uZU51bWJlciBwbGFjZWhvbGRlcj1cXFwie3sgJGN0cmwucGxhY2Vob2xkZXIgfX1cXFwiIGNsYXNzPWZvcm0tY29udHJvbCBuZy1tb2RlbD0kY3RybC5zdWZmaXggbmctbW9kZWwtb3B0aW9ucz1cXFwieyBhbGxvd0ludmFsaWQ6IHRydWUgfVxcXCIgbmctY2hhbmdlPSRjdHJsLm9uU3VmZml4Q2hhbmdlKCkgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1mb2N1cz0kY3RybC5vbkZvY3VzKCkgbmctYmx1cj0kY3RybC5vbkJsdXIoKSAvPiA8L2Rpdj4gPC9kaXY+IFwiOyIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFN1Ym1pdCBmcm9tICcuL3N1Ym1pdC5jb21wb25lbnQuanMnO1xuaW1wb3J0IFByb2Nlc3MgZnJvbSAnLi4vLi4vbG9hZGluZy9wcm9jZXNzJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5zdWJtaXQnLCBbXG4gICAgUHJvY2VzcyxcbiAgICBEb21TZXJ2aWNlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3U3VibWl0JywgU3VibWl0KS5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9zdWJtaXQuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9zdWJtaXQuaHRtbCc7XG5cbmNvbnN0IFN1Ym1pdCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbGFiZWw6ICc8JyxcbiAgICBwcm9taXNlOiAnPCcsXG4gICAgc3VibWl0Q2FsbGJhY2s6ICcmb25TdWJtaXQnLFxuICAgIHN1Y2Nlc3NDYWxsYmFjazogJyZvblN1Y2Nlc3MnLFxuICAgIGZhaWx1cmVDYWxsYmFjazogJyY/b25GYWlsdXJlJyxcbiAgICBuZ0Rpc2FibGVkOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgU3VibWl0O1xuIiwiY2xhc3MgU3VibWl0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRxLCAkdGltZW91dCwgJGVsZW1lbnQsIERvbVNlcnZpY2UpIHtcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gICAgdGhpcy4kcSA9ICRxO1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICAgIHRoaXMuZG9tID0gRG9tU2VydmljZTtcbiAgfVxuXG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IDA7XG4gICAgdGhpcy5jb2xvdXIgPSAnYmx1ZSc7XG4gICAgdGhpcy5hbmltYXRpb25EZWxheSA9IDE1MDA7XG5cbiAgICB0aGlzLmZvcm0gPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlUYWdOYW1lKHRoaXMuZWxlbWVudCwgJ2Zvcm0nKTtcblxuICAgIHRoaXMuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoKSA9PiB7XG4gICAgICB0aGlzLm9uU3VibWl0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnByb21pc2UgJiYgY2hhbmdlcy5wcm9taXNlLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgdGhpcy5vbk5ld1Byb21pc2UoKTtcbiAgICB9XG4gIH1cblxuICBvbk5ld1Byb21pc2UoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IDA7XG4gICAgdGhpcy5wcm9taXNlXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB0aGlzLm9uUHJvbWlzZVN1Y2Nlc3MocmVzcG9uc2UpKVxuICAgICAgLmNhdGNoKGVycm9yID0+IHRoaXMub25Qcm9taXNlRmFpbHVyZShlcnJvcikpO1xuICB9XG5cbiAgb25TdWJtaXQoKSB7XG4gICAgdGhpcy5pc1NwaW5uZXJWaXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmlzQnV0dG9uRGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuY29sb3VyID0gJ2JsdWUnO1xuICAgIHRoaXMuc3VibWl0Q2FsbGJhY2soKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG9uUHJvbWlzZVN1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgICB0aGlzLnN0YXRlID0gMTtcbiAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuaXNCdXR0b25EaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMuc3VjY2Vzc0NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc3VjY2Vzc0NhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSwgdGhpcy5hbmltYXRpb25EZWxheSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgb25Qcm9taXNlRmFpbHVyZShlcnJvcikge1xuICAgIHRoaXMuc3RhdGUgPSAtMTtcbiAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuY29sb3VyID0gJ3JlZCc7XG4gICAgICB0aGlzLmlzQnV0dG9uRGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgdGhpcy5mYWlsdXJlQ2FsbGJhY2soKTtcbiAgICB9LCB0aGlzLmFuaW1hdGlvbkRlbGF5KTtcblxuICAgIHRoaXMuJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5jb2xvdXIgPSAnYmx1ZSc7XG4gICAgfSwgMyAqIHRoaXMuYW5pbWF0aW9uRGVsYXkpO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxufVxuXG5TdWJtaXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRxJywgJyR0aW1lb3V0JywgJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBTdWJtaXRDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tYmxvY2tcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICdidG4tZGFuZ2VyJzogJGN0cmwuY29sb3VyID09PSAncmVkJyxcXG4gICAgJ2J0bi1wcmltYXJ5JzogJGN0cmwuY29sb3VyID09PSAnYmx1ZSdcXG4gIH1cXFwiIG5nLWRpc2FibGVkPVxcXCIkY3RybC5pc0J1dHRvbkRpc2FibGVkIHx8ICRjdHJsLm5nRGlzYWJsZWRcXFwiPiA8dHctcHJvY2VzcyBuZy1pZj0kY3RybC5pc1NwaW5uZXJWaXNpYmxlIHN0YXRlPSRjdHJsLnN0YXRlIHNpemU9eHM+IDwvdHctcHJvY2Vzcz4ge3sgJGN0cmwubGFiZWwgfX0gPC9idXR0b24+IFwiOyIsIi8qIERFUFJFQ0FURUQgaW4gZmF2b3VyIG9mIHVwbG9hZCAqL1xuaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgVXBsb2FkRHJvcHBhYmxlIGZyb20gJy4vdXBsb2FkLWRyb3BwYWJsZS5kaXJlY3RpdmUuanMnO1xuaW1wb3J0IEZpbGVTZWxlY3QgZnJvbSAnLi9maWxlLXNlbGVjdC5kaXJlY3RpdmUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLWRyb3BwYWJsZScsIFtdKVxuICAuZGlyZWN0aXZlKCd0d0ZpbGVTZWxlY3QnLCBGaWxlU2VsZWN0KVxuICAuY29tcG9uZW50KCd0d1VwbG9hZERyb3BwYWJsZScsIFVwbG9hZERyb3BwYWJsZSkubmFtZTtcbiIsIi8qIERFUFJFQ0FURUQgaW4gZmF2b3VyIG9mIHVwbG9hZCAqL1xuaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3VwbG9hZC1kcm9wcGFibGUuaHRtbCc7XG5cbmZ1bmN0aW9uIFR3VXBsb2FkRHJvcHBhYmxlRGlyZWN0aXZlKCkge1xuICByZXR1cm4ge1xuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgY29udHJvbGxlcjogVHdVcGxvYWREcm9wcGFibGVDb250cm9sbGVyLFxuICAgIGNvbnRyb2xsZXJBczogJyRjdHJsJyxcbiAgICByZXBsYWNlOiBmYWxzZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHRpdGxlOiAnQCcsXG4gICAgICBjdGE6ICdAJyxcbiAgICAgIG9uVXBsb2FkOiAnPScsXG4gICAgICBhY2NlcHQ6ICc9J1xuICAgIH0sXG4gICAgbGluazogVHdVcGxvYWREcm9wcGFibGVMaW5rLFxuICAgIHRlbXBsYXRlXG4gIH07XG59XG5cblxuZnVuY3Rpb24gVHdVcGxvYWREcm9wcGFibGVDb250cm9sbGVyKCkge1xuICBjb25zdCAkY3RybCA9IHRoaXM7XG5cbiAgJGN0cmwuZHJhZ0NvdW50ZXIgPSAwO1xuICAkY3RybC5pc0FjdGl2ZSA9IGZhbHNlO1xuXG4gICRjdHJsLm9uTWFudWFsVXBsb2FkID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKCRjdHJsLm9uVXBsb2FkICYmIHR5cGVvZiAkY3RybC5vblVwbG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgJGN0cmwub25VcGxvYWQoYW5ndWxhci5lbGVtZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaWxlLXVwbG9hZCcpKVswXS5maWxlc1swXSwgZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICAkY3RybC5vbkRyb3AgPSAoZmlsZSwgZXZlbnQpID0+IHtcbiAgICBpZiAoJGN0cmwub25VcGxvYWQgJiYgdHlwZW9mICRjdHJsLm9uVXBsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAkY3RybC5vblVwbG9hZChmaWxlLCBldmVudCk7XG4gICAgfVxuICAgICRjdHJsLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgJGN0cmwuZHJvcENvdW50ZXIgPSAwO1xuICB9O1xuXG4gICRjdHJsLm9uRHJhZ0NoYW5nZSA9IChlbnRlcikgPT4ge1xuICAgIGlmIChlbnRlcikge1xuICAgICAgJGN0cmwuZHJhZ0NvdW50ZXIrKztcbiAgICAgIGlmICgkY3RybC5kcmFnQ291bnRlciA9PT0gMSkge1xuICAgICAgICAkY3RybC5pc0FjdGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICRjdHJsLmRyYWdDb3VudGVyLS07XG4gICAgICBpZiAoJGN0cmwuZHJhZ0NvdW50ZXIgPT09IDApIHtcbiAgICAgICAgJGN0cmwuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIFR3VXBsb2FkRHJvcHBhYmxlTGluayhzY29wZSwgZWxlbWVudCkge1xuICBlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2NvcGUuJGN0cmwub25EcmFnQ2hhbmdlKHRydWUpO1xuICAgIHNjb3BlLiRhcHBseSgpO1xuICB9LCBmYWxzZSk7XG5cbiAgZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH0sIGZhbHNlKTtcblxuICBlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2NvcGUuJGN0cmwub25EcmFnQ2hhbmdlKGZhbHNlKTtcbiAgICBzY29wZS4kYXBwbHkoKTtcbiAgfSwgZmFsc2UpO1xuXG4gIGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIChldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2NvcGUuJGN0cmwub25Ecm9wKGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlc1swXSk7XG4gICAgc2NvcGUuJGFwcGx5KCk7XG4gIH0sIGZhbHNlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVHdVcGxvYWREcm9wcGFibGVEaXJlY3RpdmU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwidGV4dC1jZW50ZXIgdHctdXBsb2FkLWRyb3BwYWJsZS1ib3hcXFwiIG5nLWNsYXNzPVxcXCJ7J2FjdGl2ZSc6ICRjdHJsLmlzQWN0aXZlfVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tdXBsb2FkIHR3LXVwbG9hZC1kcm9wcGFibGUtaWNvblxcXCI+PC9zcGFuPiA8aDQgY2xhc3M9bS10LTIgbmctaWY9JGN0cmwudGl0bGU+e3skY3RybC50aXRsZX19PC9oND4gPGRpdiBjbGFzcz1yb3c+IDxkaXYgY2xhc3M9XFxcImNvbC14cy0xMiBjb2wtc20tNiBjb2wtc20tb2Zmc2V0LTMgbS10LTFcXFwiPiA8bmctdHJhbnNjbHVkZT48L25nLXRyYW5zY2x1ZGU+IDxsYWJlbCBjbGFzcz1saW5rIGZvcj1maWxlLXVwbG9hZD57eyRjdHJsLmN0YX19PC9sYWJlbD4gPGlucHV0IHR3LWZpbGUtc2VsZWN0IGlkPWZpbGUtdXBsb2FkIHR5cGU9ZmlsZSBhY2NlcHQ9e3skY3RybC5hY2NlcHR9fSBjbGFzcz1oaWRkZW4gb24tdXNlci1pbnB1dD0kY3RybC5vbk1hbnVhbFVwbG9hZCAvPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjsiLCIvKiBERVBSRUNBVEVEIGluIGZhdm91ciBvZiB1cGxvYWQgKi9cblxuZnVuY3Rpb24gRmlsZVNlbGVjdERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHNjb3BlOiB7XG4gICAgICBvblVzZXJJbnB1dDogJz0nXG4gICAgfSxcbiAgICBsaW5rOiBGaWxlU2VsZWN0TGlua1xuICB9O1xufVxuXG5mdW5jdGlvbiBGaWxlU2VsZWN0TGluayhzY29wZSwgJGVsZW1lbnQpIHtcbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChldmVudCkgPT4ge1xuICAgIGlmIChzY29wZS4kY3RybC5vblVzZXJJbnB1dCAmJiB0eXBlb2Ygc2NvcGUuJGN0cmwub25Vc2VySW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNjb3BlLiRjdHJsLm9uVXNlcklucHV0KGV2ZW50KTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBGaWxlU2VsZWN0RGlyZWN0aXZlO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRm9ybVZhbGlkYXRpb24gZnJvbSAnLi9mb3JtLXZhbGlkYXRpb24uZGlyZWN0aXZlLmpzJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS52YWxpZGF0aW9uLmZvcm0nLCBbXG4gICAgRG9tU2VydmljZVxuICBdKVxuICAuZGlyZWN0aXZlKCdmb3JtJywgRm9ybVZhbGlkYXRpb24pLm5hbWU7XG4iLCJcbmZ1bmN0aW9uIEZvcm1WYWxpZGF0aW9uKFR3RG9tU2VydmljZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgbGluazogKHNjb3BlLCAkZWxlbWVudCkgPT4ge1xuICAgICAgY29uc3QgZm9ybSA9ICRlbGVtZW50WzBdO1xuXG4gICAgICAvLyBTdWJtaXR0aW5nIHRoZSBmb3JtIHdvbid0IHRyaWdnZXIgZm9ybSBjb250cm9scyBvd24gdmFsaWRhdGlvbiwgc28gY2hlY2sgdGhlbVxuICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoKSA9PiB7XG4gICAgICAgIGxldCBmb3JtR3JvdXA7XG4gICAgICAgIGxldCBjaGVja2JveENvbnRhaW5lcjtcbiAgICAgICAgbGV0IHJhZGlvQ29udGFpbmVyO1xuXG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbdHctdmFsaWRhdGlvbl0ubmctaW52YWxpZCwgJ1xuICAgICAgICAgICsgJ3R3LXRlbGVwaG9uZS5uZy1pbnZhbGlkLXJlcXVpcmVkLCAnXG4gICAgICAgICAgKyAndHctdGVsZXBob25lLm5nLWludmFsaWQtcGF0dGVybicpO1xuXG4gICAgICAgIC8vIFNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCBQaGFudG9tSlMgd2FzIGNvbXBsYWluaW5nXG4gICAgICAgIGlmICghY29udHJvbHMuZm9yRWFjaCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udHJvbHMuZm9yRWFjaCgoY29udHJvbCkgPT4ge1xuICAgICAgICAgIGZvcm1Hcm91cCA9IFR3RG9tU2VydmljZS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoY29udHJvbCwgJ2Zvcm0tZ3JvdXAnKTtcbiAgICAgICAgICByYWRpb0NvbnRhaW5lciA9IFR3RG9tU2VydmljZS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoY29udHJvbCwgJ3JhZGlvJyk7XG4gICAgICAgICAgY2hlY2tib3hDb250YWluZXIgPSBUd0RvbVNlcnZpY2UuZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGNvbnRyb2wsICdjaGVja2JveCcpO1xuXG4gICAgICAgICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmFkaW9Db250YWluZXIpIHtcbiAgICAgICAgICAgIHJhZGlvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hlY2tib3hDb250YWluZXIpIHtcbiAgICAgICAgICAgIGNoZWNrYm94Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbkZvcm1WYWxpZGF0aW9uLiRpbmplY3QgPSBbJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtVmFsaWRhdGlvbjtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgUG9wT3ZlciBmcm9tICcuL3BvcC1vdmVyJztcbmltcG9ydCBUb29sVGlwIGZyb20gJy4vdG9vbC10aXAnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyLm1vZHVsZSgndHcuc3R5bGVndWlkZS5oZWxwJywgW1xuICBQb3BPdmVyLFxuICBUb29sVGlwXG5dKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmltcG9ydCBQb3BPdmVyIGZyb20gJy4vcG9wLW92ZXIuZGlyZWN0aXZlLmpzJztcbmltcG9ydCBQb3BPdmVyU2VydmljZSBmcm9tICcuL3BvcC1vdmVyLnNlcnZpY2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuaGVscC5wb3BvdmVyJywgW10pXG4gIC5zZXJ2aWNlKCd0d1BvcE92ZXJTZXJ2aWNlJywgUG9wT3ZlclNlcnZpY2UpXG4gIC5kaXJlY3RpdmUoJ3R3UG9wT3ZlcicsIFBvcE92ZXIpLm5hbWU7XG4iLCJpbXBvcnQgUG9wT3ZlckNvbnRyb2xsZXIgZnJvbSAnLi9wb3Atb3Zlci5jb250cm9sbGVyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogUG9wT3ZlckNvbnRyb2xsZXIsXG4gIH07XG59XG4iLCJjbGFzcyBQb3BPdmVyQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCBQb3BvdmVyU2VydmljZSkge1xuICAgIGNvbnN0IHVud3JhcHBlZEVsID0gJGVsZW1lbnRbMF07XG5cbiAgICB0aGlzLnNob3dQb3BvdmVyID0gKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIFBvcG92ZXJTZXJ2aWNlLnNob3dQb3BvdmVyKGdldFBvcG92ZXJPcHRpb25zKHVud3JhcHBlZEVsKSk7XG4gICAgfTtcblxuICAgIHRoaXMuaGlkZVBvcG92ZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gUG9wb3ZlclNlcnZpY2UuaGlkZVBvcG92ZXIoZ2V0UG9wb3Zlck9wdGlvbnModW53cmFwcGVkRWwpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5yZWdpc3RlckV2ZW50TGlzdGVuZXJzID0gdGhpcy5yZWdpc3RlckV2ZW50TGlzdGVuZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy51bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMgPSB0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoZ2V0UG9wb3Zlck9wdGlvbnModW53cmFwcGVkRWwpKTtcbiAgfVxuXG4gICRvbkRlc3Ryb3koKSB7XG4gICAgdGhpcy51bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMoY29uZmlnKSB7XG4gICAgY29uc3Qge1xuICAgICAgZWxlbWVudDogeyBub2RlIH0sXG4gICAgICBwb3BvdmVyOiB7XG4gICAgICAgIG9wdGlvbnM6IHsgdHJpZ2dlciB9XG4gICAgICB9XG4gICAgfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmlnZ2VyID09PSAnaG92ZXInKSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuc2hvd1BvcG92ZXIpO1xuICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHRoaXMuaGlkZVBvcG92ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zaG93UG9wb3Zlcik7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRyaWdnZXIgPT09ICdob3ZlcicpIHtcbiAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCB0aGlzLnNob3dQb3BvdmVyKTtcbiAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHRoaXMuaGlkZVBvcG92ZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2hvd1BvcG92ZXIpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UG9wb3Zlck9wdGlvbnMoZWxlbWVudCkge1xuICBjb25zdCBjb25maWcgPSB7XG4gICAgY29udGVudDoge1xuICAgICAgdGl0bGU6ICcnLFxuICAgICAgY29udGVudDogJydcbiAgICB9LFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICAgIHRyaWdnZXI6ICdjbGljaydcbiAgICB9LFxuICAgIGN1c3RvbU9wdGlvbnM6IHtcbiAgICAgIHNwYWNpbmc6IDBcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBbJ3RpdGxlJywgJ2NvbnRlbnQnLCAnaW1hZ2UnXTtcbiAgY29uc3Qgb3B0aW9uQXR0cmlidXRlcyA9IFsndHJpZ2dlcicsICd0ZW1wbGF0ZScsICdjb250YWluZXInLCAncGxhY2VtZW50J107XG5cbiAgZGF0YUF0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cikgPT4ge1xuICAgIGlmIChlbGVtZW50LmRhdGFzZXRbYXR0cl0pIHtcbiAgICAgIGNvbmZpZy5jb250ZW50W2F0dHJdID0gZWxlbWVudC5kYXRhc2V0W2F0dHJdO1xuICAgIH1cbiAgfSk7XG5cbiAgb3B0aW9uQXR0cmlidXRlcy5mb3JFYWNoKChhdHRyKSA9PiB7XG4gICAgaWYgKGVsZW1lbnQuZGF0YXNldFthdHRyXSkge1xuICAgICAgY29uZmlnLm9wdGlvbnNbYXR0cl0gPSBlbGVtZW50LmRhdGFzZXRbYXR0cl07XG4gICAgfVxuICB9KTtcblxuICBpZiAoZWxlbWVudC5kYXRhc2V0Lm9yaWdpbmFsVGl0bGUpIHtcbiAgICBjb25maWcuY29udGVudC50aXRsZSA9IGVsZW1lbnQuZGF0YXNldC5vcmlnaW5hbFRpdGxlO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQuZGF0YXNldC5jb250ZW50SHRtbCkge1xuICAgIGNvbmZpZy5vcHRpb25zLmNvbnRlbnRIdG1sID0gZWxlbWVudC5kYXRhc2V0LmNvbnRlbnRIdG1sID09PSAndHJ1ZSc7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVsZW1lbnQ6IHtcbiAgICAgIG5vZGU6IGVsZW1lbnRcbiAgICB9LFxuICAgIHBvcG92ZXI6IGNvbmZpZ1xuICB9O1xufVxuXG5Qb3BPdmVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCcsICd0d1BvcE92ZXJTZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IFBvcE92ZXJDb250cm9sbGVyO1xuIiwiY2xhc3MgUG9wT3ZlclNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcigkcm9vdFNjb3BlKSB7XG4gICAgdGhpcy5wb3BvdmVyID0gbnVsbDtcbiAgICB0aGlzLiRyb290U2NvcGUgPSAkcm9vdFNjb3BlO1xuXG4gICAgdGhpcy5kb2N1bWVudENhbGxiYWNrID0gdGhpcy5kb2N1bWVudENhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZXNpemVDYWxsYmFjayA9IHRoaXMucmVzaXplQ2FsbGJhY2suYmluZCh0aGlzKTtcblxuICAgIHRoaXMucmVnaXN0ZXJHbG9iYWxFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgc2hvd1BvcG92ZXIoY29uZmlnKSB7XG4gICAgLyoqXG4gICAgICogQ2FjaGUgdGhlIHBhc3NlZCBjb25maWcgaW4gb3JkZXIgdG8gYWNjZXNzIHRoZSBjb25maWd1cmF0aW9uXG4gICAgICogZnJvbSB0aGUgZG9jdW1lbnQgcmVzaXplIGFuZCBjbGljayBoYW5kbGVyc1xuICAgICAqL1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgY29uc3QgcGFyZW50ID0gZ2V0UG9wb3ZlclBhcmVudChjb25maWcpO1xuXG4gICAgaWYgKCFwYXJlbnQuY29udGFpbnModGhpcy5wb3BvdmVyKSkge1xuICAgICAgY29uc3QgZXhpc3RpbmdQb3BvdmVyID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLXNlcnZpY2UnKTtcblxuICAgICAgaWYgKGV4aXN0aW5nUG9wb3Zlcikge1xuICAgICAgICB0aGlzLnBvcG92ZXIgPSBleGlzdGluZ1BvcG92ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBvcG92ZXIgPSBnZXRQb3BvdmVyRWxlbWVudChjb25maWcpO1xuICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5wb3BvdmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVQb3BvdmVyQ29udGVudChjb25maWcsIHRoaXMucG9wb3Zlcik7XG4gICAgaGFuZGxlUG9wb3Zlck9wdGlvbnMoY29uZmlnLCB0aGlzLnBvcG92ZXIpO1xuXG4gICAgdGhpcy5wb3BvdmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3NjYWxlLWRvd24nKTtcblxuICAgIHJldHVybiB0aGlzLnBvcG92ZXI7XG4gIH1cblxuICBoaWRlUG9wb3Zlcihjb25maWcpIHtcbiAgICBjb25zdCB7XG4gICAgICBwb3BvdmVyXG4gICAgfSA9IHRoaXM7XG5cbiAgICBjb25zdCBwb3BvdmVySXNWaXNpYmxlID0gcG9wb3ZlciAmJiAhcG9wb3Zlci5jbGFzc0xpc3QuY29udGFpbnMoJ3NjYWxlLWRvd24nKTtcblxuICAgIGlmIChwb3BvdmVySXNWaXNpYmxlKSB7XG4gICAgICB0ZWFyZG93blBvcG92ZXJPcHRpb25zKGNvbmZpZywgcG9wb3Zlcik7XG5cbiAgICAgIHBvcG92ZXIuY2xhc3NMaXN0LmFkZCgnc2NhbGUtZG93bicpO1xuXG4gICAgICB0aGlzLiRyb290U2NvcGUuJGVtaXQoJ3Byb21vdGlvbjpjbG9zZScsIGNvbmZpZy5wb3BvdmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wb3BvdmVyO1xuICB9XG5cbiAgZG9jdW1lbnRDYWxsYmFjayhldmVudCkge1xuICAgIGNvbnN0IHsgcG9wb3ZlciwgY29uZmlnIH0gPSB0aGlzO1xuXG4gICAgaWYgKHBvcG92ZXIpIHtcbiAgICAgIGNvbnN0IGNsaWNrZWRPdXRzaWRlUG9wb3ZlciA9ICFwb3BvdmVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgICBjb25zdCBjbGlja2VkSW5zaWRlUG9wb3ZlciA9IHBvcG92ZXIuY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcblxuICAgICAgY29uc3QgY2xpY2tlZFBvcG92ZXJDbG9zZSA9IGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcG92ZXItY2xvc2UnKTtcbiAgICAgIGNvbnN0IGNsaWNrZWRNb2RhbE92ZXJsYXkgPSBldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3BvdmVyLW1vZGFsLWNvdmVyJyk7XG4gICAgICBjb25zdCBwb3BvdmVySXNWaXNpYmxlID0gIXBvcG92ZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzY2FsZS1kb3duJyk7XG5cbiAgICAgIGNvbnN0IGNsb3NlTW9kYWxDb25kaXRpb24gPSBwb3BvdmVySXNWaXNpYmxlXG4gICAgICAgICYmIChjbGlja2VkT3V0c2lkZVBvcG92ZXIgfHwgY2xpY2tlZE1vZGFsT3ZlcmxheVxuICAgICAgICAgIHx8IChjbGlja2VkSW5zaWRlUG9wb3ZlciAmJiBjbGlja2VkUG9wb3ZlckNsb3NlKSk7XG5cbiAgICAgIGlmIChjbG9zZU1vZGFsQ29uZGl0aW9uKSB7XG4gICAgICAgIHRoaXMuaGlkZVBvcG92ZXIoY29uZmlnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXNpemVDYWxsYmFjaygpIHtcbiAgICBjb25zdCB7IGNvbmZpZywgcG9wb3ZlciB9ID0gdGhpcztcblxuICAgIGNvbnN0IHBvcG92ZXJJc1Zpc2libGUgPSBwb3BvdmVyICYmICFwb3BvdmVyLmNsYXNzTGlzdC5jb250YWlucygnc2NhbGUtZG93bicpO1xuXG4gICAgaWYgKHBvcG92ZXJJc1Zpc2libGUpIHtcbiAgICAgIGhhbmRsZVBvcG92ZXJPcHRpb25zKGNvbmZpZywgcG9wb3Zlcik7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJHbG9iYWxFdmVudExpc3RlbmVycygpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRvY3VtZW50Q2FsbGJhY2ssIHRydWUpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlc2l6ZUNhbGxiYWNrKTtcbiAgfVxuXG4gIHVucmVnaXN0ZXJHbG9iYWxFdmVudExpc3RlbmVycygpIHtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmRvY3VtZW50Q2FsbGJhY2ssIHRydWUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlc2l6ZUNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQb3BvdmVyRWxlbWVudChjb25maWcpIHtcbiAgY29uc3Qge1xuICAgIHBvcG92ZXI6IHtcbiAgICAgIG9wdGlvbnM6IHsgcGxhY2VtZW50IH1cbiAgICB9XG4gIH0gPSBjb25maWc7XG5cbiAgY29uc3QgcG9wb3ZlclRlbXBsYXRlID0gZ2V0UG9wb3ZlclRlbXBsYXRlKGNvbmZpZyk7XG4gIGNvbnN0IHBvcG92ZXJFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KHBvcG92ZXJUZW1wbGF0ZSlbMF07XG5cbiAgY29uc3QgaXNQb3BvdmVyTW9kYWwgPSBnZXRNb2RhbENvbmRpdGlvbihjb25maWcpO1xuICBjb25zdCBjc3NDbGFzc2VzID0gWydwb3BvdmVyJywgJ2luJywgcGxhY2VtZW50LCAnc2NhbGUtZG93bicsICdwb3BvdmVyLXNlcnZpY2UnXTtcblxuICBpZiAoaXNQb3BvdmVyTW9kYWwpIHtcbiAgICBjc3NDbGFzc2VzLnB1c2goJ3BvcG92ZXItbW9kYWwnKTtcbiAgfSBlbHNlIHtcbiAgICBjc3NDbGFzc2VzLnB1c2goJ2FuaW1hdGUnKTtcbiAgfVxuXG4gIHBvcG92ZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4uY3NzQ2xhc3Nlcyk7XG4gIHBvcG92ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdwb3BvdmVyJyk7XG5cbiAgcmV0dXJuIHBvcG92ZXJFbGVtZW50O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVQb3BvdmVyQ29udGVudChjb25maWcsIHBvcG92ZXIpIHtcbiAgY29uc3Qge1xuICAgIHBvcG92ZXI6IHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBvcHRpb25zOiB7IGNvbnRlbnRIdG1sIH1cbiAgICB9XG4gIH0gPSBjb25maWc7XG5cbiAgWyd0aXRsZScsICdjb250ZW50J10uZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICBjb25zdCBlbGVtZW50ID0gcG9wb3Zlci5xdWVyeVNlbGVjdG9yKGAucG9wb3Zlci0ke3Byb3BlcnR5fWApO1xuXG4gICAgZWxlbWVudC50ZXh0Q29udGVudCA9ICcnO1xuXG4gICAgaWYgKGNvbnRlbnRIdG1sKSB7XG4gICAgICBlbGVtZW50Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgY29udGVudFtwcm9wZXJ0eV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50Lmluc2VydEFkamFjZW50VGV4dCgnYmVmb3JlZW5kJywgY29udGVudFtwcm9wZXJ0eV0pO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgaW1hZ2VFbGVtZW50ID0gcG9wb3Zlci5xdWVyeVNlbGVjdG9yKCcucG9wb3Zlci1pbWFnZScpO1xuICBjb25zdCBpbWFnZVVybCA9IGNvbnRlbnQuaW1hZ2U7XG5cbiAgaWYgKGltYWdlRWxlbWVudCAmJiBpbWFnZVVybCkge1xuICAgIGltYWdlRWxlbWVudC5zcmMgPSBpbWFnZVVybDtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVQb3BvdmVyT3B0aW9ucyhjb25maWcsIHBvcG92ZXIpIHtcbiAgY29uc3Qge1xuICAgIGVsZW1lbnQ6IHsgbm9kZSB9LFxuICAgIHBvcG92ZXI6IHtcbiAgICAgIGN1c3RvbU9wdGlvbnM6IHsgaGlnaGxpZ2h0RWxlbWVudCwgZml4ZWRQb3NpdGlvbiB9XG4gICAgfVxuICB9ID0gY29uZmlnO1xuXG4gIGNvbnN0IHBvcG92ZXJTaG91bGRCZU1vZGFsID0gZ2V0TW9kYWxDb25kaXRpb24oY29uZmlnKTtcblxuICBpZiAocG9wb3ZlclNob3VsZEJlTW9kYWwpIHtcbiAgICBpZiAocG9wb3Zlci5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1hdGUnKSkge1xuICAgICAgcG9wb3Zlci5jbGFzc0xpc3QucmVtb3ZlKCdhbmltYXRlJyk7XG4gICAgfVxuXG4gICAgaWYgKCFwb3BvdmVyLmNsYXNzTGlzdC5jb250YWlucygncG9wb3Zlci1tb2RhbCcpKSB7XG4gICAgICBwb3BvdmVyLmNsYXNzTGlzdC5hZGQoJ3BvcG92ZXItbW9kYWwnKTtcbiAgICB9XG5cbiAgICBhZGRQb3BvdmVyT3ZlcmxheShjb25maWcsIHBvcG92ZXIpO1xuICB9IGVsc2Uge1xuICAgIGlmICghcG9wb3Zlci5jbGFzc0xpc3QuY29udGFpbnMoJ2FuaW1hdGUnKSkge1xuICAgICAgcG9wb3Zlci5jbGFzc0xpc3QuYWRkKCdhbmltYXRlJyk7XG4gICAgfVxuXG4gICAgaWYgKHBvcG92ZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdwb3BvdmVyLW1vZGFsJykpIHtcbiAgICAgIHBvcG92ZXIuY2xhc3NMaXN0LnJlbW92ZSgncG9wb3Zlci1tb2RhbCcpO1xuICAgIH1cblxuICAgIHJlbW92ZVBvcG92ZXJPdmVybGF5KGNvbmZpZywgcG9wb3Zlcik7XG4gICAgc2V0UG9wb3ZlclBvc2l0aW9uKHBvcG92ZXIsIGNvbmZpZyk7XG4gIH1cblxuICBpZiAoaGlnaGxpZ2h0RWxlbWVudCkge1xuICAgIG5vZGUuY2xhc3NMaXN0LmFkZCgncHJvbW90ZWQnKTtcbiAgfVxuXG4gIGlmIChmaXhlZFBvc2l0aW9uKSB7XG4gICAgcG9wb3Zlci5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVhcmRvd25Qb3BvdmVyT3B0aW9ucyhjb25maWcsIHBvcG92ZXIpIHtcbiAgY29uc3Qge1xuICAgIGVsZW1lbnQ6IHsgbm9kZSB9LFxuICAgIHBvcG92ZXI6IHtcbiAgICAgIGN1c3RvbU9wdGlvbnM6IHsgaGlnaGxpZ2h0RWxlbWVudCB9XG4gICAgfVxuICB9ID0gY29uZmlnO1xuXG4gIGNvbnN0IHBvcG92ZXJJc01vZGFsID0gZ2V0TW9kYWxDb25kaXRpb24oY29uZmlnKTtcblxuICBpZiAocG9wb3ZlcklzTW9kYWwpIHtcbiAgICByZW1vdmVQb3BvdmVyT3ZlcmxheShjb25maWcsIHBvcG92ZXIpO1xuICB9XG5cbiAgaWYgKGhpZ2hsaWdodEVsZW1lbnQpIHtcbiAgICBub2RlLmNsYXNzTGlzdC5yZW1vdmUoJ3Byb21vdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UG9wb3ZlclBhcmVudChjb25maWcpIHtcbiAgY29uc3Qge1xuICAgIGVsZW1lbnQ6IHsgbm9kZSB9LFxuICAgIHBvcG92ZXI6IHtcbiAgICAgIG9wdGlvbnM6IHsgY29udGFpbmVyIH1cbiAgICB9XG4gIH0gPSBjb25maWc7XG5cbiAgaWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZHknKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb250YWluZXIgPT09ICdzdHJpbmcnICYmIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKSkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gIH1cblxuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlO1xufVxuXG5mdW5jdGlvbiBnZXRQb3BvdmVyVGVtcGxhdGUoY29uZmlnKSB7XG4gIGNvbnN0IHtcbiAgICBwb3BvdmVyOiB7XG4gICAgICBvcHRpb25zOiB7IHRlbXBsYXRlIH1cbiAgICB9XG4gIH0gPSBjb25maWc7XG5cbiAgY29uc3QgREVGQVVMVF9URU1QTEFURSA9IGA8ZGl2IGNsYXNzPSdwb3BvdmVyJz5cbiAgICAgIDxoMyBjbGFzcz0ncG9wb3Zlci10aXRsZSc+PC9oMz5cbiAgICAgIDxkaXYgY2xhc3M9J3BvcG92ZXItY29udGVudCc+PC9kaXY+XG4gICAgPC9kaXY+YDtcblxuICByZXR1cm4gdGVtcGxhdGUgfHwgREVGQVVMVF9URU1QTEFURTtcbn1cblxuZnVuY3Rpb24gc2V0UG9wb3ZlclBvc2l0aW9uKHBvcG92ZXIsIGNvbmZpZykge1xuICBjb25zdCBwbGFjZW1lbnRzID0gW1xuICAgICd0b3AnLFxuICAgICdyaWdodCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2xlZnQnLFxuXG4gICAgJ3RvcC1sZWZ0JyxcbiAgICAndG9wLXJpZ2h0JyxcblxuICAgICdyaWdodC10b3AnLFxuICAgICdyaWdodC1ib3R0b20nLFxuXG4gICAgJ2JvdHRvbS1sZWZ0JyxcbiAgICAnYm90dG9tLXJpZ2h0JyxcblxuICAgICdsZWZ0LXRvcCcsXG4gICAgJ2xlZnQtYm90dG9tJ1xuICBdO1xuXG4gIHBvcG92ZXIuY2xhc3NMaXN0LnJlbW92ZSguLi5wbGFjZW1lbnRzKTtcblxuICBjb25zdCBwbGFjZW1lbnQgPSBjaGVja1BvcG92ZXJQbGFjZW1lbnQocG9wb3ZlciwgY29uZmlnKTtcblxuICBwb3BvdmVyLmNsYXNzTGlzdC5hZGQocGxhY2VtZW50KTtcblxuICBwb3BvdmVyLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblxuICBjb25zdCB7IG9mZnNldFgsIG9mZnNldFkgfSA9IGdldFBvcG92ZXJDb29yZGluYXRlcyhwb3BvdmVyLCBjb25maWcsIHBsYWNlbWVudCk7XG5cbiAgcG9wb3Zlci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICBwb3BvdmVyLnN0eWxlLnRvcCA9IGAke29mZnNldFl9cHhgO1xuICBwb3BvdmVyLnN0eWxlLmxlZnQgPSBgJHtvZmZzZXRYfXB4YDtcbn1cblxuZnVuY3Rpb24gY2hlY2tQb3BvdmVyUGxhY2VtZW50KHBvcG92ZXIsIGNvbmZpZykge1xuICBjb25zdCB7XG4gICAgZWxlbWVudDoge1xuICAgICAgbm9kZVxuICAgIH0sXG4gICAgcG9wb3Zlcjoge1xuICAgICAgY3VzdG9tT3B0aW9uczogeyBzcGFjaW5nIH1cbiAgICB9XG4gIH0gPSBjb25maWc7XG5cbiAgbGV0IHtcbiAgICBwb3BvdmVyOiB7XG4gICAgICBvcHRpb25zOiB7IHBsYWNlbWVudCB9XG4gICAgfVxuICB9ID0gY29uZmlnO1xuXG4gIGNvbnN0IGVsZW1lbnRPZmZzZXQgPSBnZXRCb3VuZGluZ09mZnNldChub2RlKTtcbiAgY29uc3Qgdmlld3BvcnRDbGllbnREaW1lbnNpb25zID0gZ2V0Q2xpZW50RGltZW5zaW9ucyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuICBjb25zdCBlbGVtZW50T2Zmc2V0RGltZW5zaW9ucyA9IGdldE9mZnNldERpbWVuc2lvbnMobm9kZSk7XG4gIGNvbnN0IHBvcG92ZXJPZmZzZXREaW1lbnNpb25zID0gZ2V0T2Zmc2V0RGltZW5zaW9ucyhwb3BvdmVyKTtcblxuICBjb25zdCBwb3BvdmVyT2Zmc2V0V2lkdGggPSBlbGVtZW50T2Zmc2V0Lm9mZnNldFhcbiAgICArIGVsZW1lbnRPZmZzZXREaW1lbnNpb25zLm9mZnNldFdpZHRoICsgc3BhY2luZ1xuICAgICsgcG9wb3Zlck9mZnNldERpbWVuc2lvbnMub2Zmc2V0V2lkdGg7XG4gIGNvbnN0IHBvcG92ZXJMZWZ0T2Zmc2V0ID0gZWxlbWVudE9mZnNldC5vZmZzZXRYXG4gICAgLSAocG9wb3Zlck9mZnNldERpbWVuc2lvbnMub2Zmc2V0V2lkdGggKyBzcGFjaW5nKTtcblxuICBjb25zdCBvdmVyZmxvd3NSaWdodCA9IHBvcG92ZXJPZmZzZXRXaWR0aCA+IHZpZXdwb3J0Q2xpZW50RGltZW5zaW9ucy5jbGllbnRXaWR0aDtcbiAgY29uc3Qgb3ZlcmZsb3dzTGVmdCA9IHBvcG92ZXJMZWZ0T2Zmc2V0IDwgMDtcblxuICBpZiAob3ZlcmZsb3dzUmlnaHQgJiYgb3ZlcmZsb3dzTGVmdCkge1xuICAgIHBsYWNlbWVudCA9ICdib3R0b20nO1xuICB9XG5cbiAgaWYgKHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCkge1xuICAgIHBsYWNlbWVudCA9ICdsZWZ0JztcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdyaWdodC10b3AnICYmIG92ZXJmbG93c1JpZ2h0KSB7XG4gICAgcGxhY2VtZW50ID0gJ2xlZnQtdG9wJztcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdyaWdodC1ib3R0b20nICYmIG92ZXJmbG93c1JpZ2h0KSB7XG4gICAgcGxhY2VtZW50ID0gJ2xlZnQtYm90dG9tJztcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0KSB7XG4gICAgcGxhY2VtZW50ID0gJ3JpZ2h0JztcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdsZWZ0LXRvcCcgJiYgb3ZlcmZsb3dzTGVmdCkge1xuICAgIHBsYWNlbWVudCA9ICdyaWdodC10b3AnO1xuICB9XG5cbiAgaWYgKHBsYWNlbWVudCA9PT0gJ2xlZnQtYm90dG9tJyAmJiBvdmVyZmxvd3NMZWZ0KSB7XG4gICAgcGxhY2VtZW50ID0gJ3JpZ2h0LWJvdHRvbSc7XG4gIH1cblxuICByZXR1cm4gcGxhY2VtZW50O1xufVxuXG5mdW5jdGlvbiBnZXRQb3BvdmVyQ29vcmRpbmF0ZXMocG9wb3ZlciwgY29uZmlnLCBwbGFjZW1lbnQpIHtcbiAgY29uc3QgcGFyZW50ID0gZ2V0UG9wb3ZlclBhcmVudChjb25maWcpO1xuXG4gIGNvbnN0IHtcbiAgICBlbGVtZW50OiB7XG4gICAgICBub2RlXG4gICAgfSxcbiAgICBwb3BvdmVyOiB7XG4gICAgICBjdXN0b21PcHRpb25zOiB7IHNwYWNpbmcgfVxuICAgIH1cbiAgfSA9IGNvbmZpZztcblxuICBjb25zdCBjb29yZGluYXRlQ29tcHV0ZUZ1bmN0aW9uID0gcGFyZW50ID09PSBkb2N1bWVudC5ib2R5ID8gZ2V0Qm91bmRpbmdPZmZzZXQgOiBnZXRQYXJlbnRPZmZzZXQ7XG5cbiAgY29uc3QgZWxlbWVudE9mZnNldCA9IGNvb3JkaW5hdGVDb21wdXRlRnVuY3Rpb24obm9kZSk7XG4gIGNvbnN0IGVsZW1lbnRPZmZzZXREaW1lbnNpb25zID0gZ2V0T2Zmc2V0RGltZW5zaW9ucyhub2RlKTtcblxuICBsZXQgcG9wb3Zlck9mZnNldHMgPSB7XG4gICAgb2Zmc2V0WDogMCxcbiAgICBvZmZzZXRZOiAwLFxuICB9O1xuXG4gIGNvbnN0IHBvcG92ZXJPZmZzZXREaW1lbnNpb25zID0gZ2V0T2Zmc2V0RGltZW5zaW9ucyhwb3BvdmVyKTtcblxuICBjb25zdCBwb3BvdmVyQXJyb3dTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHBvcG92ZXIsICc6YmVmb3JlJyk7XG5cbiAgY29uc3QgcG9wb3ZlckFycm93VG9wT2Zmc2V0ID0gZ2V0TnVtZXJpY1ZhbHVlKCd0b3AnLCBwb3BvdmVyQXJyb3dTdHlsZXMpO1xuICBjb25zdCBwb3BvdmVyQXJyb3dIZWlnaHQgPSBnZXROdW1lcmljVmFsdWUoJ2hlaWdodCcsIHBvcG92ZXJBcnJvd1N0eWxlcyk7XG4gIGNvbnN0IHBvcG92ZXJBcnJvd0xlZnRPZmZzZXQgPSBnZXROdW1lcmljVmFsdWUoJ2xlZnQnLCBwb3BvdmVyQXJyb3dTdHlsZXMpO1xuICBjb25zdCBwb3BvdmVyQXJyb3dSaWdodE9mZnNldCA9IGdldE51bWVyaWNWYWx1ZSgncmlnaHQnLCBwb3BvdmVyQXJyb3dTdHlsZXMpO1xuICBjb25zdCBwb3BvdmVyQXJyb3dNYXJnaW5Ub3AgPSBnZXROdW1lcmljVmFsdWUoJ21hcmdpbi10b3AnLCBwb3BvdmVyQXJyb3dTdHlsZXMpO1xuXG4gIGlmIChwbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgY29uc3QgcG9wb3Zlck9mZnNldFggPSAoZWxlbWVudE9mZnNldC5vZmZzZXRYXG4gICAgICAtIChwb3BvdmVyT2Zmc2V0RGltZW5zaW9ucy5vZmZzZXRXaWR0aCAvIDIpKVxuICAgICAgKyAoZWxlbWVudE9mZnNldERpbWVuc2lvbnMub2Zmc2V0V2lkdGggLyAyKTtcbiAgICBjb25zdCBwb3BvdmVyT2Zmc2V0WSA9IGVsZW1lbnRPZmZzZXQub2Zmc2V0WVxuICAgICAgLSBwb3BvdmVyT2Zmc2V0RGltZW5zaW9ucy5vZmZzZXRIZWlnaHQgLSBzcGFjaW5nO1xuXG4gICAgcG9wb3Zlck9mZnNldHMgPSB7XG4gICAgICBvZmZzZXRYOiBwb3BvdmVyT2Zmc2V0WCxcbiAgICAgIG9mZnNldFk6IHBvcG92ZXJPZmZzZXRZLFxuICAgIH07XG4gIH1cblxuICBpZiAocGxhY2VtZW50ID09PSAndG9wLXJpZ2h0Jykge1xuICAgIGNvbnN0IHBvcG92ZXJPZmZzZXRYID0gKChlbGVtZW50T2Zmc2V0Lm9mZnNldFhcbiAgICAgICsgKGVsZW1lbnRPZmZzZXREaW1lbnNpb25zLm9mZnNldFdpZHRoIC8gMikpXG4gICAgICAtIHBvcG92ZXJBcnJvd0xlZnRPZmZzZXRcbiAgICApO1xuICAgIGNvbnN0IHBvcG92ZXJPZmZzZXRZID0gZWxlbWVudE9mZnNldC5vZmZzZXRZXG4gICAgICAtIHBvcG92ZXJPZmZzZXREaW1lbnNpb25zLm9mZnNldEhlaWdodCAtIHNwYWNpbmc7XG5cbiAgICBwb3BvdmVyT2Zmc2V0cyA9IHtcbiAgICAgIG9mZnNldFg6IHBvcG92ZXJPZmZzZXRYLFxuICAgICAgb2Zmc2V0WTogcG9wb3Zlck9mZnNldFksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgPT09ICd0b3AtbGVmdCcpIHtcbiAgICBjb25zdCBwb3BvdmVyT2Zmc2V0WCA9ICgoZWxlbWVudE9mZnNldC5vZmZzZXRYXG4gICAgICAtIHBvcG92ZXJPZmZzZXREaW1lbnNpb25zLm9mZnNldFdpZHRoKVxuICAgICAgKyAoKGVsZW1lbnRPZmZzZXREaW1lbnNpb25zLm9mZnNldFdpZHRoIC8gMilcbiAgICAgICsgcG9wb3ZlckFycm93UmlnaHRPZmZzZXQpXG4gICAgKTtcbiAgICBjb25zdCBwb3BvdmVyT2Zmc2V0WSA9IGVsZW1lbnRPZmZzZXQub2Zmc2V0WVxuICAgICAgLSBwb3BvdmVyT2Zmc2V0RGltZW5zaW9ucy5vZmZzZXRIZWlnaHQgLSBzcGFjaW5nO1xuXG4gICAgcG9wb3Zlck9mZnNldHMgPSB7XG4gICAgICBvZmZzZXRYOiBwb3BvdmVyT2Zmc2V0WCxcbiAgICAgIG9mZnNldFk6IHBvcG92ZXJPZmZzZXRZLFxuICAgIH07XG4gIH1cblxuICBpZiAocGxhY2VtZW50ID09PSAncmlnaHQtdG9wJyB8fCBwbGFjZW1lbnQgPT09ICdyaWdodCcgfHwgcGxhY2VtZW50ID09PSAncmlnaHQtYm90dG9tJykge1xuICAgIGNvbnN0IHBvcG92ZXJPZmZzZXRYID0gZWxlbWVudE9mZnNldC5vZmZzZXRYXG4gICAgICArIGVsZW1lbnRPZmZzZXREaW1lbnNpb25zLm9mZnNldFdpZHRoICsgc3BhY2luZztcbiAgICBjb25zdCBwb3BvdmVyT2Zmc2V0WSA9IChlbGVtZW50T2Zmc2V0Lm9mZnNldFlcbiAgICAgIC0gKHBvcG92ZXJBcnJvd1RvcE9mZnNldCArIHBvcG92ZXJBcnJvd01hcmdpblRvcFxuICAgICAgICArIChwb3BvdmVyQXJyb3dIZWlnaHQgLyAyKSkpXG4gICAgICArIChlbGVtZW50T2Zmc2V0RGltZW5zaW9ucy5vZmZzZXRIZWlnaHQgLyAyKTtcblxuICAgIHBvcG92ZXJPZmZzZXRzID0ge1xuICAgICAgb2Zmc2V0WDogcG9wb3Zlck9mZnNldFgsXG4gICAgICBvZmZzZXRZOiBwb3BvdmVyT2Zmc2V0WSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBjb25zdCBwb3BvdmVyT2Zmc2V0WCA9IChlbGVtZW50T2Zmc2V0Lm9mZnNldFhcbiAgICAgIC0gKHBvcG92ZXJPZmZzZXREaW1lbnNpb25zLm9mZnNldFdpZHRoIC8gMikpXG4gICAgICArIChlbGVtZW50T2Zmc2V0RGltZW5zaW9ucy5vZmZzZXRXaWR0aCAvIDIpO1xuICAgIGNvbnN0IHBvcG92ZXJPZmZzZXRZID0gZWxlbWVudE9mZnNldC5vZmZzZXRZXG4gICAgICArIGVsZW1lbnRPZmZzZXREaW1lbnNpb25zLm9mZnNldEhlaWdodCArIHNwYWNpbmc7XG5cbiAgICBwb3BvdmVyT2Zmc2V0cyA9IHtcbiAgICAgIG9mZnNldFg6IHBvcG92ZXJPZmZzZXRYLFxuICAgICAgb2Zmc2V0WTogcG9wb3Zlck9mZnNldFksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdib3R0b20tcmlnaHQnKSB7XG4gICAgY29uc3QgcG9wb3Zlck9mZnNldFggPSAoKGVsZW1lbnRPZmZzZXQub2Zmc2V0WFxuICAgICAgKyAoZWxlbWVudE9mZnNldERpbWVuc2lvbnMub2Zmc2V0V2lkdGggLyAyKSlcbiAgICAgIC0gcG9wb3ZlckFycm93TGVmdE9mZnNldFxuICAgICk7XG4gICAgY29uc3QgcG9wb3Zlck9mZnNldFkgPSBlbGVtZW50T2Zmc2V0Lm9mZnNldFlcbiAgICAgICsgZWxlbWVudE9mZnNldERpbWVuc2lvbnMub2Zmc2V0SGVpZ2h0ICsgc3BhY2luZztcblxuICAgIHBvcG92ZXJPZmZzZXRzID0ge1xuICAgICAgb2Zmc2V0WDogcG9wb3Zlck9mZnNldFgsXG4gICAgICBvZmZzZXRZOiBwb3BvdmVyT2Zmc2V0WSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbS1sZWZ0Jykge1xuICAgIGNvbnN0IHBvcG92ZXJPZmZzZXRYID0gKChlbGVtZW50T2Zmc2V0Lm9mZnNldFhcbiAgICAgIC0gcG9wb3Zlck9mZnNldERpbWVuc2lvbnMub2Zmc2V0V2lkdGgpXG4gICAgICArICgoZWxlbWVudE9mZnNldERpbWVuc2lvbnMub2Zmc2V0V2lkdGggLyAyKVxuICAgICAgKyBwb3BvdmVyQXJyb3dSaWdodE9mZnNldClcbiAgICApO1xuICAgIGNvbnN0IHBvcG92ZXJPZmZzZXRZID0gZWxlbWVudE9mZnNldC5vZmZzZXRZXG4gICAgICArIGVsZW1lbnRPZmZzZXREaW1lbnNpb25zLm9mZnNldEhlaWdodCArIHNwYWNpbmc7XG5cbiAgICBwb3BvdmVyT2Zmc2V0cyA9IHtcbiAgICAgIG9mZnNldFg6IHBvcG92ZXJPZmZzZXRYLFxuICAgICAgb2Zmc2V0WTogcG9wb3Zlck9mZnNldFksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChwbGFjZW1lbnQgPT09ICdsZWZ0LXRvcCcgfHwgcGxhY2VtZW50ID09PSAnbGVmdCcgfHwgcGxhY2VtZW50ID09PSAnbGVmdC1ib3R0b20nKSB7XG4gICAgY29uc3QgcG9wb3Zlck9mZnNldFggPSBlbGVtZW50T2Zmc2V0Lm9mZnNldFhcbiAgICAgIC0gcG9wb3Zlck9mZnNldERpbWVuc2lvbnMub2Zmc2V0V2lkdGggLSBzcGFjaW5nO1xuICAgIGNvbnN0IHBvcG92ZXJPZmZzZXRZID0gKGVsZW1lbnRPZmZzZXQub2Zmc2V0WVxuICAgICAgLSAocG9wb3ZlckFycm93VG9wT2Zmc2V0ICsgcG9wb3ZlckFycm93TWFyZ2luVG9wXG4gICAgICAgICsgKHBvcG92ZXJBcnJvd0hlaWdodCAvIDIpKSlcbiAgICAgICsgKGVsZW1lbnRPZmZzZXREaW1lbnNpb25zLm9mZnNldEhlaWdodCAvIDIpO1xuXG4gICAgcG9wb3Zlck9mZnNldHMgPSB7XG4gICAgICBvZmZzZXRYOiBwb3BvdmVyT2Zmc2V0WCxcbiAgICAgIG9mZnNldFk6IHBvcG92ZXJPZmZzZXRZLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gcG9wb3Zlck9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldE1vZGFsQ29uZGl0aW9uKGNvbmZpZykge1xuICBjb25zdCB7XG4gICAgcG9wb3Zlcjoge1xuICAgICAgY3VzdG9tT3B0aW9uczogeyBtb2RhbFRyYW5zZm9ybSB9XG4gICAgfVxuICB9ID0gY29uZmlnO1xuXG4gIGNvbnN0IHZpZXdwb3J0Q2xpZW50RGltZW5zaW9ucyA9IGdldENsaWVudERpbWVuc2lvbnMoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcblxuICByZXR1cm4gbW9kYWxUcmFuc2Zvcm0gJiYgdmlld3BvcnRDbGllbnREaW1lbnNpb25zLmNsaWVudFdpZHRoIDw9IDk5MTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUG9wb3Zlck92ZXJsYXkoKSB7XG4gIGNvbnN0IG92ZXJsYXlOb2RlID0gZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKCcucG9wb3Zlci1tb2RhbC1jb3ZlcicpO1xuXG4gIGlmIChvdmVybGF5Tm9kZSkge1xuICAgIG92ZXJsYXlOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3ZlcmxheU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFBvcG92ZXJPdmVybGF5KGNvbmZpZywgcG9wb3Zlcikge1xuICBjb25zdCBvdmVybGF5Tm9kZSA9IGRvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvcignLnBvcG92ZXItbW9kYWwtY292ZXInKTtcblxuICBpZiAob3ZlcmxheU5vZGUgPT09IG51bGwpIHtcbiAgICBjb25zdCBwb3BvdmVyUGFyZW50ID0gZ2V0UG9wb3ZlclBhcmVudChjb25maWcpO1xuXG4gICAgY29uc3QgcG9wb3Zlck92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwb3BvdmVyT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdwb3BvdmVyLW1vZGFsLWNvdmVyJyk7XG5cbiAgICBwb3BvdmVyUGFyZW50Lmluc2VydEJlZm9yZShwb3BvdmVyT3ZlcmxheSwgcG9wb3Zlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdPZmZzZXQoZWxlbWVudCkge1xuICBjb25zdCBlbGVtZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQ7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuXG4gIHJldHVybiB7XG4gICAgb2Zmc2V0WTogZWxlbWVudFJlY3QudG9wICsgc2Nyb2xsVG9wLFxuICAgIG9mZnNldFg6IGVsZW1lbnRSZWN0LmxlZnQgKyBzY3JvbGxMZWZ0LFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRPZmZzZXQoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIG9mZnNldFk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIG9mZnNldFg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgb2Zmc2V0V2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgb2Zmc2V0SGVpZ2h0OiBlbGVtZW50Lm9mZnNldEhlaWdodCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50RGltZW5zaW9ucyhlbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgY2xpZW50V2lkdGg6IGVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgY2xpZW50SGVpZ2h0OiBlbGVtZW50LmNsaWVudEhlaWdodCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0TnVtZXJpY1ZhbHVlKHByb3BlcnR5LCBzdHlsZXMpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KSwgMTApO1xufVxuXG5Qb3BPdmVyU2VydmljZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJ107XG5cbmV4cG9ydCBkZWZhdWx0IFBvcE92ZXJTZXJ2aWNlO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgVG9vbFRpcCBmcm9tICcuL3Rvb2wtdGlwLmRpcmVjdGl2ZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5oZWxwLnRvb2x0aXAnLCBbXSlcbiAgLmRpcmVjdGl2ZSgndHdUb29sVGlwJywgVG9vbFRpcCkubmFtZTtcbiIsIlxuZnVuY3Rpb24gVG9vbFRpcCgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGxpbms6IFRvb2xUaXBMaW5rXG4gIH07XG59XG5cbmZ1bmN0aW9uIFRvb2xUaXBMaW5rKHNjb3BlLCBlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudC50b29sdGlwKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygndHdUb29sVGlwIHJlcXVpcmVzIGJvb3RzdHJhcC5qcycpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0YWcgPSBlbGVtZW50WzBdO1xuICBjb25zdCBvcHRpb25zID0ge307XG4gIGlmICghdGFnLmdldEF0dHJpYnV0ZSgnZGF0YS1wbGFjZW1lbnQnKSkge1xuICAgIG9wdGlvbnMucGxhY2VtZW50ID0gJ3RvcCc7XG4gIH1cbiAgZWxlbWVudC50b29sdGlwKG9wdGlvbnMpO1xuICB0YWcuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtdG9nZ2xlJywgJ3Rvb2x0aXAnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9vbFRpcDtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgQWZmaXggZnJvbSAnLi9hZmZpeCc7XG5pbXBvcnQgQ2FyZHMgZnJvbSAnLi9jYXJkcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXIubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmxheW91dCcsIFtcbiAgQWZmaXgsXG4gIENhcmRzXG5dKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQWZmaXggZnJvbSAnLi9hZmZpeC5kaXJlY3RpdmUuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc3R5bGluZy5hZmZpeCcsIFtdKVxuICAuZGlyZWN0aXZlKCd0d0FmZml4JywgQWZmaXgpLm5hbWU7XG4iLCJcbmZ1bmN0aW9uIFR3QWZmaXgoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBsaW5rOiBBZmZpeExpbmtcbiAgfTtcbn1cblxuZnVuY3Rpb24gQWZmaXhMaW5rKHNjb3BlLCBlbGVtZW50KSB7XG4gIGlmICghZWxlbWVudC5hZmZpeCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2coJ3R3QWZmaXggcmVxdWlyZXMgYm9vdHN0cmFwLmpzJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdGFnID0gZWxlbWVudFswXTtcbiAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICh0YWcuZ2V0QXR0cmlidXRlKCdkYXRhLW9mZnNldC10b3AnKSB8fCB0YWcuZ2V0QXR0cmlidXRlKCdkYXRhLW9mZnNldC1ib3R0b20nKSkge1xuICAgIG9wdGlvbnMub2Zmc2V0ID0ge307XG4gIH1cbiAgaWYgKHRhZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtb2Zmc2V0LXRvcCcpXG4gICAgICAmJiBOdW1iZXIodGFnLmdldEF0dHJpYnV0ZSgnZGF0YS1vZmZzZXQtdG9wJykpKSB7XG4gICAgb3B0aW9ucy5vZmZzZXQudG9wID0gTnVtYmVyKHRhZy5nZXRBdHRyaWJ1dGUoJ2RhdGEtb2Zmc2V0LXRvcCcpKTtcbiAgfVxuICBpZiAodGFnLmdldEF0dHJpYnV0ZSgnZGF0YS1vZmZzZXQtYm90dG9tJylcbiAgICAgICYmIE51bWJlcih0YWcuZ2V0QXR0cmlidXRlKCdkYXRhLW9mZnNldC1ib3R0b20nKSkpIHtcbiAgICBvcHRpb25zLm9mZnNldC5ib3R0b20gPSBOdW1iZXIodGFnLmdldEF0dHJpYnV0ZSgnZGF0YS1vZmZzZXQtYm90dG9tJykpO1xuICB9XG4gIGVsZW1lbnQuYWZmaXgob3B0aW9ucyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFR3QWZmaXg7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDYXJkc1NlcnZpY2UgZnJvbSAnLi9jYXJkcy5zZXJ2aWNlLmpzJztcbmltcG9ydCBDYXJkIGZyb20gJy4vY2FyZC5kaXJlY3RpdmUuanMnO1xuaW1wb3J0IENhcmRzIGZyb20gJy4vY2FyZHMuY29tcG9uZW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmxheW91dC5jYXJkcycsIFtdKVxuICAuc2VydmljZSgnVHdDYXJkc1NlcnZpY2UnLCBDYXJkc1NlcnZpY2UpXG4gIC5jb21wb25lbnQoJ3R3Q2FyZHMnLCBDYXJkcylcbiAgLmRpcmVjdGl2ZSgndHdDYXJkJywgQ2FyZCkubmFtZTtcbiIsIlxuZnVuY3Rpb24gVHdDYXJkc1NlcnZpY2UoKSB7XG4gIGxldCBleHBhbmRlZEluZGV4ID0gLTE7IC8vIGluZGV4IG9mIGV4cGFuZGVkIGNhcmQsIC0xIHdoZW4gYWxsIGNsb3NlZFxuICBjb25zdCBjYXJkcyA9IFtdOyAvLyBib29sZWFuIGFycmF5IG9mIGNhcmQgY29udHJvbGxlcnNcblxuICB0aGlzLnRvZ2dsZSA9IChpbmRleCkgPT4ge1xuICAgIGlmIChleHBhbmRlZEluZGV4ICE9PSAtMSAmJiBleHBhbmRlZEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgaWYgKGNhcmRzW2V4cGFuZGVkSW5kZXhdLmlzRXhwYW5kZWQoKSkge1xuICAgICAgICBjYXJkc1tleHBhbmRlZEluZGV4XS5jb2xsYXBzZSgpO1xuICAgICAgfVxuICAgICAgZXhwYW5kZWRJbmRleCA9IC0xO1xuICAgIH1cblxuICAgIGNvbnN0IGNhcmQgPSBjYXJkc1tpbmRleF07XG4gICAgaWYgKGNhcmQuaXNFeHBhbmRlZCgpKSB7XG4gICAgICBjYXJkLmNvbGxhcHNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cGFuZGVkSW5kZXggPSBpbmRleDtcbiAgICAgIGNhcmQuZXhwYW5kKCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuYWRkQ2FyZCA9IChzY29wZSkgPT4ge1xuICAgIGNhcmRzLnB1c2goc2NvcGUpO1xuICB9O1xuXG4gIHRoaXMudXBkYXRlRXhwYW5kZWRJbmRleCA9IChuZXdFeHBhbmRlZEluZGV4KSA9PiB7XG4gICAgZXhwYW5kZWRJbmRleCA9IG5ld0V4cGFuZGVkSW5kZXg7XG4gIH07XG5cbiAgdGhpcy5nZXRDYXJkID0gaW5kZXggPT4gY2FyZHNbaW5kZXhdO1xuICB0aGlzLmdldExlbmd0aCA9ICgpID0+IGNhcmRzLmxlbmd0aDtcbiAgdGhpcy5nZXRFeHBhbmRlZEluZGV4ID0gKCkgPT4gZXhwYW5kZWRJbmRleDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVHdDYXJkc1NlcnZpY2U7XG4iLCJcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY2FyZC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NhcmQuaHRtbCc7XG5cbmZ1bmN0aW9uIENhcmQoKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcixcbiAgICB0ZW1wbGF0ZSxcbiAgICByZXF1aXJlOiB7XG4gICAgICBjYXJkQ29udGFpbmVyQ29udHJvbGxlcjogJ150d0NhcmRzJ1xuICAgIH0sXG4gICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBzY29wZToge1xuICAgICAgc3RhdGU6ICdAJyxcbiAgICAgIGluZGV4OiAnPCcsXG4gICAgICBzaG93Rm9ybTogJzw/JyxcbiAgICAgIG9wZW46ICc8PycsXG4gICAgICBkaXNhYmxlZDogJzw/JyxcbiAgICAgIGVtcHR5OiAnPD8nLFxuICAgICAgaW5hY3RpdmU6ICc8JyxcbiAgICAgIG9uRXhwYW5kOiAnJicsXG4gICAgICBvbkNvbGxhcHNlOiAnJidcbiAgICB9LFxuICAgIHRyYW5zY2x1ZGU6IHtcbiAgICAgIGNvbGxhcHNlZENhcmQ6ICdjb2xsYXBzZWQnLFxuICAgICAgZXhwYW5kZWRDYXJkOiAnZXhwYW5kZWQnLFxuICAgICAgY2FyZEZvcm06ICc/Y2FyZEZvcm0nLFxuICAgICAgY2FyZEljb246ICdjYXJkSWNvbicsXG4gICAgICBtb2RhbHM6ICc/bW9kYWxzJyxcbiAgICB9LFxuICAgIGxpbms6IENhcmRMaW5rXG4gIH07XG59XG5cbmZ1bmN0aW9uIENhcmRMaW5rKCRzY29wZSkge1xuICBjb25zdCAkY3RybCA9ICRzY29wZS4kY3RybDtcblxuICAkY3RybC5hZGRDYXJkKCRjdHJsKTtcbiAgJGN0cmwuaW5kZXggPSAkY3RybC5nZXRMZW5ndGgoKSAtIDE7XG4gICRjdHJsLmluYWN0aXZlID0gJGN0cmwuY2FyZENvbnRhaW5lckNvbnRyb2xsZXIuaW5hY3RpdmU7XG5cbiAgaWYgKCRjdHJsLmVtcHR5ID09IG51bGwpIHtcbiAgICAkY3RybC5lbXB0eSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCRjdHJsLm9wZW4gPT09IHRydWVcbiAgICAmJiAkY3RybC5lbXB0eSA9PT0gZmFsc2VcbiAgICAmJiAkY3RybC5nZXRFeHBhbmRlZEluZGV4KCkgPT09IC0xKSB7IC8vIG9ubHkgdGFrZXMgZmlyc3QgcHJlLWV4cGFuZGVkIGNhcmRcbiAgICAkY3RybC51cGRhdGVFeHBhbmRlZEluZGV4KCRjdHJsLmluZGV4KTtcbiAgfSBlbHNlIHtcbiAgICAkY3RybC5vcGVuID0gZmFsc2U7XG4gIH1cblxuICBpZiAoJGN0cmwuZGlzYWJsZWQgPT0gbnVsbCkge1xuICAgICRjdHJsLmRpc2FibGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FyZDtcbiIsIlxuY2xhc3MgQ2FyZENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkdHJhbnNjbHVkZSwgVHdDYXJkc1NlcnZpY2UpIHtcbiAgICB0aGlzLnRvZ2dsZSA9IFR3Q2FyZHNTZXJ2aWNlLnRvZ2dsZTtcbiAgICB0aGlzLmFkZENhcmQgPSBUd0NhcmRzU2VydmljZS5hZGRDYXJkO1xuICAgIHRoaXMuZ2V0RXhwYW5kZWRJbmRleCA9IFR3Q2FyZHNTZXJ2aWNlLmdldEV4cGFuZGVkSW5kZXg7XG4gICAgdGhpcy51cGRhdGVFeHBhbmRlZEluZGV4ID0gVHdDYXJkc1NlcnZpY2UudXBkYXRlRXhwYW5kZWRJbmRleDtcbiAgICB0aGlzLmdldENhcmQgPSBUd0NhcmRzU2VydmljZS5nZXRDYXJkO1xuICAgIHRoaXMuZ2V0TGVuZ3RoID0gVHdDYXJkc1NlcnZpY2UuZ2V0TGVuZ3RoO1xuICB9XG5cbiAgaXNFeHBhbmRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVuO1xuICB9XG5cbiAgY29sbGFwc2UoKSB7XG4gICAgdGhpcy5vcGVuID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5vbkNvbGxhcHNlKSB7XG4gICAgICB0aGlzLm9uQ29sbGFwc2UoKTtcbiAgICB9XG4gIH1cblxuICBleHBhbmQoKSB7XG4gICAgdGhpcy5vcGVuID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLm9uRXhwYW5kKSB7XG4gICAgICB0aGlzLm9uRXhwYW5kKCk7XG4gICAgfVxuICB9XG59XG5cbkNhcmRDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckdHJhbnNjbHVkZScsXG4gICdUd0NhcmRzU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IENhcmRDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxsaSBjbGFzcz1cXFwibGlzdC1ncm91cC1pdGVtIHAtYS0wIGxpc3QtZ3JvdXAtaXRlbS17eyRjdHJsLnN0YXRlfX1cXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICdhY3RpdmUnOiAkY3RybC5vcGVuLFxcbiAgICAnZGlzYWJsZWQnOiAkY3RybC5kaXNhYmxlZFxcbiAgfVxcXCI+IDxkaXYgY2xhc3M9cC1hLXBhbmVsIHJvbGU9XFxcInt7JGN0cmwuZW1wdHkgPyBudWxsIDogJ2J1dHRvbid9fVxcXCIgbmctY2xpY2s9XFxcIiEkY3RybC5lbXB0eSAmJiAkY3RybC50b2dnbGUoJGN0cmwuaW5kZXgpXFxcIj4gPGRpdiBjbGFzcz1tZWRpYT4gPGRpdiBjbGFzcz1tZWRpYS1sZWZ0PiA8ZGl2IGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLXNtIGNpcmNsZS1yZXNwb25zaXZlXFxcIiBuZy1jbGFzcz1cXFwieydjaXJjbGUtaW52ZXJzZSc6ICEkY3RybC5pbmFjdGl2ZSB9XFxcIj4gPGRpdiBuZy10cmFuc2NsdWRlPWNhcmRJY29uPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9bWVkaWEtYm9keSBuZy10cmFuc2NsdWRlPWNvbGxhcHNlZENhcmQ+PC9kaXY+IDxkaXYgY2xhc3M9bWVkaWEtcmlnaHQgbmctY2xhc3M9XFxcInsnaW52aXNpYmxlJzogJGN0cmwuZW1wdHkgfVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gaGlkZGVuLXhzIGhpZGRlbi1zbSBhbmNob3IgdGV4dC1uby1kZWNvcmF0aW9uIGZvbnQtd2VpZ2h0LW5vcm1hbFxcXCIgbmctY2xhc3M9XFxcInsnZ2x5cGhpY29uLWNoZXZyb24tdXAnOiAkY3RybC5vcGVuLCAnZ2x5cGhpY29uLWNoZXZyb24tZG93bic6ICEkY3RybC5vcGVufVxcXCI+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIHZpc2libGUteHMtaW5saW5lIHZpc2libGUtc20taW5saW5lIGFuY2hvciB0ZXh0LW5vLWRlY29yYXRpb24gZm9udC13ZWlnaHQtbm9ybWFsXFxcIiBuZy1jbGFzcz1cXFwieydnbHlwaGljb24tY2hldnJvbi1yaWdodCc6ICEkY3RybC5vcGVuIH1cXFwiPjwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1jb2xsYXBzZSBuZy1hdHRyLWFyaWEtZXhwYW5kZWQ9XFxcInt7ICRjdHJsLm9wZW4gfX1cXFwiIG5nLWNsYXNzPVxcXCJ7J2luJzogJGN0cmwub3BlbiB9XFxcIiBuZy1pZj0kY3RybC5vcGVuPiA8ZGl2IGNsYXNzPVxcXCJwLWwtcGFuZWwgcC1yLXBhbmVsIHAtYi1wYW5lbFxcXCI+IDxkaXYgY2xhc3M9bWVkaWE+IDxkaXYgY2xhc3M9bWVkaWEtbGVmdD4gPGRpdiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1zbSBjaXJjbGUtaW52ZXJzZSBjaXJjbGUtcmVzcG9uc2l2ZSBpbnZpc2libGVcXFwiPjwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1tZWRpYS1ib2R5PiA8aHIgY2xhc3M9XFxcIm0tdC0wIGhpZGRlbi14cyBoaWRkZW4tc21cXFwiLz4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC50b2dnbGUoJGN0cmwuaW5kZXgpIGNsYXNzPVxcXCJ2aXNpYmxlLXhzLWlubGluZS1ibG9jayB2aXNpYmxlLXNtLWlubGluZS1ibG9jayB0ZXh0LW5vLWRlY29yYXRpb24gbS10LTEgdHctY2FyZC1iYWNrXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1sZWZ0LWFycm93IGljb24teHhsXFxcIj48L3NwYW4+IDwvYT4gPGRpdiBuZy10cmFuc2NsdWRlPWV4cGFuZGVkQ2FyZD48L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicC15LTMgYmctZGVmYXVsdCBwLWwtcGFuZWwgcC1yLXBhbmVsXFxcIiBuZy1pZj0kY3RybC5zaG93Rm9ybT4gPGRpdiBjbGFzcz1tZWRpYT4gPGRpdiBjbGFzcz1tZWRpYS1sZWZ0PiA8ZGl2IGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLXNtIGNpcmNsZS1yZXNwb25zaXZlIGludmlzaWJsZVxcXCI+PC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPW1lZGlhLWJvZHkgbmctdHJhbnNjbHVkZT1jYXJkRm9ybT48L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBuZy10cmFuc2NsdWRlPW1vZGFscz48L2Rpdj4gPC9saT4gXCI7IiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY2FyZHMuaHRtbCc7XG5cbmNvbnN0IFR3Q2FyZHMgPSB7XG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIGluYWN0aXZlOiAnPT8nXG4gIH0sXG4gIHRyYW5zY2x1ZGU6IHRydWVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFR3Q2FyZHM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHVsIG5nLXRyYW5zY2x1ZGUgY2xhc3M9XFxcImxpc3QtZ3JvdXAgcGFuZWwtbGlzdC1ncm91cCBsaXN0LWdyb3VwLXNsaWRlLW91dFxcXCIgbmctY2xhc3M9XFxcInsnbGlzdC1ncm91cC1pbmFjdGl2ZSc6ICRjdHJsLmluYWN0aXZlfVxcXCI+IDwvdWw+IFwiOyIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IExvYWRlciBmcm9tICcuL2xvYWRlci5jb21wb25lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUubG9hZGluZy5sb2FkZXInLCBbXSlcbiAgLmNvbXBvbmVudCgndHdMb2FkZXInLCBMb2FkZXIpLm5hbWU7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9sb2FkZXIuaHRtbCc7XG5cbmNvbnN0IFR3TG9hZGVyID0ge1xuICB0ZW1wbGF0ZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVHdMb2FkZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1sb2FkZXI+IDxkaXYgY2xhc3M9bG9hZGVyLXNwaW5uZXI+PC9kaXY+IDxkaXYgY2xhc3M9bG9hZGVyLWZsYWc+IDxzdmcgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgY2xhc3M9bG9hZGVyLWZsYWctb3V0bGluZSB2aWV3Qm94PVxcXCItMiAtMiA1NiA1NlxcXCI+IDxwb2x5Z29uIGNsYXNzPWxvYWRlci1mbGFnLXN0cm9rZSBzdHJva2U9IzAwQjlGRiBzdHJva2Utd2lkdGg9MiBzdHJva2UtbGluZWpvaW49bWl0ZXIgc3Ryb2tlLWxpbmVjYXA9cm91bmQgc3Ryb2tlLW1pdGVybGltaXQ9MTAgc3Ryb2tlLWRhc2hhcnJheT0zMDAgc3Ryb2tlLWRhc2hvZmZzZXQ9MzAwIGZpbGw9bm9uZSBwb2ludHM9XFxcIjI0LjYsMjcuMyAwLDI3LjMgMTQuMywxMy43IDYuMSwwIDQ4LjIsMCAyNi4zLDUyIDE5LjUsNTIgMzkuMixcXG4gICAgICAgICAgNS41IDE2LjgsNS41IDIxLjYsMTMuNiAxMy40LDIxLjggMjcsMjEuOFxcXCIvPiA8L3N2Zz4gPHN2ZyB4bWxucz1odHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyBjbGFzcz1sb2FkZXItZmxhZy1maWxsIHZpZXdCb3g9XFxcIjAgMiA1MiA0OFxcXCI+IDxwb2x5Z29uIGZpbGw9IzAwQjlGRiBwb2ludHM9XFxcIjYuMSwwIDE0LjMsMTMuNyAwLDI3LjMgMjQuNiwyNy4zIDI3LDIxLjggMTMuNCwyMS44IDIxLjYsXFxuICAgICAgICAgIDEzLjYgMTYuOCw1LjUgMzkuMiw1LjUgMTkuNSw1MiAyNi4zLDUyIDQ4LjIsMCBcXFwiLz4gPC9zdmc+IDwvZGl2PiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmltcG9ydCBUYWJzIGZyb20gJy4vdGFicyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXIubW9kdWxlKCd0dy5zdHlsZWd1aWRlLm5hdmlnYXRpb24nLCBbXG4gIFRhYnNcbl0pLm5hbWU7XG4iLCIvKiBUaGlzIG1vZHVsZSBpcyBkZXByZWNhdGVkLCBidXQgaW4gdXNlIGluIHNldmVyYWwgcGxhY2VzICovXG5cbmltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgJy4vcG9seWZpbGwnO1xuXG5pbXBvcnQgRm9ybXMgZnJvbSAnLi9mb3Jtcyc7XG5pbXBvcnQgTG9hZGluZyBmcm9tICcuL2xvYWRpbmcnO1xuaW1wb3J0IFNlcnZpY2VzIGZyb20gJy4vc2VydmljZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyLm1vZHVsZSgndHcuZm9ybS1jb21wb25lbnRzJywgW1xuICBGb3JtcyxcbiAgTG9hZGluZyxcbiAgU2VydmljZXNcbl0pLm5hbWU7XG4iLCIvKiBUaGlzIG1vZHVsZSBpcyBkZXByZWNhdGVkLCBidXQgaW4gdXNlIGluIHNldmVyYWwgcGxhY2VzICovXG5cbmltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgJy4vcG9seWZpbGwnO1xuXG5pbXBvcnQgVmFsaWRhdGlvbiBmcm9tICcuL3ZhbGlkYXRpb24nO1xuaW1wb3J0IFNlcnZpY2VzIGZyb20gJy4vc2VydmljZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyLm1vZHVsZSgndHcuZm9ybS12YWxpZGF0aW9uJywgW1xuICBWYWxpZGF0aW9uLFxuICBTZXJ2aWNlc1xuXSkubmFtZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=