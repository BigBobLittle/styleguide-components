!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=207)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(29));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.dom",[]).service("TwDomService",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(30)),a=o(n(31)),l=o(n(1));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.focusable",[l.default]).directive("twFocusable",i.default).directive("formControl",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(91));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.date",[]).service("TwDateService",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(35)),a=o(n(1)),l=o(n(2));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.select",[a.default,l.default]).component("twSelect",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(101));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.requirements",[]).service("TwRequirementsService",i.default).name},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(l=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([i]).join("\n")}var l;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(r[a]=!0)}for(i=0;i<e.length;i++){var l=e[i];"number"==typeof l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="("+l[2]+") and ("+n+")"),t.push(l))}},t}},function(e,t,n){var r,i,a={},l=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),o=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),s=null,c=0,u=[],d=n(43);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=a[r.id];if(i){i.refs++;for(var l=0;l<i.parts.length;l++)i.parts[l](r.parts[l]);for(;l<r.parts.length;l++)i.parts.push(y(r.parts[l],t))}else{var o=[];for(l=0;l<r.parts.length;l++)o.push(y(r.parts[l],t));a[r.id]={id:r.id,refs:1,parts:o}}}}function h(e,t){for(var n=[],r={},i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};r[l]?r[l].parts.push(o):n.push(r[l]={id:l,parts:[o]})}return n}function p(e,t){var n=o(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(e.insertAt.before,n);n.insertBefore(t,i)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,i,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var l=c++;n=s||(s=m(t)),r=w.bind(null,n,l,!1),i=w.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||a)&&(r=d(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var l=new Blob([r],{type:"text/css"}),o=e.href;e.href=URL.createObjectURL(l),o&&URL.revokeObjectURL(o)}.bind(null,n,t),i=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=l()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return f(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var l=n[i];(o=a[l.id]).refs--,r.push(o)}e&&f(h(e,t),t);for(i=0;i<r.length;i++){var o;if(0===(o=r[i]).refs){for(var s=0;s<o.parts.length;s++)o.parts[s]();delete a[o.id]}}}};var b,$=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=$(t,i);else{var a=document.createTextNode(i),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(a,l[t]):e.appendChild(a)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=t[0],i=n.getClosestParentByClassName(r,"form-group");i&&r&&(r.addEventListener("focus",function(){i.classList.add("focus")}),r.addEventListener("blur",function(){i.classList.remove("focus")}))};r.$inject=["$element","TwDomService"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(32)),a=o(n(1)),l=o(n(2));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.radio",[a.default,l.default]).component("twRadio",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(0)),i=u(n(51)),a=u(n(53)),l=u(n(55)),o=u(n(56)),s=u(n(57)),c=u(n(17));function u(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.processing",[c.default,l.default,o.default,s.default]).component("twUploadProcessing",i.default).component("twUploadProcessingMini",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=t,this.AsyncFileReader=n,this.AsyncFileSaver=r,this.AsyncTasksConfig=i,this.FileValidation=a,this.processingState=null}return r(e,[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&this.onFileCapture(e.file.currentValue)}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");if(this.reset(),this.file=e,this.isProcessing=!0,this.processingState=null,this.onStart({file:e}),!this.FileValidation.isSmallerThanMaxSize(e,this.maxSize))return this.validationMessages=[this.tooLargeMessage],void l({status:413,statusText:"Request Entity Too Large"},null,this);this.httpOptions?this.asyncFileRead(e).then(function(n){return t.asyncFileSave(e).then(function(e){return a(e,n,t)}).catch(function(e){422===e.status?l(e,n,t):a(null,n,t)})}).catch(function(e){return l(e,null,t)}):this.asyncFileRead(e).then(function(e){return a(null,e,t)}).catch(function(e){return l(e,null,t)})}}},{key:"asyncFileSave",value:function(e){var t=this.AsyncTasksConfig.extendHttpOptions(this.httpOptions);return this.AsyncFileSaver.save(t.param||this.name,e,t)}},{key:"asyncFileRead",value:function(e){return this.AsyncFileReader.read(e)}},{key:"reset",value:function(){this.processingState=0,this.isProcessing=!1,this.isSuccess=!1,this.isError=!1}},{key:"onRemove",value:function(){this.onCancel()}}]),e}();function a(e,t,n){n.processingState=1;var r=null,i=n.file,a=n.httpOptions;return a&&a.idProperty&&e&&e.data&&e.data[a.idProperty]&&(r=e.data[a.idProperty]),n.$timeout(function(){n.isProcessing=!1,n.isSuccess=!0,n.onSuccess({file:i,dataUrl:t,id:r,response:e})},3600),t}function l(e,t,n){return n.processingState=-1,n.$timeout(function(){n.isProcessing=!1,n.isError=!0},3600),n.$timeout(function(){n.onFailure({error:e})},4100),e}i.$inject=["$timeout","AsyncFileReader","AsyncFileSaver","AsyncTasksConfig","FileValidationService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={name:"<",file:"<",onStart:"&",onSuccess:"&",onFailure:"&",onCancel:"&",maxSize:"<",accept:"<",httpOptions:"<",processingMessage:"<",successMessage:"<",errorMessage:"<",tooLargeMessage:"<",validationMessages:"<",cancelText:"<"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(85)),a=o(n(86)),l=o(n(87));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.drag-and-drop",[]).directive("twDrop",i.default).directive("twDragEnter",a.default).directive("twDragLeave",l.default).name},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(26)),a=o(n(1)),l=o(n(2));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.checkbox",[a.default,l.default]).component("twCheckbox",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=g(n(0)),i=g(n(38)),a=g(n(44)),l=g(n(48)),o=g(n(10)),s=g(n(59)),c=g(n(63)),u=g(n(72)),d=g(n(76)),f=g(n(80)),h=g(n(81)),p=g(n(13));function g(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload",[a.default,l.default,o.default,s.default,c.default,u.default,d.default,h.default,p.default]).directive("twFileInput",f.default).component("twUpload",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(58));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.async-tasks-config",[]).service("AsyncTasksConfig",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(0)),i=c(n(88)),a=c(n(3)),l=c(n(19)),o=c(n(4)),s=c(n(2));function c(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.date",[a.default,l.default,o.default,s.default]).component("twDate",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(92)),a=o(n(94)),l=o(n(3));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.formatting.date",[l.default]).component("twDateFormat",i.default).filter("twDateFormat",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(0)),i=u(n(4)),a=u(n(9)),l=u(n(15)),o=u(n(18)),s=u(n(16)),c=u(n(95));function u(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.form-control",[i.default,a.default,l.default,o.default,s.default]).component("twFormControl",c.default).component("twDynamicFormControl",c.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(20)),a=s(n(98)),l=s(n(5)),o=s(n(22));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.field",[i.default,l.default,o.default]).component("twField",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(0)),i=l(n(102)),a=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.stylguide.validation.control",[a.default]).directive("twValidation",i.default).name},,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(27)),i=a(n(28));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{name:"@",ngModel:"=",ngTrueValue:"<",ngFalseValue:"<",ngRequired:"<",ngDisabled:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.addLabelHandler(),this.addWatchers(t,n,i),this.checkboxContainer=this.dom.getClosestParentByClassName(this.element,"checkbox"),this.label=!!this.checkboxContainer&&this.checkboxContainer.getElementsByTagName("label")[0]}return r(e,[{key:"$onInit",value:function(){this.checked=this.isChecked()}},{key:"isChecked",value:function(){return this.ngTrueValue&&this.ngTrueValue===this.ngModel||!this.ngTrueValue&&this.ngModel||!1}},{key:"buttonClick",value:function(e){this.checked?(this.checked=!1,this.$ngModel.$setViewValue(this.ngFalseValue||!1)):(this.checked=!0,this.$ngModel.$setViewValue(this.ngTrueValue||!0)),this.$ngModel.$setTouched(),e&&e.stopPropagation(),a(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur")),this.$ngModel.$setTouched(),a(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"addLabelHandler",value:function(){var e=this,t=this.dom.getClosestParentByTagName(this.element,"label");t&&t.addEventListener("click",function(n){t.getAttribute("disabled")||e.element.getElementsByTagName("button")[0].dispatchEvent(new CustomEvent("click"));n.preventDefault(),n.stopPropagation()})}},{key:"addWatchers",value:function(e,t,n){var r=this;e.$watch("$ctrl.ngModel",function(e,i){e!==i&&(n.$setDirty(),a(r.checked,t,n,r.ngRequired,r.dom),r.checked=r.isChecked())}),e.$watch("$ctrl.ngDisabled",function(e,n){var i=t[0],a=r.dom.getClosestParentByClassName(i,"checkbox"),l=r.dom.getClosestParentByTagName(i,"label");a&&(e&&!n?(a.classList.add("disabled"),l.setAttribute("disabled","true")):!e&&n&&(a.classList.remove("disabled"),l.removeAttribute("disabled")))}),e.$watch("$ctrl.ngRequired",function(e,i){e!==i&&a(r.checked,t,n,r.ngRequired,r.dom)})}}],[{key:"hiddenClick",value:function(e){e.stopPropagation()}}]),e}();function a(e,t,n,r,i){if(n.$touched){var a=t[0],l=a.getElementsByClassName("tw-checkbox-button")[0],o=i.getClosestParentByClassName(a,"checkbox"),s=i.getClosestParentByClassName(a,"form-group");!e&&r?(n.$setValidity("required",!1),l.classList.add("has-error"),o&&o.classList.add("has-error"),s&&s.classList.add("has-error")):(n.$setValidity("required",!0),l.classList.remove("has-error"),o&&o.classList.remove("has-error"),s&&s.classList.remove("has-error"))}}i.$inject=["$scope","$element","TwDomService"],t.default=i},function(e,t){e.exports='<input type=hidden class=sr-only name={{$ctrl.name}} ng-model=$ctrl.ngModel ng-click=$ctrl.hiddenClick($event) ng-disabled=$ctrl.ngDisabled /> <button type=button class=tw-checkbox-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{\'checked\': $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class="tw-checkbox-check glyphicon glyphicon-ok"></span> </button> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){this.getClosestParentByTagName=function(e,t){for(var n=t.toUpperCase(),r=e;r;)if((r=r.parentNode)&&r.tagName&&r.tagName.toUpperCase()===n)return r;return null},this.getClosestParentByClassName=function(e,t){for(var n=e;n;)if((n=n.parentNode)&&n.classList&&n.classList.contains(t))return n;return null},this.getPreviousSiblingWithClassName=function(e,t){for(var n=e.previousElementSibling;n;){if(n.classList.contains(t))return n;n=n.previousElementSibling}return null},this.getNextSiblingWithClassName=function(e,t){for(var n=e.nextElementSibling;n;){if(n.classList.contains(t))return n;n=n.nextElementSibling}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(8),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(){return{restrict:"A",controller:a.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(8),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(){return{restrict:"C",controller:a.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(33)),i=a(n(34));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{name:"@",value:"@",ngModel:"=",ngValue:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.checked=this.isChecked(),this.label=this.dom.getClosestParentByTagName(this.element,"label"),n[0].addEventListener("blur",function(){i.$setTouched()}),this.addWatchers(t,this.element)}return r(e,[{key:"isChecked",value:function(){return this.ngValue&&this.ngModel===this.ngValue||this.value===this.ngModel}},{key:"buttonClick",value:function(){this.ngDisabled||(this.checked=!0,this.$ngModel.$setViewValue(this.ngValue||this.value))}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"hiddenInputChange",value:function(){this.$ngModel.$setViewValue(this.ngValue||this.value)}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.ngModel",function(e,t){e!==t&&n.$ngModel.$setDirty(),n.checked=n.isChecked()}),e.$watch("$ctrl.ngDisabled",function(e,r){var i=n.dom.getClosestParentByClassName(t,"radio");i&&(e&&!r?(i.classList.add("disabled"),i.setAttribute("disabled","true")):!e&&r&&(i.classList.remove("disabled"),i.removeAttribute("disabled")))})}}]),e}();i.$inject=["$scope","$element","TwDomService"],t.default=i},function(e,t){e.exports='<input type=radio class=sr-only name={{$ctrl.name}} ng-value="$ctrl.ngValue || $ctrl.value" ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.hiddenInputChange() tabindex=-1 /> <button type=button class=tw-radio-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{checked: $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class=tw-radio-check></span> </button> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(36)),i=a(n(37));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:"ngModel",transclude:!0,bindings:{ngModel:"=",ngRequired:"<",ngDisabled:"<",options:"<",name:"@",placeholder:"@",filter:"@",size:"@",dropdownRight:"@",dropdownUp:"@",dropdownWidth:"@",inverse:"<",hideNote:"@",hideSecondary:"@",hideIcon:"@",hideCurrency:"@",hideCircle:"@",hideLabel:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=(r=a)&&r.__esModule?r:{default:r};var o=function(){function e(t,n,r,i,a,l){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModel=t.controller("ngModel"),this.$element=t,this.$attrs=i,this.$timeout=r,this.$transclude=n,this.dom=a,this.element=t[0],l.$watch("$ctrl.ngModel",function(e,t){return o.onModelChange(e,t)})}return i(e,[{key:"$onInit",value:function(){var e,t,n,r,i,a,l,o,s;this.button=this.element.getElementsByClassName("btn")[0],this.search="",p(this.$ngModel,this),m(this.$ngModel,this,this.$element,this.$attrs),e=this,t=this.$element,n=this.$ngModel,this.options,r=this.$timeout,i=t[0],a=i.getElementsByClassName("btn")[0],l=i.getElementsByClassName("btn-group")[0],o=i.getElementsByClassName("dropdown-menu")[0],s=function(){r(function(){a===document.activeElement||l.classList.contains("open")||i.dispatchEvent(new CustomEvent("blur"))},150)},i.addEventListener("blur",function(){n.$setTouched()}),a.addEventListener("keypress",function(t){e.optionKeypress(t)}),a.addEventListener("click",function(){r(function(){e.shouldShowSearch()?i.getElementsByClassName("tw-select-filter")[0].focus():f(i)})}),a.addEventListener("focusout",s),o.addEventListener("focusout",s),o.addEventListener("keypress",function(t){"a"===t.target.tagName.toLowerCase()&&e.optionKeypress(t)}),function(e,t){e(function(e){(e.length>1||""!==e.text().trim())&&(t.hasTranscluded=!0)})}(this.$transclude,this),this.responsiveClasses=M,this.optionsPageSize=300,this.numberOfOptionsRevealed=this.optionsPageSize,this.hasMoreOptionsToReveal=!1,this.filterString="",this.filteredOptions=this.getFilteredOptions()}},{key:"$onChanges",value:function(e){e.options&&this.onOptionsChange(e.options.currentValue,e.options.previousValue)}},{key:"onModelChange",value:function(e,t){if(e!==t){(e||t)&&this.$ngModel.$setDirty();var n=g(this.options,e);this.selected=n||null}}},{key:"onOptionsChange",value:function(e,t){e!==t&&(p(this.$ngModel,this),m(this.$ngModel,this,this.$element,this.$attrs),this.filteredOptions=this.getFilteredOptions())}},{key:"circleClasses",value:function(e){var t=M(e),n=M(this.hideSecondary);return this.selected.secondary&&0===n.length?t+=" circle-sm":t+=" circle-xs",t}},{key:"buttonFocus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"optionClick",value:function(e,t){e.disabled?t.stopPropagation():(v(this.$ngModel,this,e),this.button.focus())}},{key:"optionFocus",value:function(e){v(this.$ngModel,this,e)}},{key:"optionKeypress",value:function(e){if(!e.target.classList.contains("tw-select-filter"))if(8!==h(e)){var t=function(e){return String.fromCharCode(h(e))}(e);!function(e,t,n,r){var i=b(e,t,n,t.search+r);i?t.search+=r:(t.search=r,i=b(e,t,n,t.search))}(this.$ngModel,this,this.options,t),f(this.element)}else e.preventDefault()}},{key:"placeholderClick",value:function(){y(this.$ngModel,this),this.button.focus()}},{key:"placeholderFocus",value:function(){y(this.$ngModel,this)}},{key:"getFilteredOptions",value:function(){if(this.hasMoreOptionsToReveal=!1,!this.options||!this.options.filter)return[];for(var e=this.filterString&&this.filterString.toLowerCase().replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),t=Object.create(null),n=[],r=0;r<this.options.length;++r){var i=this.options[r];if(!i.header||i.value||i.label){var a=!1,o=t[i.label],f=l.default.isArray(o);if(f)for(var h=0;h<o.length;h++)if(l.default.equals(o[h],i.value)){a=!0;break}if(!a&&(!e||s(i,e)||c(i,e)||u(i,e)||d(i,e))){if(n.length>=this.numberOfOptionsRevealed){this.hasMoreOptionsToReveal=!0;break}f?o.push(i.value):t[i.label]=[i.value],n.push(i)}}else n.push(i)}return n}},{key:"focusOnFilterInput",value:function(){var e=this.element.getElementsByClassName("tw-select-filter")[0];e&&e.focus()}},{key:"filterChange",value:function(){this.numberOfOptionsRevealed=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions(),!function(e,t){if(!l.default.isArray(e))return;var n=void 0;return e.forEach(function(e){t&&l.default.equals(t.value,e.value)&&(n=t)}),n}(this.filteredOptions,this.selected)&&this.filteredOptions.length&&v(this.$ngModel,this,this.filteredOptions[0])}},{key:"filterKeydown",value:function(e){var t=e.which||e.charCode||e.keyCode,n=this.element.querySelector(".active"),r=!!n&&n.querySelector("a"),i=this.element.getElementsByClassName("tw-select-option-link");return t===x.down?(this.moveDownOneOption(n,r,i),e.preventDefault()):t===x.up?(this.moveUpOneOption(n,r,i),e.preventDefault()):t===x.return&&(n&&(n.click(),this.button.focus()),e.preventDefault()),!0}},{key:"selectOptionUsingLink",value:function(e){var t=this.filteredOptions[e.getAttribute("index")];v(this.$ngModel,this,t)}},{key:"moveUpOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[0]){var r=this.dom.getPreviousSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];this.selectOptionUsingLink(i)}}}else this.selectOptionUsingLink(n[n.length-1])}},{key:"moveDownOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[n.length-1]){var r=this.dom.getNextSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];return void this.selectOptionUsingLink(i)}}var a=this.element.getElementsByClassName("tw-select-transcluded");a.length&&a[0].getElementsByTagName("a")[0].focus()}else this.selectOptionUsingLink(n[0])}},{key:"shouldShowSearch",value:function(){return this.filter||this.options&&this.options.length>12}},{key:"revealMoreOptions",value:function(e){e.stopPropagation(),this.numberOfOptionsRevealed+=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions()}}]),e}();function s(e,t){return e.label&&e.label.toLowerCase().search(t)>=0}function c(e,t){return e.note&&e.note.toLowerCase().search(t)>=0}function u(e,t){return e.secondary&&e.secondary.toLowerCase().search(t)>=0}function d(e,t){return e.searchable&&e.searchable.toLowerCase().search(t)>=0}function f(e){var t=e.getElementsByClassName("active")[0];t&&t.getElementsByTagName("a")[0].focus()}function h(e){return e.which||e.charCode||e.keyCode}function p(e,t){if(w(t.ngModel)){var n=g(t.options,t.ngModel);n&&v(e,t,n)}}function g(e,t){var n=!1;return e.forEach(function(e){l.default.equals(e.value,t)&&(n=e)}),n}function m(e,t,n,r){if((t.ngRequired||r.required)&&!w(t.ngModel)&&!t.placeholder)for(var i=0;i<t.options.length;i++)if(w(t.options[i].value)){v(e,t,t.options[i]);break}}function v(e,t,n){n.disabled||(e.$setViewValue(n.value),e.$commitViewValue(),t.selected=n)}function y(e,t){e.$setViewValue(null),e.$commitViewValue(),t.selected=!1}function b(e,t,n,r){var i=!1,a=r.toLowerCase();return n.forEach(function(n){i||($(n.label,a)||$(n.note,a)||$(n.secondary,a)||$(n.searchable,a))&&(v(e,t,n),i=!0)}),i}function $(e,t){return e&&0===e.toLowerCase().indexOf(t)}function w(e){return e||0===e||!1===e}function M(e){var t="",n=[],r={xs:!0,sm:!0,md:!0,lg:!0,xl:!0};return"boolean"==typeof e&&e?"hidden":e&&e.toLowerCase&&"true"===e.toLowerCase()?"hidden":(e&&(n=e.split(",")),n.forEach(function(e){r[e]&&(t+="hidden-"+e+" ")}),t)}var x={up:38,down:40,return:13};o.$inject=["$element","$transclude","$timeout","$attrs","TwDomService","$scope"],t.default=o},function(e,t){e.exports='<div class="btn-group btn-block tw-select" ng-class="{\n    dropdown: !$ctrl.dropdownUp,\n    dropup: $ctrl.dropdownUp\n  }" aria-hidden=false> <button type=button class="btn btn-input dropdown-toggle" ng-class="{\n      \'btn-input-inverse\': $ctrl.inverse,\n      \'btn-addon\': $ctrl.inverse,\n      \'btn-sm\': $ctrl.size === \'sm\',\n      \'btn-lg\': $ctrl.size === \'lg\'\n    }" data-toggle=dropdown aria-expanded=false ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.buttonFocus() tw-focusable> <span class=tw-select-selected ng-if=$ctrl.selected> <span class="circle circle-inverse pull-xs-left circle-sm" ng-if="$ctrl.selected && $ctrl.selected.icon && $ctrl.selected.secondary"> <span class="icon {{$ctrl.selected.icon}}"></span> </span> <span class="circle circle-inverse pull-xs-left" ng-class=$ctrl.circleClasses($ctrl.hideCircle) ng-if="($ctrl.selected.circleText || $ctrl.selected.circleImage || $ctrl.selected.circleIcon)"> <span ng-if=$ctrl.selected.circleText>{{$ctrl.selected.circleText}}</span> <img alt={{$ctrl.selected.label}} ng-if=$ctrl.selected.circleImage src="data:image/png;base64,\n            iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{$ctrl.selected.circleImage}} /> <span ng-if=$ctrl.selected.circleIcon class="icon {{$ctrl.selected.circleIcon}}"></span> </span> <span class=text-ellipsis> <span class="currency-flag currency-flag-{{$ctrl.selected.currency | lowercase}}" ng-if="$ctrl.selected && $ctrl.selected.currency" ng-class=$ctrl.responsiveClasses($ctrl.hideCurrency)></span> <span class="icon {{$ctrl.selected.icon}}" ng-if="$ctrl.selected && $ctrl.selected.icon && !$ctrl.selected.secondary" ng-class=$ctrl.responsiveClasses($ctrl.hideIcon)></span> <span class=tw-select-label ng-class=$ctrl.responsiveClasses($ctrl.hideLabel)> {{$ctrl.selected.label}} </span> <span ng-if=$ctrl.selected.note ng-class=$ctrl.responsiveClasses($ctrl.hideNote) class="tw-select-note small m-l-1"> {{$ctrl.selected.note}} </span> <span ng-if=$ctrl.selected.secondary ng-class=$ctrl.responsiveClasses($ctrl.hideSecondary) class="tw-select-secondary small secondary text-ellipsis"> {{$ctrl.selected.secondary}} </span> </span> </span> <span class=form-control-placeholder ng-if=!$ctrl.selected>{{$ctrl.placeholder}}</span> <span class=caret></span> </button> <ul class=dropdown-menu role=menu ng-class="{\n      \'dropdown-menu-xs-right\': $ctrl.dropdownRight === \'xs\',\n      \'dropdown-menu-sm-right\': $ctrl.dropdownRight === \'sm\',\n      \'dropdown-menu-md-right\': $ctrl.dropdownRight === \'md\',\n      \'dropdown-menu-lg-right\': $ctrl.dropdownRight === \'lg\',\n      \'dropdown-menu-xl-right\': $ctrl.dropdownRight === \'xl\',\n      \'dropdown-menu-sm\': $ctrl.dropdownWidth === \'sm\',\n      \'dropdown-menu-md\': $ctrl.dropdownWidth === \'md\',\n      \'dropdown-menu-lg\': $ctrl.dropdownWidth === \'lg\'\n    }"> <li ng-if=$ctrl.shouldShowSearch()> <a href="" class="tw-select-filter-link p-a-0" tabindex=-1 ng-focus=$ctrl.focusOnFilterInput()> <div class=input-group> <span class=input-group-addon><span class="icon icon-search"></span> </span> <input type=text class="form-control tw-select-filter" placeholder={{$ctrl.filter}} ng-model=$ctrl.filterString ng-change=$ctrl.filterChange() ng-keydown=$ctrl.filterKeydown($event) /> </div> </a> </li> <li ng-class="{active: !$ctrl.selected}" ng-if="$ctrl.placeholder && !$ctrl.ngRequired && !$ctrl.filter"> <a href="" tabindex=-1 ng-click=$ctrl.placeholderClick() ng-focus=$ctrl.placeholderFocus() class=tw-select-placeholder tw-focusable> {{$ctrl.placeholder}} </a> </li> <li ng-if="($ctrl.placeholder && !$ctrl.ngRequired) || $ctrl.filter" class=divider></li> <li ng-repeat="option in $ctrl.filteredOptions" ng-class="{\n        \'active\': $ctrl.ngModel === option.value,\n        \'disabled\': option.disabled,\n        \'dropdown-header\': option.header,\n        \'tw-select-option\': !option.header && !option.disabled\n      }"> <span ng-if=option.header class=text-ellipsis ng-click=$event.stopPropagation()>{{option.header}}</span> <a href="" ng-if=!option.header ng-click="$ctrl.optionClick(option, $event)" ng-focus=$ctrl.optionFocus(option) ng-class="{\'tw-select-option-link\': !option.disabled}" index={{$index}} tabindex=-1 tw-focusable> <div ng-if="option.icon && option.secondary" class="circle circle-inverse pull-xs-left circle-sm"> <span class="icon {{option.icon}}"></span> </div> <span ng-if="option.icon && !option.secondary" class="icon {{option.icon}} pull-xs-left"> </span> <span ng-if=option.currency class="currency-flag currency-flag-{{option.currency | lowercase}} pull-xs-left"> </span> <span class="circle circle-inverse pull-xs-left" ng-class="{\n            \'circle-sm\': option.secondary,\n            \'circle-xs\': !option.secondary\n          }" ng-if="option.circleText || option.circleImage || option.circleIcon"> <span class=tw-select-circle-text ng-if=option.circleText>{{option.circleText}}</span> <img alt={{option.label}} ng-if=option.circleImage src="data:image/png;base64,\n              iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{option.circleImage}} /> <span ng-if=option.circleIcon class="icon {{option.circleIcon}}"></span> </span>{{option.label}}<span ng-if=option.note class="tw-select-note small m-l-1">{{option.note}}</span><span ng-if=option.secondary class="tw-select-secondary small text-ellipsis">{{option.secondary}}</span> </a> </li> <li ng-if=$ctrl.hasMoreOptionsToReveal> <a href="" ng-click=$ctrl.revealMoreOptions($event) class=tw-select-load-more tabindex=-1 tw-focusable> ... </a> </li> <li ng-if=$ctrl.hasTranscluded class=divider></li> <li ng-transclude ng-if=$ctrl.hasTranscluded class=tw-select-transcluded></li> </ul> </div> <input type=hidden class=tw-select-hidden name={{$ctrl.name}} value={{$ctrl.ngModel}} ng-disabled=$ctrl.ngDisabled /> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(39)),i=a(n(40));function a(e){return e&&e.__esModule?e:{default:e}}n(41);var l={controller:r.default,template:i.default,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",icon:"@",helpImage:"@",label:"@",placeholder:"@",buttonText:"@",cancelText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",size:"@",accept:"@",httpOptions:"<",onStart:"=",onSuccess:"=",onFailure:"=",onCancel:"=",maxSize:"<",source:"<",cameraOverlay:"@",cameraDirection:"@",description:"@",instructions:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.FileValidationService=i,this.isProcessing=!1}return r(e,[{key:"$onChanges",value:function(e){e.source&&(this.isLiveCameraUpload="CAMERA_ONLY"===e.source.currentValue)}},{key:"onFileCapture",value:function(e){if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");this.file=e}}},{key:"reset",value:function(){this.isProcessing=!1,this.isDone=!1,this.clearHtmlInput(),this.setNgModel(null),this.onCancel&&this.onCancel()}},{key:"clearHtmlInput",value:function(){this.$element[0].querySelectorAll("input")&&this.$element[0].querySelectorAll("input").forEach(function(e){e.value=null})}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"isDropEligible",value:function(){return"CAMERA_ONLY"!==this.source}},{key:"onDragEnter",value:function(){this.isDroppable=this.isDropEligible()}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e[0])}},{key:"onProcessStart",value:function(e){this.isDone=!1,this.isProcessing=!0,this.onStart&&this.onStart({file:e})}},{key:"onProcessSuccess",value:function(e,t,n,r){this.isDone=!0,this.isProcessing=!1,this.dataUrl=t,this.isImage=this.FileValidationService.isImage(e),this.httpOptions&&n?this.setNgModel(n):this.setNgModel(t),this.onSuccess(e,r)}},{key:"onProcessFailure",value:function(e){this.onFailure&&this.onFailure({error:e})}}]),e}();i.$inject=["$element","$scope","$attrs","FileValidationService"],t.default=i},function(e,t){e.exports="<div class=droppable tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() tw-drop=$ctrl.onDrop(files) ng-class=\"{\n    'droppable-sm': $ctrl.size ==='sm',\n    'droppable-md': $ctrl.size ==='md' || !$ctrl.size,\n    'droppable-lg': $ctrl.size ==='lg',\n    'droppable-dropping': $ctrl.isDroppable && !$ctrl.ngDisabled,\n    'droppable-processing': !$ctrl.isDone && ($ctrl.isProcessing || $ctrl.isSuccess),\n    'droppable-complete': $ctrl.isDone\n  }\"> <div class=droppable-default-card aria-hidden=\"{{$ctrl.isDone || $ctrl.isProcessing}}\"> <tw-upload-capture label=$ctrl.label icon=$ctrl.icon accept=$ctrl.accept input-file=$ctrl.inputFile help-image=$ctrl.helpImage button-text=$ctrl.buttonText ng-disabled=$ctrl.ngDisabled placeholder=\"$ctrl.placeholder || $ctrl.description\" is-live-camera-upload=$ctrl.isLiveCameraUpload camera-overlay=$ctrl.cameraOverlay camera-direction=$ctrl.cameraDirection on-file-capture=$ctrl.onFileCapture(file)></tw-upload-capture> </div> <div class=\"droppable-processing-card droppable-card\" aria-hidden={{!$ctrl.isProcessing}}> <tw-upload-processing name=$ctrl.name file=$ctrl.file on-start=$ctrl.onProcessStart(file) on-success=\"$ctrl.onProcessSuccess(file, dataUrl, id, response)\" on-failure=$ctrl.onProcessFailure(error) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-processing> </div> <div class=\"droppable-complete-card droppable-card\" aria-hidden={{!$ctrl.isDone}}> <tw-upload-success label=$ctrl.label is-image=$ctrl.isImage file=$ctrl.file data=$ctrl.dataUrl success-message=$ctrl.successText cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-success> </div> <div class=\"droppable-dropping-card droppable-card\"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> </div> "},function(e,t,n){var r=n(42);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,"div.transparent-area{background-color:hsla(0,0%,98%,.9)}.icon-circle-shadow{background:#fff;box-shadow:0 4px 16px rgba(0,0,0,.08);padding:12px;box-sizing:border-box;border-radius:99px}.icon-circle-shadow svg{top:4px;position:relative}.inline-svg{top:.35em;position:relative}@media (min-width:576px){p.first-error{min-height:72px}}@media only screen and (max-width:575px){.empty-processing-list{height:130px}.processing-list{min-height:130px}}@media only screen and (min-width:575px){.multi-upload{height:375px}.multi-upload .empty-screen{padding-top:40px}.empty-processing-list,.processing-list{height:290px}}.processing-list{overflow:auto}.processing-list,.processing-list .processing-item .media-body,.processing-list .processing-item .media-right{border-bottom:1px solid #e2e6e8}.processing-list .last-item .processing-item .media-body,.processing-list .last-item .processing-item .media-right{border-bottom:0}.processing-list .processing-item{position:relative;width:100%}.processing-list .processing-item .vertical-center{align-self:center}.empty-processing-list{display:flex;justify-content:center}.empty-processing-list .circle{background-color:#d8f1fa}.empty-processing-list .empty-screen{align-self:center}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(45));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.capture",[]).component("twUploadCapture",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(46)),i=a(n(47));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{label:"<",icon:"<",accept:"<",buttonText:"<",ngDisabled:"<",placeholder:"<",inputFile:"<",helpImage:"<",isLiveCameraUpload:"<",cameraOverlay:"<",cameraDirection:"<",onFileCapture:"&"}};t.default=l},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <img ng-show=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-show=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 class=m-b-1 ng-if="$ctrl.label || $ctrl.description"> {{$ctrl.label || $ctrl.description}} </h4> <p class=m-b-2 ng-if="$ctrl.placeholder || $ctrl.instructions"> {{$ctrl.placeholder || $ctrl.instructions}} </p> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label=$ctrl.buttonText accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onButtonCapture(files)> </tw-upload-button> <tw-camera-button ng-if=$ctrl.isLiveCameraUpload label=$ctrl.buttonText disabled=$ctrl.ngDisabled on-click=$ctrl.onCameraButtonClick()> </tw-camera-button> <tw-camera-capture ng-if="$ctrl.isLiveCameraUpload && $ctrl.showLiveCaptureScreen" overlay={{$ctrl.cameraOverlay}} direction={{$ctrl.cameraDirection}} on-cancel=$ctrl.onCameraCancel() on-capture=$ctrl.onCameraCapture(file)> </tw-camera-capture> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.showLiveCaptureScreen=!1}return r(e,[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onCameraCancel",value:function(){this.showLiveCaptureScreen=!1}},{key:"onCameraCapture",value:function(e){this.showLiveCaptureScreen=!1,this.onFileCapture({file:e})}},{key:"onCameraButtonClick",value:function(){this.showLiveCaptureScreen=!0}},{key:"onButtonCapture",value:function(e){var t=e[0];this.onFileCapture({file:t})}}]),e}();i.$inject=["$element"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(49));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.dropping",[]).component("twUploadDropping",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(50);var a={template:((r=i)&&r.__esModule?r:{default:r}).default,bindings:{droppingText:"<"}};t.default=a},function(e,t){e.exports='<div class=droppable-card-content> <div class="circle circle-sm m-b-3"> <span class="icon icon-add"></span> </div> <h4> {{ $ctrl.droppingText || \'Drop file to start upload\' }} </h4> <p class="m-t-2 m-b-0"></p> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(11)),i=l(n(52)),a=l(n(12));function l(e){return e&&e.__esModule?e:{default:e}}var o={controller:r.default,template:i.default,bindings:a.default};t.default=o},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <tw-process size=sm state=$ctrl.processingState ng-if=$ctrl.isProcessing></tw-process> </div> <h4 class=m-b-2> <span ng-if="$ctrl.isProcessing && $ctrl.processingMessage" class=upload-processing-message> {{$ctrl.processingMessage}} </span> <span ng-if="$ctrl.isError && $ctrl.errorMessage" class=upload-failure-message> {{$ctrl.errorMessage}} </span> </h4> <ul ng-if="$ctrl.isError && $ctrl.validationMessages" class="text-xs-left m-b-2"> <li ng-if=$ctrl.validationMessages[0]>{{ $ctrl.validationMessages[0] }}</li> <li ng-if=$ctrl.validationMessages[1]>{{ $ctrl.validationMessages[1] }}</li> <li ng-if=$ctrl.validationMessages[2]>{{ $ctrl.validationMessages[2] }}</li> </ul> <a href="" ng-if=$ctrl.isError class="btn btn-primary" ng-click=$ctrl.onRemove() role=button> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(11)),i=l(n(54)),a=l(n(12));function l(e){return e&&e.__esModule?e:{default:e}}var o={controller:r.default,template:i.default,bindings:a.default};t.default=o},function(e,t){e.exports='<div class=processing-item> <div class=media> <div class="media-left vertical-center p-r-2 p-y-1"> <tw-process size=xs state=$ctrl.processingState></tw-process> </div> <div class="media-body text-xs-left p-y-1" style=overflow:auto> <div> <small class="m-b-0 text-ellipsis file-name"><strong>{{ $ctrl.file.name }}</strong></small> <small class="m-b-0 text-ellipsis tiny"> <span ng-if=$ctrl.isProcessing>{{ $ctrl.processingMessage }}</span> <span ng-if=$ctrl.isError>{{ $ctrl.errorMessage }}</span> <span ng-if=$ctrl.isSuccess>{{ $ctrl.successMessage }}</span> </small> </div> </div> <div class="media-right p-l-2 p-y-2"> <a href="" ng-if=!$ctrl.isProcessing class=close ng-click=$ctrl.onRemove() role=button>&times;</a> </div> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$q=t}return r(e,[{key:"read",value:function(e){var t=new FileReader,n=this.$q.defer();return t.onload=function(e){n.resolve(e.target.result)},t.onerror=function(e){n.reject(e)},t.readAsDataURL(e),n.promise}}]),e}();i.$inject=["$q"],t.default=angular.module("tw.styleguide.forms.upload.file-reader",[]).service("AsyncFileReader",i).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$http=t}return r(e,[{key:"save",value:function(e,t,n){if(!n)throw new Error("You must supply httpOptions");var r=new FormData,i=n.param||e;r.append(i,t);var a=function(e){var t=angular.copy(e);if(!t.url)throw new Error("You must supply a URL to post image data asynchronously");t.headers||(t.headers={});return t.headers["Content-Type"]=void 0,t.transformRequest=angular.identity,t}(n);return delete a.method,this.$http.post(a.url,r,a)}}]),e}();i.$inject=["$http"],t.default=angular.module("tw.styleguide.forms.upload.file-saver",[]).service("AsyncFileSaver",i).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=(r=a)&&r.__esModule?r:{default:r};var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"isImage",value:function(e){return e.type&&e.type.indexOf("image")>-1}},{key:"isSmallerThanMaxSize",value:function(e,t){return!l.default.isNumber(t)||e.size<=t}}]),e}();t.default=l.default.module("tw.styleguide.forms.upload.validation-service",[]).service("FileValidationService",o).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl="",this.headers={}}return i(e,[{key:"setBaseUrl",value:function(e){this.baseUrl=e}},{key:"setHeader",value:function(e,t){this.headers[e]=t}},{key:"extendHttpOptions",value:function(e){var t=angular.copy(e);return t.headers=t.headers?r({},t.headers,this.headers):this.headers,t.url&&(t.url=""+this.baseUrl+t.url),t}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(60));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.success",[]).component("twUploadSuccess",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(61)),i=a(n(62));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{label:"<",file:"<",data:"<",isImage:"<",successMessage:"<",cancelText:"<",onCancel:"&"}};t.default=l},function(e,t){e.exports='<div class=droppable-card-content> <h4 ng-if="$ctrl.successMessage || $ctrl.label" class="m-b-2 upload-success-message"> {{ $ctrl.successMessage || $ctrl.label }} </h4> <img ng-if="$ctrl.isImage && $ctrl.data" src="data:image/png;base64,\n      iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src="{{ $ctrl.data }}" alt=OK class="thumbnail m-b-3"/> <span class="icon icon-pdf icon-xxl" ng-if="!$ctrl.isImage || !$ctrl.data"></span> <p class="m-b-2 text-ellipsis">{{ $ctrl.fileName }}</p> <p class="m-t-2 m-b-0"> <a href="" ng-click=$ctrl.onCancel()> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </p> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.FileValidationService=n}return r(e,[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&(this.fileName=e.file.currentValue.name)}},{key:"onManualReupload",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input-reupload").files[0];this.onFileCapture(e)}}]),e}();i.$inject=["$element","FileValidationService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(64)),a=o(n(70)),l=o(n(71));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.camera-capture",[]).service("CameraCaptureScreenHandler",a.default).service("CameraOverlayHandler",l.default).component("twCameraCapture",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(65)),i=a(n(67));function a(e){return e&&e.__esModule?e:{default:e}}n(68);var l={controller:r.default,template:i.default,bindings:{overlay:"@",direction:"@",onCancel:"&",onCapture:"&",testMode:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(66),l=(r=a)&&r.__esModule?r:{default:r};var o=function(){function e(t,n,r,i,a,l,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=a,this.$scope=n,this.$log=l,this.$q=i,this.$window=r,this.CameraCaptureScreenHandler=o}return i(e,[{key:"$onInit",value:function(){var e;this.showVideoPreview=!1,this.showVideoInPreview=!0,this.showCaptureInPreview=!1,this.mediaStream=null,this.captureButtonDisabled=!0,this.screenHeight=0,this.screenWidth=0,this.videoResHeight=0,this.videoResWidth=0,this.overlayWidth=0,this.overlayHeight=0,this.overlayXOffset=0,this.overlayYOffset=0,this.displayCanvasXOffset=0,this.displayCanvasYOffset=0,this.videoXOffset=0,this.videoHeight=100,this.videoWidth=100,this.isVideoHorizontallyFlipped=!1,this.hasGetUserMedia()||this.$log.warn("getUserMedia() is not supported by your browser"),this.overlayLoaded=!1,this.overlayElement=this.$element[0].querySelector("#video-preview #overlay"),this.displayCanvas=this.$element[0].querySelector("#video-preview #display-canvas"),this.uploadCanvas=this.$element[0].querySelector("#video-preview #upload-canvas"),this.videoPreviewElement=this.$element[0].querySelector("#video-preview"),this.video=this.$element[0].querySelector("#video-preview #video"),this.video.addEventListener("play",(e=this,function(){var t=this;function n(t){e.videoResHeight=t.videoHeight,e.videoResWidth=t.videoWidth,e.$log.debug("playing updated video : "+e.videoResHeight+" x "+e.videoResWidth);var n=e.CameraCaptureScreenHandler.getVideoSpecifications(e.screenHeight,e.screenWidth,e.videoResHeight,e.videoResWidth),r=n.videoHeightInPercentage,i=n.videoWidthInPercentage;e.isVideoHorizontallyFlipped&&i>100&&(e.videoXOffset=100-i),e.videoHeight=r,e.videoWidth=i}e.captureButtonDisabled=!1,this&&(0===this.videoHeight||0===this.videoWidth?this.addEventListener("playing",function t(){var r=this;e.$scope.$applyAsync(function(){e.videoPlaying=!0,n(r)}),this.removeEventListener("playing",t)}):e.$scope.$applyAsync(function(){e.videoPlaying=!0,n(t)}))})),this.$window.addEventListener("orientationchange",function(e){return function(){e.$window.addEventListener("resize",function t(){e.showVideoPreview&&(e.$log.debug("Orientation change detected, recompute screen"),e.startLiveCamFlow()),e.$window.removeEventListener("resize",t)})}}(this),!1),this.testMode&&"true"===this.testMode.toLowerCase()||this.startLiveCamFlow()}},{key:"startLiveCamFlow",value:function(){var e=this;this.$log.debug("----- Live cam flow start -----"),this.captureButtonDisabled=!0,this.videoPlaying=!1,this.video.pause(),this.tryAcquireFullScreen().then(function(){e.$log.debug("Acquired full screen.")}).catch(function(){e.$log.warn("Failed to acquire full screen.")}).finally(function(){e.setScreenDimensions(),e.overlayLoaded||(0===e.overlayElement.naturalHeight||0===e.overlayElement.naturalWidth?(e.$log.debug("Overlay has not loaded after full screen is acquired"),e.overlayElement.addEventListener("load",s(e))):(e.$log.debug("Overlay has loaded before full screen is acquired"),s(e).call())),e.tryAcquireMediaStream().then(function(t){e.onVideoStreamAcquisition(t)}).catch(function(t){e.$log.error(t),e.onCancelBtnClick()})})}},{key:"tryAcquireFullScreen",value:function(){return l.default.enabled?l.default.isFullscreen?this.$q.resolve():l.default.request(this.videoPreviewElement):this.$q.reject()}},{key:"onVideoStreamAcquisition",value:function(e){this.mediaStream=e,this.video.srcObject!==this.mediaStream&&(this.video.srcObject=this.mediaStream),this.showVideoPreview=!0,this.showVideoInPreview=!0,this.showCaptureInPreview=!1,this.video.play()}},{key:"tryAcquireMediaStream",value:function(){var e=this;return this.mediaStream?this.$q.resolve(this.mediaStream):this.$window.navigator.mediaDevices.enumerateDevices().then(function(t){var n=t.filter(function(e){return"videoinput"===e.kind}).length;return e.$log.debug("Found "+n+" video devices."),1!==n&&e.direction?e.direction=e.direction.toLowerCase():e.direction="user","user"===e.direction&&(e.$log.debug("Changed user video to mirror"),e.video.classList.add("display-mirror"),e.overlayElement.classList.add("display-mirror"),e.isVideoHorizontallyFlipped=!0),e.cameraConstraints={video:{width:{min:640,ideal:1280,max:1280},facingMode:{ideal:e.direction}},audio:!1},e.$window.navigator.mediaDevices.getUserMedia(e.cameraConstraints)})}},{key:"setScreenDimensions",value:function(){this.$log.debug("screen : "+this.$window.screen.height+" x "+this.$window.screen.width),this.$log.debug("screen available : "+this.$window.screen.availHeight+" x "+this.$window.screen.availWidth),this.$log.debug("screen inner : "+this.$window.innerHeight+" x "+this.$window.innerWidth),this.screenHeight=this.$window.innerHeight,this.screenWidth=this.$window.innerWidth,this.$log.debug("**screen resolved** : "+this.screenHeight+" x "+this.screenWidth)}},{key:"closeVideoStream",value:function(){l.default.enabled&&l.default.exit(),this.video.srcObject=null,this.mediaStream&&(this.mediaStream.getTracks().forEach(function(e){return e.stop()}),this.mediaStream=null),this.showVideoPreview=!1,this.captureButtonDisabled=!0}},{key:"onCancelBtnClick",value:function(){this.closeVideoStream(),this.onCancel()}},{key:"onCaptureBtnClick",value:function(){var e=this.CameraCaptureScreenHandler.getCanvasSpecifications(this.videoHeight,this.videoWidth,this.screenHeight,this.screenWidth,this.videoResHeight,this.videoResWidth),t=e.height,n=e.width,r=e.yOffset,i=e.xOffset,a=e.paintHeight,l=e.paintWidth;this.displayCanvasYOffset=r,this.displayCanvasXOffset=i,this.displayCanvas.width=n,this.displayCanvas.height=t;var o=this.displayCanvas.getContext("2d");o.resetTransform(),o.drawImage(this.video,0,0,l,a,0,0,n,t),this.showCaptureInPreview=!0,this.showVideoInPreview=!1}},{key:"onRecaptureBtnClick",value:function(){this.startLiveCamFlow()}},{key:"onUploadBtnClick",value:function(){var e;this.uploadCanvas.width=this.displayCanvas.width,this.uploadCanvas.height=this.displayCanvas.height,this.uploadCanvas.getContext("2d").drawImage(this.displayCanvas,0,0,this.displayCanvas.width,this.displayCanvas.height),this.uploadCanvas.toBlob((e=this,function(t){l.default.enabled&&l.default.exit(),e.showVideoPreview=!1,e.closeVideoStream(),e.$scope.$applyAsync(function(){e.onCapture({file:t})})}),"image/png",1)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"hasGetUserMedia",value:function(){return!(!this.$window.navigator.mediaDevices||!this.$window.navigator.mediaDevices.getUserMedia)}},{key:"getOverlayStyles",value:function(){return{left:this.overlayXOffset+"px",top:this.overlayYOffset+"px",width:this.overlayWidth+"px",height:this.overlayHeight+"px"}}},{key:"getVideoStyles",value:function(){return{left:this.videoXOffset+"%",height:this.videoHeight+"%",width:this.videoWidth+"%"}}},{key:"getCanvasStyles",value:function(){return{left:this.displayCanvasXOffset+"px",top:this.displayCanvasYOffset+"px"}}}]),e}();function s(e){return function(){if(e.overlay){var t=e.CameraCaptureScreenHandler.getOverlaySpecifications(e.screenHeight,e.screenWidth,e.overlayElement.naturalHeight,e.overlayElement.naturalWidth),n=t.height,r=t.width,i=t.yOffset,a=t.xOffset;e.$scope.$applyAsync(function(){e.overlayYOffset=i,e.overlayXOffset=a,e.overlayHeight=n,e.overlayWidth=r,e.overlayLoaded=!0})}}}o.$inject=["$element","$scope","$window","$q","$attrs","$log","CameraCaptureScreenHandler"],t.default=o},function(e,t,n){
/*!
* screenfull
* v4.2.0 - 2019-04-01
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,r="undefined"!=typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,i=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r=0,i=n.length,a={};r<i;r++)if((e=n[r])&&e[1]in t){for(r=0;r<e.length;r++)a[n[0][r]]=e[r];return a}return!1}(),a={change:i.fullscreenchange,error:i.fullscreenerror},l={request:function(e){return new Promise(function(n){var a=i.requestFullscreen,l=function(){this.off("change",l),n()}.bind(this);e=e||t.documentElement,/ Version\/5\.1(?:\.\d+)? Safari\//.test(navigator.userAgent)?e[a]():e[a](r?Element.ALLOW_KEYBOARD_INPUT:{}),this.on("change",l)}.bind(this))},exit:function(){return new Promise(function(e){if(this.isFullscreen){var n=function(){this.off("change",n),e()}.bind(this);t[i.exitFullscreen](),this.on("change",n)}else e()}.bind(this))},toggle:function(e){return this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var r=a[e];r&&t.addEventListener(r,n,!1)},off:function(e,n){var r=a[e];r&&t.removeEventListener(r,n,!1)},raw:i};i?(Object.defineProperties(l,{isFullscreen:{get:function(){return Boolean(t[i.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[i.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return Boolean(t[i.fullscreenEnabled])}}}),n?(e.exports=l,e.exports.default=l):window.screenfull=l):n?e.exports=!1:window.screenfull=!1}()},function(e,t){e.exports='<div> <div id=video-preview ng-show=$ctrl.showVideoPreview class="w-100 h-100 fixed-top bg-dark"> <img id=overlay ng-show="$ctrl.showVideoInPreview && $ctrl.overlayLoaded && $ctrl.videoPlaying" ng-style=$ctrl.getOverlayStyles() ng-src={{$ctrl.overlay}} class="fixed zindex-video-overlay"/> <video id=video ng-show=$ctrl.showVideoInPreview ng-style=$ctrl.getVideoStyles() class="fixed-top zindex-video" playsinline></video> <canvas id=display-canvas ng-show=$ctrl.showCaptureInPreview ng-style=$ctrl.getCanvasStyles() class="fixed zindex-video"></canvas> <canvas id=upload-canvas ng-show=false class=fixed></canvas> <label class="fixed-bottom camera-ctrl-bar"> <span class=camera-ctrl-box-small> <span id=video-cancel class="camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close" ng-if=$ctrl.showVideoInPreview ng-click=$ctrl.onCancelBtnClick()></span> <span id=capture-cancel class="camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close" ng-if=$ctrl.showCaptureInPreview ng-click=$ctrl.onRecaptureBtnClick()></span> </span> <span class=camera-ctrl-box-big> <span id=video-confirm class=camera-ctrl-btn-big ng-if=$ctrl.showVideoInPreview ng-click="!$ctrl.captureButtonDisabled && $ctrl.onCaptureBtnClick()"> <span class=camera-ctrl-btn-big-inner></span> </span> </span> <span class=camera-ctrl-box-small> <span id=capture-confirm class="camera-ctrl-btn-small camera-ctrl-btn-confirm icon icon-check" ng-if=$ctrl.showCaptureInPreview ng-click=$ctrl.onUploadBtnClick()></span> </span> </label> </div> </div> '},function(e,t,n){var r=n(69);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,".camera-ctrl-box-small{display:inline-block;height:60px;width:60px;margin-left:10px;margin-right:10px;vertical-align:bottom}.camera-ctrl-box-big{display:inline-block;height:84px;width:84px;margin-left:36px;margin-right:36px;vertical-align:bottom}.camera-ctrl-btn-cancel{color:red;background-color:#f8f9fa}.camera-ctrl-btn-confirm{color:green;background-color:#f8f9fa}.camera-ctrl-btn-small{display:inline-block;height:60px;width:60px;padding:4px;margin-bottom:0;font-size:52px;line-height:1;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border-radius:50%}.camera-ctrl-btn-big-inner{height:64px;width:64px;padding:0;background-color:#f8f9fa;border:1px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-btn-big,.camera-ctrl-btn-big-inner{display:inline-block;margin-bottom:0;vertical-align:middle}.camera-ctrl-btn-big{height:84px;width:84px;padding:2px;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#343a40;background-image:none;border:8px solid;border-radius:50%;border-color:#f8f9fa}.fixed{position:fixed;z-index:1030}.fixed-top{top:0}.fixed-bottom,.fixed-top{position:fixed;right:0;left:0;z-index:1030}.fixed-bottom{bottom:0}.camera-ctrl-bar{padding-top:10px;padding-bottom:10px;z-index:1032!important}.bg-dark{background-color:#343a40!important}.zindex-video{z-index:1030!important}.display-mirror{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.zindex-video-overlay{z-index:1031!important}.w-100{width:100%!important}.h-100{height:100%!important}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$log=t,this.CameraOverlayHandler=n}return r(e,[{key:"getVideoSpecifications",value:function(e,t,n,r){this.$log.debug("Computing video specs");var i=100,o=100;if(a(e,t,n,r))this.$log.debug("(video) Portrait narrow screen"),i=parseInt(n/r/(e/t)*100,10);else if(l(e,t,n,r)){this.$log.debug("(video) Landscape narrow screen"),o=parseInt(r/n/(t/e)*100,10)}return this.$log.debug("video width : "+o),this.$log.debug("video height : "+i),{videoHeightInPercentage:i,videoWidthInPercentage:o}}},{key:"getCanvasSpecifications",value:function(e,t,n,r,i,o){this.$log.debug("Computing canvas specs"),this.$log.debug("video width : "+t),this.$log.debug("video height : "+e),this.$log.debug("screen width : "+r),this.$log.debug("screen height : "+n),this.$log.debug("video res width : "+o),this.$log.debug("video res height : "+i);var s=null;a(n,r,i,o)?(this.$log.debug("(canvas) Portrait narrow screen"),s=function(e,t,n,r,i,a){return{height:n,width:r,yOffset:0,xOffset:0,paintHeight:parseInt(i/(e/100),10),paintWidth:a}}(e,0,n,r,i,o)):l(n,r,i,o)?(this.$log.debug("(canvas) Landscape narrow screen"),s=function(e,t,n,r,i,a){return{height:n,width:r,yOffset:0,xOffset:0,paintHeight:i,paintWidth:parseInt(a/(t/100),10)}}(0,t,n,r,i,o)):(this.$log.debug("(canvas) Normal screen"),s=function(e,t,n,r){var i=e/n,a=t/r,l=0,o=0,s=0,c=0;i===a?(l=t,o=e,s=0,c=0):i>a?(l=t,o=parseInt(a*n,10),s=0,c=parseInt((e-o)/2,10)):(l=parseInt(i*r,10),o=e,s=parseInt((t-l)/2,10),c=0);return{height:o,width:l,yOffset:c,xOffset:s,paintHeight:n,paintWidth:r}}(n,r,i,o));var c=s,u=c.height,d=c.width,f=c.yOffset,h=c.xOffset,p=c.paintHeight,g=c.paintWidth;return this.$log.debug("canvas width : "+d),this.$log.debug("canvas height : "+u),this.$log.debug("canvas x-offset : "+h),this.$log.debug("canvas y-offset : "+f),this.$log.debug("canvas width to paint : "+g),this.$log.debug("canvas height to paint : "+p),s}},{key:"getOverlaySpecifications",value:function(t,n,r,i){var a=e.getOverlayContainer(t,n),l=a.height,o=a.width,s=a.yOffset,c=a.xOffset,u=this.CameraOverlayHandler.getOverlaySpecificationsWrtContainer(l,o,r,i);return{height:u.height,width:u.width,yOffset:s+u.yOffset,xOffset:c+u.xOffset}}}],[{key:"getOverlayContainer",value:function(t,n){if(e.isScreenPortrait(t,n))return{height:n,width:n,yOffset:(t-n)/2.5,xOffset:0};var r=.9*t;return{height:r,width:r,yOffset:0,xOffset:(n-r)/2}}},{key:"isScreenPortrait",value:function(e,t){return e>=t}},{key:"isScreenLandscape",value:function(e,t){return t>=e}}]),e}();function a(e,t,n,r){return i.isScreenPortrait(e,t)&&n/r>e/t}function l(e,t,n,r){return i.isScreenLandscape(e,t)&&r/n>t/e}i.$inject=["$log","CameraOverlayHandler"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.overlayXMargin=.075,this.overlayYMargin=.075}return r(e,[{key:"getOverlaySpecificationsWrtContainer",value:function(e,t,n,r){var i=n/r,a=t-2*t*this.overlayXMargin,l=e-2*e*this.overlayYMargin,o=void 0,s=void 0;return a*i>=l?o=(s=l)/i:s=(o=a)*i,{height:s,width:o,yOffset:(e-s)/2,xOffset:(t-o)/2}}}]),e}();i.$inject=[],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(73));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.button",[]).component("twUploadButton",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(74)),i=a(n(75));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{name:"<",label:"<",isSecondary:"<",small:"<",block:"<",accept:"<",model:"<",multiple:"<",disabled:"<",onClick:"&",onCapture:"&"}};t.default=l},function(e,t){e.exports='<label class=btn ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled,\n              \'btn-primary\': !$ctrl.isSecondary,\n              \'btn-default\': $ctrl.isSecondary,\n              \'btn-block\': $ctrl.block,\n              \'btn-sm\': $ctrl.small\n            }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> <span ng-if=!$ctrl.isLiveCameraUpload> <input ng-if=!$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model /> <input ng-if=$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model multiple=multiple /> </span> </label>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t}return r(e,[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}},{key:"onButtonCapture",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input").files;this.onCapture({files:e})}}]),e}();i.$inject=["$element"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(77));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.camera-button",[]).component("twCameraButton",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(78)),i=a(n(79));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{label:"<",disabled:"<",onClick:"&",onCapture:"&"}};t.default=l},function(e,t){e.exports='<label class="btn btn-primary" ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> </label> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t[0].addEventListener("change",function(){n.onUserInput&&"function"==typeof n.onUserInput&&n.onUserInput()})};r.$inject=["$element"],t.default=function(){return{restrict:"A",controller:r,controllerAs:"$ctrl",bindToController:!0,scope:{onUserInput:"&"}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(82)),a=o(n(13)),l=o(n(10));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.multi",[l.default,a.default]).component("twMultiUpload",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(83)),i=a(n(84));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",label:"@",placeholder:"@",icon:"@",buttonText:"@",secondaryButtonText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",onStart:"&",onFinish:"&",accept:"@",httpOptions:"<",maxSize:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var a=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.files=[],this.model=[],this.$timeout=i}return r(e,[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");this.onStart&&this.areAllFilesProcessed()&&this.onStart(),this.files=[].concat(i(this.files),i(e)),this.$timeout(function(){var e=t.$element[0].querySelector(".processing-list");e&&(e.scrollTop=e.scrollHeight)},600)}}},{key:"onProcessSuccess",value:function(e,t,n,r){var i=this.httpOptions?"id":"dataUrl";this.files[e][i]=this.httpOptions?r:n;var a=this.files.map(function(e){return e[i]}).filter(function(e){return!!e});this.setNgModel(a),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"areAllFilesProcessed",value:function(){var e=this.httpOptions?"id":"dataUrl";return!this.files.some(function(t){return null==t[e]&&null==t.error})}},{key:"onProcessFailure",value:function(e,t,n){this.files[e].error=n,this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"onProcessCancel",value:function(e){var t=this.httpOptions?"id":"dataUrl";this.files.splice(e,1);var n=this.files.map(function(e){return e[t]}).filter(function(e){return!!e});this.setNgModel(n)}},{key:"onDragEnter",value:function(){this.isDroppable=!0}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e)}},{key:"reset",value:function(){this.setNgModel(null)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}}]),e}();a.$inject=["$element","$scope","$attrs","$timeout"],t.default=a},function(e,t){e.exports='<div class="well droppable p-r-0 p-l-0 p-t-1 p-b-0 multi-upload" tw-drop=$ctrl.onDrop(files) tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() ng-class="{\'droppable-dropping\': $ctrl.isDroppable}"> <div class="droppable-dropping-card droppable-card"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> <div ng-if="$ctrl.files.length === 0" class="empty-processing-list droppable-default-card text-xs-center p-t-3"> <div class=empty-screen> <div class="circle circle-sm m-b-3 m-t-3"> <img ng-if=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-if=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 ng-if=$ctrl.label class=m-b-1>{{$ctrl.label}}</h4> <p ng-if=$ctrl.placeholder class="p-l-3 p-r-3"> {{$ctrl.placeholder}} </p> </div> </div> <div ng-if="$ctrl.files.length > 0" class="droppable-default-card p-l-3 processing-list"> <div ng-repeat="(index, file) in $ctrl.files" class=p-r-3 ng-class="{\'last-item\': $last}"> <tw-upload-processing-mini name=$ctrl.name file=file on-success="$ctrl.onProcessSuccess(index, file, dataUrl, id, response)" on-failure="$ctrl.onProcessFailure(index, file, error)" on-cancel=$ctrl.onProcessCancel(index) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText></tw-upload-processing-mini> </div> </div> <div class=m-a-3> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label="$ctrl.files.length === 0 ? $ctrl.buttonText : $ctrl.secondaryButtonText" is-secondary="$ctrl.files.length > 0" accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onFileCapture(files) block=true small=true multiple=true></tw-upload-button> </div> </div> '},function(e,t,n){"use strict";function r(e,t,n){return{restrict:"A",controller:function(){},link:function(r,i,a){r.counter=0,i[0].addEventListener("drop",function(i){var l=e(a.twDrop),o=function(){l(r,{files:i.dataTransfer.files})};if(t.$$phase)try{o()}catch(e){n(e)}else r.$apply(o);i.preventDefault(),r.counter=0},!1),i[0].addEventListener("dragover",function(e){e.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$parse","$rootScope","$exceptionHandler"],t.default=r},function(e,t,n){"use strict";function r(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragenter",function(r){var a=e(i.twDragEnter);if(n.counter++,n.counter>=1){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$parse","$rootScope"],t.default=r},function(e,t,n){"use strict";function r(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragleave",function(r){var a=e(i.twDragLeave);if(n.counter--,n.counter<=0){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$parse","$rootScope"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(89)),i=a(n(90));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",required:"@",ngRequired:"<",disabled:"@",ngDisabled:"<",locale:"@",twLocale:"<",min:"@",ngMin:"<",max:"@",ngMax:"<",modelType:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.controller("ngModel");if(this.DateService=i,this.initialisedWithDate=!1,this.ngModel)this.applyDateModelIfValidOrThrowError(),this.initialisedWithDate=!0;else{if(this.modelType){if(this.modelType!==l&&this.modelType!==o)throw new Error("Invalid modelType, should be "+l+" or "+o);this.dateModelType=this.modelType}else this.dateModelType=o;this.day=null,this.month=0,this.year=null}this.setDateRequired(),this.setDateDisabled(),this.setDateLocale(),this.setMonths(),this.addValidators(a),this.addWatchers(r,a),function(e){var t=e[0],n=t.querySelector("input[name=day]"),r=t.querySelector("input[name=year]");n.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))}),r.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))})}(t),function(e,t){var n=void 0,r=e[0],i=r.querySelector("input[name=day]"),a=r.querySelector("input[name=year]");i.addEventListener("blur",function(){!0&&n&&(t.$setTouched(),r.dispatchEvent(new CustomEvent("blur")))}),a.addEventListener("blur",function(){n=!0,t.$setTouched(),r.dispatchEvent(new CustomEvent("blur"))})}(t,a)}return r(e,[{key:"applyDateModelIfValidOrThrowError",value:function(){if(!c(this.ngModel))throw new Error("date model passed should either be instance of Date or valid ISO8601 string");this.dateModelType="string"==typeof this.ngModel?l:o,this.explodeDateModel(this.ngModel)}},{key:"setMonths",value:function(){this.dateMonths=this.getMonthsBasedOnIntlSupportForLocale()}},{key:"setDateRequired",value:function(){this.dateRequired=void 0!==this.ngRequired?this.ngRequired:void 0!==this.required}},{key:"setDateDisabled",value:function(){this.dateDisabled=void 0!==this.ngDisabled?this.ngDisabled:void 0!==this.disabled}},{key:"setDateLocale",value:function(){this.locale||(this.locale=a),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale)}},{key:"explodeDateModel",value:function(e){var t="string"==typeof e?new Date(e):e;this.day=t.getUTCDate(),this.month=t.getUTCMonth(),this.year=t.getUTCFullYear()}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e){var n=d(t.ngMin,t.min),r=f(e);return!n||!r||r>=n},e.$validators.max=function(e){var n=d(t.ngMax,t.max),r=f(e);return!n||!r||r<=n}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.day",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.month",function(e,r){e!==r&&(n.adjustLastDay(),t.$setTouched(),n.initialisedWithDate&&t.$setDirty())}),e.$watch("$ctrl.year",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.ngModel",function(e,r){e!==r&&c(n.ngModel)&&(t.$setDirty(),n.explodeDateModel(n.ngModel))}),e.$watch("$ctrl.ngRequired",function(e,t){e!==t&&n.setDateRequired()}),e.$watch("$ctrl.ngDisabled",function(e,t){e!==t&&n.setDateDisabled()}),e.$watch("$ctrl.locale",function(e,t){e!==t&&(n.setDateLocale(),n.setMonths())})}},{key:"getMonthsBasedOnIntlSupportForLocale",value:function(){return function(e){return e.map(function(e,t){return{value:t,label:e}})}(this.DateService.getMonthNamesForLocale(this.locale))}},{key:"combineDate",value:function(){return this.DateService.getUTCDateFromParts(Number(this.year),Number(this.month),Number(this.day))}},{key:"updateDateModelAndValidationClasses",value:function(){if(this.adjustLastDay(),e=this.year,t=this.month,n=this.day,s(e)&&s(n)&&(s(t)||"string"==typeof(r=t)&&!isNaN(Number(r)))){var e,t,n,r,i=this.combineDate();if(this.dateModelType===l){var a=i.toISOString(),o=a.substring(0,a.indexOf("T"));this.$ngModel.$setViewValue(o)}else this.$ngModel.$setViewValue(i)}else this.$ngModel.$setViewValue(null)}},{key:"adjustLastDay",value:function(){var e=Number(this.day),t=Number(this.month),n=Number(this.year),r=this.DateService.getLastDayOfMonth(n,t);e>r&&(this.day=parseInt(r,10))}}]),e}(),a="en",l="string",o="object";function s(e){return"number"==typeof e}function c(e){return u(e)||"string"==typeof(t=e)&&u(new Date(t));var t}function u(e){return"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e.getTime())}function d(e,t){var n=e||t;return!!n&&(!!u(n="string"==typeof n?new Date(n):n)&&n)}function f(e){return"string"==typeof e?new Date(e):e}i.$inject=["$element","$log","$scope","TwDateService"],t.default=i},function(e,t){e.exports='<div class=row> <div class="col-sm-5 tw-date-month-column" ng-if=$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-3 tw-date-day-column"> <label class=sr-only>Day</label> <input type=number name=day class="form-control tw-date-day" ng-model=$ctrl.day ng-change=$ctrl.updateDateModelAndValidationClasses() placeholder=DD min=1 ng-min=1 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> <div class="col-sm-5 tw-date-month-column" ng-if=!$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-4 tw-date-year-column"> <label class=sr-only>Year</label> <input type=number name=year class="form-control tw-date-year" placeholder=YYYY ng-model=$ctrl.year ng-change=$ctrl.updateDateModelAndValidationClasses() ng-min=$ctrl.min.getFullYear() ng-max=$ctrl.max.getFullYear() maxlength=4 ng-maxlength=4 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var l,o=e[Symbol.iterator]();!(r=(l=o.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{!r&&o.return&&o.return()}finally{if(i)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=this;function t(e,t,n){var r=void 0,i=c(t);return h[i]&&(r=h[i][e]),r?"short"===n?r.substr(0,3):"narrow"===n?r.substr(0,1):r:null}function n(e,t,n){var r=c(t);return r&&f[r]&&("short"!==n||"ja"===r)?f[r][e]:null}function i(e,t){var n=c(t);return""+e+(d(p,e,n)||"")}function a(e,t){var n=c(t);return""+e+d(g,e,n)}function l(e,t,n){if(!e.toLocaleDateString)return null;var r=e.toLocaleDateString(t,n);return function(e){if(!e)return!0;if("ja"===c(e))return!1;return!0}(t)&&(r=r.replace(/[0-9]|\s|,|\./g,"")),r[0].toUpperCase()+r.substring(1)}function o(e){return!e||["narrow","short","long"].indexOf(e)<0?"long":e}function s(e){return function(e){try{return window.Intl.DateTimeFormat.supportedLocalesOf([e]).length>0}catch(e){return!1}}(e)?e:"en-GB"}function c(e){return e?e.substring(0,2):"en"}function u(e){return void 0!==m[e]?m[e]:" "}function d(e,t,n){return e[n]?e[n].exactMatch&&e[n].exactMatch[t]?e[n].exactMatch[t]:e[n].endsWith&&e[n].endsWith[t%10]?e[n].endsWith[t%10]:e[n].default:""}this.getLocaleDate=function(e){return e||(e=new Date),e.getDate()},this.getLocaleMonth=function(e){return e||(e=new Date),e.getMonth()},this.getLocaleFullYear=function(e){return e||(e=new Date),e.getFullYear()},this.getLocaleToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getLocaleFullYear(t),e.getLocaleMonth(t),e.getLocaleDate(t))},this.getUTCDate=function(e){return e||(e=new Date),e.getUTCDate()},this.getUTCMonth=function(e){return e||(e=new Date),e.getUTCMonth()},this.getUTCFullYear=function(e){return e||(e=new Date),e.getUTCFullYear()},this.getUTCToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getUTCFullYear(t),e.getUTCMonth(t),e.getUTCDate(t))},this.getLastDayOfMonth=function(t,n){return e.getUTCDateFromParts(t,n+1,0).getUTCDate()},this.getUTCDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setUTCFullYear(e,t,n),l.setUTCHours(r||0),l.setUTCMinutes(i||0),l.setUTCSeconds(a||0),l.setUTCMilliseconds(0),l},this.getLocaleDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setFullYear(e,t,n),l.setHours(r||0),l.setMinutes(i||0),l.setSeconds(a||0),l.setMilliseconds(0),l},this.getDatePartsFromIso=function(e){var t=0,n=0,r=parseInt(e.substr(0,4),10),i=parseInt(e.substr(5,2),10)-1,a=parseInt(e.substr(8,2),10),l=parseInt(e.substr(11,2),10)||0,o=parseInt(e.substr(14,2),10)||0,s=parseInt(e.substr(17,2),10)||0,c=e.substring(10).match("[+-]{1}[0-9]{2}(:[0-9]{2})?$");return c&&(t=parseInt(c[0].substr(1,2),10)||0,n=parseInt(c[0].substr(4,2),10)||0,"-"===c[0].substr(0,1)&&(t*=-1,n*=-1)),[r,i,a,l,o,s,t,n]},this.isIsoStringValid=function(e){return new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{3})?(Z|[+,-][0-9]{2}(:[0-9]{2})?))?$").test(e)},this.getUTCDateFromIso=function(t){if(!e.isIsoStringValid(t))return null;var n=e.getDatePartsFromIso(t),i=r(n,8),a=i[0],l=i[1],o=i[2],s=i[3],c=i[4],u=i[5],d=i[6],f=i[7];return e.getUTCDateFromParts(a,l,o,s+d,c+f,u)},this.getDayNamesForLocale=function(t,n){for(var r=[],i=o(n),a=0;a<7;a++)r.push(e.getDayNameForLocale(a,t,i));return r},this.getDayNameForLocale=function(n,r,i){var a=t(n,r,i);if(a)return a;var c=s(r),u=o(i);return l(e.getUTCDateFromParts(2006,0,n+1),c,{weekday:"long"})||t(n,"en-GB",u)},this.getMonthNamesForLocale=function(t,n){for(var r=[],i=o(n),a=0;a<12;a++)r.push(e.getMonthNameForLocale(a,t,i));return r},this.getMonthNameForLocale=function(t,r,i){var a=n(t,r,i);if(a)return a;var c=s(r),u=o(i),d=e.getUTCDateFromParts(2e3,t,15);return"short"===i?(t=l(d,c,{month:"long"})).length>4?t.slice(0,3):t:l(d,c,{month:"long"})||n(t,"en-GB",u)},this.getWeekday=function(t,n,r){return e.getUTCDateFromParts(t,n,r).getUTCDay()},this.isMonthBeforeDay=function(e){return"ja"===c(e)||e&&-1!==e.indexOf("US",e.length-2)},this.isYearBeforeMonth=function(e){return"ja"===c(e)},this.addYears=function(t,n){return e.addToDate(t,n,0,0)},this.addMonths=function(t,n){return e.addToDate(t,0,n,0)},this.addDays=function(t,n){return e.addToDate(t,0,0,n)},this.addToDate=function(t,n,r,i){return e.getUTCDateFromParts(t.getUTCFullYear()+n,t.getUTCMonth()+r,t.getUTCDate()+i)},this.getLocaleTimeString=function(t,n){return e.getTimeString(t.getHours(),t.getMinutes(),t.getSeconds(),n)},this.getTimeString=function(e,t,n,r){if(e<10&&(e="0"+e),t<10&&(t="0"+t),"en"===c(r)){var i=e>=12?"pm":"am";return 0===(e%=12)&&(e=12),"00"===t?""+e+i:e+":"+t+i}return e+":"+t},this.getYearAndMonthPresentation=function(t,n,r,i){var l=a(t,r),o=e.getMonthNameForLocale(n,r,i||"long"),s=u(c(r));return e.isYearBeforeMonth(r)?[l,o].join(s):[o,l].join(s)},this.getYearMonthDatePresentation=function(t,n,r,l,o){var s=a(t,l),d=e.getMonthNameForLocale(n,l,o||"long"),f=i(r,l),h=u(c(l));return e.isYearBeforeMonth(l)?[s,d,f].join(h):e.isMonthBeforeDay(l)?[d,f].join(h)+", "+s:[f,d,s].join(h)},this.getLocaleNow=function(){return new Date},this.getUTCNow=function(){var t=new Date;return e.getUTCDateFromParts(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds())},this.getLocaleDateString=function(t,n,r){if(!t.getFullYear)return t;var i=e.getLocaleNow();return e.getDateString(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getDay(),n,t-i,i.getFullYear(),r)},this.getUTCDateString=function(t,n,r){if(!t)return t;var i=e.getUTCNow();return e.getDateString(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCDay(),n,t-i,i.getUTCFullYear(),r)},this.getDateString=function(t,n,r,l,o,s,c,u,d,f,h){var p=Math.abs(d)<5184e5&&"long"!==h,g=!p,m=Math.abs(d)<6912e5||"long"===h,v=!m||"long"===h,y=!m&&f!==t||"long"===h?a(t,u):"",b=v?e.getMonthNameForLocale(n,u,"short"===h?"short":"long"):"",$=g?i(r,u):"",w=m?e.getDayNameForLocale(c,u,"short"===h?"short":"long"):"",M=p?e.getTimeString(l,o,s,u):"";return e.combineDateParts(y,b,$,M,w,u)},this.combineDateParts=function(t,n,r,i,a,l){var o=c(l),s=u(o),d=void 0;if(e.isYearBeforeMonth(l)?d=[t,n,r].join(s).trim():e.isMonthBeforeDay(l)?(d=[n,r].join(s).trim(),t&&(d+=", "+t)):d=[r,n,t].join(s).trim(),a){if("ja"===o)return(d+" "+i+" ("+a+")").trim();d=n||t?(a+", "+d).trim():(a+" "+d).trim()}return(d=d+" "+i).trim()};var f={en:["January","February","March","April","May","June","July","August","September","October","November","December"],ja:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]},h={en:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ja:["日","月","火","水","木","金","土"]},p={en:{exactMatch:{11:"th",12:"th",13:"th"},endsWith:{1:"st",2:"nd",3:"rd"},default:"th"},de:{default:"."},fi:{default:"."},ja:{default:"日"}},g={ja:{default:"年"}},m={ja:""}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(93);var a={template:((r=i)&&r.__esModule?r:{default:r}).default,bindings:{date:"<",locale:"<",format:"<"}};t.default=a},function(e,t){e.exports='<span tw-tool-tip data-original-title="{{ $ctrl.date | twDateFormat : $ctrl.locale : \'long\' }}"> <span class="hidden-xs hidden-sm"> {{ $ctrl.date | twDateFormat : $ctrl.locale : $ctrl.format }} </span> <span class="hidden-md hidden-lg hidden-xl"> {{ $ctrl.date | twDateFormat : $ctrl.locale : \'short\' }} </span> </span> '},function(e,t,n){"use strict";function r(e){return function(t,n,r){if(!t)return t;var i=t;if("string"==typeof i&&(i=e.getUTCDateFromIso(i),new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}$").test(t)))return e.getUTCDateString(i,n,r);return i?e.getLocaleDateString(i,n,r):t}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["TwDateService"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(96)),i=a(n(97));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{type:"@",name:"@",id:"@",label:"@",placeholder:"@",step:"@",locale:"@",uploadAccept:"@",uploadIcon:"@",uploadTooLargeMessage:"@",options:"<",ngModel:"=",ngChange:"&",ngFocus:"&",ngBlur:"&",ngRequired:"<",ngDisabled:"<",ngMinlength:"<twMinlength",ngMaxlength:"<twMaxlength",ngMin:"<",ngMax:"<",ngPattern:"<",uploadOptions:"<",helpOptions:"<",textFormat:"<",validationAsync:"<",persistAsync:"<",onAsyncFailure:"&",onAsyncSuccess:"&",fileUploadSource:"<",cameraOptions:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=void 0,a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.element=t[0],i=this}return r(e,[{key:"$onInit",value:function(){this.$ngModel=this.$element.controller("ngModel"),this.addValidators(),this.uploadOptions||(this.uploadOptions={})}},{key:"change",value:function(){this.$ngModel.$setDirty(),this.$ngModel.$setViewValue(this.internalModel)}},{key:"focus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"blur",value:function(){this.$ngModel.$setTouched(),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"onAsyncUploadSuccess",value:function(e,t){i.onAsyncSuccess&&i.onAsyncSuccess({response:t})}},{key:"onAsyncUploadFailure",value:function(e){i.onAsyncFailure&&i.onAsyncFailure({response:e})}},{key:"getAutocompleteStatus",value:function(){return this.helpOptions&&this.helpOptions.message?"disabled":"on"}},{key:"addValidators",value:function(){var e=this,t=this.$ngModel;t.$validators.required=function(t,n){return!(t||n)||!e.ngRequired},t.$validators.minlength=function(t,n){var r=t||n;return"text"!==e.type||!e.ngMinlength||(!r||r.length>=e.ngMinlength)},t.$validators.maxlength=function(t,n){var r=t||n;return"text"!==e.type||!e.ngMaxlength||(!r||r.length<=e.ngMaxlength)},t.$validators.min=function(t,n){var r=t||n;return void 0===e.ngMin||("number"==typeof r&&"number"==typeof e.ngMin?r>=e.ngMin:"date"===e.type&&"string"==typeof r&&"string"==typeof e.ngMin?r>=e.ngMin:!("date"===e.type&&r instanceof Date&&e.ngMin instanceof Date)||r>=e.ngMin)},t.$validators.max=function(t,n){var r=t||n;return void 0===e.ngMax||("number"==typeof r&&"number"==typeof e.ngMax?r<=e.ngMax:"date"===e.type&&"string"==typeof r&&"string"==typeof e.ngMax?r<=e.ngMax:!("date"===e.type&&r instanceof Date&&e.ngMax instanceof Date)||r<=e.ngMax)},t.$formatters.push(function(t){return e.internalModel=t,t})}}]),e}();a.$inject=["$element"],t.default=a},function(e,t){e.exports='<div ng-switch=$ctrl.type> <div ng-switch-when=radio class=radio ng-class="{disabled: $ctrl.ngDisabled, \'radio-lg\': option.secondary}" ng-repeat="option in $ctrl.options"> <label> <tw-radio name={{$ctrl.name}} ng-value=option.value ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change(option.value) ng-click=$ctrl.change(option.value) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-radio> {{option.label}} <small ng-if=option.secondary>{{option.secondary}}</small> </label> </div> <div ng-switch-when=checkbox class=checkbox ng-class="{disabled: $ctrl.ngDisabled}"> <label> <tw-checkbox name={{$ctrl.name}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-click=$ctrl.change() ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-checkbox> {{$ctrl.placeholder}} </label> </div> <div ng-switch-when=select> <tw-select name={{$ctrl.name}} options=$ctrl.options filter="{{ $ctrl.options.length > 9 ? \' \' : \'\' }}" placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-select> </div> <div ng-switch-when=file> <tw-upload name={{$ctrl.name}} label={{$ctrl.label}} icon={{$ctrl.uploadIcon}} help-image={{$ctrl.helpOptions.image}} placeholder={{$ctrl.placeholder}} accept={{$ctrl.uploadAccept}} complete-text={{$ctrl.label}} button-text={{$ctrl.uploadOptions.buttonText}} cancel-text={{$ctrl.uploadOptions.cancelText}} processing-text="{{ $ctrl.uploadOptions.processingText }}" success-text="{{ $ctrl.uploadOptions.successText }}" failure-text="{{ $ctrl.uploadOptions.failureText }}" validation-messages=$ctrl.uploadOptions.validationMessages view-image-text={{$ctrl.uploadOptions.viewImageText}} too-large-message={{$ctrl.uploadTooLargeMessage}} max-size=$ctrl.ngMax ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() http-options=$ctrl.persistAsync source=$ctrl.fileUploadSource camera-overlay={{$ctrl.cameraOptions.overlay}} camera-direction={{$ctrl.cameraOptions.direction}} on-success=$ctrl.onAsyncUploadSuccess on-failure=$ctrl.onAsyncUploadFailure></tw-upload> </div> <div ng-switch-when=date|date-time ng-switch-when-separator=|> <tw-date name={{$ctrl.name}} locale={{$ctrl.locale}} ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() model-type=string></tw-date> </div> <div ng-switch-when=tel> <tw-telephone name="{{ $ctrl.name }}" placeholder="{{ $ctrl.placeholder }}" ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() locale="{{ $ctrl.locale }}" search-placeholder=" "></tw-telephone> </div> <input ng-switch-when=number name={{$ctrl.name}} type=number step={{$ctrl.step}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <input ng-switch-when=hidden name={{$ctrl.name}} type=hidden ng-model=$ctrl.ngModel /> <input ng-switch-when=password name={{$ctrl.name}} type=password class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <textarea ng-switch-when=textarea name={{$ctrl.name}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-pattern=$ctrl.ngPattern ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled autocomplete="{{ $ctrl.getAutocompleteStatus() }}"></textarea> <input ng-switch-default name={{$ctrl.name}} type=text class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-pattern=$ctrl.ngPattern ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled tw-text-format="{{ $ctrl.textFormat }}" autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(99)),i=a(n(100));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{name:"@",model:"=",initialField:"<field",locale:"@",required:"<",uploadOptions:"<",changeHandler:"&?onChange",focusHandler:"&?onFocus",blurHandler:"&?onBlur",errorMessage:"<",warningMessage:"<",validationMessages:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t}return r(e,[{key:"$onChanges",value:function(e){var t;e.initialField&&(this.field=(t=this.initialField,JSON.parse(JSON.stringify(t))),this.control=this.field.control?this.field.control:this.RequirementsService.getControlType(e.initialField.currentValue),this.field.valuesAsync&&this.RequirementsService.prepValuesAsync(this.field,{}),this.required&&this.field.enum&&1===this.field.enum.length&&(this.model=this.field.enum[0]),this.field.default&&!this.model&&(this.model=this.field.default),this.validationMessages&&!this.field.validationMessages&&(this.field.validationMessages=this.validationMessages))}},{key:"onFocus",value:function(){this.focusHandler&&this.focusHandler()}},{key:"onBlur",value:function(){this.blurHandler&&this.blurHandler()}},{key:"onChange",value:function(e){this.changeHandler&&this.changeHandler({value:e}),this.errorMessage&&delete this.errorMessage}},{key:"onPersistAsyncFailure",value:function(e){this.uploadOptions||(this.uploadOptions={}),e.data?this.extractErrors(e.data):e.originalData&&this.extractErrors(e.originalData)}},{key:"extractErrors",value:function(e){e.message&&(this.uploadOptions.failureText=e.message),Array.isArray(e.errors)&&(this.uploadOptions.validationMessages=e.errors.map(function(e){return e.message}))}},{key:"onPersistAsyncSuccess",value:function(e){this.uploadOptions||(this.uploadOptions={}),e&&(this.uploadOptions.successText=e.data.message)}},{key:"sizeOf",value:function(e){return e?Object.keys(e).length:0}},{key:"isFeedbackDetached",value:function(e){return"date"===e||"file"===e||"radio"===e||"tel"===e}}]),e}();i.$inject=["TwRequirementsService"],t.default=i},function(e,t){e.exports='<div class="form-group tw-field-{{ $ctrl.name }}" ng-class="{\n    \'has-error\': $ctrl.field.errorMessage || $ctrl.errorMessage,\n    \'has-warning\': $ctrl.field.warningMessage || $ctrl.warningMessage,\n    \'hidden\': $ctrl.field.hidden\n  }"> <label class=control-label ng-if="$ctrl.control !== \'file\'"> {{$ctrl.field.title}} </label> <tw-form-control name="{{ $ctrl.name }}" label="{{ $ctrl.field.title }}" type="{{ $ctrl.control | lowercase }}" placeholder="{{ $ctrl.field.placeholder }}" help-options=$ctrl.field.help locale="{{ $ctrl.locale }}" upload-accept="{{ $ctrl.field.accept }}" upload-icon="{{ $ctrl.field.icon }}" upload-too-large-message="{{ $ctrl.field.tooLargeMessage }}" options=$ctrl.field.values upload-options=$ctrl.uploadOptions ng-model=$ctrl.model ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() ng-change=$ctrl.onChange($ctrl.model) ng-required=$ctrl.required ng-disabled=$ctrl.field.disabled tw-minlength="$ctrl.field.minlength || $ctrl.field.minLength" tw-maxlength="$ctrl.field.maxlength || $ctrl.field.maxLength" ng-min=$ctrl.field.minimum ng-max=$ctrl.field.maximum ng-pattern=$ctrl.field.pattern text-format=$ctrl.field.displayFormat validation-async=$ctrl.field.validationAsync persist-async=$ctrl.field.persistAsync file-upload-source=$ctrl.field.sourceType camera-options=$ctrl.field.camera on-async-success=$ctrl.onPersistAsyncSuccess(response) on-async-failure=$ctrl.onPersistAsyncFailure(response) tw-validation></tw-form-control> <div class="alert alert-danger error-messages" ng-if="$ctrl.sizeOf($ctrl.field.validationMessages) > 0 || $ctrl.errorMessage" ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> <div ng-repeat="(validationType, validationMessage) in $ctrl.field.validationMessages track by $index" class="error-{{ validationType | lowercase }}"> {{validationMessage}} </div> <div class=error-provided ng-if=$ctrl.errorMessage> {{ $ctrl.errorMessage }} </div> </div> <div class="alert alert-warning" ng-if=$ctrl.warningMessage ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> {{ $ctrl.warningMessage }} </div> <div ng-if=$ctrl.field.help class="alert alert-focus" ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> <span ng-if=$ctrl.field.help.message> {{ $ctrl.field.help.message }} </span> <ul ng-if=$ctrl.field.help.list class=list-unstyled> <li ng-repeat="helpMessage in $ctrl.field.help.list">{{ helpMessage }}</li> </ul> <img ng-if="$ctrl.field.help.image && $ctrl.control !== \'file\'" ng-src={{$ctrl.field.help.image}} alt="{{ $ctrl.field.title }}" class="thumbnail m-y-2"/> </div> </div> '},function(e,t,n){"use strict";function r(e){var t=this;function n(e){if(e instanceof Array){var t=[];return e.forEach(function(e){e.fields?t=t.concat(r(e,e.fields)):e.group?t=t.concat(r(e,e.group)):t.push(e)}),t}return e}function r(e,t){return e.name&&t.length&&!t[0].name&&(t[0].name=e.name),e.width&&t.length&&!t[0].width&&(t[0].width=e.width),e.tooltip&&t.length&&!t[0].helpText&&(t[0].helpText=e.tooltip),e.info&&t.length&&!t[0].helpText&&(t[0].helpText=e.info),2===t.length&&t.forEach(function(e){e.width="md"}),3===t.length&&(t[0].width="md",t[1].width="md"),t}function o(e){return!e.label&&e.title&&(e.label=e.title,delete e.title),!e.label&&e.name&&(e.label=e.name,delete e.name),!e.value&&e.code&&(e.value=e.code,delete e.code),!e.value&&e.key&&(e.value=e.key,delete e.key),e}this.prepRequirements=function(e){if(!e||!e.length)return[];var n=l(e);return n.forEach(function(e){e.prepared||(t.prepLegacyAlternatives(e),e.properties=t.prepFields(e.properties||e.fields),e.type&&"object"!==e.type&&!e.types&&(e.properties.type={type:"string",enum:[e.type],required:!0,hidden:!0},e.type="object"),e.prepared=!0)}),n},this.prepFields=function(e,r,i){if(!e)return{};var a=l(e);return a=function(e){if(e instanceof Array)throw new Error("Expecting a map of fields, not an array");var t={};return Object.keys(e).forEach(function(n){if(n.indexOf(".")>0){var r=n.split("."),i=r[0];t[i]||(t[i]={type:"object",properties:{}}),t[i].properties[r[1]]=e[n]}else t[n]=e[n]}),t}(a=function(e){if(e instanceof Array){var t={};return e.forEach(function(e){var n=e.key||e.name;delete e.key,t[n]=l(e)}),t}return e}(a=n(a))),Object.keys(a).forEach(function(e){a[e]=t.prepField(a[e],r,i)}),a},this.prepField=function(e,n,r){var i=l(e);return t.prepLegacyProps(i),t.prepType(i),t.prepPattern(i),t.prepValuesAsync(i,n),t.prepValidationMessages(i,r),t.prepHelp(i),i},this.prepType=function(e){switch(e.type&&e.type.toLowerCase&&e.type.toLowerCase()){case"text":e.type="string";break;case"date":e.type="string",e.format="date";break;case"password":e.type="string",e.control="password";break;case"checkbox":e.type="boolean";break;case"select":e.control||(e.control="select"),delete e.type;break;case"radio":e.control="radio",delete e.type;break;case"upload":e.type="string",e.format="base64url";break;case"tel":e.type="string",e.format="phone";break;case"textarea":e.type="string",e.control="textarea"}e.control||"object"===e.type||(e.control=t.getControlType(e))},this.prepLegacyAlternatives=function(e){!e.title&&e.label&&(e.title=e.label),e.title||(e.title=function(e){if(e&&e.length>0){var t=e.toLowerCase().split("_").join(" ");return t.charAt(0).toUpperCase()+t.slice(1)}return""}(e.type)),!e.type&&e.name&&(e.type=e.name),!e.description&&e.tooltip&&(e.description=e.tooltip),e.fieldGroups&&!e.fields&&(e.fields=n(e.fieldGroups),delete e.fieldGroups)},this.prepLegacyProps=function(e){e.name&&!e.title&&(e.title=e.name,delete e.name),e.validationRegexp&&(e.pattern=e.validationRegexp,delete e.validationRegexp),e.min&&(e.minimum=e.min,delete e.min),e.max&&(e.maximum=e.max,delete e.max),e.example&&!e.placeholder&&(e.placeholder=e.example,delete e.example),e.tooltip&&!e.helpText&&(e.helpText=e.tooltip,delete e.tooltip),e.valuesAllowed&&!e.values&&(e.values=e.valuesAllowed,delete e.valuesAllowed),e.values&&e.values.map&&(e.values=t.prepLegacyValues(e.values)),e.value&&!e.default&&(e.default=e.value,delete e.value),e.values&&e.values&&e.values.length&&e.values[0]&&!e.values[0].value&&e.values[0].label&&!e.placeholder&&(e.placeholder=e.values[0].label,e.values=e.values.slice(1))},this.prepLegacyValues=function(e){return e.map(o)},this.prepPattern=function(e){if(e.pattern)try{RegExp(e.pattern)}catch(t){console.warn("API regexp is invalid"),delete e.pattern}else delete e.pattern},this.prepValuesAsync=function(e,n){if(e.valuesAsync){var r={};e.valuesAsync.params&&e.valuesAsync.params.length&&(r=t.getParamValuesFromModel(n,e.valuesAsync.params)),t.fetchValuesAsync(e,r).catch(function(){return t.fetchValuesAsync(e,r)})}},this.fetchValuesAsync=function(n,r){return e({method:n.valuesAsync.method||"GET",url:n.valuesAsync.url,data:r||{}}).then(function(e){n.values=t.prepLegacyValues(e.data)})},this.getParamValuesFromModel=function(e,t){var n={};return t.forEach(function(t){e[t.key]?n[t.parameterName]=e[t.key]:t.required}),n},this.prepValidationMessages=function(e){e.validationMessages&&e.validationMessages.minimum&&(e.validationMessages.min=e.validationMessages.minimum,delete e.validationMessages.minimum),e.validationMessages&&e.validationMessages.maximum&&(e.validationMessages.max=e.validationMessages.maximum,delete e.validationMessages.maximum)},this.prepHelp=function(e){!e.help&&(e.helpText||e.helpImage||e.helpList||e.uploadPlaceholderImage)&&(e.help={}),e.helpText&&(e.help.message=e.helpText,delete e.helpText),e.helpImage&&(e.help.image=e.helpImage,delete e.helpImage),e.uploadPlaceholderImage&&(e.help.image=e.uploadPlaceholderImage,delete e.uploadPlaceholderImage),e.list&&(e.help.list=e.helpList,delete e.helpList)},this.getRequiredFields=i,this.getControlType=a}function i(e){if(Array.isArray(e))throw new Error("Expected field map");return Object.keys(e).filter(function(t){return e[t].required})}function a(e){if(e.control)return e.control.toLowerCase();if(e.hidden)return"hidden";if(e.valuesAsync)return"select";if(e.values&&e.values.length)return function(e){if(e.control)return e.control;if("select"===e.type)return"select";if("radio"===e.type)return"radio";var t=e.enum||e.values;if(t)return t.length>3?"select":"radio";return"select"}(e);switch(e.type){case"string":return function(e){switch(e){case"date":return"date";case"base64url":return"file";case"password":return"password";case"uri":case"email":return"text";case"phone":return"tel";default:return"text"}}(e.format);case"number":case"integer":return"number";case"boolean":return"checkbox";default:return"text"}}function l(e){return JSON.parse(JSON.stringify(e))}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$http"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(103),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(){return{restrict:"A",require:{$ngModel:"ngModel"},controller:a.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=n[0],l=r.getClosestParentByClassName(a,"form-group"),o=n.controller("ngModel");a.addEventListener("invalid",function(e){e.preventDefault()}),o.$validators.validation=function(){return t.$evalAsync(function(){i(o,l,a)}),!0};a.addEventListener("blur",function(){t.$evalAsync(function(){i(o,l,a)})})};function i(e,t,n){if(e.$valid)return t&&t.classList.remove("has-error"),void n.removeAttribute("aria-invalid");e.$touched&&e.$dirty&&(t&&t.classList.add("has-error"),n.setAttribute("aria-invalid","true"))}r.$inject=["$scope","$element","TwDomService"],t.default=r},,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidSchema=void 0;var r=n(113),i=n(114);function a(e,t){return!(!(0,r.isObject)(e)||"object"!==t.type||!(0,r.isObject)(t.properties))&&Object.keys(t.properties).map(function(n){return function(e,t,n){if(void 0===e)return!n;return l(e,t)}(e[n],t.properties[n],t.required&&t.required.indexOf(n)>=0)}).reduce(function(e,t){return e&&t},!0)}function l(e,t){if(t.oneOf)return function(e,t){return!!(0,r.isArray)(t.oneOf)&&t.oneOf.reduce(function(t,n){return t||l(e,n)},!1)}(e,t);if(t.allOf)return function(e,t){return!!(0,r.isArray)(t.allOf)&&t.allOf.reduce(function(t,n){return t&&l(e,n)},!0)}(e,t);switch(t.type){case"string":return function(e,t){return!(0,i.getStringValidationFailures)(e,t).length}(e,t);case"number":return function(e,t){return!(0,i.getNumberValidationFailures)(e,t).length}(e,t);case"integer":return function(e,t){return!(0,i.getIntegerValidationFailures)(e,t).length}(e,t);case"boolean":return function(e,t){return!(0,i.getBooleanValidationFailures)(e,t).length}(e,t);case"array":return function(e,t){return!("array"!==t.type||!(0,r.isObject)(t.items))&&(!(0,i.getArrayValidationFailures)(e,t).length&&e.reduce(function(e,n){return l(n,t.items)},!0))}(e,t);case"object":return a(e,t);default:return!1}}t.isValidSchema=l},function(e,t,n){"use strict";function r(e){return"number"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.isString=function(e){return"string"==typeof e},t.isNumber=r,t.isInteger=function(e){return r(e)&&Math.floor(e)===e},t.isBoolean=function(e){return"boolean"==typeof e},t.isObject=function(e){return void 0!==e&&e.constructor===Object},t.isArray=function(e){return Array.isArray(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getObjectValidationFailures=t.getArrayValidationFailures=t.getBooleanValidationFailures=t.getIntegerValidationFailures=t.getNumberValidationFailures=t.getStringValidationFailures=t.getValidationFailures=void 0;var r=n(113),i=n(201);function a(e,t,n){if(!(0,r.isString)(e))return["type"];var a=[];return(0,i.isValidRequired)(e,n)||a.push("required"),(0,i.isValidMinLength)(e,t.minLength)||a.push("minLength"),(0,i.isValidMaxLength)(e,t.maxLength)||a.push("maxLength"),(0,i.isValidPattern)(e,t.pattern)||a.push("pattern"),(0,i.isValidMin)(e,t.min)||a.push("min"),(0,i.isValidMax)(e,t.max)||a.push("max"),a}function l(e,t,n){if(!(0,r.isNumber)(e))return["type"];var a=[];return(0,i.isValidRequired)(e,n)||a.push("required"),(0,i.isValidMin)(e,t.min)||a.push("min"),(0,i.isValidMax)(e,t.max)||a.push("max"),a}function o(e,t,n){return(0,r.isInteger)(e)?l(e,t,n):["type"]}function s(e,t,n){if(!(0,r.isBoolean)(e))return["type"];var a=[];return(0,i.isValidRequired)(e,n)||a.push("required"),a}function c(e,t){if(!(0,r.isArray)(e))return["type"];var n=[];return(0,i.isValidMinItems)(e,t.minItems)||n.push("minItems"),(0,i.isValidMaxItems)(e,t.maxItems)||n.push("maxItems"),n}function u(e,t){return(0,r.isObject)(e)?(0,r.isArray)(t.required)?t.required.map(function(t){return void 0!==e[t]}).reduce(function(e,t){return e&&t},!0)?[]:["required"]:[]:["type"]}t.getValidationFailures=function(e,t,n){switch(t.type){case"string":return a(e,t,n);case"number":return l(e,t,n);case"integer":return o(e,t,n);case"boolean":return s(e,t,n);case"array":return c(e,t);case"object":return u(e,t);default:return[]}},t.getStringValidationFailures=a,t.getNumberValidationFailures=l,t.getIntegerValidationFailures=o,t.getBooleanValidationFailures=s,t.getArrayValidationFailures=c,t.getObjectValidationFailures=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function i(e,t){if(t.allOf)return function(e,t){var n={},a=void 0;return t.allOf.forEach(function(t){"object"===(void 0===(a=i(e,t))?"undefined":r(a))&&angular.extend(n,a)}),n}(e,t);if(t.oneOf)return function(e,t){return e}(e);if(t.type)switch(t.type){case"object":return function(e,t){var n={};return Object.keys(t.properties).forEach(function(r){if(e&&void 0!==e[r]){var a=i(e[r],t.properties[r]);null!==a&&(n[r]=a)}}),n}(e,t);case"array":return function(e,t){if(Array.isArray(e))return e.map(function(e){return i(e,t)});return null}(e,t);case"string":return function(e){if("string"==typeof e)return e;return null}(e);case"number":case"integer":return function(e){if("number"==typeof e)return e;return null}(e);case"boolean":return function(e){if("boolean"==typeof e)return e;return null}(e);default:return null}return t.enum&&t.enum.indexOf(e)>=0?e:null}t.getValidModelParts=i},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidRequired=function(e,t){return!t||void 0!==e},t.isValidMinLength=function(e,t){return void 0===t||!!e&&e.length>=t},t.isValidMaxLength=function(e,t){return void 0===t||!!e&&e.length<=t},t.isValidPattern=function(e,t){try{var n=new RegExp(t);return void 0!==e&&!!n.test(e)}catch(e){return!0}},t.isValidMax=function(e,t){return void 0===t||void 0!==e&&e<=t},t.isValidMin=function(e,t){return void 0===t||void 0!==e&&e>=t},t.isValidMinItems=function(e,t){return!t||!!e&&e.length>=t},t.isValidMaxItems=function(e,t){return!t||!!e&&e.length<=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(212));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.all-of",[]).component("allOfSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(215));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.array",[]).component("arraySchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(0)),i=l(n(218)),a=l(n(21));function l(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.basic-type",[a.default]).component("basicTypeSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(225));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.object",[]).component("objectSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(0)),i=l(n(228)),a=l(n(9));function l(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.one-of",[a.default]).component("oneOfSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=f(n(0)),i=f(n(208)),a=f(n(202)),l=f(n(203)),o=f(n(204)),s=f(n(221)),c=f(n(205)),u=f(n(206)),d=f(n(231));function f(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema",[i.default,a.default,l.default,o.default,s.default,c.default,u.default,d.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(209));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.form",[]).component("jsonSchemaForm",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(210)),i=a(n(211));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(112);var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"onModelChange",value:function(e,t){if(this.onChange){var n=(0,i.isValidSchema)(e,this.schema);this.onChange({model:e,isValid:n,schema:t})}}}]),e}();t.default=a},function(e,t){e.exports='<generic-schema schema=$ctrl.schema model=$ctrl.model errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </generic-schema> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(213)),i=a(n(214));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(115);var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onChanges",value:function(e){(e.schema||e.model)&&(this.models=function(e,t){var n=[];e&&t&&t.forEach(function(t){n.push((0,i.getValidModelParts)(e,t)||{})});return n}(this.model,this.schema?this.schema.allOf:[]))}},{key:"onModelChange",value:function(e,t,n){var r,a=this.schema.allOf[e];this.models[e]=(0,i.getValidModelParts)(t,a),this.onChange&&this.onChange({model:(r=this.models,r.reduce(function(e,t){return angular.extend(t,e)},{})),schema:n})}}]),e}();t.default=a},function(e,t){e.exports="<h3 ng-if=$ctrl.schema.title class=page-header> {{ $ctrl.schema.title }} </h3> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(index, nestedSchema) in $ctrl.schema.allOf\" class=col-xs-12 ng-class=\"{\n      'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n      'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n      'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n    }\"> <generic-schema schema=nestedSchema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change=\"$ctrl.onModelChange(index, model, schema)\"> </generic-schema> </div> </div> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(216)),i=a(n(217));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=["string","number","integer","boolean"],a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onInit",value:function(){if(!Array.isArray(this.model)){var e=o(l(this.schema));this.model=[],e&&this.model.push(e)}}},{key:"onModelChange",value:function(e,t,n){this.model[e]=t,this.onChange&&this.onChange({model:this.model,schema:n})}},{key:"remove",value:function(e){this.model[e]&&this.model.splice(e,1)}},{key:"add",value:function(){var e=o(l(this.schema));e&&this.model.push(e)}},{key:"isSimpleType",value:function(e){return i.indexOf(e)>=0}}]),e}();function l(e){return e&&e.items&&e.items.type}function o(e){return"object"===e?{}:"array"===e?[]:null}t.default=a},function(e,t){e.exports='<div ng-if=$ctrl.isSimpleType($ctrl.schema.items.type)> Unsupported </div> <div ng-if=!$ctrl.isSimpleType($ctrl.schema.items.type)> <h4 class=page-header ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </h4> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-repeat="(index, childModel) in $ctrl.model"> <hr ng-if="index > 0" class="m-t-1 m-b-2"/> <div class=row> <div class=col-sm-9> <generic-schema schema=$ctrl.schema.items model=childModel errors=$ctrl.errors[index] locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(index, model, schema)"> </generic-schema> </div> <div class=col-sm-3> <button class="btn btn-danger btn-block m-t-3" ng-click=$ctrl.remove(index) ng-disabled="index < $ctrl.schema.minItems"> {{ $ctrl.translations.array.remove }} </button> </div> </div> </div> <button class="btn btn-default" ng-disabled="$ctrl.schema.maxItems && $ctrl.model.length >= $ctrl.schema.maxItems" ng-click=$ctrl.add()> {{ $ctrl.translations.array.add }} </button> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(219)),i=a(n(220));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(114);var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onInit",value:function(){this.key=Math.floor(1e8*Math.random()),!this.model&&this.schema.default&&this.onModelChange(this.schema.default)}},{key:"onModelChange",value:function(e){this.validationKeys=(0,i.getValidationFailures)(e,this.schema,this.required),this.onChange&&this.onChange({model:e,schema:this.schema})}},{key:"getValidationMessages",value:function(){return this.schema&&this.schema.validationMessages||this.translations&&this.translations.validation||null}}]),e}();t.default=a},function(e,t){e.exports='<tw-field name="{{ $ctrl.key }}" model=$ctrl.model field=$ctrl.schema required=$ctrl.required locale="{{ $ctrl.locale }}" on-change=$ctrl.onModelChange(value) error-message=$ctrl.errors warning-message=$ctrl.schema.help.warning validation-messages=$ctrl.getValidationMessages() upload-options=$ctrl.translations.upload class=btn-block> </tw-field> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(0)),i=u(n(222)),a=u(n(204)),l=u(n(205)),o=u(n(203)),s=u(n(202)),c=u(n(206));function u(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.generic",[a.default,l.default,o.default,s.default,c.default]).component("genericSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(223)),i=a(n(224));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",hideTitle:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onChanges",value:function(e){if(e.schema){var t=e.schema.currentValue;t&&t.enum&&1===t.enum.length&&this.onModelChange(t.enum[0],t)}}},{key:"onModelChange",value:function(e,t){this.onChange&&this.onChange({model:e,schema:t})}}]),e}();t.default=i},function(e,t){e.exports='<one-of-schema ng-if=$ctrl.schema.oneOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </one-of-schema> <all-of-schema ng-if=$ctrl.schema.allOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </all-of-schema> <basic-type-schema ng-if="$ctrl.schema.type && ($ctrl.schema.type !== \'object\' && $ctrl.schema.type !== \'array\')" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.required on-change="$ctrl.onModelChange(model, schema)"> </basic-type-schema> <object-schema ng-if="$ctrl.schema.type === \'object\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)" hide-title=$ctrl.hideTitle> </object-schema> <array-schema ng-if="$ctrl.schema.type === \'array\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </array-schema> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(226)),i=a(n(227));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",hideTitle:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onInit",value:function(){this.outputModel=angular.extend({},this.model||{})}},{key:"onModelChange",value:function(e,t,n){this.outputModel[e]=t,this.onChange&&this.onChange({model:this.outputModel,schema:n})}},{key:"isRequired",value:function(e){return this.schema.required&&this.schema.required.includes(e)}}]),e}();t.default=i},function(e,t){e.exports="<fieldset> <legend ng-if=\"$ctrl.schema.title && !$ctrl.hideTitle\"> {{ $ctrl.schema.title }} </legend> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(property, nestedSchema) in $ctrl.schema.properties\" class=col-xs-12 ng-hide=nestedSchema.hidden ng-class=\"{\n        'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n        'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n        'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n      }\"> <generic-schema schema=nestedSchema model=$ctrl.model[property] errors=$ctrl.errors[property] locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.isRequired(property) on-change=\"$ctrl.onModelChange(property, model, schema)\"> </generic-schema> </div> </div> </fieldset> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(229)),i=a(n(230));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(115),a=n(112);var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=[],this.activeIndex=1}return r(e,[{key:"$onChanges",value:function(e){(e.schema||e.model)&&(this.activeIndex=function(e,t){if(!e||!e.oneOf)return 1;for(var n=0;n<e.oneOf.length;n++)if((0,a.isValidSchema)(t,e.oneOf[n]))return n+1;return 1}(this.schema,this.model),this.prefillModels())}},{key:"prefillModels",value:function(){var e;this.schema&&this.schema.oneOf&&(this.models=(e=this.model,this.schema.oneOf.map(function(t){return(0,i.getValidModelParts)(e,t)})))}},{key:"onSchemaChange",value:function(e,t){this.models[t]=(0,i.getValidModelParts)(this.models[t],e),this.onModelChange(this.models[t],e)}},{key:"onModelChange",value:function(e,t,n){this.models[n]=e,this.onChange&&this.onChange({model:e,schema:t})}}]),e}();t.default=l},function(e,t){e.exports='<label class=control-label ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </label> <div class="form-group m-b-5"> <div class=radio ng-repeat="(index, schema) in $ctrl.schema.oneOf" ng-class="{\'radio-lg\': schema.description}"> <label> <tw-radio ng-model=$ctrl.activeIndex ng-value="(index + 1)" ng-change="$ctrl.onSchemaChange(schema, index)"></tw-radio> {{ schema.title }} <p ng-if=schema.description class="secondary m-b-0"> {{ schema.description }} </p> </label> </div> </div> <div ng-repeat="(index, schema) in $ctrl.schema.oneOf"> <generic-schema ng-if="$ctrl.activeIndex === (index + 1)" schema=schema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema, index)" hide-title=true> </generic-schema> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r},l=n(115),o=n(114),s=n(112),c=d(n(201)),u=d(n(113));function d(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.default=a.default.module("tw.json-schema.validation",[]).service("SchemaValidation",function(){this.getValidModelParts=l.getValidModelParts,this.getValidationFailures=o.getValidationFailures,this.isValidSchema=s.isValidSchema,this.ruleValidators=c,this.typeValidators=u}).name}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYW5ndWxhclwiIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZvY3VzYWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9yZXF1aXJlbWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9jdXNhYmxlL2ZvY3VzYWJsZS5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9yYWRpby9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9wcm9jZXNzaW5nLWNhcmQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9wcm9jZXNzaW5nLmJpbmRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kcmFnLWFuZC1kcm9wL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jaGVja2JveC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9hc3luY1Rhc2tzQ29uZmlnL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb3JtLWNvbnRyb2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92YWxpZGF0aW9uL2NvbnRyb2wtdmFsaWRhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jaGVja2JveC9jaGVja2JveC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jaGVja2JveC9jaGVja2JveC5odG1sIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9kb20vZG9tLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZvY3VzYWJsZS9mb2N1c2FibGUuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb2N1c2FibGUvZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvcmFkaW8vcmFkaW8uY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9yYWRpby9yYWRpby5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9yYWRpby9yYWRpby5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9zZWxlY3Qvc2VsZWN0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L3NlbGVjdC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9zZWxlY3Qvc2VsZWN0Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5sZXNzPzNiOGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQubGVzcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FwdHVyZS1jYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FwdHVyZS1jYXJkL2NhcHR1cmUtY2FyZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYXB0dXJlLWNhcmQvY2FwdHVyZS1jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYXB0dXJlLWNhcmQvY2FwdHVyZS1jYXJkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9kcm9wcGluZy1jYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvZHJvcHBpbmctY2FyZC9kcm9wcGluZy1jYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2Ryb3BwaW5nLWNhcmQvZHJvcHBpbmctY2FyZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmctY2FyZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9wcm9jZXNzaW5nLWNhcmQvcHJvY2Vzc2luZy1jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9wcm9jZXNzaW5nLWNhcmQvcHJvY2Vzc2luZy1taW5pLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9wcm9jZXNzaW5nLW1pbmkuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3NlcnZpY2VzL2FzeW5jLWZpbGUtcmVhZGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zZXJ2aWNlcy9hc3luYy1maWxlLXNhdmVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zZXJ2aWNlcy9maWxlLXZhbGlkYXRpb24uc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvYXN5bmNUYXNrc0NvbmZpZy9hc3luY1Rhc2tzQ29uZmlnLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvc3VjY2Vzcy1jYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3N1Y2Nlc3MtY2FyZC9zdWNjZXNzLWNhcmQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3N1Y2Nlc3MtY2FyZC9zdWNjZXNzLWNhcmQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NyZWVuZnVsbC9kaXN0L3NjcmVlbmZ1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtY2FwdHVyZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUubGVzcz85YTM0Iiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUubGVzcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2NhbWVyYS1jYXB0dXJlLXNjcmVlbi1oYW5kbGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtb3ZlcmxheS1oYW5kbGVyLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQtYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLWJ1dHRvbi91cGxvYWQtYnV0dG9uLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC1idXR0b24vdXBsb2FkLWJ1dHRvbi5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLWJ1dHRvbi91cGxvYWQtYnV0dG9uLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWJ1dHRvbi9jYW1lcmEtYnV0dG9uLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1idXR0b24vY2FtZXJhLWJ1dHRvbi5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWJ1dHRvbi9jYW1lcmEtYnV0dG9uLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9maWxlLWlucHV0LmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL211bHRpLXVwbG9hZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL211bHRpLXVwbG9hZC9tdWx0aS11cGxvYWQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvbXVsdGktdXBsb2FkL211bHRpLXVwbG9hZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvbXVsdGktdXBsb2FkL211bHRpLXVwbG9hZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kcmFnLWFuZC1kcm9wL2Ryb3AuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kcmFnLWFuZC1kcm9wL2RyYWctZW50ZXIuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kcmFnLWFuZC1kcm9wL2RyYWctbGVhdmUuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlL2RhdGUuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9kYXRlL2RhdGUuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGF0ZS9kYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2RhdGUvZGF0ZS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0L2RhdGUtZm9ybWF0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy9kYXRlLWZvcm1hdC9kYXRlLWZvcm1hdC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0L2RhdGUtZm9ybWF0LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9ybS1jb250cm9sL2Zvcm0tY29udHJvbC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2Zvcm0tY29udHJvbC9mb3JtLWNvbnRyb2wuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9ybS1jb250cm9sL2Zvcm0tY29udHJvbC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZC9maWVsZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkL2ZpZWxkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkL2ZpZWxkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3JlcXVpcmVtZW50cy9yZXF1aXJlbWVudHMuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL3ZhbGlkYXRpb24vc2NoZW1hLXZhbGlkYXRvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL3ZhbGlkYXRpb24vdHlwZS12YWxpZGF0b3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3ZhbGlkYXRpb24tZmFpbHVyZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL3ZhbGlkYXRpb24vdmFsaWQtbW9kZWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL3ZhbGlkYXRpb24vcnVsZS12YWxpZGF0b3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hbGwtb2Ytc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hcnJheS1zY2hlbWEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Jhc2ljLXR5cGUtc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9vYmplY3Qtc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9vbmUtb2Ytc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvZm9ybS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Zvcm0vY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvZm9ybS90ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hbGwtb2Ytc2NoZW1hL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYWxsLW9mLXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hbGwtb2Ytc2NoZW1hL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2FycmF5LXNjaGVtYS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2FycmF5LXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hcnJheS1zY2hlbWEvdGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYmFzaWMtdHlwZS1zY2hlbWEvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9iYXNpYy10eXBlLXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9iYXNpYy10eXBlLXNjaGVtYS90ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9nZW5lcmljLXNjaGVtYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvZ2VuZXJpYy1zY2hlbWEvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9nZW5lcmljLXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9nZW5lcmljLXNjaGVtYS90ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9vYmplY3Qtc2NoZW1hL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb2JqZWN0LXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9vYmplY3Qtc2NoZW1hL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29uZS1vZi1zY2hlbWEvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9vbmUtb2Ytc2NoZW1hL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29uZS1vZi1zY2hlbWEvdGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvdmFsaWRhdGlvbi9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFuZ3VsYXIiLCJzZXJ2aWNlIiwiRG9tU2VydmljZSIsImRpcmVjdGl2ZSIsIkZvY3VzYWJsZSIsIkZvcm1Db250cm9sRm9jdXMiLCJEYXRlU2VydmljZSIsImNvbXBvbmVudCIsIlNlbGVjdCIsIlJlcXVpcmVtZW50c1NlcnZpY2UiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJqb2luIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiaWQiLCJwdXNoIiwiZm4iLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwid2luZG93IiwiZG9jdW1lbnQiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRFbGVtZW50IiwidGFyZ2V0IiwicGFyZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwib3B0aW9ucyIsImRvbVN0eWxlIiwicmVmcyIsImoiLCJwYXJ0cyIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwiYmFzZSIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiaW5zZXJ0SW50byIsIkVycm9yIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4IiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1bmRlZmluZWQiLCJhdHRycyIsInR5cGUiLCJub25jZSIsImdldE5vbmNlIiwiYWRkQXR0cnMiLCJlbCIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0IiwidHJhbnNmb3JtIiwiZGVmYXVsdCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsImxpbmsiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsImhyZWYiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJpbmRleCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiRm9jdXNhYmxlQ29udHJvbGxlciIsIiRlbGVtZW50IiwiVHdEb21TZXJ2aWNlIiwiZWxlbWVudCIsImZvcm1Hcm91cCIsImdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGFzc0xpc3QiLCJhZGQiLCIkaW5qZWN0IiwiUmFkaW8iLCJBc3luY1Rhc2tzQ29uZmlnIiwiQXN5bmNGaWxlUmVhZGVyIiwiQXN5bmNGaWxlU2F2ZXIiLCJGaWxlVmFsaWRhdGlvblNlcnZpY2UiLCJQcm9jZXNzaW5nQ2FyZCIsIlByb2Nlc3NpbmdNaW5pIiwiQ29udHJvbGxlciIsIiR0aW1lb3V0IiwiRmlsZVZhbGlkYXRpb24iLCJwcm9jZXNzaW5nU3RhdGUiLCJjaGFuZ2VzIiwiZmlsZSIsImN1cnJlbnRWYWx1ZSIsIm9uRmlsZUNhcHR1cmUiLCJuZ0Rpc2FibGVkIiwicmVzZXQiLCJpc1Byb2Nlc3NpbmciLCJvblN0YXJ0IiwiaXNTbWFsbGVyVGhhbk1heFNpemUiLCJtYXhTaXplIiwidmFsaWRhdGlvbk1lc3NhZ2VzIiwidG9vTGFyZ2VNZXNzYWdlIiwiYXN5bmNGYWlsdXJlIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImh0dHBPcHRpb25zIiwiYXN5bmNGaWxlUmVhZCIsInRoZW4iLCJkYXRhVXJsIiwiYXN5bmNGaWxlU2F2ZSIsInJlc3BvbnNlIiwiYXN5bmNTdWNjZXNzIiwiY2F0Y2giLCJlcnJvciIsImV4dGVuZEh0dHBPcHRpb25zIiwic2F2ZSIsInBhcmFtIiwicmVhZCIsImlzU3VjY2VzcyIsImlzRXJyb3IiLCJvbkNhbmNlbCIsIiRjdHJsIiwiaWRQcm9wZXJ0eSIsImRhdGEiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJhY2NlcHQiLCJwcm9jZXNzaW5nTWVzc2FnZSIsInN1Y2Nlc3NNZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwiY2FuY2VsVGV4dCIsIkRyb3AiLCJEcmFnRW50ZXIiLCJEcmFnTGVhdmUiLCJDaGVja2JveCIsIkNhcHR1cmVDYXJkIiwiRHJvcHBpbmdDYXJkIiwiU3VjY2Vzc0NhcmQiLCJDYW1lcmFDYXB0dXJlIiwiVXBsb2FkQnV0dG9uIiwiQ2FtZXJhQnV0dG9uIiwiTXVsdGlVcGxvYWQiLCJEcmFnQW5kRHJvcCIsIkZpbGVJbnB1dCIsIlVwbG9hZCIsIkRhdGVGb3JtYXQiLCJEYXRlQ29udHJvbCIsIkRhdGVGaWx0ZXIiLCJGb3JtQ29udHJvbCIsIkNvbnRyb2xWYWxpZGF0aW9uIiwiRmllbGQiLCJjb250cm9sbGVyIiwidGVtcGxhdGUiLCJyZXF1aXJlIiwiJG5nTW9kZWwiLCJiaW5kaW5ncyIsIm5nTW9kZWwiLCJuZ1RydWVWYWx1ZSIsIm5nRmFsc2VWYWx1ZSIsIm5nUmVxdWlyZWQiLCJDaGVja2JveENvbnRyb2xsZXIiLCIkc2NvcGUiLCJkb20iLCJhZGRMYWJlbEhhbmRsZXIiLCJhZGRXYXRjaGVycyIsImNoZWNrYm94Q29udGFpbmVyIiwibGFiZWwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNoZWNrZWQiLCJpc0NoZWNrZWQiLCJldmVudCIsIiRzZXRWaWV3VmFsdWUiLCIkc2V0VG91Y2hlZCIsInN0b3BQcm9wYWdhdGlvbiIsInZhbGlkYXRlQ2hlY2tib3giLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJnZXRDbG9zZXN0UGFyZW50QnlUYWdOYW1lIiwiZ2V0QXR0cmlidXRlIiwicHJldmVudERlZmF1bHQiLCIkd2F0Y2giLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiJHNldERpcnR5IiwiY2hlY2tib3giLCJyZW1vdmVBdHRyaWJ1dGUiLCIkZXZlbnQiLCJpc1JlcXVpcmVkIiwiJHRvdWNoZWQiLCJidXR0b24iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiY2hlY2tib3hMYWJlbCIsIiRzZXRWYWxpZGl0eSIsInRhZ05hbWUiLCJ0YWdOYW1lVXBwZXIiLCJ0b1VwcGVyQ2FzZSIsImNsYXNzTmFtZSIsImNvbnRhaW5zIiwiZ2V0UHJldmlvdXNTaWJsaW5nV2l0aENsYXNzTmFtZSIsInNpYmxpbmciLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZ2V0TmV4dFNpYmxpbmdXaXRoQ2xhc3NOYW1lIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicmVzdHJpY3QiLCJuZ1ZhbHVlIiwibmdDaGFuZ2UiLCJSYWRpb0NvbnRyb2xsZXIiLCJyYWRpb0xhYmVsIiwidHJhbnNjbHVkZSIsInBsYWNlaG9sZGVyIiwic2l6ZSIsImRyb3Bkb3duUmlnaHQiLCJkcm9wZG93blVwIiwiZHJvcGRvd25XaWR0aCIsImludmVyc2UiLCJoaWRlTm90ZSIsImhpZGVTZWNvbmRhcnkiLCJoaWRlSWNvbiIsImhpZGVDdXJyZW5jeSIsImhpZGVDaXJjbGUiLCJoaWRlTGFiZWwiLCJTZWxlY3RDb250cm9sbGVyIiwiJHRyYW5zY2x1ZGUiLCIkYXR0cnMiLCJvbk1vZGVsQ2hhbmdlIiwiYnV0dG9uR3JvdXAiLCJkcm9wZG93biIsIm9uRm9jdXNPdXQiLCJzZWFyY2giLCJwcmVTZWxlY3RNb2RlbFZhbHVlIiwic2V0RGVmYXVsdElmUmVxdWlyZWQiLCJhY3RpdmVFbGVtZW50Iiwib3B0aW9uS2V5cHJlc3MiLCJzaG91bGRTaG93U2VhcmNoIiwiZm9jdXMiLCJmb2N1c09uQWN0aXZlTGluayIsInRvTG93ZXJDYXNlIiwiY2xvbmUiLCJ0ZXh0IiwidHJpbSIsImhhc1RyYW5zY2x1ZGVkIiwiY2hlY2tGb3JUcmFuc2NsdWRlZENvbnRlbnQiLCJyZXNwb25zaXZlQ2xhc3NlcyIsIm9wdGlvbnNQYWdlU2l6ZSIsIm51bWJlck9mT3B0aW9uc1JldmVhbGVkIiwiaGFzTW9yZU9wdGlvbnNUb1JldmVhbCIsImZpbHRlclN0cmluZyIsImZpbHRlcmVkT3B0aW9ucyIsImdldEZpbHRlcmVkT3B0aW9ucyIsIm9uT3B0aW9uc0NoYW5nZSIsInByZXZpb3VzVmFsdWUiLCJvcHRpb24iLCJmaW5kT3B0aW9uRnJvbVZhbHVlIiwic2VsZWN0ZWQiLCJyZXNwb25zaXZlT3B0aW9uIiwiY2xhc3NlcyIsInNlY29uZGFyeUNsYXNzZXMiLCJzZWNvbmRhcnkiLCJkaXNhYmxlZCIsInNlbGVjdE9wdGlvbiIsImdldENoYXJhY3RlckNvZGVGcm9tS2V5cHJlc3MiLCJjaGFyYWN0ZXIiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJnZXRDaGFyYWN0ZXJGcm9tS2V5cHJlc3MiLCJsZXR0ZXIiLCJmb3VuZCIsInNlYXJjaEFuZFNlbGVjdCIsImNvbnRpbnVlU2VhcmNoQW5kU2VsZWN0TWF0Y2giLCJyZXNldE9wdGlvbiIsImZpbHRlclN0cmluZ0xvd2VyIiwicmVwbGFjZSIsImVuY291bnRlcmVkTGFiZWxzQW5kVmFsdWVzIiwiaGVhZGVyIiwiaXNEdXBsaWNhdGUiLCJleGlzdGluZ1ZhbHVlc0ZvckxhYmVsIiwiaGFzRXhpc3RpbmdWYWx1ZXMiLCJpc0FycmF5IiwiZXF1YWxzIiwibGFiZWxNYXRjaGVzIiwibm90ZU1hdGNoZXMiLCJzZWNvbmRhcnlNYXRjaGVzIiwic2VhcmNoYWJsZU1hdGNoZXMiLCJmaWx0ZXJJbnB1dCIsInNlbGVjdGVkT3B0aW9uIiwiZmluZFNlbGVjdGVkIiwiY2hhcmFjdGVyQ29kZSIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYWN0aXZlT3B0aW9uIiwiYWN0aXZlTGluayIsIm9wdGlvbkxpbmtzIiwiZG93biIsIm1vdmVEb3duT25lT3B0aW9uIiwidXAiLCJtb3ZlVXBPbmVPcHRpb24iLCJyZXR1cm4iLCJjbGljayIsInByZXZpb3VzT3B0aW9uIiwicHJldmlvdXNPcHRpb25MaW5rIiwic2VsZWN0T3B0aW9uVXNpbmdMaW5rIiwibmV4dE9wdGlvbiIsIm5leHRPcHRpb25MaW5rIiwidHJhbnNjbHVkZWRPcHRpb24iLCJub3RlIiwic2VhcmNoYWJsZSIsImlzVmFsaWRNb2RlbCIsIm9wdGlvbk1hdGNoIiwicmVxdWlyZWQiLCIkY29tbWl0Vmlld1ZhbHVlIiwidGVybSIsInNlYXJjaFRlcm0iLCJjb250YWluc1NlYXJjaCIsImJyZWFrcG9pbnRzIiwidmFsaWRCcmVha3BvaW50cyIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJzcGxpdCIsImJyZWFrcG9pbnQiLCJpY29uIiwiaGVscEltYWdlIiwiYnV0dG9uVGV4dCIsImRyb3BwaW5nVGV4dCIsInByb2Nlc3NpbmdUZXh0Iiwic3VjY2Vzc1RleHQiLCJmYWlsdXJlVGV4dCIsImNhbWVyYU92ZXJsYXkiLCJjYW1lcmFEaXJlY3Rpb24iLCJkZXNjcmlwdGlvbiIsImluc3RydWN0aW9ucyIsIlVwbG9hZENvbnRyb2xsZXIiLCJpc0xpdmVDYW1lcmFVcGxvYWQiLCJpc0RvbmUiLCJjbGVhckh0bWxJbnB1dCIsInNldE5nTW9kZWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXQiLCJpc0Ryb3BwYWJsZSIsImlzRHJvcEVsaWdpYmxlIiwiZmlsZXMiLCJpc0ltYWdlIiwibG9jYWxzIiwibG9jYXRpb24iLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwidGVzdCIsImlucHV0RmlsZSIsInNob3dMaXZlQ2FwdHVyZVNjcmVlbiIsInZpZXdJY29uIiwiJHEiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwiZGVmZXJyZWQiLCJkZWZlciIsIm9ubG9hZCIsInJlc29sdmUiLCJvbmVycm9yIiwicmVqZWN0IiwicmVhZEFzRGF0YVVSTCIsInByb21pc2UiLCIkaHR0cCIsImZpZWxkTmFtZSIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCIkaHR0cE9wdGlvbnMiLCIkaW5wdXRPcHRpb25zIiwiY29weSIsInVybCIsImhlYWRlcnMiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaWRlbnRpdHkiLCJwcmVwYXJlSHR0cE9wdGlvbnMiLCJtZXRob2QiLCJwb3N0IiwiaXNOdW1iZXIiLCJpbnB1dE9wdGlvbnMiLCJTdWNjZXNzQ2FyZENvbnRyb2xsZXIiLCJmaWxlTmFtZSIsIkNhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyIiwiQ2FtZXJhT3ZlcmxheUhhbmRsZXIiLCJvdmVybGF5IiwiZGlyZWN0aW9uIiwib25DYXB0dXJlIiwidGVzdE1vZGUiLCJDYW1lcmFDYXB0dXJlQ29udHJvbGxlciIsIiR3aW5kb3ciLCIkbG9nIiwic2hvd1ZpZGVvUHJldmlldyIsInNob3dWaWRlb0luUHJldmlldyIsInNob3dDYXB0dXJlSW5QcmV2aWV3IiwibWVkaWFTdHJlYW0iLCJjYXB0dXJlQnV0dG9uRGlzYWJsZWQiLCJzY3JlZW5IZWlnaHQiLCJzY3JlZW5XaWR0aCIsInZpZGVvUmVzSGVpZ2h0IiwidmlkZW9SZXNXaWR0aCIsIm92ZXJsYXlXaWR0aCIsIm92ZXJsYXlIZWlnaHQiLCJvdmVybGF5WE9mZnNldCIsIm92ZXJsYXlZT2Zmc2V0IiwiZGlzcGxheUNhbnZhc1hPZmZzZXQiLCJkaXNwbGF5Q2FudmFzWU9mZnNldCIsInZpZGVvWE9mZnNldCIsInZpZGVvSGVpZ2h0IiwidmlkZW9XaWR0aCIsImlzVmlkZW9Ib3Jpem9udGFsbHlGbGlwcGVkIiwiaGFzR2V0VXNlck1lZGlhIiwid2FybiIsIm92ZXJsYXlMb2FkZWQiLCJvdmVybGF5RWxlbWVudCIsImRpc3BsYXlDYW52YXMiLCJ1cGxvYWRDYW52YXMiLCJ2aWRlb1ByZXZpZXdFbGVtZW50IiwidmlkZW8iLCJhc3NpZ25WaWRlb0RpbWVuc2lvbnMiLCJkZWJ1ZyIsImdldFZpZGVvU3BlY2lmaWNhdGlvbnMiLCJ2aWRlb0hlaWdodEluUGVyY2VudGFnZSIsInZpZGVvV2lkdGhJblBlcmNlbnRhZ2UiLCJ2aWRlb1BsYXlpbmdDYWxsYmFjayIsIiRhcHBseUFzeW5jIiwidmlkZW9QbGF5aW5nIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uT3JpZW50YXRpb25DaGFuZ2UiLCJzdGFydExpdmVDYW1GbG93IiwiY3JlYXRlT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFjayIsInBhdXNlIiwidHJ5QWNxdWlyZUZ1bGxTY3JlZW4iLCJmaW5hbGx5Iiwic2V0U2NyZWVuRGltZW5zaW9ucyIsIm5hdHVyYWxIZWlnaHQiLCJuYXR1cmFsV2lkdGgiLCJjcmVhdGVPdmVybGF5T25Mb2FkQ2FsbGJhY2siLCJ0cnlBY3F1aXJlTWVkaWFTdHJlYW0iLCJzdHJlYW0iLCJvblZpZGVvU3RyZWFtQWNxdWlzaXRpb24iLCJlcnIiLCJvbkNhbmNlbEJ0bkNsaWNrIiwic2NyZWVuZnVsbCIsImVuYWJsZWQiLCJpc0Z1bGxzY3JlZW4iLCJyZXF1ZXN0Iiwic3JjT2JqZWN0IiwicGxheSIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImVudW1lcmF0ZURldmljZXMiLCJkZXZpY2VzIiwibnVtVmlkZW9EZXZpY2VzIiwiZGV2aWNlIiwia2luZCIsImNhbWVyYUNvbnN0cmFpbnRzIiwid2lkdGgiLCJtaW4iLCJpZGVhbCIsIm1heCIsImZhY2luZ01vZGUiLCJhdWRpbyIsImdldFVzZXJNZWRpYSIsInNjcmVlbiIsImhlaWdodCIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImV4aXQiLCJnZXRUcmFja3MiLCJ0cmFjayIsInN0b3AiLCJjbG9zZVZpZGVvU3RyZWFtIiwiZ2V0Q2FudmFzU3BlY2lmaWNhdGlvbnMiLCJ5T2Zmc2V0IiwieE9mZnNldCIsInBhaW50SGVpZ2h0IiwicGFpbnRXaWR0aCIsImN0eCIsImdldENvbnRleHQiLCJyZXNldFRyYW5zZm9ybSIsImRyYXdJbWFnZSIsInRvQmxvYiIsImxlZnQiLCJ0b3AiLCJnZXRPdmVybGF5U3BlY2lmaWNhdGlvbnMiLCJpc0NvbW1vbmpzIiwia2V5Ym9hcmRBbGxvd2VkIiwiRWxlbWVudCIsInZhbCIsImZuTWFwIiwicmV0IiwiZXZlbnROYW1lTWFwIiwiY2hhbmdlIiwiZnVsbHNjcmVlbmNoYW5nZSIsImZ1bGxzY3JlZW5lcnJvciIsImVsZW0iLCJQcm9taXNlIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJvbkZ1bGxTY3JlZW5FbnRlcmVkIiwib2ZmIiwiZG9jdW1lbnRFbGVtZW50IiwidXNlckFnZW50IiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJvbiIsIm9uRnVsbFNjcmVlbkV4aXQiLCJleGl0RnVsbHNjcmVlbiIsInRvZ2dsZSIsIm9uY2hhbmdlIiwiY2FsbGJhY2siLCJldmVudE5hbWUiLCJyYXciLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImhhc05hcnJvd1ZpZGVvSW5Qb3J0cmFpdFNjcmVlbiIsInBhcnNlSW50IiwiaGFzTmFycm93VmlkZW9JbkxhbmRTY2FwZVNjcmVlbiIsImNhbnZhc0RpbWVuc2lvbnMiLCJnZXRDYW52YXNTcGVjc0ZvclBvcnRyYWl0U2NyZWVuV2l0aE5hcnJvd1ZpZGVvIiwiZ2V0Q2FudmFzU3BlY3NGb3JMYW5kc2NhcGVTY3JlZW5XaXRoTmFycm93VmlkZW8iLCJoZWlnaHRNdWx0Iiwid2lkdGhNdWx0IiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJjYW52YXNYT2Zmc2V0IiwiY2FudmFzWU9mZnNldCIsImdldENhbnZhc1NwZWNzIiwib3ZlcmxheU5hdHVyYWxIZWlnaHQiLCJvdmVybGF5TmF0dXJhbFdpZHRoIiwiZ2V0T3ZlcmxheUNvbnRhaW5lciIsImNvbnRhaW5lckhlaWdodCIsImNvbnRhaW5lcldpZHRoIiwiY29udGFpbmVyWU9mZnNldCIsImNvbnRhaW5lclhPZmZzZXQiLCJnZXRPdmVybGF5U3BlY2lmaWNhdGlvbnNXcnRDb250YWluZXIiLCJpc1NjcmVlblBvcnRyYWl0IiwiYXZhaWxhYmxlSGVpZ2h0IiwiaXNTY3JlZW5MYW5kc2NhcGUiLCJvdmVybGF5WE1hcmdpbiIsIm92ZXJsYXlZTWFyZ2luIiwib3ZlcmxheUhlaWdodFdpZHRoUmF0aW8iLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsImlzU2Vjb25kYXJ5Iiwic21hbGwiLCJibG9jayIsIm1vZGVsIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwiRmlsZUlucHV0Q29udHJvbGxlciIsIm9uVXNlcklucHV0IiwiY29udHJvbGxlckFzIiwiYmluZFRvQ29udHJvbGxlciIsInNjb3BlIiwiQ29tcG9uZW50Iiwic2Vjb25kYXJ5QnV0dG9uVGV4dCIsIm9uRmluaXNoIiwiYXJlQWxsRmlsZXNQcm9jZXNzZWQiLCJvYmpEaXYiLCJzY3JvbGxUb3AiLCJzY3JvbGxIZWlnaHQiLCJmaWxlT2JqZWN0Iiwic29tZSIsInR3RHJvcCIsIiRwYXJzZSIsIiRyb290U2NvcGUiLCIkZXhjZXB0aW9uSGFuZGxlciIsImF0dHIiLCJjb3VudGVyIiwiZGF0YVRyYW5zZmVyIiwiJCRwaGFzZSIsIiRhcHBseSIsInR3RHJhZ0VudGVyIiwiJGV2YWxBc3luYyIsInR3RHJhZ0xlYXZlIiwibG9jYWxlIiwidHdMb2NhbGUiLCJuZ01pbiIsIm5nTWF4IiwibW9kZWxUeXBlIiwiRGF0ZUNvbnRyb2xsZXIiLCJUd0RhdGVTZXJ2aWNlIiwiaW5pdGlhbGlzZWRXaXRoRGF0ZSIsImFwcGx5RGF0ZU1vZGVsSWZWYWxpZE9yVGhyb3dFcnJvciIsIlNUUklOR19UWVBFIiwiT0JKRUNUX1RZUEUiLCJkYXRlTW9kZWxUeXBlIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwic2V0RGF0ZVJlcXVpcmVkIiwic2V0RGF0ZURpc2FibGVkIiwic2V0RGF0ZUxvY2FsZSIsInNldE1vbnRocyIsImFkZFZhbGlkYXRvcnMiLCJkYXlJbnB1dCIsInllYXJJbnB1dCIsImFkZEZvY3VzSGFuZGxlcnMiLCJ5ZWFyVG91Y2hlZCIsImFkZEJsdXJIYW5kbGVycyIsInZhbGlkRGF0ZSIsImV4cGxvZGVEYXRlTW9kZWwiLCJkYXRlTW9udGhzIiwiZ2V0TW9udGhzQmFzZWRPbkludGxTdXBwb3J0Rm9yTG9jYWxlIiwiZGF0ZVJlcXVpcmVkIiwiZGF0ZURpc2FibGVkIiwiREVGQVVMVF9MT0NBTEVfRU4iLCJtb250aEJlZm9yZURheSIsImlzTW9udGhCZWZvcmVEYXkiLCJkYXRlIiwiZGF0ZU9iaiIsIkRhdGUiLCJnZXRVVENEYXRlIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENGdWxsWWVhciIsIiR2YWxpZGF0b3JzIiwibGltaXQiLCJwcmVwRGF0ZUxpbWl0Rm9yQ29tcGFyaXNvbiIsImRhdGVWYWx1ZSIsInByZXBEYXRlVmFsdWVGb3JDb21wYXJpc29uIiwiYWRqdXN0TGFzdERheSIsIm1vbnRoTmFtZXMiLCJtb250aE5hbWUiLCJleHRlbmRNb250aHNXaXRoSWRzIiwiZ2V0TW9udGhOYW1lc0ZvckxvY2FsZSIsImdldFVUQ0RhdGVGcm9tUGFydHMiLCJOdW1iZXIiLCJpc05hTiIsImNvbWJpbmVEYXRlIiwiaXNvU3RyaW5nIiwidG9JU09TdHJpbmciLCJkYXRlU3RyaW5nIiwic3Vic3RyaW5nIiwibGFzdFVUQ0RheUZvck1vbnRoQW5kWWVhciIsImdldExhc3REYXlPZk1vbnRoIiwidmFsaWREYXRlT2JqZWN0IiwiZ2V0VGltZSIsIm5nTGltaXQiLCJhdHRyTGltaXQiLCJnZXREZWZhdWx0RGF5TmFtZSIsImRheU9mV2VlayIsImZvcm1hdCIsImRlZmF1bHREYXlOYW1lIiwibGFuZ3VhZ2UiLCJnZXRMYW5ndWFnZUZyb21Mb2NhbGUiLCJERUZBVUxUX0RBWV9OQU1FU19CWV9MQU5HVUFHRSIsInN1YnN0ciIsImdldERlZmF1bHRNb250aE5hbWUiLCJERUZBVUxUX01PTlRIX05BTUVTX0JZX0xBTkdVQUdFIiwiZ2V0RGF0ZU5hbWUiLCJkYXlPZk1vbnRoIiwibGFuZyIsImdldFN1ZmZpeCIsIkRBWV9TVUZGSVhFU19CWV9MQU5HVUFHRSIsImdldFllYXJOYW1lIiwiWUVBUl9TVUZGSVhFU19CWV9MQU5HVUFHRSIsImdldExvY2FsaXNlZERhdGVOYW1lIiwiZm9ybWF0dGluZ09iamVjdCIsInRvTG9jYWxlRGF0ZVN0cmluZyIsImlzTG9jYWxlVHJhbnNsYXRpb25SZXF1aXJlc1N0cmlwcGluZyIsImdldFZhbGlkRGF0ZUZvcm1hdCIsImdldFZhbGlkTG9jYWxlIiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0Iiwic3VwcG9ydGVkTG9jYWxlc09mIiwiaXNJbnRsU3VwcG9ydGVkRm9yTG9jYWxlIiwiZ2V0RGVsaW1pdGVyIiwiREVMSU1JVEVSU19CWV9MQU5HVUFHRSIsInN1ZmZpeGVzIiwiZXhhY3RNYXRjaCIsImVuZHNXaXRoIiwiZ2V0TG9jYWxlRGF0ZSIsImdldERhdGUiLCJnZXRMb2NhbGVNb250aCIsImdldE1vbnRoIiwiZ2V0TG9jYWxlRnVsbFllYXIiLCJnZXRGdWxsWWVhciIsImdldExvY2FsZVRvZGF5Iiwibm93IiwiZ2V0VVRDVG9kYXkiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwic2V0VVRDRnVsbFllYXIiLCJzZXRVVENIb3VycyIsInNldFVUQ01pbnV0ZXMiLCJzZXRVVENTZWNvbmRzIiwic2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0TG9jYWxlRGF0ZUZyb21QYXJ0cyIsInNldEZ1bGxZZWFyIiwic2V0SG91cnMiLCJzZXRNaW51dGVzIiwic2V0U2Vjb25kcyIsInNldE1pbGxpc2Vjb25kcyIsImdldERhdGVQYXJ0c0Zyb21Jc28iLCJpc29EYXRlIiwiaG91cnNPZmZzZXQiLCJtaW51dGVzT2Zmc2V0Iiwib2Zmc2V0IiwibWF0Y2giLCJpc0lzb1N0cmluZ1ZhbGlkIiwiUmVnRXhwIiwiZ2V0VVRDRGF0ZUZyb21Jc28iLCJnZXREYXlOYW1lc0ZvckxvY2FsZSIsImRheXMiLCJ2YWxpZEZvcm1hdCIsImdldERheU5hbWVGb3JMb2NhbGUiLCJ2YWxpZExvY2FsZSIsIndlZWtkYXkiLCJtb250aHMiLCJnZXRNb250aE5hbWVGb3JMb2NhbGUiLCJkZWZhdWx0TW9udGhOYW1lIiwic2xpY2UiLCJnZXRXZWVrZGF5IiwiZ2V0VVRDRGF5IiwiaXNZZWFyQmVmb3JlTW9udGgiLCJhZGRZZWFycyIsInllYXJzIiwiYWRkVG9EYXRlIiwiYWRkTW9udGhzIiwiYWRkRGF5cyIsImdldExvY2FsZVRpbWVTdHJpbmciLCJnZXRUaW1lU3RyaW5nIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImFtcG0iLCJnZXRZZWFyQW5kTW9udGhQcmVzZW50YXRpb24iLCJ5ZWFyTmFtZSIsImRlbGltaXRlciIsImdldFllYXJNb250aERhdGVQcmVzZW50YXRpb24iLCJkYXRlTmFtZSIsImdldExvY2FsZU5vdyIsImdldFVUQ05vdyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRMb2NhbGVEYXRlU3RyaW5nIiwiZ2V0RGF0ZVN0cmluZyIsImdldERheSIsImdldFVUQ0RhdGVTdHJpbmciLCJjdXJyZW50WWVhciIsImhhc1RpbWUiLCJNYXRoIiwiYWJzIiwiaGFzRGF0ZSIsImhhc1dlZWtkYXkiLCJoYXNNb250aCIsIndlZWtkYXlOYW1lIiwidGltZU5hbWUiLCJjb21iaW5lRGF0ZVBhcnRzIiwiZGF5TmFtZSIsImVuIiwiamEiLCIxMSIsIjEyIiwiMTMiLCIxIiwiMiIsIjMiLCJkZSIsImZpIiwiRGF0ZURpc3BsYXkiLCJEYXRlRm9ybWF0RmlsdGVyIiwiZGF0ZVN1cHBsaWVkIiwic3RlcCIsInVwbG9hZEFjY2VwdCIsInVwbG9hZEljb24iLCJ1cGxvYWRUb29MYXJnZU1lc3NhZ2UiLCJuZ0ZvY3VzIiwibmdCbHVyIiwibmdNaW5sZW5ndGgiLCJuZ01heGxlbmd0aCIsIm5nUGF0dGVybiIsInVwbG9hZE9wdGlvbnMiLCJoZWxwT3B0aW9ucyIsInRleHRGb3JtYXQiLCJ2YWxpZGF0aW9uQXN5bmMiLCJwZXJzaXN0QXN5bmMiLCJvbkFzeW5jRmFpbHVyZSIsIm9uQXN5bmNTdWNjZXNzIiwiZmlsZVVwbG9hZFNvdXJjZSIsImNhbWVyYU9wdGlvbnMiLCJGb3JtQ29udHJvbENvbnRyb2xsZXIiLCJpbnRlcm5hbE1vZGVsIiwibWVzc2FnZSIsIm1vZGVsVmFsdWUiLCJ2aWV3VmFsdWUiLCJtaW5sZW5ndGgiLCJtYXhsZW5ndGgiLCIkZm9ybWF0dGVycyIsImluaXRpYWxGaWVsZCIsImNoYW5nZUhhbmRsZXIiLCJmb2N1c0hhbmRsZXIiLCJibHVySGFuZGxlciIsIndhcm5pbmdNZXNzYWdlIiwiRmllbGRDb250cm9sbGVyIiwiZmllbGQiLCJwYXJzZSIsImNvbnRyb2wiLCJnZXRDb250cm9sVHlwZSIsInZhbHVlc0FzeW5jIiwicHJlcFZhbHVlc0FzeW5jIiwiZW51bSIsImV4dHJhY3RFcnJvcnMiLCJvcmlnaW5hbERhdGEiLCJBcnJheSIsImVycm9ycyIsImNvbnRyb2xUeXBlIiwiZmxhdHRlbkZpZWxkc1dpdGhHcm91cHMiLCJmaWVsZHMiLCJmbGF0dGVuZWRGaWVsZHMiLCJmbGF0dGVuRmllbGRXaXRoR3JvdXAiLCJncm91cCIsInN1YkZpZWxkcyIsInRvb2x0aXAiLCJoZWxwVGV4dCIsImluZm8iLCJuZXN0ZWRGaWVsZCIsInByZXBMZWdhY3lWYWx1ZSIsInRpdGxlIiwiY29kZSIsInByZXBSZXF1aXJlbWVudHMiLCJhbHRlcm5hdGl2ZXMiLCJwcmVwcGVkQWx0ZXJuYXRpdmVzIiwiY29weU9mIiwiYWx0ZXJuYXRpdmUiLCJwcmVwYXJlZCIsInByZXBMZWdhY3lBbHRlcm5hdGl2ZXMiLCJwcm9wZXJ0aWVzIiwicHJlcEZpZWxkcyIsInR5cGVzIiwiaGlkZGVuIiwicHJlcGFyZWRGaWVsZHMiLCJmaWVsZE1hcCIsIm5lc3RlZEZpZWxkcyIsInBhdGhTZWN0aW9ucyIsIm5lc3RlZEtleSIsInRyYW5zZm9ybU5lc3RlZEtleXNUb05lc3RlZFNwZWNzIiwidHJhbnNmb3JtRmllbGRBcnJheVRvTWFwIiwicHJlcEZpZWxkIiwicHJlcGFyZWRGaWVsZCIsInByZXBMZWdhY3lQcm9wcyIsInByZXBUeXBlIiwicHJlcFBhdHRlcm4iLCJwcmVwVmFsaWRhdGlvbk1lc3NhZ2VzIiwicHJlcEhlbHAiLCJ0YWJUeXBlIiwidGFiTmFtZVdpdGhTcGFjZXMiLCJjaGFyQXQiLCJnZXROYW1lRnJvbVR5cGUiLCJmaWVsZEdyb3VwcyIsInZhbGlkYXRpb25SZWdleHAiLCJwYXR0ZXJuIiwibWluaW11bSIsIm1heGltdW0iLCJleGFtcGxlIiwidmFsdWVzQWxsb3dlZCIsInZhbHVlcyIsInByZXBMZWdhY3lWYWx1ZXMiLCJleCIsImNvbnNvbGUiLCJwb3N0RGF0YSIsInBhcmFtcyIsImdldFBhcmFtVmFsdWVzRnJvbU1vZGVsIiwiZmV0Y2hWYWx1ZXNBc3luYyIsInBhcmFtZXRlck5hbWUiLCJoZWxwIiwiaGVscExpc3QiLCJ1cGxvYWRQbGFjZWhvbGRlckltYWdlIiwiaW1hZ2UiLCJnZXRSZXF1aXJlZEZpZWxkcyIsImdldFNlbGVjdGlvblR5cGUiLCJnZXRDb250cm9sRm9yU3RyaW5nRm9ybWF0IiwiVmFsaWRhdGlvbkNvbnRyb2xsZXIiLCJ2YWxpZGF0aW9uIiwiY2hlY2tNb2RlbEFuZFVwZGF0ZSIsIiR2YWxpZCIsIiRkaXJ0eSIsImlzVmFsaWRPYmplY3RTY2hlbWEiLCJzY2hlbWEiLCJpc09iamVjdCIsInByb3BlcnR5TmFtZSIsInByb3BlcnR5VmFsdWUiLCJwcm9wZXJ0eVNjaGVtYSIsImlzVmFsaWRTY2hlbWEiLCJpc09iamVjdFByb3BlcnR5VmFsaWQiLCJyZWR1Y2UiLCJ2YWxpZFNvRmFyIiwidmFsaWRQcm9wZXJ0eSIsIm9uZU9mIiwiaXRlciIsImlzVmFsaWRPbmVPZlNjaGVtYSIsImFsbE9mIiwiaXNWYWxpZEFsbE9mU2NoZW1hIiwiZ2V0U3RyaW5nVmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZFN0cmluZ1NjaGVtYSIsImdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyIsImlzVmFsaWROdW1iZXJTY2hlbWEiLCJnZXRJbnRlZ2VyVmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZEludGVnZXJTY2hlbWEiLCJnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZEJvb2xlYW5TY2hlbWEiLCJpdGVtcyIsImdldEFycmF5VmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZEFycmF5U2NoZW1hIiwiaXNTdHJpbmciLCJpc0ludGVnZXIiLCJmbG9vciIsImlzQm9vbGVhbiIsImNvbnN0cnVjdG9yIiwiZmFpbHVyZXMiLCJpc1ZhbGlkUmVxdWlyZWQiLCJpc1ZhbGlkTWluTGVuZ3RoIiwibWluTGVuZ3RoIiwiaXNWYWxpZE1heExlbmd0aCIsIm1heExlbmd0aCIsImlzVmFsaWRQYXR0ZXJuIiwiaXNWYWxpZE1pbiIsImlzVmFsaWRNYXgiLCJpc1ZhbGlkTWluSXRlbXMiLCJtaW5JdGVtcyIsImlzVmFsaWRNYXhJdGVtcyIsIm1heEl0ZW1zIiwiZ2V0T2JqZWN0VmFsaWRhdGlvbkZhaWx1cmVzIiwicHJvcCIsInByb3BJbk1vZGVsIiwiZ2V0VmFsaWRhdGlvbkZhaWx1cmVzIiwiZ2V0VmFsaWRNb2RlbFBhcnRzIiwiY2xlYW5lZE1vZGVsIiwidmFsaWRTdWJzZXRPZk1vZGVsIiwibmVzdGVkU2NoZW1hIiwiZXh0ZW5kIiwiY2xlYW5Nb2RlbFdpdGhBbGxPZlNjaGVtYSIsImNsZWFuTW9kZWxXaXRoT25lT2ZTY2hlbWEiLCJjbGVhbk1vZGVsV2l0aE9iamVjdFNjaGVtYSIsImNoaWxkTW9kZWwiLCJjbGVhbk1vZGVsV2l0aEFycmF5U2NoZW1hIiwiY2xlYW5Nb2RlbFdpdGhTdHJpbmdTY2hlbWEiLCJjbGVhbk1vZGVsV2l0aE51bWJlclNjaGVtYSIsImNsZWFuTW9kZWxXaXRoQm9vbGVhblNjaGVtYSIsInJlZ2V4IiwiRm9ybSIsIkFsbE9mU2NoZW1hIiwiQXJyYXlTY2hlbWEiLCJCYXNpY1R5cGVTY2hlbWEiLCJHZW5lcmljU2NoZW1hIiwiT2JqZWN0U2NoZW1hIiwiT25lT2ZTY2hlbWEiLCJWYWxpZGF0aW9uIiwidHJhbnNsYXRpb25zIiwib25DaGFuZ2UiLCJpc1ZhbGlkIiwibW9kZWxzIiwic2NoZW1hcyIsInNwbGl0TW9kZWwiLCJzY2hlbWFGb3JJbmRleCIsImN1cnJlbnQiLCJjb21iaW5lZCIsInNpbXBsZVR5cGVzIiwibmV3SXRlbSIsImdldE5ld0l0ZW0iLCJnZXRBcnJheVR5cGUiLCJhcnJheVR5cGUiLCJyYW5kb20iLCJ2YWxpZGF0aW9uS2V5cyIsImhpZGVUaXRsZSIsIm5ld1NjaGVtYSIsIm91dHB1dE1vZGVsIiwiaW5jbHVkZXMiLCJhY3RpdmVJbmRleCIsImdldEFjdGl2ZVNjaGVtYUluZGV4IiwicHJlZmlsbE1vZGVscyIsInJ1bGVWYWxpZGF0b3JzIiwidHlwZVZhbGlkYXRvcnMiXSwibWFwcGluZ3MiOiJhQUNF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QUVyWixRQUFPOFUsZSxlQTJCZHJ5QixHLGNDMURmNUwsRUFBT0QsUUFBVSwyeUIsOEVDQWpCLEksRUFBQSxPLG9DQUVBLFNBQ0EsU0FDQSxTQUNZK2pDLEUsRUFBWixRQUNZQyxFLEVBQVosUSxtS0FVZTloQyxVQUNaakMsT0FBTyw0QkFBNkIsSUFDcENrQyxRQUFRLG1CQVZYLFdBQ0VZLEtBQUttK0IsbUJBQXFCQSxxQkFDMUJuK0IsS0FBS2srQixzQkFBd0JBLHdCQUM3QmwrQixLQUFLdzdCLGNBQWdCQSxnQkFDckJ4N0IsS0FBS2doQyxlQUFpQkEsRUFDdEJoaEMsS0FBS2loQyxlQUFpQkEsSUFLbUJ2akMiLCJmaWxlIjoiZGlzdC9qcy9qc29uLXNjaGVtYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMDcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBhbmd1bGFyOyIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi9kb20uc2VydmljZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcy5kb20nLCBbXSlcbiAgLnNlcnZpY2UoJ1R3RG9tU2VydmljZScsIERvbVNlcnZpY2UpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBGb2N1c2FibGUgZnJvbSAnLi9mb2N1c2FibGUuZGlyZWN0aXZlLmpzJztcbmltcG9ydCBGb3JtQ29udHJvbEZvY3VzIGZyb20gJy4vZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMuZm9jdXNhYmxlJywgW1xuICAgIERvbVNlcnZpY2VcbiAgXSlcbiAgLmRpcmVjdGl2ZSgndHdGb2N1c2FibGUnLCBGb2N1c2FibGUpXG4gIC5kaXJlY3RpdmUoJ2Zvcm1Db250cm9sJywgRm9ybUNvbnRyb2xGb2N1cykubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IERhdGVTZXJ2aWNlIGZyb20gJy4vZGF0ZS5zZXJ2aWNlLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLnNlcnZpY2VzLmRhdGUnLCBbXSlcbiAgLnNlcnZpY2UoJ1R3RGF0ZVNlcnZpY2UnLCBEYXRlU2VydmljZSkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuL3NlbGVjdC5jb21wb25lbnQuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcbmltcG9ydCBGb2N1c2FibGUgZnJvbSAnLi4vZm9jdXNhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnNlbGVjdCcsIFtcbiAgICBEb21TZXJ2aWNlLFxuICAgIEZvY3VzYWJsZVxuICBdKVxuICAuY29tcG9uZW50KCd0d1NlbGVjdCcsIFNlbGVjdCkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFJlcXVpcmVtZW50c1NlcnZpY2UgZnJvbSAnLi9yZXF1aXJlbWVudHMuc2VydmljZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcy5yZXF1aXJlbWVudHMnLCBbXSlcbiAgLnNlcnZpY2UoJ1R3UmVxdWlyZW1lbnRzU2VydmljZScsIFJlcXVpcmVtZW50c1NlcnZpY2UpLm5hbWU7XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG5jbGFzcyBGb2N1c2FibGVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsIFR3RG9tU2VydmljZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICBjb25zdCBmb3JtR3JvdXAgPSBUd0RvbVNlcnZpY2UuZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGVsZW1lbnQsICdmb3JtLWdyb3VwJyk7XG5cbiAgICBpZiAoZm9ybUdyb3VwICYmIGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgICAgIGZvcm1Hcm91cC5jbGFzc0xpc3QuYWRkKCdmb2N1cycpO1xuICAgICAgfSk7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgICAgIGZvcm1Hcm91cC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbkZvY3VzYWJsZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnLCAnVHdEb21TZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IEZvY3VzYWJsZUNvbnRyb2xsZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBSYWRpbyBmcm9tICcuL3JhZGlvLmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuaW1wb3J0IEZvY3VzYWJsZSBmcm9tICcuLi9mb2N1c2FibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMucmFkaW8nLCBbXG4gICAgRG9tU2VydmljZSxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdSYWRpbycsIFJhZGlvKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgUHJvY2Vzc2luZ0NhcmQgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuY29tcG9uZW50JztcbmltcG9ydCBQcm9jZXNzaW5nTWluaSBmcm9tICcuL3Byb2Nlc3NpbmctbWluaS5jb21wb25lbnQnO1xuaW1wb3J0IEFzeW5jRmlsZVJlYWRlciBmcm9tICcuLi9zZXJ2aWNlcy9hc3luYy1maWxlLXJlYWRlci5zZXJ2aWNlLmpzJztcbmltcG9ydCBBc3luY0ZpbGVTYXZlciBmcm9tICcuLi9zZXJ2aWNlcy9hc3luYy1maWxlLXNhdmVyLnNlcnZpY2UuanMnO1xuaW1wb3J0IEZpbGVWYWxpZGF0aW9uU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9maWxlLXZhbGlkYXRpb24uc2VydmljZS5qcyc7XG5pbXBvcnQgQXN5bmNUYXNrc0NvbmZpZyBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9hc3luY1Rhc2tzQ29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5wcm9jZXNzaW5nJywgW1xuICAgIEFzeW5jVGFza3NDb25maWcsXG4gICAgQXN5bmNGaWxlUmVhZGVyLFxuICAgIEFzeW5jRmlsZVNhdmVyLFxuICAgIEZpbGVWYWxpZGF0aW9uU2VydmljZVxuICBdKVxuICAuY29tcG9uZW50KCd0d1VwbG9hZFByb2Nlc3NpbmcnLCBQcm9jZXNzaW5nQ2FyZClcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRQcm9jZXNzaW5nTWluaScsIFByb2Nlc3NpbmdNaW5pKVxuICAubmFtZTtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICAkdGltZW91dCxcbiAgICBBc3luY0ZpbGVSZWFkZXIsXG4gICAgQXN5bmNGaWxlU2F2ZXIsXG4gICAgQXN5bmNUYXNrc0NvbmZpZyxcbiAgICBGaWxlVmFsaWRhdGlvblNlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgIHRoaXMuQXN5bmNGaWxlUmVhZGVyID0gQXN5bmNGaWxlUmVhZGVyO1xuICAgIHRoaXMuQXN5bmNGaWxlU2F2ZXIgPSBBc3luY0ZpbGVTYXZlcjtcbiAgICB0aGlzLkFzeW5jVGFza3NDb25maWcgPSBBc3luY1Rhc2tzQ29uZmlnO1xuICAgIHRoaXMuRmlsZVZhbGlkYXRpb24gPSBGaWxlVmFsaWRhdGlvblNlcnZpY2U7XG5cbiAgICB0aGlzLnByb2Nlc3NpbmdTdGF0ZSA9IG51bGw7XG4gIH1cblxuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5maWxlICYmIGNoYW5nZXMuZmlsZS5jdXJyZW50VmFsdWUpIHtcbiAgICAgIHRoaXMub25GaWxlQ2FwdHVyZShjaGFuZ2VzLmZpbGUuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBvbkZpbGVDYXB0dXJlKGZpbGUpIHtcbiAgICBpZiAodGhpcy5uZ0Rpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXRyaWV2ZSBmaWxlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXNldCgpO1xuXG4gICAgdGhpcy5maWxlID0gZmlsZTtcblxuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnByb2Nlc3NpbmdTdGF0ZSA9IG51bGw7XG5cbiAgICB0aGlzLm9uU3RhcnQoeyBmaWxlIH0pO1xuXG4gICAgaWYgKCF0aGlzLkZpbGVWYWxpZGF0aW9uLmlzU21hbGxlclRoYW5NYXhTaXplKGZpbGUsIHRoaXMubWF4U2l6ZSkpIHtcbiAgICAgIHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzID0gW3RoaXMudG9vTGFyZ2VNZXNzYWdlXTtcbiAgICAgIGFzeW5jRmFpbHVyZSh7XG4gICAgICAgIHN0YXR1czogNDEzLFxuICAgICAgICBzdGF0dXNUZXh0OiAnUmVxdWVzdCBFbnRpdHkgVG9vIExhcmdlJ1xuICAgICAgfSwgbnVsbCwgdGhpcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaHR0cE9wdGlvbnMpIHtcbiAgICAgIC8vIFBvc3QgZmlsZSBub3dcbiAgICAgIHRoaXMuYXN5bmNGaWxlUmVhZChmaWxlKVxuICAgICAgICAudGhlbihkYXRhVXJsID0+IHRoaXMuYXN5bmNGaWxlU2F2ZShmaWxlKVxuICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IGFzeW5jU3VjY2VzcyhyZXNwb25zZSwgZGF0YVVybCwgdGhpcykpXG4gICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDIyKSB7XG4gICAgICAgICAgICAgIC8vIE5vdGU6IE9ubHkgaWYgYXN5bmMgYWN0aW9uIHJldHVybnMgNDIyLCBkbyB3ZSB3YW50IHRvIHByb2Nlc3MgdGhhdCBlcnJvclxuICAgICAgICAgICAgICBhc3luY0ZhaWx1cmUoZXJyb3IsIGRhdGFVcmwsIHRoaXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gTm90ZTogSWYgYXN5bmMgYWN0aW9uIGZhaWxzLCB3ZSBjb250aW51ZSB3aXRoIG9yaWdpbmFsIGZsb3dcbiAgICAgICAgICAgICAgYXN5bmNTdWNjZXNzKG51bGwsIGRhdGFVcmwsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gYXN5bmNGYWlsdXJlKGVycm9yLCBudWxsLCB0aGlzKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBvc3Qgb24gZm9ybSBzdWJtaXRcbiAgICAgIHRoaXMuYXN5bmNGaWxlUmVhZChmaWxlKVxuICAgICAgICAudGhlbihkYXRhVXJsID0+IGFzeW5jU3VjY2VzcyhudWxsLCBkYXRhVXJsLCB0aGlzKSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IGFzeW5jRmFpbHVyZShlcnJvciwgbnVsbCwgdGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jRmlsZVNhdmUoZmlsZSkge1xuICAgIGNvbnN0IGh0dHBPcHRpb25zID0gdGhpcy5Bc3luY1Rhc2tzQ29uZmlnLmV4dGVuZEh0dHBPcHRpb25zKHRoaXMuaHR0cE9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLkFzeW5jRmlsZVNhdmVyLnNhdmUoaHR0cE9wdGlvbnMucGFyYW0gfHwgdGhpcy5uYW1lLCBmaWxlLCBodHRwT3B0aW9ucyk7XG4gIH1cblxuICBhc3luY0ZpbGVSZWFkKGZpbGUpIHtcbiAgICByZXR1cm4gdGhpcy5Bc3luY0ZpbGVSZWFkZXIucmVhZChmaWxlKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMucHJvY2Vzc2luZ1N0YXRlID0gMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIHRoaXMuaXNTdWNjZXNzID0gZmFsc2U7XG4gICAgdGhpcy5pc0Vycm9yID0gZmFsc2U7XG4gIH1cblxuICBvblJlbW92ZSgpIHtcbiAgICB0aGlzLm9uQ2FuY2VsKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXN5bmNTdWNjZXNzKHJlc3BvbnNlLCBkYXRhVXJsLCAkY3RybCkge1xuICAkY3RybC5wcm9jZXNzaW5nU3RhdGUgPSAxO1xuICBsZXQgaWQgPSBudWxsO1xuICBjb25zdCBmaWxlID0gJGN0cmwuZmlsZTtcbiAgY29uc3QgaHR0cE9wdGlvbnMgPSAkY3RybC5odHRwT3B0aW9ucztcblxuICBpZiAoaHR0cE9wdGlvbnNcbiAgICAgICYmIGh0dHBPcHRpb25zLmlkUHJvcGVydHlcbiAgICAgICYmIHJlc3BvbnNlXG4gICAgICAmJiByZXNwb25zZS5kYXRhXG4gICAgICAmJiByZXNwb25zZS5kYXRhW2h0dHBPcHRpb25zLmlkUHJvcGVydHldKSB7XG4gICAgaWQgPSByZXNwb25zZS5kYXRhW2h0dHBPcHRpb25zLmlkUHJvcGVydHldO1xuICB9XG5cbiAgLy8gVGltZSBzdWNjZXNzIG1lc3NhZ2luZyB0byBtYXRjaCBhbmltYXRpb25cbiAgJGN0cmwuJHRpbWVvdXQoKCkgPT4ge1xuICAgICRjdHJsLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICRjdHJsLmlzU3VjY2VzcyA9IHRydWU7XG4gICAgJGN0cmwub25TdWNjZXNzKHsgZmlsZSwgZGF0YVVybCwgaWQsIHJlc3BvbnNlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH0sIDM2MDApO1xuXG4gIHJldHVybiBkYXRhVXJsO1xufVxuZnVuY3Rpb24gYXN5bmNGYWlsdXJlKGVycm9yLCBkYXRhVXJsLCAkY3RybCkge1xuICAvLyBTdGFydCBjaGFuZ2luZyBwcm9jZXNzIGluZGljYXRvciBpbW1lZGlhdGVseVxuICAkY3RybC5wcm9jZXNzaW5nU3RhdGUgPSAtMTtcbiAgLy8gV2FpdCBiZWZvcmUgdXBkYXRpbmcgdGV4dFxuICAkY3RybC4kdGltZW91dCgoKSA9PiB7XG4gICAgJGN0cmwuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgJGN0cmwuaXNFcnJvciA9IHRydWU7XG4gIH0sIDM2MDApO1xuICAvLyBBbGxvdyBhIHNtYWxsIGFtb3VudCBvZiBleHRyYSB0aW1lIGJlZm9yZSBub3RpZnlpbmcgZXh0ZXJuYWwgaGFuZGxlcnNcbiAgJGN0cmwuJHRpbWVvdXQoKCkgPT4ge1xuICAgICRjdHJsLm9uRmFpbHVyZSh7IGVycm9yIH0pO1xuICB9LCA0MTAwKTsgLy8gMzUwMCk7IFRPRE8gZm9yIHNvbWUgcmVhc29uIG1vcmUgdGltZSBpcyBuZWVkZWRcblxuICByZXR1cm4gZXJyb3I7XG59XG5cbkNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyR0aW1lb3V0JyxcbiAgJ0FzeW5jRmlsZVJlYWRlcicsXG4gICdBc3luY0ZpbGVTYXZlcicsXG4gICdBc3luY1Rhc2tzQ29uZmlnJyxcbiAgJ0ZpbGVWYWxpZGF0aW9uU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICc8JyxcbiAgZmlsZTogJzwnLFxuXG4gIG9uU3RhcnQ6ICcmJyxcbiAgb25TdWNjZXNzOiAnJicsXG4gIG9uRmFpbHVyZTogJyYnLFxuICBvbkNhbmNlbDogJyYnLFxuXG4gIG1heFNpemU6ICc8JyxcbiAgYWNjZXB0OiAnPCcsXG4gIGh0dHBPcHRpb25zOiAnPCcsXG5cbiAgcHJvY2Vzc2luZ01lc3NhZ2U6ICc8JyxcbiAgc3VjY2Vzc01lc3NhZ2U6ICc8JyxcbiAgZXJyb3JNZXNzYWdlOiAnPCcsXG4gIHRvb0xhcmdlTWVzc2FnZTogJzwnLFxuXG4gIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuXG4gIGNhbmNlbFRleHQ6ICc8J1xufTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IERyb3AgZnJvbSAnLi9kcm9wLmRpcmVjdGl2ZSc7XG5pbXBvcnQgRHJhZ0VudGVyIGZyb20gJy4vZHJhZy1lbnRlci5kaXJlY3RpdmUnO1xuaW1wb3J0IERyYWdMZWF2ZSBmcm9tICcuL2RyYWctbGVhdmUuZGlyZWN0aXZlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmRyYWctYW5kLWRyb3AnLCBbXSlcbiAgLmRpcmVjdGl2ZSgndHdEcm9wJywgRHJvcClcbiAgLmRpcmVjdGl2ZSgndHdEcmFnRW50ZXInLCBEcmFnRW50ZXIpXG4gIC5kaXJlY3RpdmUoJ3R3RHJhZ0xlYXZlJywgRHJhZ0xlYXZlKVxuICAubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4vY2hlY2tib3guY29tcG9uZW50LmpzJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvbSc7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4uL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5jaGVja2JveCcsIFtcbiAgICBEb21TZXJ2aWNlLFxuICAgIEZvY3VzYWJsZVxuICBdKVxuICAuY29tcG9uZW50KCd0d0NoZWNrYm94JywgQ2hlY2tib3gpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuaW1wb3J0IFVwbG9hZCBmcm9tICcuL3VwbG9hZC5jb21wb25lbnQuanMnO1xuXG5pbXBvcnQgQ2FwdHVyZUNhcmQgZnJvbSAnLi9jYXB0dXJlLWNhcmQnO1xuaW1wb3J0IERyb3BwaW5nQ2FyZCBmcm9tICcuL2Ryb3BwaW5nLWNhcmQnO1xuaW1wb3J0IFByb2Nlc3NpbmdDYXJkIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkJztcbmltcG9ydCBTdWNjZXNzQ2FyZCBmcm9tICcuL3N1Y2Nlc3MtY2FyZCc7XG5pbXBvcnQgQ2FtZXJhQ2FwdHVyZSBmcm9tICcuL2NhbWVyYS1jYXB0dXJlJztcbmltcG9ydCBVcGxvYWRCdXR0b24gZnJvbSAnLi91cGxvYWQtYnV0dG9uJztcbmltcG9ydCBDYW1lcmFCdXR0b24gZnJvbSAnLi9jYW1lcmEtYnV0dG9uJztcblxuaW1wb3J0IEZpbGVJbnB1dCBmcm9tICcuL2ZpbGUtaW5wdXQuZGlyZWN0aXZlLmpzJztcbmltcG9ydCBNdWx0aVVwbG9hZCBmcm9tICcuL211bHRpLXVwbG9hZCc7XG5pbXBvcnQgRHJhZ0FuZERyb3AgZnJvbSAnLi4vZHJhZy1hbmQtZHJvcCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQnLCBbXG4gICAgQ2FwdHVyZUNhcmQsXG4gICAgRHJvcHBpbmdDYXJkLFxuICAgIFByb2Nlc3NpbmdDYXJkLFxuICAgIFN1Y2Nlc3NDYXJkLFxuICAgIENhbWVyYUNhcHR1cmUsXG4gICAgVXBsb2FkQnV0dG9uLFxuICAgIENhbWVyYUJ1dHRvbixcbiAgICBNdWx0aVVwbG9hZCxcbiAgICBEcmFnQW5kRHJvcFxuICBdKVxuICAuZGlyZWN0aXZlKCd0d0ZpbGVJbnB1dCcsIEZpbGVJbnB1dClcbiAgLmNvbXBvbmVudCgndHdVcGxvYWQnLCBVcGxvYWQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQXN5bmNUYXNrc0NvbmZpZyBmcm9tICcuL2FzeW5jVGFza3NDb25maWcuc2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcy5hc3luYy10YXNrcy1jb25maWcnLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jVGFza3NDb25maWcnLCBBc3luY1Rhc2tzQ29uZmlnKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRGF0ZUNvbnRyb2wgZnJvbSAnLi9kYXRlLmNvbXBvbmVudCc7XG5pbXBvcnQgRGF0ZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZGF0ZSc7XG5pbXBvcnQgRGF0ZUZvcm1hdCBmcm9tICcuLi8uLi9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0JztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vc2VsZWN0JztcbmltcG9ydCBGb2N1c2FibGUgZnJvbSAnLi4vZm9jdXNhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmRhdGUnLCBbXG4gICAgRGF0ZVNlcnZpY2UsXG4gICAgRGF0ZUZvcm1hdCxcbiAgICBTZWxlY3QsXG4gICAgRm9jdXNhYmxlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3RGF0ZScsIERhdGVDb250cm9sKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRGF0ZUZvcm1hdCBmcm9tICcuL2RhdGUtZm9ybWF0LmNvbXBvbmVudCc7XG5pbXBvcnQgRGF0ZUZpbHRlciBmcm9tICcuL2RhdGUtZm9ybWF0LmZpbHRlcic7XG5pbXBvcnQgRGF0ZVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZGF0ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3JtYXR0aW5nLmRhdGUnLCBbXG4gICAgRGF0ZVNlcnZpY2VcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdEYXRlRm9ybWF0JywgRGF0ZUZvcm1hdClcbiAgLmZpbHRlcigndHdEYXRlRm9ybWF0JywgRGF0ZUZpbHRlcilcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vc2VsZWN0JztcbmltcG9ydCBSYWRpbyBmcm9tICcuLi9yYWRpbyc7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vY2hlY2tib3gnO1xuaW1wb3J0IERhdGVDb250cm9sIGZyb20gJy4uL2RhdGUnO1xuaW1wb3J0IFVwbG9hZCBmcm9tICcuLi91cGxvYWQnO1xuXG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi9mb3JtLWNvbnRyb2wuY29tcG9uZW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmZvcm0tY29udHJvbCcsIFtcbiAgICBTZWxlY3QsXG4gICAgUmFkaW8sXG4gICAgQ2hlY2tib3gsXG4gICAgRGF0ZUNvbnRyb2wsXG4gICAgVXBsb2FkXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3Rm9ybUNvbnRyb2wnLCBGb3JtQ29udHJvbClcbiAgLmNvbXBvbmVudCgndHdEeW5hbWljRm9ybUNvbnRyb2wnLCBGb3JtQ29udHJvbCkgLy8gRGVwcmVjYXRlZFxuICAubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJy4uL2Zvcm0tY29udHJvbCc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi9maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IFJlcXVpcmVtZW50c1NlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvcmVxdWlyZW1lbnRzJztcbmltcG9ydCBDb250cm9sVmFsaWRhdGlvbiBmcm9tICcuLi8uLi92YWxpZGF0aW9uL2NvbnRyb2wtdmFsaWRhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5maWVsZCcsIFtcbiAgICBGb3JtQ29udHJvbCxcbiAgICBSZXF1aXJlbWVudHNTZXJ2aWNlLFxuICAgIENvbnRyb2xWYWxpZGF0aW9uXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3RmllbGQnLCBGaWVsZCkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbnRyb2xWYWxpZGF0aW9uIGZyb20gJy4vY29udHJvbC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxndWlkZS52YWxpZGF0aW9uLmNvbnRyb2wnLCBbXG4gICAgRG9tU2VydmljZVxuICBdKVxuICAuZGlyZWN0aXZlKCd0d1ZhbGlkYXRpb24nLCBDb250cm9sVmFsaWRhdGlvbikubmFtZTtcbiIsIlxuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jaGVja2JveC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NoZWNrYm94Lmh0bWwnO1xuXG5jb25zdCBDaGVja2JveCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6IHtcbiAgICAkbmdNb2RlbDogJ25nTW9kZWwnXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgbmFtZTogJ0AnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ1RydWVWYWx1ZTogJzwnLFxuICAgIG5nRmFsc2VWYWx1ZTogJzwnLFxuICAgIG5nUmVxdWlyZWQ6ICc8JyxcbiAgICBuZ0Rpc2FibGVkOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tib3g7XG4iLCJcbmNsYXNzIENoZWNrYm94Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRzY29wZSwgJGVsZW1lbnQsIFR3RG9tU2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdGhpcy5kb20gPSBUd0RvbVNlcnZpY2U7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuXG4gICAgdGhpcy5hZGRMYWJlbEhhbmRsZXIoKTtcbiAgICB0aGlzLmFkZFdhdGNoZXJzKCRzY29wZSwgJGVsZW1lbnQsICRuZ01vZGVsKTtcblxuICAgIHRoaXMuY2hlY2tib3hDb250YWluZXIgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAnY2hlY2tib3gnXG4gICAgKTtcblxuICAgIHRoaXMubGFiZWwgPSB0aGlzLmNoZWNrYm94Q29udGFpbmVyXG4gICAgICA/IHRoaXMuY2hlY2tib3hDb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xhYmVsJylbMF1cbiAgICAgIDogZmFsc2U7XG4gIH1cblxuICAkb25Jbml0KCkge1xuICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuaXNDaGVja2VkKCk7XG4gIH1cblxuICBpc0NoZWNrZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLm5nVHJ1ZVZhbHVlICYmIHRoaXMubmdUcnVlVmFsdWUgPT09IHRoaXMubmdNb2RlbClcbiAgICAgIHx8ICghdGhpcy5uZ1RydWVWYWx1ZSAmJiB0aGlzLm5nTW9kZWwpXG4gICAgICB8fCBmYWxzZTtcbiAgfVxuXG4gIGJ1dHRvbkNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY2hlY2tlZCkge1xuICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodGhpcy5uZ0ZhbHNlVmFsdWUgfHwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMubmdUcnVlVmFsdWUgfHwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgLy8gUHJldmVudCBidXR0b24gY2xpY2sgcHJvcGdhdGlvbiBmcm9tIGZpcmluZyBsYWJlbFxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVDaGVja2JveChcbiAgICAgIHRoaXMuY2hlY2tlZCxcbiAgICAgIHRoaXMuJGVsZW1lbnQsXG4gICAgICB0aGlzLiRuZ01vZGVsLFxuICAgICAgdGhpcy5uZ1JlcXVpcmVkLFxuICAgICAgdGhpcy5kb21cbiAgICApO1xuICB9XG5cbiAgYnV0dG9uRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9XG5cbiAgYnV0dG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgdGhpcy5sYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG5cbiAgICB2YWxpZGF0ZUNoZWNrYm94KFxuICAgICAgdGhpcy5jaGVja2VkLFxuICAgICAgdGhpcy4kZWxlbWVudCxcbiAgICAgIHRoaXMuJG5nTW9kZWwsXG4gICAgICB0aGlzLm5nUmVxdWlyZWQsXG4gICAgICB0aGlzLmRvbVxuICAgICk7XG4gIH1cblxuICAvLyBJRSAnY2xpY2tzJyB0aGUgaGlkZGVuIGlucHV0IHdoZW4gbGFiZWwgaXMgY2xpY2tlZFxuICBzdGF0aWMgaGlkZGVuQ2xpY2soJGV2ZW50KSB7XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgYWRkTGFiZWxIYW5kbGVyKCkge1xuICAgIGNvbnN0IGxhYmVsID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZSh0aGlzLmVsZW1lbnQsICdsYWJlbCcpO1xuXG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IGxhYmVsLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIGlmICghaXNEaXNhYmxlZCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpWzBdO1xuICAgICAgICAvLyBUcmlnZ2VyIG91ciBidXR0b24sIHByZXZlbnQgZGVmYXVsdCBsYWJlbCBiZWhhdmlvdXJcbiAgICAgICAgYnV0dG9uLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdjbGljaycpKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZFdhdGNoZXJzKCRzY29wZSwgJGVsZW1lbnQsICRuZ01vZGVsKSB7XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICAgIHZhbGlkYXRlQ2hlY2tib3goXG4gICAgICAgICAgdGhpcy5jaGVja2VkLFxuICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICRuZ01vZGVsLFxuICAgICAgICAgIHRoaXMubmdSZXF1aXJlZCxcbiAgICAgICAgICB0aGlzLmRvbVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdEaXNhYmxlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICAgIGNvbnN0IGNoZWNrYm94ID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGVsZW1lbnQsICdjaGVja2JveCcpO1xuICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlUYWdOYW1lKGVsZW1lbnQsICdsYWJlbCcpO1xuXG4gICAgICBpZiAoIWNoZWNrYm94KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZSAmJiAhb2xkVmFsdWUpIHtcbiAgICAgICAgY2hlY2tib3guY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gY2hlY2tib3guc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSBpZiAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlKSB7XG4gICAgICAgIGNoZWNrYm94LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGNoZWNrYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgbGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdSZXF1aXJlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdmFsaWRhdGVDaGVja2JveChcbiAgICAgICAgICB0aGlzLmNoZWNrZWQsXG4gICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgJG5nTW9kZWwsXG4gICAgICAgICAgdGhpcy5uZ1JlcXVpcmVkLFxuICAgICAgICAgIHRoaXMuZG9tXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDaGVja2JveChpc0NoZWNrZWQsICRlbGVtZW50LCAkbmdNb2RlbCwgaXNSZXF1aXJlZCwgZG9tKSB7XG4gIGlmICghJG5nTW9kZWwuJHRvdWNoZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBjb25zdCBidXR0b24gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LWNoZWNrYm94LWJ1dHRvbicpWzBdO1xuICBjb25zdCBjaGVja2JveExhYmVsID0gZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnY2hlY2tib3gnKTtcbiAgY29uc3QgZm9ybUdyb3VwID0gZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuXG4gIGlmICghaXNDaGVja2VkICYmIGlzUmVxdWlyZWQpIHtcbiAgICAkbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICBpZiAoY2hlY2tib3hMYWJlbCkge1xuICAgICAgY2hlY2tib3hMYWJlbC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICB9XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAkbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIGlmIChjaGVja2JveExhYmVsKSB7XG4gICAgICBjaGVja2JveExhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgICBpZiAoZm9ybUdyb3VwKSB7XG4gICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWVycm9yJyk7XG4gICAgfVxuICB9XG59XG5cbkNoZWNrYm94Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnVHdEb21TZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94Q29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8aW5wdXQgdHlwZT1oaWRkZW4gY2xhc3M9c3Itb25seSBuYW1lPXt7JGN0cmwubmFtZX19IG5nLW1vZGVsPSRjdHJsLm5nTW9kZWwgbmctY2xpY2s9JGN0cmwuaGlkZGVuQ2xpY2soJGV2ZW50KSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIC8+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9dHctY2hlY2tib3gtYnV0dG9uIHR3LWZvY3VzYWJsZSBuZy1jbGljaz0kY3RybC5idXR0b25DbGljaygkZXZlbnQpIG5nLWZvY3VzPSRjdHJsLmJ1dHRvbkZvY3VzKCkgbmctYmx1cj0kY3RybC5idXR0b25CbHVyKCkgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jbGFzcz1cXFwieydjaGVja2VkJzogJGN0cmwuY2hlY2tlZH1cXFwiIGFyaWEtcHJlc3NlZD17eyRjdHJsLmNoZWNrZWR9fT4gPHNwYW4gY2xhc3M9XFxcInR3LWNoZWNrYm94LWNoZWNrIGdseXBoaWNvbiBnbHlwaGljb24tb2tcXFwiPjwvc3Bhbj4gPC9idXR0b24+IFwiOyIsImZ1bmN0aW9uIERvbVNlcnZpY2UoKSB7XG4gIHRoaXMuZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZSA9IChlbGVtZW50LCB0YWdOYW1lKSA9PiB7XG4gICAgY29uc3QgdGFnTmFtZVVwcGVyID0gdGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50O1xuXG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICBpZiAocGFyZW50ICYmIHBhcmVudC50YWdOYW1lICYmIHBhcmVudC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09IHRhZ05hbWVVcHBlcikge1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZSA9IChlbGVtZW50LCBjbGFzc05hbWUpID0+IHtcbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudDtcblxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQuY2xhc3NMaXN0ICYmIHBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldFByZXZpb3VzU2libGluZ1dpdGhDbGFzc05hbWUgPSAoZWxlbWVudCwgY2xhc3NOYW1lKSA9PiB7XG4gICAgbGV0IHNpYmxpbmcgPSBlbGVtZW50LnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG5cbiAgICB3aGlsZSAoc2libGluZykge1xuICAgICAgaWYgKHNpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHNpYmxpbmc7XG4gICAgICB9XG4gICAgICBzaWJsaW5nID0gc2libGluZy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLmdldE5leHRTaWJsaW5nV2l0aENsYXNzTmFtZSA9IChlbGVtZW50LCBjbGFzc05hbWUpID0+IHtcbiAgICBsZXQgc2libGluZyA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICAgIGlmIChzaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nO1xuICAgICAgfVxuICAgICAgc2libGluZyA9IHNpYmxpbmcubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRG9tU2VydmljZTtcbiIsImltcG9ydCBGb2N1c2FibGVDb250cm9sbGVyIGZyb20gJy4vZm9jdXNhYmxlLmNvbnRyb2xsZXIuanMnO1xuXG5mdW5jdGlvbiBGb2N1c2FibGUoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiBGb2N1c2FibGVDb250cm9sbGVyXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvY3VzYWJsZTtcbiIsIi8vIFRoaXMgZGlyZWN0aXZlIHByb3ZpZGUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbi8vIEl0IHNob3VsZCBubyBsb25nZXIgYmUgbmVjZXNzYXJ5IHdoZW4gYnJvd3NlcnMgc3VwcG9ydCA6Zm9jdXMtd2l0aGluXG5pbXBvcnQgRm9jdXNhYmxlQ29udHJvbGxlciBmcm9tICcuL2ZvY3VzYWJsZS5jb250cm9sbGVyLmpzJztcblxuZnVuY3Rpb24gRm9ybUNvbnRyb2xGb2N1cygpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0MnLFxuICAgIGNvbnRyb2xsZXI6IEZvY3VzYWJsZUNvbnRyb2xsZXJcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xGb2N1cztcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vcmFkaW8uY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9yYWRpby5odG1sJztcblxuY29uc3QgUmFkaW8gPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICByZXF1aXJlOiB7XG4gICAgJG5nTW9kZWw6ICduZ01vZGVsJ1xuICB9LFxuICBiaW5kaW5nczoge1xuICAgIG5hbWU6ICdAJyxcbiAgICB2YWx1ZTogJ0AnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ1ZhbHVlOiAnPCcsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBuZ0NoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlvO1xuIiwiXG5jbGFzcyBSYWRpb0NvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCAkbmdNb2RlbCA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcblxuICAgIHRoaXMuZG9tID0gVHdEb21TZXJ2aWNlO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpO1xuICAgIHRoaXMubGFiZWwgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlUYWdOYW1lKHRoaXMuZWxlbWVudCwgJ2xhYmVsJyk7XG5cbiAgICAkZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkV2F0Y2hlcnMoJHNjb3BlLCB0aGlzLmVsZW1lbnQpO1xuICB9XG5cbiAgaXNDaGVja2VkKCkge1xuICAgIHJldHVybiAodGhpcy5uZ1ZhbHVlICYmIHRoaXMubmdNb2RlbCA9PT0gdGhpcy5uZ1ZhbHVlKVxuICAgICAgfHwgdGhpcy52YWx1ZSA9PT0gdGhpcy5uZ01vZGVsO1xuICB9XG5cbiAgYnV0dG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMubmdWYWx1ZSB8fCB0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIGJ1dHRvbkZvY3VzKCkge1xuICAgIGlmICh0aGlzLmxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH1cblxuICBidXR0b25CbHVyKCkge1xuICAgIGlmICh0aGlzLmxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzJyk7XG4gICAgfVxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgfVxuXG4gIGhpZGRlbklucHV0Q2hhbmdlKCkge1xuICAgIC8vIFRoaXMgb25seSBmaXJlcyBvbiBsYWJlbCBjbGlja1xuICAgIC8vIFNldHRpbmcgdmlldyB2YWx1ZSB3aWxsIGFsc28gdHJpZ2dlciBvbkNoYW5nZVxuICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSh0aGlzLm5nVmFsdWUgfHwgdGhpcy52YWx1ZSk7XG4gIH1cblxuICBhZGRXYXRjaGVycygkc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ01vZGVsJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLiRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5jaGVja2VkID0gdGhpcy5pc0NoZWNrZWQoKTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nRGlzYWJsZWQnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBjb25zdCByYWRpb0xhYmVsID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGVsZW1lbnQsICdyYWRpbycpO1xuXG4gICAgICBpZiAoIXJhZGlvTGFiZWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1ZhbHVlICYmICFvbGRWYWx1ZSkge1xuICAgICAgICByYWRpb0xhYmVsLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHJhZGlvTGFiZWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICB9IGVsc2UgaWYgKCFuZXdWYWx1ZSAmJiBvbGRWYWx1ZSkge1xuICAgICAgICByYWRpb0xhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIHJhZGlvTGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cblJhZGlvQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnVHdEb21TZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlvQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8aW5wdXQgdHlwZT1yYWRpbyBjbGFzcz1zci1vbmx5IG5hbWU9e3skY3RybC5uYW1lfX0gbmctdmFsdWU9XFxcIiRjdHJsLm5nVmFsdWUgfHwgJGN0cmwudmFsdWVcXFwiIG5nLW1vZGVsPSRjdHJsLm5nTW9kZWwgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuaGlkZGVuSW5wdXRDaGFuZ2UoKSB0YWJpbmRleD0tMSAvPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPXR3LXJhZGlvLWJ1dHRvbiB0dy1mb2N1c2FibGUgbmctY2xpY2s9JGN0cmwuYnV0dG9uQ2xpY2soJGV2ZW50KSBuZy1mb2N1cz0kY3RybC5idXR0b25Gb2N1cygpIG5nLWJsdXI9JGN0cmwuYnV0dG9uQmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2xhc3M9XFxcIntjaGVja2VkOiAkY3RybC5jaGVja2VkfVxcXCIgYXJpYS1wcmVzc2VkPXt7JGN0cmwuY2hlY2tlZH19PiA8c3BhbiBjbGFzcz10dy1yYWRpby1jaGVjaz48L3NwYW4+IDwvYnV0dG9uPiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL3NlbGVjdC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3NlbGVjdC5odG1sJztcblxuY29uc3QgU2VsZWN0ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICB0cmFuc2NsdWRlOiB0cnVlLFxuICBiaW5kaW5nczoge1xuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG9wdGlvbnM6ICc8JyxcbiAgICBuYW1lOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICBmaWx0ZXI6ICdAJyxcbiAgICBzaXplOiAnQCcsXG4gICAgZHJvcGRvd25SaWdodDogJ0AnLFxuICAgIGRyb3Bkb3duVXA6ICdAJyxcbiAgICBkcm9wZG93bldpZHRoOiAnQCcsXG4gICAgaW52ZXJzZTogJzwnLFxuICAgIGhpZGVOb3RlOiAnQCcsXG4gICAgaGlkZVNlY29uZGFyeTogJ0AnLFxuICAgIGhpZGVJY29uOiAnQCcsXG4gICAgaGlkZUN1cnJlbmN5OiAnQCcsXG4gICAgaGlkZUNpcmNsZTogJ0AnLFxuICAgIGhpZGVMYWJlbDogJ0AnXG4gIH1cbn07XG5cbi8qXG4vLyBUT0RPIG1heSBiZSBiZXR0ZXIgZm9yIGFjY2Vzc2liaWxpdHkgdG8gaGF2ZSBoaWRkZW4gc2VsZWN0P1xuPHNlbGVjdCBuYW1lPSd7eyRjdHJsLm5hbWV9fScgY2xhc3M9J3NyLW9ubHkgdHctc2VsZWN0LWhpZGRlbicgXFxcbiAgbmctbW9kZWw9JyRjdHJsLm5nTW9kZWwnIFxcXG4gIG5nLW9wdGlvbnM9J29wdGlvbi52YWx1ZSBhcyBvcHRpb24ubGFiZWwgZm9yIG9wdGlvbiBpbiAkY3RybC5vcHRpb25zJyBcXFxuICBuZy1kaXNhYmxlZD0nJGN0cmwubmdEaXNhYmxlZCcgXFxcbiAgbmctcmVxdWlyZWQ9JyRjdHJsLm5nUmVxdWlyZWQnPiBcXFxuPC9zZWxlY3Q+XCJcbiovXG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5jbGFzcyBTZWxlY3RDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsICR0cmFuc2NsdWRlLCAkdGltZW91dCwgJGF0dHJzLCBUd0RvbVNlcnZpY2UsICRzY29wZSkge1xuICAgIHRoaXMuJG5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLiR0cmFuc2NsdWRlID0gJHRyYW5zY2x1ZGU7XG4gICAgdGhpcy5kb20gPSBUd0RvbVNlcnZpY2U7XG5cbiAgICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ01vZGVsJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4gdGhpcy5vbk1vZGVsQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpO1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLmJ1dHRvbiA9IHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdidG4nKVswXTtcbiAgICB0aGlzLnNlYXJjaCA9ICcnO1xuXG4gICAgcHJlU2VsZWN0TW9kZWxWYWx1ZSh0aGlzLiRuZ01vZGVsLCB0aGlzKTtcbiAgICBzZXREZWZhdWx0SWZSZXF1aXJlZCh0aGlzLiRuZ01vZGVsLCB0aGlzLCB0aGlzLiRlbGVtZW50LCB0aGlzLiRhdHRycyk7XG5cbiAgICBhZGRFdmVudEhhbmRsZXJzKHRoaXMsIHRoaXMuJGVsZW1lbnQsIHRoaXMuJG5nTW9kZWwsIHRoaXMub3B0aW9ucywgdGhpcy4kdGltZW91dCk7XG5cbiAgICBjaGVja0ZvclRyYW5zY2x1ZGVkQ29udGVudCh0aGlzLiR0cmFuc2NsdWRlLCB0aGlzKTtcblxuICAgIHRoaXMucmVzcG9uc2l2ZUNsYXNzZXMgPSByZXNwb25zaXZlQ2xhc3NlcztcblxuICAgIHRoaXMub3B0aW9uc1BhZ2VTaXplID0gMzAwO1xuICAgIHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnNQYWdlU2l6ZTsgLy8gSW5pdC5cbiAgICB0aGlzLmhhc01vcmVPcHRpb25zVG9SZXZlYWwgPSBmYWxzZTtcblxuICAgIHRoaXMuZmlsdGVyU3RyaW5nID0gJyc7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMub3B0aW9ucykge1xuICAgICAgdGhpcy5vbk9wdGlvbnNDaGFuZ2UoXG4gICAgICAgIGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWUsXG4gICAgICAgIGNoYW5nZXMub3B0aW9ucy5wcmV2aW91c1ZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG9uTW9kZWxDaGFuZ2UobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgaWYgKG5ld1ZhbHVlID09PSBvbGRWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobmV3VmFsdWUgfHwgb2xkVmFsdWUpIHtcbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgfVxuICAgIGNvbnN0IG9wdGlvbiA9IGZpbmRPcHRpb25Gcm9tVmFsdWUodGhpcy5vcHRpb25zLCBuZXdWYWx1ZSk7XG4gICAgaWYgKG9wdGlvbikge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IG9wdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgb25PcHRpb25zQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgIHByZVNlbGVjdE1vZGVsVmFsdWUodGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gICAgICBzZXREZWZhdWx0SWZSZXF1aXJlZCh0aGlzLiRuZ01vZGVsLCB0aGlzLCB0aGlzLiRlbGVtZW50LCB0aGlzLiRhdHRycyk7XG4gICAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZ2V0RmlsdGVyZWRPcHRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgY2lyY2xlQ2xhc3NlcyhyZXNwb25zaXZlT3B0aW9uKSB7XG4gICAgbGV0IGNsYXNzZXMgPSByZXNwb25zaXZlQ2xhc3NlcyhyZXNwb25zaXZlT3B0aW9uKTtcbiAgICBjb25zdCBzZWNvbmRhcnlDbGFzc2VzID0gcmVzcG9uc2l2ZUNsYXNzZXModGhpcy5oaWRlU2Vjb25kYXJ5KTtcbiAgICAvLyBJZiBzZWNvbmRhcnkgdGV4dCBsaW5lLCBhbmQgaXQgd29uJ3QgYmUgaGlkZGVuIGF0IHNvbWUgcG9pbnQsIHVzZSBsYXJnZXIgY2lyY2xlXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWQuc2Vjb25kYXJ5ICYmIHNlY29uZGFyeUNsYXNzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjbGFzc2VzICs9ICcgY2lyY2xlLXNtJztcbiAgICB9IGVsc2Uge1xuICAgICAgY2xhc3NlcyArPSAnIGNpcmNsZS14cyc7XG4gICAgfVxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9XG5cbiAgYnV0dG9uRm9jdXMoKSB7XG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfVxuXG4gIG9wdGlvbkNsaWNrKG9wdGlvbiwgJGV2ZW50KSB7XG4gICAgaWYgKG9wdGlvbi5kaXNhYmxlZCkge1xuICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWxlY3RPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcywgb3B0aW9uKTtcbiAgICB0aGlzLmJ1dHRvbi5mb2N1cygpO1xuICB9XG5cbiAgb3B0aW9uRm9jdXMob3B0aW9uKSB7XG4gICAgc2VsZWN0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMsIG9wdGlvbik7XG4gIH1cblxuICBvcHRpb25LZXlwcmVzcyhldmVudCkge1xuICAgIC8vIElmIHdlJ3JlIGluIHRoZSBmaWx0ZXIgZG9uJ3QgYWxsb3cgbm9ybWFsIGJlaGF2aW91clxuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCd0dy1zZWxlY3QtZmlsdGVyJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQcmV2ZW50IGRlbGV0ZSB0YWtpbmcgdXMgYmFja1xuICAgIGNvbnN0IGNoYXJhY3RlckNvZGUgPSBnZXRDaGFyYWN0ZXJDb2RlRnJvbUtleXByZXNzKGV2ZW50KTtcbiAgICBpZiAoY2hhcmFjdGVyQ29kZSA9PT0gOCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTZWFyY2ggZm9yIG9wdGlvbiBiYXNlZCBvbiBjaGFyYWN0ZXJcbiAgICBjb25zdCBjaGFyYWN0ZXIgPSBnZXRDaGFyYWN0ZXJGcm9tS2V5cHJlc3MoZXZlbnQpO1xuICAgIGNvbnRpbnVlU2VhcmNoQW5kU2VsZWN0TWF0Y2goXG4gICAgICB0aGlzLiRuZ01vZGVsLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIGNoYXJhY3RlclxuICAgICk7XG4gICAgZm9jdXNPbkFjdGl2ZUxpbmsodGhpcy5lbGVtZW50KTtcbiAgfVxuXG4gIHBsYWNlaG9sZGVyQ2xpY2soKSB7XG4gICAgcmVzZXRPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gICAgdGhpcy5idXR0b24uZm9jdXMoKTtcbiAgfVxuXG4gIHBsYWNlaG9sZGVyRm9jdXMoKSB7XG4gICAgcmVzZXRPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gIH1cblxuICBnZXRGaWx0ZXJlZE9wdGlvbnMoKSB7XG4gICAgdGhpcy5oYXNNb3JlT3B0aW9uc1RvUmV2ZWFsID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMgfHwgIXRoaXMub3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXJTdHJpbmdMb3dlciA9IHRoaXMuZmlsdGVyU3RyaW5nICYmIGVzY2FwZVJlZ0V4cCh0aGlzLmZpbHRlclN0cmluZy50b0xvd2VyQ2FzZSgpKTtcblxuICAgIGNvbnN0IGVuY291bnRlcmVkTGFiZWxzQW5kVmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vcHRpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBvcHRpb24gPSB0aGlzLm9wdGlvbnNbaV07XG5cbiAgICAgIGlmIChvcHRpb24uaGVhZGVyICYmICFvcHRpb24udmFsdWUgJiYgIW9wdGlvbi5sYWJlbCkge1xuICAgICAgICBmaWx0ZXJlZE9wdGlvbnMucHVzaChvcHRpb24pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBpc0R1cGxpY2F0ZSA9IGZhbHNlO1xuXG4gICAgICBjb25zdCBleGlzdGluZ1ZhbHVlc0ZvckxhYmVsID0gZW5jb3VudGVyZWRMYWJlbHNBbmRWYWx1ZXNbb3B0aW9uLmxhYmVsXTtcbiAgICAgIGNvbnN0IGhhc0V4aXN0aW5nVmFsdWVzID0gYW5ndWxhci5pc0FycmF5KGV4aXN0aW5nVmFsdWVzRm9yTGFiZWwpO1xuXG4gICAgICBpZiAoaGFzRXhpc3RpbmdWYWx1ZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBleGlzdGluZ1ZhbHVlc0ZvckxhYmVsLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuZXF1YWxzKGV4aXN0aW5nVmFsdWVzRm9yTGFiZWxbal0sIG9wdGlvbi52YWx1ZSkpIHtcbiAgICAgICAgICAgIGlzRHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBzaG91bGRBZGRPcHRpb24gPSAhaXNEdXBsaWNhdGVcbiAgICAgICAgJiYgKCFmaWx0ZXJTdHJpbmdMb3dlciAvLyBlbXB0eSBmaWx0ZXJzdHJpbmcgbWVhbnMgcGFzcyBldmVyeXRoaW5nLlxuICAgICAgICAgIHx8IGxhYmVsTWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKVxuICAgICAgICAgIHx8IG5vdGVNYXRjaGVzKG9wdGlvbiwgZmlsdGVyU3RyaW5nTG93ZXIpXG4gICAgICAgICAgfHwgc2Vjb25kYXJ5TWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKVxuICAgICAgICAgIHx8IHNlYXJjaGFibGVNYXRjaGVzKG9wdGlvbiwgZmlsdGVyU3RyaW5nTG93ZXIpKTtcblxuICAgICAgaWYgKHNob3VsZEFkZE9wdGlvbikge1xuICAgICAgICAvLyBUb28gbWFueSBvcHRpb25zPyBEb24ndCBhZGQgYW55bW9yZSwgaW5kaWNhdGUgdGhhdCB0aGVyZSdzIG1vcmUgaW5zdGVhZC5cbiAgICAgICAgaWYgKGZpbHRlcmVkT3B0aW9ucy5sZW5ndGggPj0gdGhpcy5udW1iZXJPZk9wdGlvbnNSZXZlYWxlZCkge1xuICAgICAgICAgIHRoaXMuaGFzTW9yZU9wdGlvbnNUb1JldmVhbCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzRXhpc3RpbmdWYWx1ZXMpIHtcbiAgICAgICAgICBleGlzdGluZ1ZhbHVlc0ZvckxhYmVsLnB1c2gob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmNvdW50ZXJlZExhYmVsc0FuZFZhbHVlc1tvcHRpb24ubGFiZWxdID0gW29wdGlvbi52YWx1ZV07XG4gICAgICAgIH1cblxuICAgICAgICBmaWx0ZXJlZE9wdGlvbnMucHVzaChvcHRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWx0ZXJlZE9wdGlvbnM7XG4gIH1cblxuICBmb2N1c09uRmlsdGVySW5wdXQoKSB7XG4gICAgY29uc3QgZmlsdGVySW5wdXQgPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHctc2VsZWN0LWZpbHRlcicpWzBdO1xuICAgIGlmIChmaWx0ZXJJbnB1dCkge1xuICAgICAgZmlsdGVySW5wdXQuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBmaWx0ZXJDaGFuZ2UoKSB7XG4gICAgdGhpcy5udW1iZXJPZk9wdGlvbnNSZXZlYWxlZCA9IHRoaXMub3B0aW9uc1BhZ2VTaXplOyAvLyBSZXNldC5cbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZ2V0RmlsdGVyZWRPcHRpb25zKCk7XG4gICAgY29uc3Qgc2VsZWN0ZWRPcHRpb24gPSBmaW5kU2VsZWN0ZWQodGhpcy5maWx0ZXJlZE9wdGlvbnMsIHRoaXMuc2VsZWN0ZWQpO1xuXG4gICAgLy8gQ2hvb3NlIGEgbmV3IHNlbGVjdGVkIHZhbHVlIGlmIHRoZSBvbGQgb25lIHdhcyBoaWRkZW5cbiAgICBpZiAoIXNlbGVjdGVkT3B0aW9uICYmIHRoaXMuZmlsdGVyZWRPcHRpb25zLmxlbmd0aCkge1xuICAgICAgc2VsZWN0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMsIHRoaXMuZmlsdGVyZWRPcHRpb25zWzBdKTtcbiAgICB9XG4gIH1cblxuICAvLyBLZXlkb3duIGFzIGtleXByZXNzIGRpZCBub3Qgd29yayBpbiBjaHJvbWUvc2FmYXJpXG4gIGZpbHRlcktleWRvd24oZXZlbnQpIHtcbiAgICBjb25zdCBjaGFyYWN0ZXJDb2RlID0gZXZlbnQud2hpY2ggfHwgZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZTtcbiAgICBjb25zdCBhY3RpdmVPcHRpb24gPSB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpO1xuICAgIGNvbnN0IGFjdGl2ZUxpbmsgPSBhY3RpdmVPcHRpb24gPyBhY3RpdmVPcHRpb24ucXVlcnlTZWxlY3RvcignYScpIDogZmFsc2U7XG4gICAgY29uc3Qgb3B0aW9uTGlua3MgPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgndHctc2VsZWN0LW9wdGlvbi1saW5rJyk7XG5cbiAgICBpZiAoY2hhcmFjdGVyQ29kZSA9PT0ga2V5cy5kb3duKSB7XG4gICAgICB0aGlzLm1vdmVEb3duT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBjdXJzb3IganVtcGluZyBhcm91bmQgaW4gaW5wdXRcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlckNvZGUgPT09IGtleXMudXApIHtcbiAgICAgIHRoaXMubW92ZVVwT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBjdXJzb3IganVtcGluZyBpbiBpbnB1dFxuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyQ29kZSA9PT0ga2V5cy5yZXR1cm4pIHtcbiAgICAgIGlmIChhY3RpdmVPcHRpb24pIHtcbiAgICAgICAgYWN0aXZlT3B0aW9uLmNsaWNrKCk7XG4gICAgICAgIHRoaXMuYnV0dG9uLmZvY3VzKCk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBQcmV2ZW50IGZvcm0gYWN0aW9uIGFzIGlucHV0IGFjdGl2ZVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHNlbGVjdE9wdGlvblVzaW5nTGluayhsaW5rKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gdGhpcy5maWx0ZXJlZE9wdGlvbnNbbGluay5nZXRBdHRyaWJ1dGUoJ2luZGV4JyldO1xuICAgIHNlbGVjdE9wdGlvbih0aGlzLiRuZ01vZGVsLCB0aGlzLCBvcHRpb24pO1xuICB9XG5cbiAgbW92ZVVwT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpIHtcbiAgICAvLyBJZiBub25lIGFjdGl2ZSwgc2VsZWN0IGxhc3RcbiAgICBpZiAoIWFjdGl2ZU9wdGlvbiAmJiBvcHRpb25MaW5rcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc2VsZWN0T3B0aW9uVXNpbmdMaW5rKG9wdGlvbkxpbmtzW29wdGlvbkxpbmtzLmxlbmd0aCAtIDFdKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhY3RpdmUgb3B0aW9uIG5vdCBmaXJzdCwgbW92ZSB1cFxuICAgIGlmIChhY3RpdmVMaW5rICE9PSBvcHRpb25MaW5rc1swXSkge1xuICAgICAgY29uc3QgcHJldmlvdXNPcHRpb24gPSB0aGlzLmRvbS5nZXRQcmV2aW91c1NpYmxpbmdXaXRoQ2xhc3NOYW1lKFxuICAgICAgICBhY3RpdmVPcHRpb24sXG4gICAgICAgICd0dy1zZWxlY3Qtb3B0aW9uJ1xuICAgICAgKTtcbiAgICAgIGlmIChwcmV2aW91c09wdGlvbikge1xuICAgICAgICBjb25zdCBwcmV2aW91c09wdGlvbkxpbmsgPSBwcmV2aW91c09wdGlvbi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdO1xuICAgICAgICB0aGlzLnNlbGVjdE9wdGlvblVzaW5nTGluayhwcmV2aW91c09wdGlvbkxpbmspO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG1vdmVEb3duT25lT3B0aW9uKGFjdGl2ZU9wdGlvbiwgYWN0aXZlTGluaywgb3B0aW9uTGlua3MpIHtcbiAgICAvLyBJZiBub25lIGFjdGl2ZSwgc2VsZWN0IGZpcnN0XG4gICAgaWYgKCFhY3RpdmVPcHRpb24gJiYgb3B0aW9uTGlua3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlbGVjdE9wdGlvblVzaW5nTGluayhvcHRpb25MaW5rc1swXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIGFjdGl2ZSBvcHRpb24gbm90IGxhc3QsIG1vdmUgZG93blxuICAgIGlmIChhY3RpdmVMaW5rICE9PSBvcHRpb25MaW5rc1tvcHRpb25MaW5rcy5sZW5ndGggLSAxXSkge1xuICAgICAgY29uc3QgbmV4dE9wdGlvbiA9IHRoaXMuZG9tLmdldE5leHRTaWJsaW5nV2l0aENsYXNzTmFtZShcbiAgICAgICAgYWN0aXZlT3B0aW9uLFxuICAgICAgICAndHctc2VsZWN0LW9wdGlvbidcbiAgICAgICk7XG4gICAgICBpZiAobmV4dE9wdGlvbikge1xuICAgICAgICBjb25zdCBuZXh0T3B0aW9uTGluayA9IG5leHRPcHRpb24uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXTtcbiAgICAgICAgdGhpcy5zZWxlY3RPcHRpb25Vc2luZ0xpbmsobmV4dE9wdGlvbkxpbmspO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIElmIGFjdGl2ZSBpcyBsYXN0IGFuZCBjdXN0b20gYWN0aW9uLCBmb2N1cyBvbiBpdFxuICAgIGNvbnN0IHRyYW5zY2x1ZGVkT3B0aW9uID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC10cmFuc2NsdWRlZCcpO1xuXG4gICAgaWYgKHRyYW5zY2x1ZGVkT3B0aW9uLmxlbmd0aCkge1xuICAgICAgdHJhbnNjbHVkZWRPcHRpb25bMF0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHNob3VsZFNob3dTZWFyY2goKSB7XG4gICAgLy8gRm9yIGxvbmdlciBsaXN0IGF1dG8tc2hvdyBzZWFyY2guXG4gICAgLy8gV2UgY2hvb3NlIHR3ZWx2ZSBhcyB3ZSBkb24ndCBuZWVkIGl0IGZvciBtb250aCBzZWxlY3RvclxuICAgIHJldHVybiB0aGlzLmZpbHRlciB8fCAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5sZW5ndGggPiAxMik7XG4gIH1cblxuICByZXZlYWxNb3JlT3B0aW9ucygkZXZlbnQpIHtcbiAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy5udW1iZXJPZk9wdGlvbnNSZXZlYWxlZCArPSB0aGlzLm9wdGlvbnNQYWdlU2l6ZTtcbiAgICB0aGlzLmZpbHRlcmVkT3B0aW9ucyA9IHRoaXMuZ2V0RmlsdGVyZWRPcHRpb25zKCk7IC8vIFJlLWNhbGMgb3B0aW9ucyBiYXNlZCBvbiBsYXJnZXIgbGlzdCBzaXplLlxuICB9XG59XG5cbmZ1bmN0aW9uIGxhYmVsTWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLmxhYmVsICYmIG9wdGlvbi5sYWJlbC50b0xvd2VyQ2FzZSgpLnNlYXJjaChzZWFyY2gpID49IDA7XG59XG5mdW5jdGlvbiBub3RlTWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLm5vdGUgJiYgb3B0aW9uLm5vdGUudG9Mb3dlckNhc2UoKS5zZWFyY2goc2VhcmNoKSA+PSAwO1xufVxuZnVuY3Rpb24gc2Vjb25kYXJ5TWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLnNlY29uZGFyeSAmJiBvcHRpb24uc2Vjb25kYXJ5LnRvTG93ZXJDYXNlKCkuc2VhcmNoKHNlYXJjaCkgPj0gMDtcbn1cbmZ1bmN0aW9uIHNlYXJjaGFibGVNYXRjaGVzKG9wdGlvbiwgc2VhcmNoKSB7XG4gIHJldHVybiBvcHRpb24uc2VhcmNoYWJsZSAmJiBvcHRpb24uc2VhcmNoYWJsZS50b0xvd2VyQ2FzZSgpLnNlYXJjaChzZWFyY2gpID49IDA7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50SGFuZGxlcnMoJGN0cmwsICRlbGVtZW50LCAkbmdNb2RlbCwgb3B0aW9ucywgJHRpbWVvdXQpIHtcbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBjb25zdCBidXR0b24gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0bicpWzBdO1xuICBjb25zdCBidXR0b25Hcm91cCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYnRuLWdyb3VwJylbMF07XG4gIGNvbnN0IGRyb3Bkb3duID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkcm9wZG93bi1tZW51JylbMF07XG5cbiAgY29uc3Qgb25Gb2N1c091dCA9ICgpID0+IHtcbiAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICAvLyBJZiBidXR0b24gaXNuJ3QgZm9jdXNlZCBhbmQgZHJvcGRvd24gbm90IG9wZW4sIGJsdXJcbiAgICAgIGlmIChidXR0b24gIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICAgJiYgIWJ1dHRvbkdyb3VwLmNsYXNzTGlzdC5jb250YWlucygnb3BlbicpKSB7XG4gICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gICAgICB9XG4gICAgfSwgMTUwKTsgLy8gbmVlZCB0aW1lb3V0IGJlY2F1c2UgdXNpbmcgZHJvcGRvd24uanMsXG4gIH07XG5cbiAgY29uc3Qgb25CdXR0b25DbGljayA9ICgpID0+IHtcbiAgICAkdGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoJGN0cmwuc2hvdWxkU2hvd1NlYXJjaCgpKSB7XG4gICAgICAgIC8vIElmIGZpbHRlciBpbiB1c2UsIGZvY3VzIG9uIHRoYXRcbiAgICAgICAgY29uc3QgZmlsdGVySW5wdXQgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC1maWx0ZXInKVswXTtcbiAgICAgICAgZmlsdGVySW5wdXQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBmb2N1cyBvbiBzZWxlY3RlZCBvcHRpb25cbiAgICAgICAgZm9jdXNPbkFjdGl2ZUxpbmsoZWxlbWVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgb25CdXR0b25LZXlwcmVzcyA9IChldmVudCkgPT4ge1xuICAgICRjdHJsLm9wdGlvbktleXByZXNzKGV2ZW50KTtcbiAgfTtcblxuICBjb25zdCBvbkRyb3Bkb3duS2V5cHJlc3MgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKSB7XG4gICAgICAkY3RybC5vcHRpb25LZXlwcmVzcyhldmVudCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uQ29tcG9uZW50Qmx1ciA9ICgpID0+IHtcbiAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICB9O1xuXG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uQ29tcG9uZW50Qmx1cik7XG4gIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIG9uQnV0dG9uS2V5cHJlc3MpO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1dHRvbkNsaWNrKTtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0Jywgb25Gb2N1c091dCk7XG4gIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0Jywgb25Gb2N1c091dCk7XG4gIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgb25Ecm9wZG93bktleXByZXNzKTtcbn1cblxuZnVuY3Rpb24gZm9jdXNPbkFjdGl2ZUxpbmsoZWxlbWVudCkge1xuICBjb25zdCBhY3RpdmVPcHRpb24gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2FjdGl2ZScpWzBdO1xuICBpZiAoYWN0aXZlT3B0aW9uKSB7XG4gICAgYWN0aXZlT3B0aW9uLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uZm9jdXMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ZvclRyYW5zY2x1ZGVkQ29udGVudCgkdHJhbnNjbHVkZSwgJGN0cmwpIHtcbiAgJHRyYW5zY2x1ZGUoKGNsb25lKSA9PiB7XG4gICAgaWYgKGNsb25lLmxlbmd0aCA+IDEgfHwgY2xvbmUudGV4dCgpLnRyaW0oKSAhPT0gJycpIHtcbiAgICAgICRjdHJsLmhhc1RyYW5zY2x1ZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRDaGFyYWN0ZXJDb2RlRnJvbUtleXByZXNzKGV2ZW50KSB7XG4gIHJldHVybiBldmVudC53aGljaCB8fCBldmVudC5jaGFyQ29kZSB8fCBldmVudC5rZXlDb2RlO1xufVxuXG5mdW5jdGlvbiBnZXRDaGFyYWN0ZXJGcm9tS2V5cHJlc3MoZXZlbnQpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyhldmVudCkpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nLCAnXFxcXCQmJyk7XG59XG5cbmZ1bmN0aW9uIHByZVNlbGVjdE1vZGVsVmFsdWUoJG5nTW9kZWwsICRjdHJsKSB7XG4gIGlmIChpc1ZhbGlkTW9kZWwoJGN0cmwubmdNb2RlbCkpIHtcbiAgICBjb25zdCBvcHRpb24gPSBmaW5kT3B0aW9uRnJvbVZhbHVlKCRjdHJsLm9wdGlvbnMsICRjdHJsLm5nTW9kZWwpO1xuICAgIGlmIChvcHRpb24pIHtcbiAgICAgIHNlbGVjdE9wdGlvbigkbmdNb2RlbCwgJGN0cmwsIG9wdGlvbik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRPcHRpb25Gcm9tVmFsdWUob3B0aW9ucywgdmFsdWUpIHtcbiAgbGV0IG9wdGlvbk1hdGNoID0gZmFsc2U7XG4gIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgaWYgKGFuZ3VsYXIuZXF1YWxzKG9wdGlvbi52YWx1ZSwgdmFsdWUpKSB7XG4gICAgICBvcHRpb25NYXRjaCA9IG9wdGlvbjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3B0aW9uTWF0Y2g7XG59XG5cbmZ1bmN0aW9uIHNldERlZmF1bHRJZlJlcXVpcmVkKCRuZ01vZGVsLCAkY3RybCwgJGVsZW1lbnQsICRhdHRycykge1xuICAvLyBJZiByZXF1aXJlZCBhbmQgbW9kZWwgZW1wdHksIHNlbGVjdCBmaXJzdCBvcHRpb24gd2l0aCB2YWx1ZVxuICBpZiAoKCRjdHJsLm5nUmVxdWlyZWQgfHwgJGF0dHJzLnJlcXVpcmVkKSAmJiAhaXNWYWxpZE1vZGVsKCRjdHJsLm5nTW9kZWwpICYmICEkY3RybC5wbGFjZWhvbGRlcikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgJGN0cmwub3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlzVmFsaWRNb2RlbCgkY3RybC5vcHRpb25zW2ldLnZhbHVlKSkge1xuICAgICAgICBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCAkY3RybC5vcHRpb25zW2ldKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNlbGVjdE9wdGlvbigkbmdNb2RlbCwgJGN0cmwsIG9wdGlvbikge1xuICBpZiAob3B0aW9uLmRpc2FibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUob3B0aW9uLnZhbHVlKTtcbiAgLy8gRm9yY2UgY29tbWl0IHNvIHRoYXQgbmctY2hhbmdlIGFsd2F5cyBoYXMgbmV3IHZhbHVlXG4gICRuZ01vZGVsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgJGN0cmwuc2VsZWN0ZWQgPSBvcHRpb247XG59XG5cbmZ1bmN0aW9uIGZpbmRTZWxlY3RlZChvcHRpb25zLCBzZWxlY3RlZCkge1xuICAvLyBUaGVyZSBjYW4gYmUgc2NlbmFyaW9zIHdoZW4gdGhlIGBmaWx0ZXJlZE9wdGlvbnNgIGFyZSBsb2FkZWQgYXN5bmNocm9ub3VzbHlcbiAgLy8gc28gdGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCB3aXRoIGFuIHVuZGVmaW5lZCBhcyBgb3B0aW9uc2AgYXJndW1lbnQsIHNvXG4gIC8vIHdlIHNob3VsZCBjaGVjayBpZiB0aGF0IHBhc3NlZCBhcmd1bWVudCBpcyByZWFsbHkgYW4gYXJyYXkgYmVmb3JlIGNhbGxpbmdcbiAgLy8gYC5mb3JFYWNoYCBvbiBpdFxuICBpZiAoIWFuZ3VsYXIuaXNBcnJheShvcHRpb25zKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBQcmVmZXIgZm9yRWFjaCBvdmVyIGZpbmQgZm9yIGJyb3dzZXIgc3VwcG9ydFxuICBsZXQgc2VsZWN0ZWRPcHRpb247XG4gIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgaWYgKHNlbGVjdGVkICYmIGFuZ3VsYXIuZXF1YWxzKHNlbGVjdGVkLnZhbHVlLCBvcHRpb24udmFsdWUpKSB7XG4gICAgICBzZWxlY3RlZE9wdGlvbiA9IHNlbGVjdGVkO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWxlY3RlZE9wdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVzZXRPcHRpb24oJG5nTW9kZWwsICRjdHJsKSB7XG4gICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUobnVsbCk7XG4gIC8vIEZvcmNlIGNvbW1pdCBzbyB0aGF0IG5nLWNoYW5nZSBhbHdheXMgaGFzIG5ldyB2YWx1ZVxuICAkbmdNb2RlbC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICRjdHJsLnNlbGVjdGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnRpbnVlU2VhcmNoQW5kU2VsZWN0TWF0Y2goJG5nTW9kZWwsICRjdHJsLCBvcHRpb25zLCBsZXR0ZXIpIHtcbiAgbGV0IGZvdW5kID0gc2VhcmNoQW5kU2VsZWN0KCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgJGN0cmwuc2VhcmNoICsgbGV0dGVyKTtcbiAgaWYgKGZvdW5kKSB7XG4gICAgJGN0cmwuc2VhcmNoICs9IGxldHRlcjtcbiAgfSBlbHNlIHtcbiAgICAkY3RybC5zZWFyY2ggPSBsZXR0ZXI7XG4gICAgZm91bmQgPSBzZWFyY2hBbmRTZWxlY3QoJG5nTW9kZWwsICRjdHJsLCBvcHRpb25zLCAkY3RybC5zZWFyY2gpO1xuICB9XG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gc2VhcmNoQW5kU2VsZWN0KCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgdGVybSkge1xuICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgY29uc3Qgc2VhcmNoVGVybSA9IHRlcm0udG9Mb3dlckNhc2UoKTtcblxuICBvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGFpbnNTZWFyY2gob3B0aW9uLmxhYmVsLCBzZWFyY2hUZXJtKVxuICAgICAgfHwgY29udGFpbnNTZWFyY2gob3B0aW9uLm5vdGUsIHNlYXJjaFRlcm0pXG4gICAgICB8fCBjb250YWluc1NlYXJjaChvcHRpb24uc2Vjb25kYXJ5LCBzZWFyY2hUZXJtKVxuICAgICAgfHwgY29udGFpbnNTZWFyY2gob3B0aW9uLnNlYXJjaGFibGUsIHNlYXJjaFRlcm0pKSB7XG4gICAgICBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCBvcHRpb24pO1xuICAgICAgZm91bmQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNTZWFyY2godGVybSwgc2VhcmNoKSB7XG4gIHJldHVybiB0ZXJtICYmIHRlcm0udG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNb2RlbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgfHwgdmFsdWUgPT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXNwb25zaXZlQ2xhc3Nlcyh2YWx1ZSkge1xuICBsZXQgY2xhc3NlcyA9ICcnO1xuICBsZXQgYnJlYWtwb2ludHMgPSBbXTtcbiAgY29uc3QgdmFsaWRCcmVha3BvaW50cyA9IHtcbiAgICB4czogdHJ1ZSxcbiAgICBzbTogdHJ1ZSxcbiAgICBtZDogdHJ1ZSxcbiAgICBsZzogdHJ1ZSxcbiAgICB4bDogdHJ1ZVxuICB9O1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiB2YWx1ZSkge1xuICAgIHJldHVybiAnaGlkZGVuJztcbiAgfVxuXG4gIGlmICh2YWx1ZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtcbiAgICByZXR1cm4gJ2hpZGRlbic7XG4gIH1cblxuICBpZiAodmFsdWUpIHtcbiAgICBicmVha3BvaW50cyA9IHZhbHVlLnNwbGl0KCcsJyk7XG4gIH1cblxuICBicmVha3BvaW50cy5mb3JFYWNoKChicmVha3BvaW50KSA9PiB7XG4gICAgaWYgKHZhbGlkQnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgIGNsYXNzZXMgKz0gYGhpZGRlbi0ke2JyZWFrcG9pbnR9IGA7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuY29uc3Qga2V5cyA9IHtcbiAgdXA6IDM4LFxuICBkb3duOiA0MCxcbiAgcmV0dXJuOiAxM1xufTtcblxuU2VsZWN0Q29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHRyYW5zY2x1ZGUnLFxuICAnJHRpbWVvdXQnLFxuICAnJGF0dHJzJyxcbiAgJ1R3RG9tU2VydmljZScsXG4gICckc2NvcGUnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tYmxvY2sgdHctc2VsZWN0XFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICBkcm9wZG93bjogISRjdHJsLmRyb3Bkb3duVXAsXFxuICAgIGRyb3B1cDogJGN0cmwuZHJvcGRvd25VcFxcbiAgfVxcXCIgYXJpYS1oaWRkZW49ZmFsc2U+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4taW5wdXQgZHJvcGRvd24tdG9nZ2xlXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICdidG4taW5wdXQtaW52ZXJzZSc6ICRjdHJsLmludmVyc2UsXFxuICAgICAgJ2J0bi1hZGRvbic6ICRjdHJsLmludmVyc2UsXFxuICAgICAgJ2J0bi1zbSc6ICRjdHJsLnNpemUgPT09ICdzbScsXFxuICAgICAgJ2J0bi1sZyc6ICRjdHJsLnNpemUgPT09ICdsZydcXG4gICAgfVxcXCIgZGF0YS10b2dnbGU9ZHJvcGRvd24gYXJpYS1leHBhbmRlZD1mYWxzZSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWZvY3VzPSRjdHJsLmJ1dHRvbkZvY3VzKCkgdHctZm9jdXNhYmxlPiA8c3BhbiBjbGFzcz10dy1zZWxlY3Qtc2VsZWN0ZWQgbmctaWY9JGN0cmwuc2VsZWN0ZWQ+IDxzcGFuIGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLWludmVyc2UgcHVsbC14cy1sZWZ0IGNpcmNsZS1zbVxcXCIgbmctaWY9XFxcIiRjdHJsLnNlbGVjdGVkICYmICRjdHJsLnNlbGVjdGVkLmljb24gJiYgJGN0cmwuc2VsZWN0ZWQuc2Vjb25kYXJ5XFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24ge3skY3RybC5zZWxlY3RlZC5pY29ufX1cXFwiPjwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1pbnZlcnNlIHB1bGwteHMtbGVmdFxcXCIgbmctY2xhc3M9JGN0cmwuY2lyY2xlQ2xhc3NlcygkY3RybC5oaWRlQ2lyY2xlKSBuZy1pZj1cXFwiKCRjdHJsLnNlbGVjdGVkLmNpcmNsZVRleHQgfHwgJGN0cmwuc2VsZWN0ZWQuY2lyY2xlSW1hZ2UgfHwgJGN0cmwuc2VsZWN0ZWQuY2lyY2xlSWNvbilcXFwiPiA8c3BhbiBuZy1pZj0kY3RybC5zZWxlY3RlZC5jaXJjbGVUZXh0Pnt7JGN0cmwuc2VsZWN0ZWQuY2lyY2xlVGV4dH19PC9zcGFuPiA8aW1nIGFsdD17eyRjdHJsLnNlbGVjdGVkLmxhYmVsfX0gbmctaWY9JGN0cmwuc2VsZWN0ZWQuY2lyY2xlSW1hZ2Ugc3JjPVxcXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsXFxuICAgICAgICAgICAgaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFFQUFBQUJDQVFBQUFDMUhBd0NBQUFBQzBsRVFWUjQybU5rWUFBQUFBWUFBakNCMEM4QUFBQUFTVVZPUks1Q1lJST1cXFwiIG5nLXNyYz17eyRjdHJsLnNlbGVjdGVkLmNpcmNsZUltYWdlfX0gLz4gPHNwYW4gbmctaWY9JGN0cmwuc2VsZWN0ZWQuY2lyY2xlSWNvbiBjbGFzcz1cXFwiaWNvbiB7eyRjdHJsLnNlbGVjdGVkLmNpcmNsZUljb259fVxcXCI+PC9zcGFuPiA8L3NwYW4+IDxzcGFuIGNsYXNzPXRleHQtZWxsaXBzaXM+IDxzcGFuIGNsYXNzPVxcXCJjdXJyZW5jeS1mbGFnIGN1cnJlbmN5LWZsYWcte3skY3RybC5zZWxlY3RlZC5jdXJyZW5jeSB8IGxvd2VyY2FzZX19XFxcIiBuZy1pZj1cXFwiJGN0cmwuc2VsZWN0ZWQgJiYgJGN0cmwuc2VsZWN0ZWQuY3VycmVuY3lcXFwiIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVDdXJyZW5jeSk+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiB7eyRjdHJsLnNlbGVjdGVkLmljb259fVxcXCIgbmctaWY9XFxcIiRjdHJsLnNlbGVjdGVkICYmICRjdHJsLnNlbGVjdGVkLmljb24gJiYgISRjdHJsLnNlbGVjdGVkLnNlY29uZGFyeVxcXCIgbmctY2xhc3M9JGN0cmwucmVzcG9uc2l2ZUNsYXNzZXMoJGN0cmwuaGlkZUljb24pPjwvc3Bhbj4gPHNwYW4gY2xhc3M9dHctc2VsZWN0LWxhYmVsIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVMYWJlbCk+IHt7JGN0cmwuc2VsZWN0ZWQubGFiZWx9fSA8L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLnNlbGVjdGVkLm5vdGUgbmctY2xhc3M9JGN0cmwucmVzcG9uc2l2ZUNsYXNzZXMoJGN0cmwuaGlkZU5vdGUpIGNsYXNzPVxcXCJ0dy1zZWxlY3Qtbm90ZSBzbWFsbCBtLWwtMVxcXCI+IHt7JGN0cmwuc2VsZWN0ZWQubm90ZX19IDwvc3Bhbj4gPHNwYW4gbmctaWY9JGN0cmwuc2VsZWN0ZWQuc2Vjb25kYXJ5IG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVTZWNvbmRhcnkpIGNsYXNzPVxcXCJ0dy1zZWxlY3Qtc2Vjb25kYXJ5IHNtYWxsIHNlY29uZGFyeSB0ZXh0LWVsbGlwc2lzXFxcIj4ge3skY3RybC5zZWxlY3RlZC5zZWNvbmRhcnl9fSA8L3NwYW4+IDwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1mb3JtLWNvbnRyb2wtcGxhY2Vob2xkZXIgbmctaWY9ISRjdHJsLnNlbGVjdGVkPnt7JGN0cmwucGxhY2Vob2xkZXJ9fTwvc3Bhbj4gPHNwYW4gY2xhc3M9Y2FyZXQ+PC9zcGFuPiA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnUgcm9sZT1tZW51IG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUteHMtcmlnaHQnOiAkY3RybC5kcm9wZG93blJpZ2h0ID09PSAneHMnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LXNtLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ3NtJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1tZC1yaWdodCc6ICRjdHJsLmRyb3Bkb3duUmlnaHQgPT09ICdtZCcsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtbGctcmlnaHQnOiAkY3RybC5kcm9wZG93blJpZ2h0ID09PSAnbGcnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LXhsLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ3hsJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1zbSc6ICRjdHJsLmRyb3Bkb3duV2lkdGggPT09ICdzbScsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtbWQnOiAkY3RybC5kcm9wZG93bldpZHRoID09PSAnbWQnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LWxnJzogJGN0cmwuZHJvcGRvd25XaWR0aCA9PT0gJ2xnJ1xcbiAgICB9XFxcIj4gPGxpIG5nLWlmPSRjdHJsLnNob3VsZFNob3dTZWFyY2goKT4gPGEgaHJlZj1cXFwiXFxcIiBjbGFzcz1cXFwidHctc2VsZWN0LWZpbHRlci1saW5rIHAtYS0wXFxcIiB0YWJpbmRleD0tMSBuZy1mb2N1cz0kY3RybC5mb2N1c09uRmlsdGVySW5wdXQoKT4gPGRpdiBjbGFzcz1pbnB1dC1ncm91cD4gPHNwYW4gY2xhc3M9aW5wdXQtZ3JvdXAtYWRkb24+PHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1zZWFyY2hcXFwiPjwvc3Bhbj4gPC9zcGFuPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdHctc2VsZWN0LWZpbHRlclxcXCIgcGxhY2Vob2xkZXI9e3skY3RybC5maWx0ZXJ9fSBuZy1tb2RlbD0kY3RybC5maWx0ZXJTdHJpbmcgbmctY2hhbmdlPSRjdHJsLmZpbHRlckNoYW5nZSgpIG5nLWtleWRvd249JGN0cmwuZmlsdGVyS2V5ZG93bigkZXZlbnQpIC8+IDwvZGl2PiA8L2E+IDwvbGk+IDxsaSBuZy1jbGFzcz1cXFwie2FjdGl2ZTogISRjdHJsLnNlbGVjdGVkfVxcXCIgbmctaWY9XFxcIiRjdHJsLnBsYWNlaG9sZGVyICYmICEkY3RybC5uZ1JlcXVpcmVkICYmICEkY3RybC5maWx0ZXJcXFwiPiA8YSBocmVmPVxcXCJcXFwiIHRhYmluZGV4PS0xIG5nLWNsaWNrPSRjdHJsLnBsYWNlaG9sZGVyQ2xpY2soKSBuZy1mb2N1cz0kY3RybC5wbGFjZWhvbGRlckZvY3VzKCkgY2xhc3M9dHctc2VsZWN0LXBsYWNlaG9sZGVyIHR3LWZvY3VzYWJsZT4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvYT4gPC9saT4gPGxpIG5nLWlmPVxcXCIoJGN0cmwucGxhY2Vob2xkZXIgJiYgISRjdHJsLm5nUmVxdWlyZWQpIHx8ICRjdHJsLmZpbHRlclxcXCIgY2xhc3M9ZGl2aWRlcj48L2xpPiA8bGkgbmctcmVwZWF0PVxcXCJvcHRpb24gaW4gJGN0cmwuZmlsdGVyZWRPcHRpb25zXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICAgJ2FjdGl2ZSc6ICRjdHJsLm5nTW9kZWwgPT09IG9wdGlvbi52YWx1ZSxcXG4gICAgICAgICdkaXNhYmxlZCc6IG9wdGlvbi5kaXNhYmxlZCxcXG4gICAgICAgICdkcm9wZG93bi1oZWFkZXInOiBvcHRpb24uaGVhZGVyLFxcbiAgICAgICAgJ3R3LXNlbGVjdC1vcHRpb24nOiAhb3B0aW9uLmhlYWRlciAmJiAhb3B0aW9uLmRpc2FibGVkXFxuICAgICAgfVxcXCI+IDxzcGFuIG5nLWlmPW9wdGlvbi5oZWFkZXIgY2xhc3M9dGV4dC1lbGxpcHNpcyBuZy1jbGljaz0kZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk+e3tvcHRpb24uaGVhZGVyfX08L3NwYW4+IDxhIGhyZWY9XFxcIlxcXCIgbmctaWY9IW9wdGlvbi5oZWFkZXIgbmctY2xpY2s9XFxcIiRjdHJsLm9wdGlvbkNsaWNrKG9wdGlvbiwgJGV2ZW50KVxcXCIgbmctZm9jdXM9JGN0cmwub3B0aW9uRm9jdXMob3B0aW9uKSBuZy1jbGFzcz1cXFwieyd0dy1zZWxlY3Qtb3B0aW9uLWxpbmsnOiAhb3B0aW9uLmRpc2FibGVkfVxcXCIgaW5kZXg9e3skaW5kZXh9fSB0YWJpbmRleD0tMSB0dy1mb2N1c2FibGU+IDxkaXYgbmctaWY9XFxcIm9wdGlvbi5pY29uICYmIG9wdGlvbi5zZWNvbmRhcnlcXFwiIGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLWludmVyc2UgcHVsbC14cy1sZWZ0IGNpcmNsZS1zbVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIHt7b3B0aW9uLmljb259fVxcXCI+PC9zcGFuPiA8L2Rpdj4gPHNwYW4gbmctaWY9XFxcIm9wdGlvbi5pY29uICYmICFvcHRpb24uc2Vjb25kYXJ5XFxcIiBjbGFzcz1cXFwiaWNvbiB7e29wdGlvbi5pY29ufX0gcHVsbC14cy1sZWZ0XFxcIj4gPC9zcGFuPiA8c3BhbiBuZy1pZj1vcHRpb24uY3VycmVuY3kgY2xhc3M9XFxcImN1cnJlbmN5LWZsYWcgY3VycmVuY3ktZmxhZy17e29wdGlvbi5jdXJyZW5jeSB8IGxvd2VyY2FzZX19IHB1bGwteHMtbGVmdFxcXCI+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImNpcmNsZSBjaXJjbGUtaW52ZXJzZSBwdWxsLXhzLWxlZnRcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgICAgICAgJ2NpcmNsZS1zbSc6IG9wdGlvbi5zZWNvbmRhcnksXFxuICAgICAgICAgICAgJ2NpcmNsZS14cyc6ICFvcHRpb24uc2Vjb25kYXJ5XFxuICAgICAgICAgIH1cXFwiIG5nLWlmPVxcXCJvcHRpb24uY2lyY2xlVGV4dCB8fCBvcHRpb24uY2lyY2xlSW1hZ2UgfHwgb3B0aW9uLmNpcmNsZUljb25cXFwiPiA8c3BhbiBjbGFzcz10dy1zZWxlY3QtY2lyY2xlLXRleHQgbmctaWY9b3B0aW9uLmNpcmNsZVRleHQ+e3tvcHRpb24uY2lyY2xlVGV4dH19PC9zcGFuPiA8aW1nIGFsdD17e29wdGlvbi5sYWJlbH19IG5nLWlmPW9wdGlvbi5jaXJjbGVJbWFnZSBzcmM9XFxcImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxcXG4gICAgICAgICAgICAgIGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBRUFBQUFCQ0FRQUFBQzFIQXdDQUFBQUMwbEVRVlI0Mm1Oa1lBQUFBQVlBQWpDQjBDOEFBQUFBU1VWT1JLNUNZSUk9XFxcIiBuZy1zcmM9e3tvcHRpb24uY2lyY2xlSW1hZ2V9fSAvPiA8c3BhbiBuZy1pZj1vcHRpb24uY2lyY2xlSWNvbiBjbGFzcz1cXFwiaWNvbiB7e29wdGlvbi5jaXJjbGVJY29ufX1cXFwiPjwvc3Bhbj4gPC9zcGFuPnt7b3B0aW9uLmxhYmVsfX08c3BhbiBuZy1pZj1vcHRpb24ubm90ZSBjbGFzcz1cXFwidHctc2VsZWN0LW5vdGUgc21hbGwgbS1sLTFcXFwiPnt7b3B0aW9uLm5vdGV9fTwvc3Bhbj48c3BhbiBuZy1pZj1vcHRpb24uc2Vjb25kYXJ5IGNsYXNzPVxcXCJ0dy1zZWxlY3Qtc2Vjb25kYXJ5IHNtYWxsIHRleHQtZWxsaXBzaXNcXFwiPnt7b3B0aW9uLnNlY29uZGFyeX19PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBuZy1pZj0kY3RybC5oYXNNb3JlT3B0aW9uc1RvUmV2ZWFsPiA8YSBocmVmPVxcXCJcXFwiIG5nLWNsaWNrPSRjdHJsLnJldmVhbE1vcmVPcHRpb25zKCRldmVudCkgY2xhc3M9dHctc2VsZWN0LWxvYWQtbW9yZSB0YWJpbmRleD0tMSB0dy1mb2N1c2FibGU+IC4uLiA8L2E+IDwvbGk+IDxsaSBuZy1pZj0kY3RybC5oYXNUcmFuc2NsdWRlZCBjbGFzcz1kaXZpZGVyPjwvbGk+IDxsaSBuZy10cmFuc2NsdWRlIG5nLWlmPSRjdHJsLmhhc1RyYW5zY2x1ZGVkIGNsYXNzPXR3LXNlbGVjdC10cmFuc2NsdWRlZD48L2xpPiA8L3VsPiA8L2Rpdj4gPGlucHV0IHR5cGU9aGlkZGVuIGNsYXNzPXR3LXNlbGVjdC1oaWRkZW4gbmFtZT17eyRjdHJsLm5hbWV9fSB2YWx1ZT17eyRjdHJsLm5nTW9kZWx9fSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIC8+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vdXBsb2FkLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdXBsb2FkLmh0bWwnO1xuaW1wb3J0ICcuL3VwbG9hZC5sZXNzJztcblxuY29uc3QgVXBsb2FkID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgbmdNb2RlbDogJz0nLFxuICAgIG5nQ2hhbmdlOiAnJicsXG4gICAgbmFtZTogJ0AnLFxuICAgIGljb246ICdAJywgLy8gaWxsdXN0cmF0aW9uIGluIGljb24gc2hvd24gaW4gdXBsb2FkIGJveFxuICAgIGhlbHBJbWFnZTogJ0AnLCAvLyBpbGx1c3RyYXRpb24gaW4gaW1hZ2Ugc2hvd2luIGluIHVwbG9hZCBib3gsIGlmIHNwZWNpZmllZCwgcmVwbGFjZXMgaWNvblxuICAgIGxhYmVsOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcblxuICAgIGJ1dHRvblRleHQ6ICdAJywgLy8gQnV0dG9uIHRleHQgc2hvd24gaW4gZGVmYXVsdCBzdGF0ZVxuICAgIGNhbmNlbFRleHQ6ICdAJywgLy8gVGV4dCBpbnN0cnVjdGluZyB0byBnbyBiYWNrIHRvIHJlLXVwbG9hZCBhZnRlciB1cGxvYWQgaXMgZG9uZVxuICAgIGRyb3BwaW5nVGV4dDogJ0AnLCAvLyBUZXh0IHNob3duIHdoZW4gaG92ZXJpbmcgd2l0aCBhIGZpbGVcblxuICAgIHByb2Nlc3NpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hpbGUgcHJvY2Vzc2luZy91cGxvYWRpbmdcbiAgICBzdWNjZXNzVGV4dDogJ0AnLCAvLyBUZXh0IGFmdGVyIHVwbG9hZCBpcyBzdWNjZXNzZnVsLCBzaG93biBxdWl0ZSBicmllZmx5IGJlZm9yZSBwcmV2aWV3XG4gICAgZmFpbHVyZVRleHQ6ICdAJyxcblxuICAgIHRvb0xhcmdlTWVzc2FnZTogJ0AnLFxuICAgIC8vIHdyb25nVHlwZU1lc3NhZ2U6ICdAJyxcblxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuXG4gICAgc2l6ZTogJ0AnLFxuICAgIGFjY2VwdDogJ0AnLFxuICAgIGh0dHBPcHRpb25zOiAnPCcsXG5cbiAgICBvblN0YXJ0OiAnPScsXG4gICAgb25TdWNjZXNzOiAnPScsXG4gICAgb25GYWlsdXJlOiAnPScsXG4gICAgb25DYW5jZWw6ICc9JyxcblxuICAgIG1heFNpemU6ICc8JywgLy8gVE9ETyBtb3ZlIHRvIG5nTWF4P1xuXG4gICAgLy8gQ2FtZXJhIGNhcHR1cmUgdXBsb2FkIG9wdGlvbnNcblxuICAgIC8qIFNvdXJjZSBvZiBmaWxlIHRvIHVwbG9hZFxuICAgICAqIFBvc3NpYmxlIHZhbHVlc1xuICAgICAqIENBTUVSQV9PTkxZIChhbGxvdyBvbmx5IGNhbWVyYSB1cGxvYWQpXG4gICAgICogRklMRV9PTkxZIChhbGxvdyBvbmx5IHVwbG9hZCBmcm9tIGZpbGUgc3lzdGVtKVxuICAgICAqIEFOWSAod2UgZG9udCBjYXJlKVxuICAgICAqL1xuICAgIHNvdXJjZTogJzwnLFxuICAgIGNhbWVyYU92ZXJsYXk6ICdAJywgLy8gT3B0aW9uYWxcbiAgICBjYW1lcmFEaXJlY3Rpb246ICdAJywgLy8gZW52aXJvbm1lbnQvdXNlclxuXG4gICAgZGVzY3JpcHRpb246ICdAJywgLy8gREVQUkVDQVRFRCBmb3IgbGFiZWxcbiAgICBpbnN0cnVjdGlvbnM6ICdAJywgLy8gREVQUkVDQVRFRCBmb3IgcGxhY2Vob2xkZXJcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkO1xuIiwiY2xhc3MgVXBsb2FkQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICRlbGVtZW50LFxuICAgICRzY29wZSxcbiAgICAkYXR0cnMsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy5GaWxlVmFsaWRhdGlvblNlcnZpY2UgPSBGaWxlVmFsaWRhdGlvblNlcnZpY2U7XG5cbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc291cmNlKSB7XG4gICAgICB0aGlzLmlzTGl2ZUNhbWVyYVVwbG9hZCA9IGNoYW5nZXMuc291cmNlLmN1cnJlbnRWYWx1ZSA9PT0gJ0NBTUVSQV9PTkxZJztcbiAgICB9XG4gIH1cblxuICBvbkZpbGVDYXB0dXJlKGZpbGUpIHtcbiAgICBpZiAodGhpcy5uZ0Rpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXRyaWV2ZSBmaWxlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5maWxlID0gZmlsZTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc0RvbmUgPSBmYWxzZTtcblxuICAgIHRoaXMuY2xlYXJIdG1sSW5wdXQoKTtcbiAgICB0aGlzLnNldE5nTW9kZWwobnVsbCk7XG5cbiAgICBpZiAodGhpcy5vbkNhbmNlbCkge1xuICAgICAgdGhpcy5vbkNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFySHRtbElucHV0KCkge1xuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICBpbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzZXROZ01vZGVsKHZhbHVlKSB7XG4gICAgLy8gSWYgbmdNb2RlbCBub3QgYXNzaWduYWJsZSwgd2UgZG9uJ3Qgd2FudCB0byBlcnJvci5cbiAgICBpZiAodHlwZW9mIHRoaXMuJGF0dHJzLm5nTW9kZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCAkbmdNb2RlbCA9IHRoaXMuJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgICAgaWYgKCEkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGlzRHJvcEVsaWdpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZSAhPT0gJ0NBTUVSQV9PTkxZJztcbiAgfVxuXG4gIG9uRHJhZ0VudGVyKCkge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSB0aGlzLmlzRHJvcEVsaWdpYmxlKCk7XG4gIH1cblxuICBvbkRyYWdMZWF2ZSgpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gIH1cblxuICBvbkRyb3AoZmlsZXMpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKGZpbGVzWzBdKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc1N0YXJ0KGZpbGUpIHtcbiAgICB0aGlzLmlzRG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLm9uU3RhcnQpIHtcbiAgICAgIHRoaXMub25TdGFydCh7IGZpbGUgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Qcm9jZXNzU3VjY2VzcyhmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UpIHtcbiAgICB0aGlzLmlzRG9uZSA9IHRydWU7XG4gICAgdGhpcy5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmRhdGFVcmwgPSBkYXRhVXJsO1xuICAgIHRoaXMuaXNJbWFnZSA9IHRoaXMuRmlsZVZhbGlkYXRpb25TZXJ2aWNlLmlzSW1hZ2UoZmlsZSk7XG5cbiAgICBpZiAodGhpcy5odHRwT3B0aW9ucyAmJiBpZCkge1xuICAgICAgdGhpcy5zZXROZ01vZGVsKGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXROZ01vZGVsKGRhdGFVcmwpO1xuICAgIH1cblxuICAgIHRoaXMub25TdWNjZXNzKGZpbGUsIHJlc3BvbnNlKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc0ZhaWx1cmUoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5vbkZhaWx1cmUpIHtcbiAgICAgIHRoaXMub25GYWlsdXJlKHsgZXJyb3IgfSk7XG4gICAgfVxuICB9XG59XG5cblVwbG9hZENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckYXR0cnMnLFxuICAnRmlsZVZhbGlkYXRpb25TZXJ2aWNlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZSB0dy1kcmFnLWVudGVyPSRjdHJsLm9uRHJhZ0VudGVyKCkgdHctZHJhZy1sZWF2ZT0kY3RybC5vbkRyYWdMZWF2ZSgpIHR3LWRyb3A9JGN0cmwub25Ecm9wKGZpbGVzKSBuZy1jbGFzcz1cXFwie1xcbiAgICAnZHJvcHBhYmxlLXNtJzogJGN0cmwuc2l6ZSA9PT0nc20nLFxcbiAgICAnZHJvcHBhYmxlLW1kJzogJGN0cmwuc2l6ZSA9PT0nbWQnIHx8ICEkY3RybC5zaXplLFxcbiAgICAnZHJvcHBhYmxlLWxnJzogJGN0cmwuc2l6ZSA9PT0nbGcnLFxcbiAgICAnZHJvcHBhYmxlLWRyb3BwaW5nJzogJGN0cmwuaXNEcm9wcGFibGUgJiYgISRjdHJsLm5nRGlzYWJsZWQsXFxuICAgICdkcm9wcGFibGUtcHJvY2Vzc2luZyc6ICEkY3RybC5pc0RvbmUgJiYgKCRjdHJsLmlzUHJvY2Vzc2luZyB8fCAkY3RybC5pc1N1Y2Nlc3MpLFxcbiAgICAnZHJvcHBhYmxlLWNvbXBsZXRlJzogJGN0cmwuaXNEb25lXFxuICB9XFxcIj4gPGRpdiBjbGFzcz1kcm9wcGFibGUtZGVmYXVsdC1jYXJkIGFyaWEtaGlkZGVuPVxcXCJ7eyRjdHJsLmlzRG9uZSB8fCAkY3RybC5pc1Byb2Nlc3Npbmd9fVxcXCI+IDx0dy11cGxvYWQtY2FwdHVyZSBsYWJlbD0kY3RybC5sYWJlbCBpY29uPSRjdHJsLmljb24gYWNjZXB0PSRjdHJsLmFjY2VwdCBpbnB1dC1maWxlPSRjdHJsLmlucHV0RmlsZSBoZWxwLWltYWdlPSRjdHJsLmhlbHBJbWFnZSBidXR0b24tdGV4dD0kY3RybC5idXR0b25UZXh0IG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgcGxhY2Vob2xkZXI9XFxcIiRjdHJsLnBsYWNlaG9sZGVyIHx8ICRjdHJsLmRlc2NyaXB0aW9uXFxcIiBpcy1saXZlLWNhbWVyYS11cGxvYWQ9JGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkIGNhbWVyYS1vdmVybGF5PSRjdHJsLmNhbWVyYU92ZXJsYXkgY2FtZXJhLWRpcmVjdGlvbj0kY3RybC5jYW1lcmFEaXJlY3Rpb24gb24tZmlsZS1jYXB0dXJlPSRjdHJsLm9uRmlsZUNhcHR1cmUoZmlsZSk+PC90dy11cGxvYWQtY2FwdHVyZT4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3BwYWJsZS1wcm9jZXNzaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiIGFyaWEtaGlkZGVuPXt7ISRjdHJsLmlzUHJvY2Vzc2luZ319PiA8dHctdXBsb2FkLXByb2Nlc3NpbmcgbmFtZT0kY3RybC5uYW1lIGZpbGU9JGN0cmwuZmlsZSBvbi1zdGFydD0kY3RybC5vblByb2Nlc3NTdGFydChmaWxlKSBvbi1zdWNjZXNzPVxcXCIkY3RybC5vblByb2Nlc3NTdWNjZXNzKGZpbGUsIGRhdGFVcmwsIGlkLCByZXNwb25zZSlcXFwiIG9uLWZhaWx1cmU9JGN0cmwub25Qcm9jZXNzRmFpbHVyZShlcnJvcikgbWF4LXNpemU9JGN0cmwubWF4U2l6ZSBhY2NlcHQ9JGN0cmwuYWNjZXB0IGh0dHAtb3B0aW9ucz0kY3RybC5odHRwT3B0aW9ucyBwcm9jZXNzaW5nLW1lc3NhZ2U9JGN0cmwucHJvY2Vzc2luZ1RleHQgc3VjY2Vzcy1tZXNzYWdlPSRjdHJsLnN1Y2Nlc3NUZXh0IGVycm9yLW1lc3NhZ2U9JGN0cmwuZmFpbHVyZVRleHQgdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXMgdG9vLWxhcmdlLW1lc3NhZ2U9JGN0cmwudG9vTGFyZ2VNZXNzYWdlIGNhbmNlbC10ZXh0PSRjdHJsLmNhbmNlbFRleHQgb24tY2FuY2VsPSRjdHJsLnJlc2V0KCk+PC90dy11cGxvYWQtcHJvY2Vzc2luZz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3BwYWJsZS1jb21wbGV0ZS1jYXJkIGRyb3BwYWJsZS1jYXJkXFxcIiBhcmlhLWhpZGRlbj17eyEkY3RybC5pc0RvbmV9fT4gPHR3LXVwbG9hZC1zdWNjZXNzIGxhYmVsPSRjdHJsLmxhYmVsIGlzLWltYWdlPSRjdHJsLmlzSW1hZ2UgZmlsZT0kY3RybC5maWxlIGRhdGE9JGN0cmwuZGF0YVVybCBzdWNjZXNzLW1lc3NhZ2U9JGN0cmwuc3VjY2Vzc1RleHQgY2FuY2VsLXRleHQ9JGN0cmwuY2FuY2VsVGV4dCBvbi1jYW5jZWw9JGN0cmwucmVzZXQoKT48L3R3LXVwbG9hZC1zdWNjZXNzPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRyb3BwaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiPiA8dHctdXBsb2FkLWRyb3BwaW5nIGRyb3BwaW5nLXRleHQ9JGN0cmwuZHJvcHBpbmdUZXh0PjwvdHctdXBsb2FkLWRyb3BwaW5nPiA8L2Rpdj4gPC9kaXY+IFwiOyIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi91cGxvYWQubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdXBsb2FkLmxlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbGVzcy1sb2FkZXIvZGlzdC9janMuanMhLi91cGxvYWQubGVzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiZGl2LnRyYW5zcGFyZW50LWFyZWF7YmFja2dyb3VuZC1jb2xvcjpoc2xhKDAsMCUsOTglLC45KX0uaWNvbi1jaXJjbGUtc2hhZG93e2JhY2tncm91bmQ6I2ZmZjtib3gtc2hhZG93OjAgNHB4IDE2cHggcmdiYSgwLDAsMCwuMDgpO3BhZGRpbmc6MTJweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLXJhZGl1czo5OXB4fS5pY29uLWNpcmNsZS1zaGFkb3cgc3Zne3RvcDo0cHg7cG9zaXRpb246cmVsYXRpdmV9LmlubGluZS1zdmd7dG9wOi4zNWVtO3Bvc2l0aW9uOnJlbGF0aXZlfUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXtwLmZpcnN0LWVycm9ye21pbi1oZWlnaHQ6NzJweH19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjU3NXB4KXsuZW1wdHktcHJvY2Vzc2luZy1saXN0e2hlaWdodDoxMzBweH0ucHJvY2Vzc2luZy1saXN0e21pbi1oZWlnaHQ6MTMwcHh9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDo1NzVweCl7Lm11bHRpLXVwbG9hZHtoZWlnaHQ6Mzc1cHh9Lm11bHRpLXVwbG9hZCAuZW1wdHktc2NyZWVue3BhZGRpbmctdG9wOjQwcHh9LmVtcHR5LXByb2Nlc3NpbmctbGlzdCwucHJvY2Vzc2luZy1saXN0e2hlaWdodDoyOTBweH19LnByb2Nlc3NpbmctbGlzdHtvdmVyZmxvdzphdXRvfS5wcm9jZXNzaW5nLWxpc3QsLnByb2Nlc3NpbmctbGlzdCAucHJvY2Vzc2luZy1pdGVtIC5tZWRpYS1ib2R5LC5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtcmlnaHR7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2UyZTZlOH0ucHJvY2Vzc2luZy1saXN0IC5sYXN0LWl0ZW0gLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtYm9keSwucHJvY2Vzc2luZy1saXN0IC5sYXN0LWl0ZW0gLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtcmlnaHR7Ym9yZGVyLWJvdHRvbTowfS5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlfS5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbSAudmVydGljYWwtY2VudGVye2FsaWduLXNlbGY6Y2VudGVyfS5lbXB0eS1wcm9jZXNzaW5nLWxpc3R7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmVtcHR5LXByb2Nlc3NpbmctbGlzdCAuY2lyY2xle2JhY2tncm91bmQtY29sb3I6I2Q4ZjFmYX0uZW1wdHktcHJvY2Vzc2luZy1saXN0IC5lbXB0eS1zY3JlZW57YWxpZ24tc2VsZjpjZW50ZXJ9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDYXB0dXJlQ2FyZCBmcm9tICcuL2NhcHR1cmUtY2FyZC5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmNhcHR1cmUnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRDYXB0dXJlJywgQ2FwdHVyZUNhcmQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY2FwdHVyZS1jYXJkLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jYXB0dXJlLWNhcmQuY29udHJvbGxlcic7XG5cbmNvbnN0IENhcHR1cmVDYXJkID0ge1xuICB0ZW1wbGF0ZSxcbiAgY29udHJvbGxlcixcbiAgYmluZGluZ3M6IHtcbiAgICBsYWJlbDogJzwnLFxuICAgIGljb246ICc8JyxcbiAgICBhY2NlcHQ6ICc8JyxcbiAgICBidXR0b25UZXh0OiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIHBsYWNlaG9sZGVyOiAnPCcsXG4gICAgaW5wdXRGaWxlOiAnPCcsXG4gICAgaGVscEltYWdlOiAnPCcsXG5cbiAgICBpc0xpdmVDYW1lcmFVcGxvYWQ6ICc8JyxcbiAgICBjYW1lcmFPdmVybGF5OiAnPCcsXG4gICAgY2FtZXJhRGlyZWN0aW9uOiAnPCcsXG5cbiAgICBvbkZpbGVDYXB0dXJlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FwdHVyZUNhcmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUtY2FyZC1jb250ZW50PiA8ZGl2IGNsYXNzPW0tYi0yPiA8aW1nIG5nLXNob3c9JGN0cmwuaGVscEltYWdlIG5nLXNyYz17eyRjdHJsLmhlbHBJbWFnZX19IGFsdD17eyRjdHJsLmxhYmVsfX0gY2xhc3M9XFxcInRodW1ibmFpbCB0ZXh0LXhzLWNlbnRlclxcXCIvPiA8c3BhbiBuZy1zaG93PSEkY3RybC5oZWxwSW1hZ2UgY2xhc3M9XFxcImljb24gaWNvbi17eyRjdHJsLnZpZXdJY29ufX0gaWNvbi14eGxcXFwiPjwvc3Bhbj4gPC9kaXY+IDxoNCBjbGFzcz1tLWItMSBuZy1pZj1cXFwiJGN0cmwubGFiZWwgfHwgJGN0cmwuZGVzY3JpcHRpb25cXFwiPiB7eyRjdHJsLmxhYmVsIHx8ICRjdHJsLmRlc2NyaXB0aW9ufX0gPC9oND4gPHAgY2xhc3M9bS1iLTIgbmctaWY9XFxcIiRjdHJsLnBsYWNlaG9sZGVyIHx8ICRjdHJsLmluc3RydWN0aW9uc1xcXCI+IHt7JGN0cmwucGxhY2Vob2xkZXIgfHwgJGN0cmwuaW5zdHJ1Y3Rpb25zfX0gPC9wPiA8dHctdXBsb2FkLWJ1dHRvbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkIG5hbWU9JGN0cmwubmFtZSBsYWJlbD0kY3RybC5idXR0b25UZXh0IGFjY2VwdD0kY3RybC5hY2NlcHQgbW9kZWw9JGN0cmwuaW5wdXRGaWxlIGRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgb24tY2FwdHVyZT0kY3RybC5vbkJ1dHRvbkNhcHR1cmUoZmlsZXMpPiA8L3R3LXVwbG9hZC1idXR0b24+IDx0dy1jYW1lcmEtYnV0dG9uIG5nLWlmPSRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCBsYWJlbD0kY3RybC5idXR0b25UZXh0IGRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgb24tY2xpY2s9JGN0cmwub25DYW1lcmFCdXR0b25DbGljaygpPiA8L3R3LWNhbWVyYS1idXR0b24+IDx0dy1jYW1lcmEtY2FwdHVyZSBuZy1pZj1cXFwiJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkICYmICRjdHJsLnNob3dMaXZlQ2FwdHVyZVNjcmVlblxcXCIgb3ZlcmxheT17eyRjdHJsLmNhbWVyYU92ZXJsYXl9fSBkaXJlY3Rpb249e3skY3RybC5jYW1lcmFEaXJlY3Rpb259fSBvbi1jYW5jZWw9JGN0cmwub25DYW1lcmFDYW5jZWwoKSBvbi1jYXB0dXJlPSRjdHJsLm9uQ2FtZXJhQ2FwdHVyZShmaWxlKT4gPC90dy1jYW1lcmEtY2FwdHVyZT4gPC9kaXY+IFwiOyIsImNsYXNzIENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkZWxlbWVudCkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLnNob3dMaXZlQ2FwdHVyZVNjcmVlbiA9IGZhbHNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuaWNvbikge1xuICAgICAgdGhpcy52aWV3SWNvbiA9IGNoYW5nZXMuaWNvbi5jdXJyZW50VmFsdWUgPyBjaGFuZ2VzLmljb24uY3VycmVudFZhbHVlIDogJ3VwbG9hZCc7XG4gICAgfVxuICB9XG5cbiAgb25DYW1lcmFDYW5jZWwoKSB7XG4gICAgdGhpcy5zaG93TGl2ZUNhcHR1cmVTY3JlZW4gPSBmYWxzZTtcbiAgfVxuXG4gIG9uQ2FtZXJhQ2FwdHVyZShmaWxlKSB7XG4gICAgdGhpcy5zaG93TGl2ZUNhcHR1cmVTY3JlZW4gPSBmYWxzZTtcbiAgICB0aGlzLm9uRmlsZUNhcHR1cmUoeyBmaWxlIH0pO1xuICB9XG5cbiAgb25DYW1lcmFCdXR0b25DbGljaygpIHtcbiAgICB0aGlzLnNob3dMaXZlQ2FwdHVyZVNjcmVlbiA9IHRydWU7XG4gIH1cblxuICBvbkJ1dHRvbkNhcHR1cmUoZmlsZXMpIHtcbiAgICBjb25zdCBmaWxlID0gZmlsZXNbMF07XG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKHsgZmlsZSB9KTtcbiAgfVxufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEcm9wcGluZ0NhcmQgZnJvbSAnLi9kcm9wcGluZy1jYXJkLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuZHJvcHBpbmcnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWREcm9wcGluZycsIERyb3BwaW5nQ2FyZClcbiAgLm5hbWU7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kcm9wcGluZy1jYXJkLmh0bWwnO1xuXG5jb25zdCBEcm9wcGluZ0NhcmQgPSB7XG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIGRyb3BwaW5nVGV4dDogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IERyb3BwaW5nQ2FyZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZS1jYXJkLWNvbnRlbnQ+IDxkaXYgY2xhc3M9XFxcImNpcmNsZSBjaXJjbGUtc20gbS1iLTNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLWFkZFxcXCI+PC9zcGFuPiA8L2Rpdj4gPGg0PiB7eyAkY3RybC5kcm9wcGluZ1RleHQgfHwgJ0Ryb3AgZmlsZSB0byBzdGFydCB1cGxvYWQnIH19IDwvaDQ+IDxwIGNsYXNzPVxcXCJtLXQtMiBtLWItMFxcXCI+PC9wPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuaHRtbCc7XG5pbXBvcnQgYmluZGluZ3MgZnJvbSAnLi9wcm9jZXNzaW5nLmJpbmRpbmdzJztcblxuY29uc3QgUHJvY2Vzc2luZ0NhcmQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc2luZ0NhcmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUtY2FyZC1jb250ZW50PiA8ZGl2IGNsYXNzPW0tYi0yPiA8dHctcHJvY2VzcyBzaXplPXNtIHN0YXRlPSRjdHJsLnByb2Nlc3NpbmdTdGF0ZSBuZy1pZj0kY3RybC5pc1Byb2Nlc3Npbmc+PC90dy1wcm9jZXNzPiA8L2Rpdj4gPGg0IGNsYXNzPW0tYi0yPiA8c3BhbiBuZy1pZj1cXFwiJGN0cmwuaXNQcm9jZXNzaW5nICYmICRjdHJsLnByb2Nlc3NpbmdNZXNzYWdlXFxcIiBjbGFzcz11cGxvYWQtcHJvY2Vzc2luZy1tZXNzYWdlPiB7eyRjdHJsLnByb2Nlc3NpbmdNZXNzYWdlfX0gPC9zcGFuPiA8c3BhbiBuZy1pZj1cXFwiJGN0cmwuaXNFcnJvciAmJiAkY3RybC5lcnJvck1lc3NhZ2VcXFwiIGNsYXNzPXVwbG9hZC1mYWlsdXJlLW1lc3NhZ2U+IHt7JGN0cmwuZXJyb3JNZXNzYWdlfX0gPC9zcGFuPiA8L2g0PiA8dWwgbmctaWY9XFxcIiRjdHJsLmlzRXJyb3IgJiYgJGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzXFxcIiBjbGFzcz1cXFwidGV4dC14cy1sZWZ0IG0tYi0yXFxcIj4gPGxpIG5nLWlmPSRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1swXT57eyAkY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMF0gfX08L2xpPiA8bGkgbmctaWY9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzFdPnt7ICRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1sxXSB9fTwvbGk+IDxsaSBuZy1pZj0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMl0+e3sgJGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzJdIH19PC9saT4gPC91bD4gPGEgaHJlZj1cXFwiXFxcIiBuZy1pZj0kY3RybC5pc0Vycm9yIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIG5nLWNsaWNrPSRjdHJsLm9uUmVtb3ZlKCkgcm9sZT1idXR0b24+IDxzcGFuIG5nLWlmPSRjdHJsLmNhbmNlbFRleHQgbmctYmluZD0kY3RybC5jYW5jZWxUZXh0Pjwvc3Bhbj4gPHNwYW4gbmctaWY9ISRjdHJsLmNhbmNlbFRleHQgY2xhc3M9XFxcImljb24gaWNvbi11cGxvYWQgbS1yLTBcXFwiPjwvc3Bhbj4gPC9hPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9wcm9jZXNzaW5nLW1pbmkuaHRtbCc7XG5pbXBvcnQgYmluZGluZ3MgZnJvbSAnLi9wcm9jZXNzaW5nLmJpbmRpbmdzJztcblxuY29uc3QgUHJvY2Vzc2luZ0NhcmQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc2luZ0NhcmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1wcm9jZXNzaW5nLWl0ZW0+IDxkaXYgY2xhc3M9bWVkaWE+IDxkaXYgY2xhc3M9XFxcIm1lZGlhLWxlZnQgdmVydGljYWwtY2VudGVyIHAtci0yIHAteS0xXFxcIj4gPHR3LXByb2Nlc3Mgc2l6ZT14cyBzdGF0ZT0kY3RybC5wcm9jZXNzaW5nU3RhdGU+PC90dy1wcm9jZXNzPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibWVkaWEtYm9keSB0ZXh0LXhzLWxlZnQgcC15LTFcXFwiIHN0eWxlPW92ZXJmbG93OmF1dG8+IDxkaXY+IDxzbWFsbCBjbGFzcz1cXFwibS1iLTAgdGV4dC1lbGxpcHNpcyBmaWxlLW5hbWVcXFwiPjxzdHJvbmc+e3sgJGN0cmwuZmlsZS5uYW1lIH19PC9zdHJvbmc+PC9zbWFsbD4gPHNtYWxsIGNsYXNzPVxcXCJtLWItMCB0ZXh0LWVsbGlwc2lzIHRpbnlcXFwiPiA8c3BhbiBuZy1pZj0kY3RybC5pc1Byb2Nlc3Npbmc+e3sgJGN0cmwucHJvY2Vzc2luZ01lc3NhZ2UgfX08L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLmlzRXJyb3I+e3sgJGN0cmwuZXJyb3JNZXNzYWdlIH19PC9zcGFuPiA8c3BhbiBuZy1pZj0kY3RybC5pc1N1Y2Nlc3M+e3sgJGN0cmwuc3VjY2Vzc01lc3NhZ2UgfX08L3NwYW4+IDwvc21hbGw+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibWVkaWEtcmlnaHQgcC1sLTIgcC15LTJcXFwiPiA8YSBocmVmPVxcXCJcXFwiIG5nLWlmPSEkY3RybC5pc1Byb2Nlc3NpbmcgY2xhc3M9Y2xvc2UgbmctY2xpY2s9JGN0cmwub25SZW1vdmUoKSByb2xlPWJ1dHRvbj4mdGltZXM7PC9hPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjsiLCJcbmNsYXNzIEFzeW5jRmlsZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKCRxKSB7XG4gICAgdGhpcy4kcSA9ICRxO1xuICB9XG5cbiAgcmVhZChmaWxlKSB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcblxuICAgIC8vIFdoZW4gdGhlIHJlYWRlciBmaW5pc2hlcyBsb2FkaW5nIHJlc29sdmUgdGhlIHByb21pc2VcbiAgICByZWFkZXIub25sb2FkID0gKGV2ZW50KSA9PiB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKGV2ZW50LnRhcmdldC5yZXN1bHQpO1xuICAgIH07XG5cbiAgICByZWFkZXIub25lcnJvciA9IChldmVudCkgPT4ge1xuICAgICAgZGVmZXJyZWQucmVqZWN0KGV2ZW50KTtcbiAgICB9O1xuXG4gICAgLy8gTG9hZCB0aGUgZmlsZVxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH1cbn1cblxuQXN5bmNGaWxlUmVhZGVyLiRpbmplY3QgPSBbJyRxJ107XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuZmlsZS1yZWFkZXInLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jRmlsZVJlYWRlcicsIEFzeW5jRmlsZVJlYWRlcilcbiAgLm5hbWU7XG4iLCJcbmNsYXNzIEFzeW5jRmlsZVNhdmVyIHtcbiAgY29uc3RydWN0b3IoJGh0dHApIHtcbiAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gIH1cblxuICBzYXZlKGZpZWxkTmFtZSwgZmlsZSwgaHR0cE9wdGlvbnMpIHtcbiAgICBpZiAoIWh0dHBPcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHN1cHBseSBodHRwT3B0aW9ucycpO1xuICAgIH1cbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGNvbnN0IGtleSA9IGh0dHBPcHRpb25zLnBhcmFtIHx8IGZpZWxkTmFtZTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBmaWxlKTtcblxuICAgIGNvbnN0ICRodHRwT3B0aW9ucyA9IHByZXBhcmVIdHRwT3B0aW9ucyhodHRwT3B0aW9ucyk7XG5cbiAgICBkZWxldGUgJGh0dHBPcHRpb25zLm1ldGhvZDtcblxuICAgIC8vIEZvciB0ZXN0aW5nXG4gICAgcmV0dXJuIHRoaXMuJGh0dHAucG9zdCgkaHR0cE9wdGlvbnMudXJsLCBmb3JtRGF0YSwgJGh0dHBPcHRpb25zKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHByZXBhcmVIdHRwT3B0aW9ucygkaW5wdXRPcHRpb25zKSB7XG4gIGNvbnN0ICRodHRwT3B0aW9ucyA9IGFuZ3VsYXIuY29weSgkaW5wdXRPcHRpb25zKTtcblxuICBpZiAoISRodHRwT3B0aW9ucy51cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHN1cHBseSBhIFVSTCB0byBwb3N0IGltYWdlIGRhdGEgYXN5bmNocm9ub3VzbHknKTtcbiAgfVxuICBpZiAoISRodHRwT3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgJGh0dHBPcHRpb25zLmhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIC8vIENvbnRlbnQtVHlwZSA9IHVuZGVmaW5lZCBhbGxvd3MgdGhlIGJyb3dzZXIgdG8gY2hvb3NlIHRoZSByaWdodCB0eXBlXG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxNjA3NjU2L3B1cnBvc2Utb2YtY29udGVudC10eXBlLXVuZGVmaW5lZC1pbi1hbmd1bGFyanMtZmlsZXVwbG9hZFxuICAkaHR0cE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB1bmRlZmluZWQ7XG4gICRodHRwT3B0aW9ucy50cmFuc2Zvcm1SZXF1ZXN0ID0gYW5ndWxhci5pZGVudGl0eTtcblxuICByZXR1cm4gJGh0dHBPcHRpb25zO1xufVxuXG5Bc3luY0ZpbGVTYXZlci4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmZpbGUtc2F2ZXInLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jRmlsZVNhdmVyJywgQXN5bmNGaWxlU2F2ZXIpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmNsYXNzIEZpbGVWYWxpZGF0aW9uU2VydmljZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpc0ltYWdlKGZpbGUpIHtcbiAgICByZXR1cm4gZmlsZS50eXBlICYmIGZpbGUudHlwZS5pbmRleE9mKCdpbWFnZScpID4gLTE7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaXNTbWFsbGVyVGhhbk1heFNpemUoZmlsZSwgbWF4U2l6ZSkge1xuICAgIHJldHVybiAhYW5ndWxhci5pc051bWJlcihtYXhTaXplKSB8fCBmaWxlLnNpemUgPD0gbWF4U2l6ZTtcbiAgfVxuXG4gIC8qXG4gIC8vIFRPRE8gdmFsaWRhdGUgZmlsZSB0eXBlXG4gIGlzVHlwZVZhbGlkKGZpbGUsIGFjY2VwdCkge1xuICAgIHJldHVybiB0cnVlO1xuICAgIC8vIHRoaXMuaXNXcm9uZ1R5cGUgPSB0cnVlO1xuICB9XG4gICovXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQudmFsaWRhdGlvbi1zZXJ2aWNlJywgW10pXG4gIC5zZXJ2aWNlKCdGaWxlVmFsaWRhdGlvblNlcnZpY2UnLCBGaWxlVmFsaWRhdGlvblNlcnZpY2UpXG4gIC5uYW1lO1xuIiwiY2xhc3MgQXN5bmNUYXNrc0NvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmFzZVVybCA9ICcnO1xuICAgIHRoaXMuaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgc2V0QmFzZVVybChiYXNlVXJsKSB7XG4gICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgfVxuXG4gIHNldEhlYWRlcihoZWFkZXIsIHZhbHVlKSB7XG4gICAgdGhpcy5oZWFkZXJzW2hlYWRlcl0gPSB2YWx1ZTtcbiAgfVxuXG4gIGV4dGVuZEh0dHBPcHRpb25zKGlucHV0T3B0aW9ucykge1xuICAgIGNvbnN0IGh0dHBPcHRpb25zID0gYW5ndWxhci5jb3B5KGlucHV0T3B0aW9ucyk7XG4gICAgaHR0cE9wdGlvbnMuaGVhZGVycyA9IGh0dHBPcHRpb25zLmhlYWRlcnNcbiAgICAgID8geyAuLi5odHRwT3B0aW9ucy5oZWFkZXJzLCAuLi50aGlzLmhlYWRlcnMgfVxuICAgICAgOiB0aGlzLmhlYWRlcnM7XG4gICAgaWYgKGh0dHBPcHRpb25zLnVybCkge1xuICAgICAgaHR0cE9wdGlvbnMudXJsID0gYCR7dGhpcy5iYXNlVXJsfSR7aHR0cE9wdGlvbnMudXJsfWA7XG4gICAgfVxuICAgIHJldHVybiBodHRwT3B0aW9ucztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBc3luY1Rhc2tzQ29uZmlnO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgU3VjY2Vzc0NhcmQgZnJvbSAnLi9zdWNjZXNzLWNhcmQuY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5zdWNjZXNzJywgW10pXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkU3VjY2VzcycsIFN1Y2Nlc3NDYXJkKVxuICAubmFtZTtcbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3N1Y2Nlc3MtY2FyZC5odG1sJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vc3VjY2Vzcy1jYXJkLmNvbnRyb2xsZXInO1xuXG5jb25zdCBTdWNjZXNzQ2FyZCA9IHtcbiAgdGVtcGxhdGUsXG4gIGNvbnRyb2xsZXIsXG4gIGJpbmRpbmdzOiB7XG4gICAgbGFiZWw6ICc8JyxcbiAgICBmaWxlOiAnPCcsXG4gICAgZGF0YTogJzwnLFxuICAgIGlzSW1hZ2U6ICc8JyxcbiAgICBzdWNjZXNzTWVzc2FnZTogJzwnLFxuICAgIGNhbmNlbFRleHQ6ICc8JyxcbiAgICBvbkNhbmNlbDogJyYnLFxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdWNjZXNzQ2FyZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZS1jYXJkLWNvbnRlbnQ+IDxoNCBuZy1pZj1cXFwiJGN0cmwuc3VjY2Vzc01lc3NhZ2UgfHwgJGN0cmwubGFiZWxcXFwiIGNsYXNzPVxcXCJtLWItMiB1cGxvYWQtc3VjY2Vzcy1tZXNzYWdlXFxcIj4ge3sgJGN0cmwuc3VjY2Vzc01lc3NhZ2UgfHwgJGN0cmwubGFiZWwgfX0gPC9oND4gPGltZyBuZy1pZj1cXFwiJGN0cmwuaXNJbWFnZSAmJiAkY3RybC5kYXRhXFxcIiBzcmM9XFxcImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxcXG4gICAgICBpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQUVBQUFBQkNBUUFBQUMxSEF3Q0FBQUFDMGxFUVZSNDJtTmtZQUFBQUFZQUFqQ0IwQzhBQUFBQVNVVk9SSzVDWUlJPVxcXCIgbmctc3JjPVxcXCJ7eyAkY3RybC5kYXRhIH19XFxcIiBhbHQ9T0sgY2xhc3M9XFxcInRodW1ibmFpbCBtLWItM1xcXCIvPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLXBkZiBpY29uLXh4bFxcXCIgbmctaWY9XFxcIiEkY3RybC5pc0ltYWdlIHx8ICEkY3RybC5kYXRhXFxcIj48L3NwYW4+IDxwIGNsYXNzPVxcXCJtLWItMiB0ZXh0LWVsbGlwc2lzXFxcIj57eyAkY3RybC5maWxlTmFtZSB9fTwvcD4gPHAgY2xhc3M9XFxcIm0tdC0yIG0tYi0wXFxcIj4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC5vbkNhbmNlbCgpPiA8c3BhbiBuZy1pZj0kY3RybC5jYW5jZWxUZXh0IG5nLWJpbmQ9JGN0cmwuY2FuY2VsVGV4dD48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5jYW5jZWxUZXh0IGNsYXNzPVxcXCJpY29uIGljb24tdXBsb2FkIG0tci0wXFxcIj48L3NwYW4+IDwvYT4gPC9wPiA8L2Rpdj4gXCI7IiwiY2xhc3MgU3VjY2Vzc0NhcmRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsIEZpbGVWYWxpZGF0aW9uU2VydmljZSkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLkZpbGVWYWxpZGF0aW9uU2VydmljZSA9IEZpbGVWYWxpZGF0aW9uU2VydmljZTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmZpbGUgJiYgY2hhbmdlcy5maWxlLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgdGhpcy5maWxlTmFtZSA9IGNoYW5nZXMuZmlsZS5jdXJyZW50VmFsdWUubmFtZTtcbiAgICB9XG4gIH1cblxuICBvbk1hbnVhbFJldXBsb2FkKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLiRlbGVtZW50WzBdO1xuICAgIGNvbnN0IHVwbG9hZElucHV0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudHctZHJvcHBhYmxlLWlucHV0LXJldXBsb2FkJyk7XG4gICAgY29uc3QgZmlsZSA9IHVwbG9hZElucHV0LmZpbGVzWzBdO1xuXG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKGZpbGUpO1xuICB9XG59XG5cblN1Y2Nlc3NDYXJkQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnRmlsZVZhbGlkYXRpb25TZXJ2aWNlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgU3VjY2Vzc0NhcmRDb250cm9sbGVyO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ2FtZXJhQ2FwdHVyZSBmcm9tICcuL2NhbWVyYS1jYXB0dXJlLmNvbXBvbmVudCc7XG5cbmltcG9ydCBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlciBmcm9tICcuL2NhbWVyYS1jYXB0dXJlLXNjcmVlbi1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IENhbWVyYU92ZXJsYXlIYW5kbGVyIGZyb20gJy4vY2FtZXJhLW92ZXJsYXktaGFuZGxlci5zZXJ2aWNlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5jYW1lcmEtY2FwdHVyZScsIFtdKVxuICAuc2VydmljZSgnQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXInLCBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlcilcbiAgLnNlcnZpY2UoJ0NhbWVyYU92ZXJsYXlIYW5kbGVyJywgQ2FtZXJhT3ZlcmxheUhhbmRsZXIpXG4gIC5jb21wb25lbnQoJ3R3Q2FtZXJhQ2FwdHVyZScsIENhbWVyYUNhcHR1cmUpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jYW1lcmEtY2FwdHVyZS5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NhbWVyYS1jYXB0dXJlLmh0bWwnO1xuaW1wb3J0ICcuL2NhbWVyYS1jYXB0dXJlLmxlc3MnO1xuXG5jb25zdCBDYW1lcmFDYXB0dXJlID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBvdmVybGF5OiAnQCcsIC8vIE9wdGlvbmFsXG4gICAgZGlyZWN0aW9uOiAnQCcsIC8vIGVudmlyb25tZW50L3VzZXJcblxuICAgIG9uQ2FuY2VsOiAnJicsXG4gICAgb25DYXB0dXJlOiAnJicsXG5cbiAgICAvKipcbiAgICAgKiBOZWVkIHRoaXMgcGFyYW1ldGVyIHRvIHNraXAgdXNlciBpbnRlcmFjdGlvblxuICAgICAqIGR1cmluZyBjb250cm9sbGVyIGluaXRpYWxpemF0aW9uIGluIHVuaXQgdGVzdHNcbiAgICAgKi9cbiAgICB0ZXN0TW9kZTogJ0AnIC8vIHRydWUvZmFsc2VcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhQ2FwdHVyZTtcbiIsImltcG9ydCBzY3JlZW5mdWxsIGZyb20gJ3NjcmVlbmZ1bGwnOyAvLyBNSVRAaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9zY3JlZW5mdWxsLmpzXG5cbmNsYXNzIENhbWVyYUNhcHR1cmVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJGVsZW1lbnQsXG4gICAgJHNjb3BlLFxuICAgICR3aW5kb3csXG4gICAgJHEsXG4gICAgJGF0dHJzLFxuICAgICRsb2csXG4gICAgQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXJcbiAgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGxvZyA9ICRsb2c7XG4gICAgdGhpcy4kcSA9ICRxO1xuICAgIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG4gICAgdGhpcy5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlciA9IENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyO1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICAvLyBWaWRlbyBwcmV2aWV3IGNvbnRyb2xcbiAgICB0aGlzLnNob3dWaWRlb1ByZXZpZXcgPSBmYWxzZTtcbiAgICB0aGlzLnNob3dWaWRlb0luUHJldmlldyA9IHRydWU7XG4gICAgdGhpcy5zaG93Q2FwdHVyZUluUHJldmlldyA9IGZhbHNlO1xuICAgIHRoaXMubWVkaWFTdHJlYW0gPSBudWxsO1xuXG4gICAgLy8gTGl2ZSBjYW0gZmxvdyBidXR0b24gY29udHJvbFxuICAgIHRoaXMuY2FwdHVyZUJ1dHRvbkRpc2FibGVkID0gdHJ1ZTtcblxuICAgIC8vIERpbWVuc2lvbi9yZXNvbHV0aW9uIGNvbnRyb2xsXG4gICAgdGhpcy5zY3JlZW5IZWlnaHQgPSAwLjA7XG4gICAgdGhpcy5zY3JlZW5XaWR0aCA9IDAuMDtcbiAgICB0aGlzLnZpZGVvUmVzSGVpZ2h0ID0gMC4wO1xuICAgIHRoaXMudmlkZW9SZXNXaWR0aCA9IDAuMDtcblxuICAgIHRoaXMub3ZlcmxheVdpZHRoID0gMDtcbiAgICB0aGlzLm92ZXJsYXlIZWlnaHQgPSAwO1xuICAgIHRoaXMub3ZlcmxheVhPZmZzZXQgPSAwO1xuICAgIHRoaXMub3ZlcmxheVlPZmZzZXQgPSAwO1xuICAgIHRoaXMuZGlzcGxheUNhbnZhc1hPZmZzZXQgPSAwOyAvLyBpbiBweFxuICAgIHRoaXMuZGlzcGxheUNhbnZhc1lPZmZzZXQgPSAwOyAvLyBpbiBweFxuICAgIHRoaXMudmlkZW9YT2Zmc2V0ID0gMDsgLy8gdmlkZW8geCBvZmZzZXQgaW4gcGVyY2VudGFnZVxuICAgIHRoaXMudmlkZW9IZWlnaHQgPSAxMDA7IC8vIHZpZGVvIGhlaWdodCBpbiBwZXJjZW50YWdlXG4gICAgdGhpcy52aWRlb1dpZHRoID0gMTAwOyAvLyB2aWRlbyB3aWR0aCBpbiBwZXJjZW50YWdlXG5cbiAgICB0aGlzLmlzVmlkZW9Ib3Jpem9udGFsbHlGbGlwcGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuaGFzR2V0VXNlck1lZGlhKCkpIHtcbiAgICAgIC8vIFRPRE86IGhhb3l1YW4gaG93IHRvIGhhbmRsZSBnZXQgdXNlciBtZWRpYSBub3QgYmVpbmcgYXZhaWxhYmxlP1xuICAgICAgdGhpcy4kbG9nLndhcm4oJ2dldFVzZXJNZWRpYSgpIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBicm93c2VyJyk7XG4gICAgfVxuXG4gICAgdGhpcy5vdmVybGF5TG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5vdmVybGF5RWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3ZpZGVvLXByZXZpZXcgI292ZXJsYXknKTtcbiAgICB0aGlzLmRpc3BsYXlDYW52YXMgPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1wcmV2aWV3ICNkaXNwbGF5LWNhbnZhcycpO1xuICAgIHRoaXMudXBsb2FkQ2FudmFzID0gdGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdmlkZW8tcHJldmlldyAjdXBsb2FkLWNhbnZhcycpO1xuICAgIHRoaXMudmlkZW9QcmV2aWV3RWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3ZpZGVvLXByZXZpZXcnKTtcbiAgICB0aGlzLnZpZGVvID0gdGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdmlkZW8tcHJldmlldyAjdmlkZW8nKTtcbiAgICB0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBjcmVhdGVWaWRlb1BsYXlDYWxsYmFjayh0aGlzKSk7XG5cbiAgICB0aGlzLiR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBjcmVhdGVPcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrKHRoaXMpLCBmYWxzZSk7XG5cbiAgICAvLyBUT0RPIGhhb3l1YW4gOiBhZGQgY2hhbmdlIGV2ZW50IGxpc3RlbmVyIHRvIHNjcmVlbmZ1bCxcbiAgICAvLyAgZXhpc3RpbmcgZnVsbCBzY3JlZW4gc2hvdWxkIHF1aXQgY2FwdHVyZSBpbnN0ZWFkIG9mIHNob3dpbmcgbm9uIGZ1bGwgc2NyZWVuIGNhbWVyYVxuICAgIGlmICghdGhpcy50ZXN0TW9kZSB8fCB0aGlzLnRlc3RNb2RlLnRvTG93ZXJDYXNlKCkgIT09ICd0cnVlJykge1xuICAgICAgdGhpcy5zdGFydExpdmVDYW1GbG93KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWNxdWlyZSBhbmQgYXR0YWNoIHZpZGVvIHN0cmVhbSB0byB2aWRlbyB0YWcuXG4gIHN0YXJ0TGl2ZUNhbUZsb3coKSB7XG4gICAgdGhpcy4kbG9nLmRlYnVnKCctLS0tLSBMaXZlIGNhbSBmbG93IHN0YXJ0IC0tLS0tJyk7XG4gICAgdGhpcy5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMudmlkZW9QbGF5aW5nID0gZmFsc2U7XG5cbiAgICAvLyBEaXNwbGF5IHZpZGVvIGNvbXBvbmVudCBpbiBmdWxsIHNjcmVlblxuICAgIC8vIFRoaXMgcGFydCBvZiBjb2RlIGNhbm5vdCBiZSBpbiBjYWxsYmFjayBkdWUgdG8gYnJvd3NlciBzZWN1cml0eSByZXF1aXJlbWVudFxuICAgIHRoaXMudmlkZW8ucGF1c2UoKTtcblxuICAgIHRoaXMudHJ5QWNxdWlyZUZ1bGxTY3JlZW4oKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ0FjcXVpcmVkIGZ1bGwgc2NyZWVuLicpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHRoaXMuJGxvZy53YXJuKCdGYWlsZWQgdG8gYWNxdWlyZSBmdWxsIHNjcmVlbi4nKTtcbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIC8vIEFmdGVyIHRyeWluZyB0byBhY3F1aXJlIGZ1bGwgc2NyZWVuLCByZXNvbHZlIHZpZGVvIHN0cmVhbVxuICAgICAgICB0aGlzLnNldFNjcmVlbkRpbWVuc2lvbnMoKTtcbiAgICAgICAgaWYgKCF0aGlzLm92ZXJsYXlMb2FkZWQpIHsgLy8gRG9udCB0cmlnZ2VyIG92ZXJsYXkgY29tcHV0YXRpb24gaWYgYWxyZWFkeSBsb2FkZWRcbiAgICAgICAgICBpZiAodGhpcy5vdmVybGF5RWxlbWVudC5uYXR1cmFsSGVpZ2h0ID09PSAwIHx8IHRoaXMub3ZlcmxheUVsZW1lbnQubmF0dXJhbFdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ092ZXJsYXkgaGFzIG5vdCBsb2FkZWQgYWZ0ZXIgZnVsbCBzY3JlZW4gaXMgYWNxdWlyZWQnKTtcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNyZWF0ZU92ZXJsYXlPbkxvYWRDYWxsYmFjayh0aGlzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnT3ZlcmxheSBoYXMgbG9hZGVkIGJlZm9yZSBmdWxsIHNjcmVlbiBpcyBhY3F1aXJlZCcpO1xuICAgICAgICAgICAgY3JlYXRlT3ZlcmxheU9uTG9hZENhbGxiYWNrKHRoaXMpLmNhbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cnlBY3F1aXJlTWVkaWFTdHJlYW0oKVxuICAgICAgICAgIC50aGVuKChzdHJlYW0pID0+IHtcbiAgICAgICAgICAgIHRoaXMub25WaWRlb1N0cmVhbUFjcXVpc2l0aW9uKHN0cmVhbSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETyBoYW95dWFuIDogU2hvdWxkIHNvbWVob3cgYXNrIHVzZXIgdG8gcmVmcmVzaCBwYWdlIHRvIHJlYXF1aXJlIHBlcm1pc3Npb25cbiAgICAgICAgICAgIHRoaXMuJGxvZy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgdGhpcy5vbkNhbmNlbEJ0bkNsaWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHRyeUFjcXVpcmVGdWxsU2NyZWVuKCkge1xuICAgIGlmIChzY3JlZW5mdWxsLmVuYWJsZWQpIHtcbiAgICAgIGlmICghc2NyZWVuZnVsbC5pc0Z1bGxzY3JlZW4pIHtcbiAgICAgICAgcmV0dXJuIHNjcmVlbmZ1bGwucmVxdWVzdCh0aGlzLnZpZGVvUHJldmlld0VsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHEucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kcS5yZWplY3QoKTtcbiAgfVxuXG4gIG9uVmlkZW9TdHJlYW1BY3F1aXNpdGlvbihzdHJlYW0pIHtcbiAgICB0aGlzLm1lZGlhU3RyZWFtID0gc3RyZWFtO1xuXG4gICAgLypcbiAgICAgVGhpcyBpcyBkb25lIGluc3RlYWQgb2YganVzdCByZWFzc2lnbmluZyB2aWRlbyBzdHJlYW0gZXZlcnl0aW1lXG4gICAgIHRvIHByZXZlbnQgc2NyZWVuIGZyb20gYmxpbmtpbmcgZXhjZXNzaXZlbHkgZHVyaW5nIHN3aXRjaFxuICAgICAgKi9cbiAgICBpZiAodGhpcy52aWRlby5zcmNPYmplY3QgIT09IHRoaXMubWVkaWFTdHJlYW0pIHtcbiAgICAgIHRoaXMudmlkZW8uc3JjT2JqZWN0ID0gdGhpcy5tZWRpYVN0cmVhbTtcbiAgICB9XG5cbiAgICAvLyBUb2dnbGUgY29udHJvbHNcbiAgICB0aGlzLnNob3dWaWRlb1ByZXZpZXcgPSB0cnVlO1xuICAgIHRoaXMuc2hvd1ZpZGVvSW5QcmV2aWV3ID0gdHJ1ZTtcbiAgICB0aGlzLnNob3dDYXB0dXJlSW5QcmV2aWV3ID0gZmFsc2U7XG5cbiAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgfVxuXG4gIHRyeUFjcXVpcmVNZWRpYVN0cmVhbSgpIHtcbiAgICBpZiAoIXRoaXMubWVkaWFTdHJlYW0pIHtcbiAgICAgIHJldHVybiB0aGlzLiR3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkudGhlbigoZGV2aWNlcykgPT4ge1xuICAgICAgICAvLyBJZiBkZXZpY2Ugb25seSBoYXMgb25lIGNhbWVyYSwgYXNzdW1lIGl0IGlzIHNlbGZpZSBjYW1cbiAgICAgICAgY29uc3QgbnVtVmlkZW9EZXZpY2VzID0gZGV2aWNlcy5maWx0ZXIoZGV2aWNlID0+IGRldmljZS5raW5kID09PSAndmlkZW9pbnB1dCcpLmxlbmd0aDtcbiAgICAgICAgdGhpcy4kbG9nLmRlYnVnKGBGb3VuZCAke251bVZpZGVvRGV2aWNlc30gdmlkZW8gZGV2aWNlcy5gKTtcbiAgICAgICAgaWYgKG51bVZpZGVvRGV2aWNlcyA9PT0gMSB8fCAhdGhpcy5kaXJlY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICd1c2VyJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGbGlwIHZpZGVvIGFsb25nIHggYXhpcyBzbyBzZWxmaWUgdmlkZW8gYmVjb21lcyBhIG1pcnJvclxuICAgICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICd1c2VyJykge1xuICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnQ2hhbmdlZCB1c2VyIHZpZGVvIHRvIG1pcnJvcicpO1xuICAgICAgICAgIHRoaXMudmlkZW8uY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1taXJyb3InKTtcbiAgICAgICAgICB0aGlzLm92ZXJsYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXktbWlycm9yJyk7XG4gICAgICAgICAgdGhpcy5pc1ZpZGVvSG9yaXpvbnRhbGx5RmxpcHBlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbWVyYUNvbnN0cmFpbnRzID0ge1xuICAgICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICB3aWR0aDoge1xuICAgICAgICAgICAgICBtaW46IDY0MCxcbiAgICAgICAgICAgICAgaWRlYWw6IDEyODAsXG4gICAgICAgICAgICAgIG1heDogMTI4MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhY2luZ01vZGU6IHtcbiAgICAgICAgICAgICAgaWRlYWw6IHRoaXMuZGlyZWN0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdWRpbzogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh0aGlzLmNhbWVyYUNvbnN0cmFpbnRzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLiRxLnJlc29sdmUodGhpcy5tZWRpYVN0cmVhbSk7XG4gIH1cblxuICBzZXRTY3JlZW5EaW1lbnNpb25zKCkge1xuICAgIC8vIFRPRE8gaGFveXVhbiA6IGZpcmVmb3ggaXMgcmVjb2duaXppbmcgcGl4ZWwncyBidG0gYmFyXG4gICAgdGhpcy4kbG9nLmRlYnVnKGBzY3JlZW4gOiAke3RoaXMuJHdpbmRvdy5zY3JlZW4uaGVpZ2h0fSB4ICR7dGhpcy4kd2luZG93LnNjcmVlbi53aWR0aH1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHNjcmVlbiBhdmFpbGFibGUgOiAke3RoaXMuJHdpbmRvdy5zY3JlZW4uYXZhaWxIZWlnaHR9IHggJHt0aGlzLiR3aW5kb3cuc2NyZWVuLmF2YWlsV2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBzY3JlZW4gaW5uZXIgOiAke3RoaXMuJHdpbmRvdy5pbm5lckhlaWdodH0geCAke3RoaXMuJHdpbmRvdy5pbm5lcldpZHRofWApO1xuICAgIHRoaXMuc2NyZWVuSGVpZ2h0ID0gdGhpcy4kd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHRoaXMuc2NyZWVuV2lkdGggPSB0aGlzLiR3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLiRsb2cuZGVidWcoYCoqc2NyZWVuIHJlc29sdmVkKiogOiAke3RoaXMuc2NyZWVuSGVpZ2h0fSB4ICR7dGhpcy5zY3JlZW5XaWR0aH1gKTtcbiAgfVxuXG4gIGNsb3NlVmlkZW9TdHJlYW0oKSB7XG4gICAgaWYgKHNjcmVlbmZ1bGwuZW5hYmxlZCkge1xuICAgICAgc2NyZWVuZnVsbC5leGl0KCk7XG4gICAgfVxuICAgIHRoaXMudmlkZW8uc3JjT2JqZWN0ID0gbnVsbDtcbiAgICBpZiAodGhpcy5tZWRpYVN0cmVhbSkge1xuICAgICAgdGhpcy5tZWRpYVN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnN0b3AoKSk7XG4gICAgICB0aGlzLm1lZGlhU3RyZWFtID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zaG93VmlkZW9QcmV2aWV3ID0gZmFsc2U7XG4gICAgdGhpcy5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgb25DYW5jZWxCdG5DbGljaygpIHtcbiAgICB0aGlzLmNsb3NlVmlkZW9TdHJlYW0oKTtcbiAgICB0aGlzLm9uQ2FuY2VsKCk7XG4gIH1cblxuICBvbkNhcHR1cmVCdG5DbGljaygpIHtcbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQsIHdpZHRoLFxuICAgICAgeU9mZnNldCwgeE9mZnNldCxcbiAgICAgIHBhaW50SGVpZ2h0LCBwYWludFdpZHRoXG4gICAgfSA9IHRoaXMuQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIuZ2V0Q2FudmFzU3BlY2lmaWNhdGlvbnMoXG4gICAgICB0aGlzLnZpZGVvSGVpZ2h0LFxuICAgICAgdGhpcy52aWRlb1dpZHRoLFxuICAgICAgdGhpcy5zY3JlZW5IZWlnaHQsXG4gICAgICB0aGlzLnNjcmVlbldpZHRoLFxuICAgICAgdGhpcy52aWRlb1Jlc0hlaWdodCxcbiAgICAgIHRoaXMudmlkZW9SZXNXaWR0aFxuICAgICk7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzWU9mZnNldCA9IHlPZmZzZXQ7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzWE9mZnNldCA9IHhPZmZzZXQ7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAvKiBDb25mdXNpbmcgZHJhdyBpbWFnZSBtZXRob2QgZm9yIHZpZGVvXG4gICAgICogRGVzcGl0ZSB2aWRlbyBkaW1lbnNpb24gY2FuIGJlIG1vcmUgdGhhbiAxMDAlLCB0aGUgdmlkZW8gbmV2ZXIgZXh0ZW5kcyBiZXlvbmQgdGhlIHNjcmVlblxuICAgICAqIEluc3RlYWQsIGl0cyByZXNvbHV0aW9uIGdldHMgdHJ1bmNhdGVkIHRvIGZpdCB0aGUgc2NyZWVuIHBlcmZlY3RseVxuICAgICAqIFRodXMgZHJhd2luZyBhbHdheXMgc3RhcnRzIGZyb20gKDAsIDApXG4gICAgICovXG4gICAgY29uc3QgY3R4ID0gdGhpcy5kaXNwbGF5Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgY3R4LmRyYXdJbWFnZSh0aGlzLnZpZGVvLCAwLCAwLCBwYWludFdpZHRoLCBwYWludEhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgdGhpcy5zaG93Q2FwdHVyZUluUHJldmlldyA9IHRydWU7XG4gICAgdGhpcy5zaG93VmlkZW9JblByZXZpZXcgPSBmYWxzZTtcbiAgfVxuXG4gIG9uUmVjYXB0dXJlQnRuQ2xpY2soKSB7XG4gICAgdGhpcy5zdGFydExpdmVDYW1GbG93KCk7XG4gIH1cblxuICBvblVwbG9hZEJ0bkNsaWNrKCkge1xuICAgIHRoaXMudXBsb2FkQ2FudmFzLndpZHRoID0gdGhpcy5kaXNwbGF5Q2FudmFzLndpZHRoO1xuICAgIHRoaXMudXBsb2FkQ2FudmFzLmhlaWdodCA9IHRoaXMuZGlzcGxheUNhbnZhcy5oZWlnaHQ7XG4gICAgdGhpcy51cGxvYWRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UodGhpcy5kaXNwbGF5Q2FudmFzLCAwLCAwLCB0aGlzLmRpc3BsYXlDYW52YXMud2lkdGgsIHRoaXMuZGlzcGxheUNhbnZhcy5oZWlnaHQpO1xuICAgIC8vIFN1cHBvcnQgOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvdG9CbG9iXG4gICAgdGhpcy51cGxvYWRDYW52YXMudG9CbG9iKGNyZWF0ZVVwbG9hZENhbGxiYWNrKHRoaXMpLCAnaW1hZ2UvcG5nJywgMS4wKTtcbiAgfVxuXG4gIHNldE5nTW9kZWwodmFsdWUpIHtcbiAgICAvLyBJZiBuZ01vZGVsIG5vdCBhc3NpZ25hYmxlLCB3ZSBkb24ndCB3YW50IHRvIGVycm9yLlxuICAgIGlmICh0eXBlb2YgdGhpcy4kYXR0cnMubmdNb2RlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0ICRuZ01vZGVsID0gdGhpcy4kZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgICBpZiAoISRuZ01vZGVsLiRzZXRWaWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgaGFzR2V0VXNlck1lZGlhKCkge1xuICAgIHJldHVybiAhISh0aGlzLiR3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlc1xuICAgICAgJiYgdGhpcy4kd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKTtcbiAgfVxuXG4gIGdldE92ZXJsYXlTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGAke3RoaXMub3ZlcmxheVhPZmZzZXR9cHhgLFxuICAgICAgdG9wOiBgJHt0aGlzLm92ZXJsYXlZT2Zmc2V0fXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLm92ZXJsYXlXaWR0aH1weGAsXG4gICAgICBoZWlnaHQ6IGAke3RoaXMub3ZlcmxheUhlaWdodH1weGAsXG4gICAgfTtcbiAgfVxuXG4gIGdldFZpZGVvU3R5bGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBgJHt0aGlzLnZpZGVvWE9mZnNldH0lYCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy52aWRlb0hlaWdodH0lYCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnZpZGVvV2lkdGh9JWAsXG4gICAgfTtcbiAgfVxuXG4gIGdldENhbnZhc1N0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogYCR7dGhpcy5kaXNwbGF5Q2FudmFzWE9mZnNldH1weGAsXG4gICAgICB0b3A6IGAke3RoaXMuZGlzcGxheUNhbnZhc1lPZmZzZXR9cHhgLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBOZWVkIHRvIHVzZSB0aGlzIHBhdHRlcm4gaGVyZSBiZWNhdXNlXG4gKiB3ZSBvbmx5IGdldCBoZWlnaHQgYW5kIHdpZHRoIG9mIG92ZXJsYXkgaW1hZ2UgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9hZGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlPbkxvYWRDYWxsYmFjaygkY3RybCkge1xuICByZXR1cm4gZnVuY3Rpb24gb3ZlcmxheU9uTG9hZENhbGxiYWNrKCkge1xuICAgIGlmICghJGN0cmwub3ZlcmxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQ6IG92ZXJsYXlIZWlnaHQsXG4gICAgICB3aWR0aDogb3ZlcmxheVdpZHRoLFxuICAgICAgeU9mZnNldDogb3ZlcmxheVlPZmZzZXQsXG4gICAgICB4T2Zmc2V0OiBvdmVybGF5WE9mZnNldFxuICAgIH0gPSAkY3RybC5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlclxuICAgICAgLmdldE92ZXJsYXlTcGVjaWZpY2F0aW9ucyhcbiAgICAgICAgJGN0cmwuc2NyZWVuSGVpZ2h0LCAkY3RybC5zY3JlZW5XaWR0aCxcbiAgICAgICAgJGN0cmwub3ZlcmxheUVsZW1lbnQubmF0dXJhbEhlaWdodCwgJGN0cmwub3ZlcmxheUVsZW1lbnQubmF0dXJhbFdpZHRoXG4gICAgICApO1xuXG4gICAgJGN0cmwuJHNjb3BlLiRhcHBseUFzeW5jKCgpID0+IHtcbiAgICAgICRjdHJsLm92ZXJsYXlZT2Zmc2V0ID0gb3ZlcmxheVlPZmZzZXQ7XG4gICAgICAkY3RybC5vdmVybGF5WE9mZnNldCA9IG92ZXJsYXlYT2Zmc2V0O1xuICAgICAgJGN0cmwub3ZlcmxheUhlaWdodCA9IG92ZXJsYXlIZWlnaHQ7XG4gICAgICAkY3RybC5vdmVybGF5V2lkdGggPSBvdmVybGF5V2lkdGg7XG5cbiAgICAgICRjdHJsLm92ZXJsYXlMb2FkZWQgPSB0cnVlO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIE5lZWQgdG8gdXNlIHRoaXMgcGF0dGVybiBoZXJlIGJlY2F1c2VcbiAqIHdlIG9ubHkgZ2V0IGhlaWdodCBhbmQgd2lkdGggb2YgdmlkZW8gYWZ0ZXIgaXQgaXMgcGxheWluZ1xuICovXG5mdW5jdGlvbiBjcmVhdGVWaWRlb1BsYXlDYWxsYmFjaygkY3RybCkge1xuICByZXR1cm4gZnVuY3Rpb24gdmlkZW9QbGF5Q2FsbGJhY2soKSB7XG4gICAgJGN0cmwuY2FwdHVyZUJ1dHRvbkRpc2FibGVkID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnZpZGVvSGVpZ2h0ID09PSAwIHx8IHRoaXMudmlkZW9XaWR0aCA9PT0gMCkge1xuICAgICAgLy8gVmlkZW8gaXMgbm90IHBsYXlpbmcsIGxpc3RlbiBmb3IgaXQgdG8gc3RhcnRcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsIGZ1bmN0aW9uIHZpZGVvUGxheWluZ0NhbGxiYWNrKCkge1xuICAgICAgICAkY3RybC4kc2NvcGUuJGFwcGx5QXN5bmMoKCkgPT4ge1xuICAgICAgICAgICRjdHJsLnZpZGVvUGxheWluZyA9IHRydWU7XG4gICAgICAgICAgYXNzaWduVmlkZW9EaW1lbnNpb25zKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgdmlkZW9QbGF5aW5nQ2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRjdHJsLiRzY29wZS4kYXBwbHlBc3luYygoKSA9PiB7XG4gICAgICAgICRjdHJsLnZpZGVvUGxheWluZyA9IHRydWU7XG4gICAgICAgIGFzc2lnblZpZGVvRGltZW5zaW9ucyh0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2lnblZpZGVvRGltZW5zaW9ucyh2aWRlbykge1xuICAgICAgJGN0cmwudmlkZW9SZXNIZWlnaHQgPSB2aWRlby52aWRlb0hlaWdodDtcbiAgICAgICRjdHJsLnZpZGVvUmVzV2lkdGggPSB2aWRlby52aWRlb1dpZHRoO1xuICAgICAgJGN0cmwuJGxvZy5kZWJ1ZyhgcGxheWluZyB1cGRhdGVkIHZpZGVvIDogJHskY3RybC52aWRlb1Jlc0hlaWdodH0geCAkeyRjdHJsLnZpZGVvUmVzV2lkdGh9YCk7XG4gICAgICBjb25zdCB7IHZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlLCB2aWRlb1dpZHRoSW5QZXJjZW50YWdlIH0gPSAkY3RybC5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlclxuICAgICAgICAuZ2V0VmlkZW9TcGVjaWZpY2F0aW9ucyhcbiAgICAgICAgICAkY3RybC5zY3JlZW5IZWlnaHQsICRjdHJsLnNjcmVlbldpZHRoLFxuICAgICAgICAgICRjdHJsLnZpZGVvUmVzSGVpZ2h0LCAkY3RybC52aWRlb1Jlc1dpZHRoXG4gICAgICAgICk7XG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdmlkZW8gd2lkdGggaXMgbW9yZSB0aGFuIHNjcmVlbiB3aWR0aFxuICAgICAgICogbmF0dXJhbCB2aWRlbyB3aWxsIG92ZXJmbG93IHRvIHJpZ2h0IG9mIHNjcmVlblxuICAgICAgICogQXMgc2VsZmllIGNhbSBpcyBmbGlwcGVkLCB0aGUgb3ZlcmZsb3duIHBhcnQgd2lsbCBiZSBmbGlwcGVkIG9udG8gdGhlIHNjcmVlbiBvbiB0aGUgbGVmdFxuICAgICAgICogV2hlbiBkcmF3aW5nIGNhbnZhcyBmcm9tIHZpZGVvLCB2aWRlbyB0cmFuc2Zvcm1hdGlvbiBpcyBub3QgY29uc2lkZXJlZFxuICAgICAgICogVGh1cyBieSBuYXR1cmFsbHkgZHJhd2luZyB0aGUgc2NyZWVuLCBjYW52YXMgaW1hZ2Ugd2lsbCBtaXNtYXRjaCB3aXRoIHZpZGVvXG4gICAgICAgKiBXZSBuZWVkZWQgdG8gYXBwbHkgYW4gb2Zmc2V0IGhlcmVcbiAgICAgICAqIHRvIG1ha2Ugc3VyZSBvdmVyZmxvd24gcGFydCBpbiB1bmZsaXBwZWQgdmlkZW8gaXMgc3RpbGwgb3ZlcmZsb3duIGluIGZsaXBwZWQgdmlkZW9cbiAgICAgICAqL1xuICAgICAgaWYgKCRjdHJsLmlzVmlkZW9Ib3Jpem9udGFsbHlGbGlwcGVkICYmIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UgPiAxMDAuMCkge1xuICAgICAgICAkY3RybC52aWRlb1hPZmZzZXQgPSAxMDAgLSB2aWRlb1dpZHRoSW5QZXJjZW50YWdlO1xuICAgICAgfVxuICAgICAgJGN0cmwudmlkZW9IZWlnaHQgPSB2aWRlb0hlaWdodEluUGVyY2VudGFnZTtcbiAgICAgICRjdHJsLnZpZGVvV2lkdGggPSB2aWRlb1dpZHRoSW5QZXJjZW50YWdlO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gUmVzaXplIGxpc3RlbmVyIGxpc3RlbnMgdG8gZW5kIG9mIG9yaWVudGF0aW9uIGNoYW5nZSBldmVudFxuZnVuY3Rpb24gY3JlYXRlT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFjaygkY3RybCkge1xuICAvLyBUT0RPIGhhb3l1YW4gOiBzaG91bGQgd2UgY2FuY2VsIHRoZSBjYXB0dXJlIGlmIHNjcmVlbiByb3RhdGVzP1xuICByZXR1cm4gZnVuY3Rpb24gb3JpZW50YXRpb25DaGFuZ2VDYWxsYmFjaygpIHtcbiAgICBjb25zdCBvbk9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24gb25PcmllbnRhdGlvbkNoYW5nZSgpIHtcbiAgICAgIGlmICgkY3RybC5zaG93VmlkZW9QcmV2aWV3KSB7XG4gICAgICAgICRjdHJsLiRsb2cuZGVidWcoJ09yaWVudGF0aW9uIGNoYW5nZSBkZXRlY3RlZCwgcmVjb21wdXRlIHNjcmVlbicpO1xuICAgICAgICAkY3RybC5zdGFydExpdmVDYW1GbG93KCk7XG4gICAgICB9XG4gICAgICAkY3RybC4kd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uT3JpZW50YXRpb25DaGFuZ2UpO1xuICAgIH07XG4gICAgJGN0cmwuJHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbk9yaWVudGF0aW9uQ2hhbmdlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVXBsb2FkQ2FsbGJhY2soJGN0cmwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwbG9hZENhbGxiYWNrKGJsb2IpIHtcbiAgICBpZiAoc2NyZWVuZnVsbC5lbmFibGVkKSB7XG4gICAgICBzY3JlZW5mdWxsLmV4aXQoKTtcbiAgICB9XG4gICAgJGN0cmwuc2hvd1ZpZGVvUHJldmlldyA9IGZhbHNlO1xuICAgICRjdHJsLmNsb3NlVmlkZW9TdHJlYW0oKTtcbiAgICAkY3RybC4kc2NvcGUuJGFwcGx5QXN5bmMoKCkgPT4ge1xuICAgICAgJGN0cmwub25DYXB0dXJlKHsgZmlsZTogYmxvYiB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuQ2FtZXJhQ2FwdHVyZUNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckd2luZG93JyxcbiAgJyRxJyxcbiAgJyRhdHRycycsXG4gICckbG9nJyxcbiAgJ0NhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhQ2FwdHVyZUNvbnRyb2xsZXI7XG4iLCIvKiFcbiogc2NyZWVuZnVsbFxuKiB2NC4yLjAgLSAyMDE5LTA0LTAxXG4qIChjKSBTaW5kcmUgU29yaHVzOyBNSVQgTGljZW5zZVxuKi9cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgZG9jdW1lbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5kb2N1bWVudCA6IHt9O1xuXHR2YXIgaXNDb21tb25qcyA9IHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzO1xuXHR2YXIga2V5Ym9hcmRBbGxvd2VkID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmICdBTExPV19LRVlCT0FSRF9JTlBVVCcgaW4gRWxlbWVudDtcblxuXHR2YXIgZm4gPSAoZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWw7XG5cblx0XHR2YXIgZm5NYXAgPSBbXG5cdFx0XHRbXG5cdFx0XHRcdCdyZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCdleGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCdmdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCdmdWxsc2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdCdmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5lcnJvcidcblx0XHRcdF0sXG5cdFx0XHQvLyBOZXcgV2ViS2l0XG5cdFx0XHRbXG5cdFx0XHRcdCd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRFeGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCd3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5lcnJvcidcblxuXHRcdFx0XSxcblx0XHRcdC8vIE9sZCBXZWJLaXQgKFNhZmFyaSA1LjEpXG5cdFx0XHRbXG5cdFx0XHRcdCd3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdEN1cnJlbnRGdWxsU2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xuXG5cdFx0XHRdLFxuXHRcdFx0W1xuXHRcdFx0XHQnbW96UmVxdWVzdEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHQnbW96Q2FuY2VsRnVsbFNjcmVlbicsXG5cdFx0XHRcdCdtb3pGdWxsU2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCdtb3pGdWxsU2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdCdtb3pmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0J21vemZ1bGxzY3JlZW5lcnJvcidcblx0XHRcdF0sXG5cdFx0XHRbXG5cdFx0XHRcdCdtc1JlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0J21zRXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHQnbXNGdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCdtc0Z1bGxzY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0J01TRnVsbHNjcmVlbkNoYW5nZScsXG5cdFx0XHRcdCdNU0Z1bGxzY3JlZW5FcnJvcidcblx0XHRcdF1cblx0XHRdO1xuXG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciBsID0gZm5NYXAubGVuZ3RoO1xuXHRcdHZhciByZXQgPSB7fTtcblxuXHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YWwgPSBmbk1hcFtpXTtcblx0XHRcdGlmICh2YWwgJiYgdmFsWzFdIGluIGRvY3VtZW50KSB7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRyZXRbZm5NYXBbMF1baV1dID0gdmFsW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KSgpO1xuXG5cdHZhciBldmVudE5hbWVNYXAgPSB7XG5cdFx0Y2hhbmdlOiBmbi5mdWxsc2NyZWVuY2hhbmdlLFxuXHRcdGVycm9yOiBmbi5mdWxsc2NyZWVuZXJyb3Jcblx0fTtcblxuXHR2YXIgc2NyZWVuZnVsbCA9IHtcblx0XHRyZXF1ZXN0OiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0XHRcdHZhciByZXF1ZXN0ID0gZm4ucmVxdWVzdEZ1bGxzY3JlZW47XG5cblx0XHRcdFx0dmFyIG9uRnVsbFNjcmVlbkVudGVyZWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5vZmYoJ2NoYW5nZScsIG9uRnVsbFNjcmVlbkVudGVyZWQpO1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0fS5iaW5kKHRoaXMpO1xuXG5cdFx0XHRcdGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHQvLyBXb3JrIGFyb3VuZCBTYWZhcmkgNS4xIGJ1ZzogcmVwb3J0cyBzdXBwb3J0IGZvclxuXHRcdFx0XHQvLyBrZXlib2FyZCBpbiBmdWxsc2NyZWVuIGV2ZW4gdGhvdWdoIGl0IGRvZXNuJ3QuXG5cdFx0XHRcdC8vIEJyb3dzZXIgc25pZmZpbmcsIHNpbmNlIHRoZSBhbHRlcm5hdGl2ZSB3aXRoXG5cdFx0XHRcdC8vIHNldFRpbWVvdXQgaXMgZXZlbiB3b3JzZS5cblx0XHRcdFx0aWYgKC8gVmVyc2lvblxcLzVcXC4xKD86XFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuXHRcdFx0XHRcdGVsZW1bcmVxdWVzdF0oKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtW3JlcXVlc3RdKGtleWJvYXJkQWxsb3dlZCA/IEVsZW1lbnQuQUxMT1dfS0VZQk9BUkRfSU5QVVQgOiB7fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLm9uKCdjaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FbnRlcmVkKTtcblx0XHRcdH0uYmluZCh0aGlzKSk7XG5cdFx0fSxcblx0XHRleGl0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRcdFx0aWYgKCF0aGlzLmlzRnVsbHNjcmVlbikge1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgb25GdWxsU2NyZWVuRXhpdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR0aGlzLm9mZignY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHR9LmJpbmQodGhpcyk7XG5cblx0XHRcdFx0ZG9jdW1lbnRbZm4uZXhpdEZ1bGxzY3JlZW5dKCk7XG5cblx0XHRcdFx0dGhpcy5vbignY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG5cdFx0XHR9LmJpbmQodGhpcykpO1xuXHRcdH0sXG5cdFx0dG9nZ2xlOiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuaXNGdWxsc2NyZWVuID8gdGhpcy5leGl0KCkgOiB0aGlzLnJlcXVlc3QoZWxlbSk7XG5cdFx0fSxcblx0XHRvbmNoYW5nZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLm9uKCdjaGFuZ2UnLCBjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRvbmVycm9yOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHRoaXMub24oJ2Vycm9yJywgY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0b246IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBldmVudE5hbWUgPSBldmVudE5hbWVNYXBbZXZlbnRdO1xuXHRcdFx0aWYgKGV2ZW50TmFtZSkge1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9mZjogZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGV2ZW50TmFtZSA9IGV2ZW50TmFtZU1hcFtldmVudF07XG5cdFx0XHRpZiAoZXZlbnROYW1lKSB7XG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmF3OiBmblxuXHR9O1xuXG5cdGlmICghZm4pIHtcblx0XHRpZiAoaXNDb21tb25qcykge1xuXHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNjcmVlbmZ1bGwgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY3JlZW5mdWxsLCB7XG5cdFx0aXNGdWxsc2NyZWVuOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVsZW1lbnRdKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGVsZW1lbnQ6IHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbGVtZW50XTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGVuYWJsZWQ6IHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0Ly8gQ29lcmNlIHRvIGJvb2xlYW4gaW4gY2FzZSBvZiBvbGQgV2ViS2l0XG5cdFx0XHRcdHJldHVybiBCb29sZWFuKGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbmFibGVkXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAoaXNDb21tb25qcykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gc2NyZWVuZnVsbDtcblx0XHQvLyBUT0RPOiByZW1vdmUgdGhpcyBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cdFx0bW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IHNjcmVlbmZ1bGw7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LnNjcmVlbmZ1bGwgPSBzY3JlZW5mdWxsO1xuXHR9XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+IDxkaXYgaWQ9dmlkZW8tcHJldmlldyBuZy1zaG93PSRjdHJsLnNob3dWaWRlb1ByZXZpZXcgY2xhc3M9XFxcInctMTAwIGgtMTAwIGZpeGVkLXRvcCBiZy1kYXJrXFxcIj4gPGltZyBpZD1vdmVybGF5IG5nLXNob3c9XFxcIiRjdHJsLnNob3dWaWRlb0luUHJldmlldyAmJiAkY3RybC5vdmVybGF5TG9hZGVkICYmICRjdHJsLnZpZGVvUGxheWluZ1xcXCIgbmctc3R5bGU9JGN0cmwuZ2V0T3ZlcmxheVN0eWxlcygpIG5nLXNyYz17eyRjdHJsLm92ZXJsYXl9fSBjbGFzcz1cXFwiZml4ZWQgemluZGV4LXZpZGVvLW92ZXJsYXlcXFwiLz4gPHZpZGVvIGlkPXZpZGVvIG5nLXNob3c9JGN0cmwuc2hvd1ZpZGVvSW5QcmV2aWV3IG5nLXN0eWxlPSRjdHJsLmdldFZpZGVvU3R5bGVzKCkgY2xhc3M9XFxcImZpeGVkLXRvcCB6aW5kZXgtdmlkZW9cXFwiIHBsYXlzaW5saW5lPjwvdmlkZW8+IDxjYW52YXMgaWQ9ZGlzcGxheS1jYW52YXMgbmctc2hvdz0kY3RybC5zaG93Q2FwdHVyZUluUHJldmlldyBuZy1zdHlsZT0kY3RybC5nZXRDYW52YXNTdHlsZXMoKSBjbGFzcz1cXFwiZml4ZWQgemluZGV4LXZpZGVvXFxcIj48L2NhbnZhcz4gPGNhbnZhcyBpZD11cGxvYWQtY2FudmFzIG5nLXNob3c9ZmFsc2UgY2xhc3M9Zml4ZWQ+PC9jYW52YXM+IDxsYWJlbCBjbGFzcz1cXFwiZml4ZWQtYm90dG9tIGNhbWVyYS1jdHJsLWJhclxcXCI+IDxzcGFuIGNsYXNzPWNhbWVyYS1jdHJsLWJveC1zbWFsbD4gPHNwYW4gaWQ9dmlkZW8tY2FuY2VsIGNsYXNzPVxcXCJjYW1lcmEtY3RybC1idG4tc21hbGwgY2FtZXJhLWN0cmwtYnRuLWNhbmNlbCBpY29uIGljb24tY2xvc2VcXFwiIG5nLWlmPSRjdHJsLnNob3dWaWRlb0luUHJldmlldyBuZy1jbGljaz0kY3RybC5vbkNhbmNlbEJ0bkNsaWNrKCk+PC9zcGFuPiA8c3BhbiBpZD1jYXB0dXJlLWNhbmNlbCBjbGFzcz1cXFwiY2FtZXJhLWN0cmwtYnRuLXNtYWxsIGNhbWVyYS1jdHJsLWJ0bi1jYW5jZWwgaWNvbiBpY29uLWNsb3NlXFxcIiBuZy1pZj0kY3RybC5zaG93Q2FwdHVyZUluUHJldmlldyBuZy1jbGljaz0kY3RybC5vblJlY2FwdHVyZUJ0bkNsaWNrKCk+PC9zcGFuPiA8L3NwYW4+IDxzcGFuIGNsYXNzPWNhbWVyYS1jdHJsLWJveC1iaWc+IDxzcGFuIGlkPXZpZGVvLWNvbmZpcm0gY2xhc3M9Y2FtZXJhLWN0cmwtYnRuLWJpZyBuZy1pZj0kY3RybC5zaG93VmlkZW9JblByZXZpZXcgbmctY2xpY2s9XFxcIiEkY3RybC5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgJiYgJGN0cmwub25DYXB0dXJlQnRuQ2xpY2soKVxcXCI+IDxzcGFuIGNsYXNzPWNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXI+PC9zcGFuPiA8L3NwYW4+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9Y2FtZXJhLWN0cmwtYm94LXNtYWxsPiA8c3BhbiBpZD1jYXB0dXJlLWNvbmZpcm0gY2xhc3M9XFxcImNhbWVyYS1jdHJsLWJ0bi1zbWFsbCBjYW1lcmEtY3RybC1idG4tY29uZmlybSBpY29uIGljb24tY2hlY2tcXFwiIG5nLWlmPSRjdHJsLnNob3dDYXB0dXJlSW5QcmV2aWV3IG5nLWNsaWNrPSRjdHJsLm9uVXBsb2FkQnRuQ2xpY2soKT48L3NwYW4+IDwvc3Bhbj4gPC9sYWJlbD4gPC9kaXY+IDwvZGl2PiBcIjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FtZXJhLWNhcHR1cmUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FtZXJhLWNhcHR1cmUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NhbWVyYS1jYXB0dXJlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jYW1lcmEtY3RybC1ib3gtc21hbGx7ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OjYwcHg7d2lkdGg6NjBweDttYXJnaW4tbGVmdDoxMHB4O21hcmdpbi1yaWdodDoxMHB4O3ZlcnRpY2FsLWFsaWduOmJvdHRvbX0uY2FtZXJhLWN0cmwtYm94LWJpZ3tkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6ODRweDt3aWR0aDo4NHB4O21hcmdpbi1sZWZ0OjM2cHg7bWFyZ2luLXJpZ2h0OjM2cHg7dmVydGljYWwtYWxpZ246Ym90dG9tfS5jYW1lcmEtY3RybC1idG4tY2FuY2Vse2NvbG9yOnJlZDtiYWNrZ3JvdW5kLWNvbG9yOiNmOGY5ZmF9LmNhbWVyYS1jdHJsLWJ0bi1jb25maXJte2NvbG9yOmdyZWVuO2JhY2tncm91bmQtY29sb3I6I2Y4ZjlmYX0uY2FtZXJhLWN0cmwtYnRuLXNtYWxse2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo2MHB4O3dpZHRoOjYwcHg7cGFkZGluZzo0cHg7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZTo1MnB4O2xpbmUtaGVpZ2h0OjE7dGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6bm93cmFwO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTstbXMtdG91Y2gtYWN0aW9uOm1hbmlwdWxhdGlvbjt0b3VjaC1hY3Rpb246bWFuaXB1bGF0aW9uO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyLXJhZGl1czo1MCV9LmNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXJ7aGVpZ2h0OjY0cHg7d2lkdGg6NjRweDtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjojZjhmOWZhO2JvcmRlcjoxcHggc29saWQ7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyLWNvbG9yOiNmOGY5ZmF9LmNhbWVyYS1jdHJsLWJ0bi1iaWcsLmNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTowO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0uY2FtZXJhLWN0cmwtYnRuLWJpZ3toZWlnaHQ6ODRweDt3aWR0aDo4NHB4O3BhZGRpbmc6MnB4Oy1tcy10b3VjaC1hY3Rpb246bWFuaXB1bGF0aW9uO3RvdWNoLWFjdGlvbjptYW5pcHVsYXRpb247Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQtY29sb3I6IzM0M2E0MDtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyOjhweCBzb2xpZDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXItY29sb3I6I2Y4ZjlmYX0uZml4ZWR7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxMDMwfS5maXhlZC10b3B7dG9wOjB9LmZpeGVkLWJvdHRvbSwuZml4ZWQtdG9we3Bvc2l0aW9uOmZpeGVkO3JpZ2h0OjA7bGVmdDowO3otaW5kZXg6MTAzMH0uZml4ZWQtYm90dG9te2JvdHRvbTowfS5jYW1lcmEtY3RybC1iYXJ7cGFkZGluZy10b3A6MTBweDtwYWRkaW5nLWJvdHRvbToxMHB4O3otaW5kZXg6MTAzMiFpbXBvcnRhbnR9LmJnLWRhcmt7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwIWltcG9ydGFudH0uemluZGV4LXZpZGVve3otaW5kZXg6MTAzMCFpbXBvcnRhbnR9LmRpc3BsYXktbWlycm9yey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgtMSk7dHJhbnNmb3JtOnNjYWxlWCgtMSl9LnppbmRleC12aWRlby1vdmVybGF5e3otaW5kZXg6MTAzMSFpbXBvcnRhbnR9LnctMTAwe3dpZHRoOjEwMCUhaW1wb3J0YW50fS5oLTEwMHtoZWlnaHQ6MTAwJSFpbXBvcnRhbnR9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLy8gU2VydmljZSByZXNvbHZpbmcgdmlkZW8gYW5kIGNhbnZhcyBzY3JlZW4gc2l6ZXNcbmNsYXNzIENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJGxvZyxcbiAgICBDYW1lcmFPdmVybGF5SGFuZGxlclxuICApIHtcbiAgICB0aGlzLiRsb2cgPSAkbG9nO1xuICAgIHRoaXMuQ2FtZXJhT3ZlcmxheUhhbmRsZXIgPSBDYW1lcmFPdmVybGF5SGFuZGxlcjtcbiAgfVxuXG4gIC8qIEdldCBoZWlnaHQgYW5kIHdpZHRoIG9mIHZpZGVvIGluIHBlcmNlbnRhZ2UgKiAxMDBcbiAgICogRnVuY3Rpb24gaXMgYmFzZWQgb2ZmIHRoZSBmYWN0IHRoYXQgdmlkZW8gc3RyZWFtIHdpbGwgZXhwYW5kXG4gICAqIHRvIGZpbGwgb25lIGRpbWVuc2lvbiBvZiB0aGUgc2NyZWVuIGFuZCBiZSBjZW50ZXJlZCB3cnQgdGhlIG90aGVyIGRpbWVuc2lvblxuICAgKiBXZSBuZWVkIHRvIGtub3cgd2hpY2ggZGltZW5zaW9uIGl0IGlzXG4gICAqL1xuICBnZXRWaWRlb1NwZWNpZmljYXRpb25zKFxuICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgKSB7XG4gICAgdGhpcy4kbG9nLmRlYnVnKCdDb21wdXRpbmcgdmlkZW8gc3BlY3MnKTtcbiAgICBsZXQgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgbGV0IHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UgPSAxMDA7XG5cbiAgICBpZiAoaGFzTmFycm93VmlkZW9JblBvcnRyYWl0U2NyZWVuKFxuICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgKSkge1xuICAgICAgdGhpcy4kbG9nLmRlYnVnKCcodmlkZW8pIFBvcnRyYWl0IG5hcnJvdyBzY3JlZW4nKTtcbiAgICAgIGNvbnN0IHZpZGVvUmVzUmF0aW8gPSB2aWRlb1Jlc0hlaWdodCAvIHZpZGVvUmVzV2lkdGg7XG4gICAgICBjb25zdCBzY3JlZW5SZXNSYXRpbyA9IHNjcmVlbkhlaWdodCAvIHNjcmVlbldpZHRoO1xuICAgICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UgPSBwYXJzZUludCgodmlkZW9SZXNSYXRpbyAvIHNjcmVlblJlc1JhdGlvKSAqIDEwMCwgMTApO1xuICAgIH0gZWxzZSBpZiAoaGFzTmFycm93VmlkZW9JbkxhbmRTY2FwZVNjcmVlbihcbiAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICAgICkpIHtcbiAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnKHZpZGVvKSBMYW5kc2NhcGUgbmFycm93IHNjcmVlbicpO1xuICAgICAgY29uc3QgdmlkZW9SZXNSYXRpbyA9IHZpZGVvUmVzV2lkdGggLyB2aWRlb1Jlc0hlaWdodDtcbiAgICAgIGNvbnN0IHNjcmVlblJlc1JhdGlvID0gc2NyZWVuV2lkdGggLyBzY3JlZW5IZWlnaHQ7XG4gICAgICB2aWRlb1dpZHRoSW5QZXJjZW50YWdlID0gcGFyc2VJbnQoKHZpZGVvUmVzUmF0aW8gLyBzY3JlZW5SZXNSYXRpbykgKiAxMDAsIDEwKTtcbiAgICB9XG4gICAgLy8gV2Ugc2hvdWxkIG5vdCBnZXQgYSBcIm5vcm1hbFwiIGNhc2UgaGVyZVxuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgdmlkZW8gd2lkdGggOiAke3ZpZGVvV2lkdGhJblBlcmNlbnRhZ2V9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyBoZWlnaHQgOiAke3ZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlfWApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlLFxuICAgICAgdmlkZW9XaWR0aEluUGVyY2VudGFnZVxuICAgIH07XG4gIH1cblxuICAvKiBHZXQgZGltZW5zaW9uLCBvZmZzZXQgYW5kIHJlc29sdXRpb24gb2YgZHJhd2luZyBmb3IgY2FudmFzXG4gICAqIEZ1bmN0aW9uIGlzIGJhc2VkIG9mZiB0aGUgZmFjdCB0aGF0IHZpZGVvIHN0cmVhbSB3aWxsIGV4cGFuZFxuICAgKiB0byBmaWxsIG9uZSBkaW1lbnNpb24gb2YgdGhlIHNjcmVlbiBhbmQgYmUgY2VudGVyZWQgd3J0IHRoZSBvdGhlciBkaW1lbnNpb25cbiAgICogV2UgbmVlZCB0byBrbm93IHdoaWNoIGRpbWVuc2lvbiBpdCBpc1xuICAgKi9cbiAgZ2V0Q2FudmFzU3BlY2lmaWNhdGlvbnMoXG4gICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UsXG4gICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICApIHtcbiAgICB0aGlzLiRsb2cuZGVidWcoJ0NvbXB1dGluZyBjYW52YXMgc3BlY3MnKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHZpZGVvIHdpZHRoIDogJHt2aWRlb1dpZHRoSW5QZXJjZW50YWdlfWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgdmlkZW8gaGVpZ2h0IDogJHt2aWRlb0hlaWdodEluUGVyY2VudGFnZX1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHNjcmVlbiB3aWR0aCA6ICR7c2NyZWVuV2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBzY3JlZW4gaGVpZ2h0IDogJHtzY3JlZW5IZWlnaHR9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyByZXMgd2lkdGggOiAke3ZpZGVvUmVzV2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyByZXMgaGVpZ2h0IDogJHt2aWRlb1Jlc0hlaWdodH1gKTtcblxuICAgIGxldCBjYW52YXNEaW1lbnNpb25zID0gbnVsbDtcblxuICAgIC8vIGhhbmRsZSBsYXlvdXQgd2hlcmUgYSBsYW5kc2NhcGUgc2NyZWVuIGhhcyBhIGxvbmcgYW5kIG5hcnJvd2VyIGNhbWVyYSB3aW5kb3cgaW4gaXRcbiAgICBpZiAoaGFzTmFycm93VmlkZW9JblBvcnRyYWl0U2NyZWVuKFxuICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgKSkge1xuICAgICAgdGhpcy4kbG9nLmRlYnVnKCcoY2FudmFzKSBQb3J0cmFpdCBuYXJyb3cgc2NyZWVuJyk7XG4gICAgICBjYW52YXNEaW1lbnNpb25zID0gZ2V0Q2FudmFzU3BlY3NGb3JQb3J0cmFpdFNjcmVlbldpdGhOYXJyb3dWaWRlbyhcbiAgICAgICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UsXG4gICAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaGFzTmFycm93VmlkZW9JbkxhbmRTY2FwZVNjcmVlbihcbiAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICAgICkpIHtcbiAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnKGNhbnZhcykgTGFuZHNjYXBlIG5hcnJvdyBzY3JlZW4nKTtcbiAgICAgIGNhbnZhc0RpbWVuc2lvbnMgPSBnZXRDYW52YXNTcGVjc0ZvckxhbmRzY2FwZVNjcmVlbldpdGhOYXJyb3dWaWRlbyhcbiAgICAgICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UsXG4gICAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRsb2cuZGVidWcoJyhjYW52YXMpIE5vcm1hbCBzY3JlZW4nKTtcbiAgICAgIGNhbnZhc0RpbWVuc2lvbnMgPSBnZXRDYW52YXNTcGVjcyhcbiAgICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgaGVpZ2h0LCB3aWR0aCxcbiAgICAgIHlPZmZzZXQsIHhPZmZzZXQsXG4gICAgICBwYWludEhlaWdodCwgcGFpbnRXaWR0aFxuICAgIH0gPSBjYW52YXNEaW1lbnNpb25zO1xuXG4gICAgdGhpcy4kbG9nLmRlYnVnKGBjYW52YXMgd2lkdGggOiAke3dpZHRofWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIGhlaWdodCA6ICR7aGVpZ2h0fWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIHgtb2Zmc2V0IDogJHt4T2Zmc2V0fWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIHktb2Zmc2V0IDogJHt5T2Zmc2V0fWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIHdpZHRoIHRvIHBhaW50IDogJHtwYWludFdpZHRofWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIGhlaWdodCB0byBwYWludCA6ICR7cGFpbnRIZWlnaHR9YCk7XG5cbiAgICByZXR1cm4gY2FudmFzRGltZW5zaW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGltZW5zaW9uLCBvZmZzZXQgb2YgY2FtZXJhIG92ZXJsYXlcbiAgICovXG4gIGdldE92ZXJsYXlTcGVjaWZpY2F0aW9ucyhcbiAgICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICAgIG92ZXJsYXlOYXR1cmFsSGVpZ2h0LCBvdmVybGF5TmF0dXJhbFdpZHRoXG4gICkge1xuICAgIGNvbnN0IHtcbiAgICAgIGhlaWdodDogY29udGFpbmVySGVpZ2h0LCB3aWR0aDogY29udGFpbmVyV2lkdGgsXG4gICAgICB5T2Zmc2V0OiBjb250YWluZXJZT2Zmc2V0LCB4T2Zmc2V0OiBjb250YWluZXJYT2Zmc2V0LFxuICAgIH0gPSBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlci5nZXRPdmVybGF5Q29udGFpbmVyKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpO1xuXG4gICAgY29uc3Qge1xuICAgICAgaGVpZ2h0OiBvdmVybGF5SGVpZ2h0LCB3aWR0aDogb3ZlcmxheVdpZHRoLFxuICAgICAgeU9mZnNldDogb3ZlcmxheVlPZmZzZXQsIHhPZmZzZXQ6IG92ZXJsYXlYT2Zmc2V0LFxuICAgIH0gPSB0aGlzLkNhbWVyYU92ZXJsYXlIYW5kbGVyLmdldE92ZXJsYXlTcGVjaWZpY2F0aW9uc1dydENvbnRhaW5lcihcbiAgICAgIGNvbnRhaW5lckhlaWdodCwgY29udGFpbmVyV2lkdGgsXG4gICAgICBvdmVybGF5TmF0dXJhbEhlaWdodCwgb3ZlcmxheU5hdHVyYWxXaWR0aFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBvdmVybGF5SGVpZ2h0LFxuICAgICAgd2lkdGg6IG92ZXJsYXlXaWR0aCxcbiAgICAgIHlPZmZzZXQ6IGNvbnRhaW5lcllPZmZzZXQgKyBvdmVybGF5WU9mZnNldCxcbiAgICAgIHhPZmZzZXQ6IGNvbnRhaW5lclhPZmZzZXQgKyBvdmVybGF5WE9mZnNldFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgMToxIGJveCBjb250YWluZXIgYmFzZWQgb24gc2NyZWVuIHNpemUgdG8gcmVuZGVyIG92ZXJsYXlcbiAgICovXG4gIHN0YXRpYyBnZXRPdmVybGF5Q29udGFpbmVyKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpIHtcbiAgICBpZiAoQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIuaXNTY3JlZW5Qb3J0cmFpdChzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiBzY3JlZW5XaWR0aCxcbiAgICAgICAgd2lkdGg6IHNjcmVlbldpZHRoLFxuICAgICAgICB5T2Zmc2V0OiAoc2NyZWVuSGVpZ2h0IC0gc2NyZWVuV2lkdGgpIC8gMi41LCAvLyBQbGFjZSBjb250YWluZXIgYWJvdmUgbWlkZGxlXG4gICAgICAgIHhPZmZzZXQ6IDAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIGlzTGFuZHNjYXBlXG4gICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0ICogMC45MDsgLy8gTGVhdmUgdGhlIGJ0bSAxMCUgYmxhbmtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB3aWR0aDogYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgeU9mZnNldDogMCxcbiAgICAgIHhPZmZzZXQ6IChzY3JlZW5XaWR0aCAtIGF2YWlsYWJsZUhlaWdodCkgLyAyLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgaXNTY3JlZW5Qb3J0cmFpdChzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoKSB7XG4gICAgcmV0dXJuIHNjcmVlbkhlaWdodCA+PSBzY3JlZW5XaWR0aDtcbiAgfVxuXG4gIHN0YXRpYyBpc1NjcmVlbkxhbmRzY2FwZShzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoKSB7XG4gICAgcmV0dXJuIHNjcmVlbldpZHRoID49IHNjcmVlbkhlaWdodDtcbiAgfVxufVxuXG4vKipcbiAqIEZ1bmN0aW9ucyBiZWxvdyBoYW5kbGUgY2FzZXMgd2hlbiBzY3JlZW4gZGltZW5zaW9uIGFuZCB2aWRlbyByZXNvbHV0aW9uXG4gKiByZXNvbHZlIGludG8gYSBuYXJyb3cgdmlkZW8gc2NyZWVuIHdpdGggdGhpbiBhbmQgdWdseSBtYXJnaW5lcyBhdCBzaWRlc1xuICogSW4gdGhpcyBjYXNlIHdlIHRydW5jYXRlIHRoZSBkaW1lbnNpb24gb2YgdmlkZW8gY2F1c2luZyB0aGUgdWdseSBtYXJnaW5lc1xuICogYW5kIGdldCB2aWRlbyB0byBmaWxsIHVwIHRoZSBlbnRpcmUgc2NyZWVuXG4gKi9cblxuZnVuY3Rpb24gaGFzTmFycm93VmlkZW9JblBvcnRyYWl0U2NyZWVuKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoKSB7XG4gIHJldHVybiBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlci5pc1NjcmVlblBvcnRyYWl0KHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpXG4gICAgJiYgdmlkZW9SZXNIZWlnaHQgLyB2aWRlb1Jlc1dpZHRoID4gc2NyZWVuSGVpZ2h0IC8gc2NyZWVuV2lkdGg7XG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc1NwZWNzRm9yUG9ydHJhaXRTY3JlZW5XaXRoTmFycm93VmlkZW8oXG4gIHZpZGVvSGVpZ2h0LCB2aWRlb1dpZHRoLFxuICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuKSB7XG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBzY3JlZW5IZWlnaHQsXG4gICAgd2lkdGg6IHNjcmVlbldpZHRoLFxuICAgIHlPZmZzZXQ6IDAsXG4gICAgeE9mZnNldDogMCxcbiAgICBwYWludEhlaWdodDogcGFyc2VJbnQodmlkZW9SZXNIZWlnaHQgLyAodmlkZW9IZWlnaHQgLyAxMDAuMCksIDEwKSxcbiAgICBwYWludFdpZHRoOiB2aWRlb1Jlc1dpZHRoXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05hcnJvd1ZpZGVvSW5MYW5kU2NhcGVTY3JlZW4oc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCwgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGgpIHtcbiAgcmV0dXJuIENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyLmlzU2NyZWVuTGFuZHNjYXBlKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpXG4gICAgJiYgdmlkZW9SZXNXaWR0aCAvIHZpZGVvUmVzSGVpZ2h0ID4gc2NyZWVuV2lkdGggLyBzY3JlZW5IZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc1NwZWNzRm9yTGFuZHNjYXBlU2NyZWVuV2l0aE5hcnJvd1ZpZGVvKFxuICB2aWRlb0hlaWdodCwgdmlkZW9XaWR0aCxcbiAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbikge1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogc2NyZWVuSGVpZ2h0LFxuICAgIHdpZHRoOiBzY3JlZW5XaWR0aCxcbiAgICB5T2Zmc2V0OiAwLFxuICAgIHhPZmZzZXQ6IDAsXG4gICAgcGFpbnRIZWlnaHQ6IHZpZGVvUmVzSGVpZ2h0LFxuICAgIHBhaW50V2lkdGg6IHBhcnNlSW50KHZpZGVvUmVzV2lkdGggLyAodmlkZW9XaWR0aCAvIDEwMCksIDEwKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRDYW52YXNTcGVjcyhzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLCB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aCkge1xuICBjb25zdCBoZWlnaHRNdWx0ID0gc2NyZWVuSGVpZ2h0IC8gdmlkZW9SZXNIZWlnaHQ7XG4gIGNvbnN0IHdpZHRoTXVsdCA9IHNjcmVlbldpZHRoIC8gdmlkZW9SZXNXaWR0aDtcbiAgbGV0IGNhbnZhc1dpZHRoID0gMDtcbiAgbGV0IGNhbnZhc0hlaWdodCA9IDA7XG4gIGxldCBjYW52YXNYT2Zmc2V0ID0gMDtcbiAgbGV0IGNhbnZhc1lPZmZzZXQgPSAwO1xuXG4gIGlmIChoZWlnaHRNdWx0ID09PSB3aWR0aE11bHQpIHtcbiAgICBjYW52YXNXaWR0aCA9IHNjcmVlbldpZHRoO1xuICAgIGNhbnZhc0hlaWdodCA9IHNjcmVlbkhlaWdodDtcbiAgICBjYW52YXNYT2Zmc2V0ID0gMDtcbiAgICBjYW52YXNZT2Zmc2V0ID0gMDtcbiAgfSBlbHNlIGlmIChoZWlnaHRNdWx0ID4gd2lkdGhNdWx0KSB7XG4gICAgY2FudmFzV2lkdGggPSBzY3JlZW5XaWR0aDtcbiAgICBjYW52YXNIZWlnaHQgPSBwYXJzZUludCh3aWR0aE11bHQgKiB2aWRlb1Jlc0hlaWdodCwgMTApO1xuICAgIGNhbnZhc1hPZmZzZXQgPSAwO1xuICAgIGNhbnZhc1lPZmZzZXQgPSBwYXJzZUludCgoc2NyZWVuSGVpZ2h0IC0gY2FudmFzSGVpZ2h0KSAvIDIsIDEwKTtcbiAgfSBlbHNlIHtcbiAgICBjYW52YXNXaWR0aCA9IHBhcnNlSW50KGhlaWdodE11bHQgKiB2aWRlb1Jlc1dpZHRoLCAxMCk7XG4gICAgY2FudmFzSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuICAgIGNhbnZhc1hPZmZzZXQgPSBwYXJzZUludCgoc2NyZWVuV2lkdGggLSBjYW52YXNXaWR0aCkgLyAyLCAxMCk7XG4gICAgY2FudmFzWU9mZnNldCA9IDA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogY2FudmFzSGVpZ2h0LFxuICAgIHdpZHRoOiBjYW52YXNXaWR0aCxcbiAgICB5T2Zmc2V0OiBjYW52YXNZT2Zmc2V0LFxuICAgIHhPZmZzZXQ6IGNhbnZhc1hPZmZzZXQsXG4gICAgcGFpbnRIZWlnaHQ6IHZpZGVvUmVzSGVpZ2h0LFxuICAgIHBhaW50V2lkdGg6IHZpZGVvUmVzV2lkdGhcbiAgfTtcbn1cblxuQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIuJGluamVjdCA9IFtcbiAgJyRsb2cnLFxuICAnQ2FtZXJhT3ZlcmxheUhhbmRsZXInXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlcjtcbiIsIi8vIFNlcnZpY2UgcmVzb2x2aW5nIHZpZGVvIGFuZCBjYW52YXMgc2NyZWVuIHNpemVzXG5jbGFzcyBDYW1lcmFPdmVybGF5SGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICApIHtcbiAgICB0aGlzLm92ZXJsYXlYTWFyZ2luID0gMC4wNzU7XG4gICAgdGhpcy5vdmVybGF5WU1hcmdpbiA9IDAuMDc1O1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgYm94IGNvbnRhaW5lciwgcHJvZHVjZSBvdmVybGF5IHdpdGggY2VydGFpbiBkaW1lbnNpb25zXG4gICAqIGFuZCBjZXJ0YWluIG9mZnNldHMgd3J0IHRoZSBjb250YWluZXJcbiAgICovXG4gIGdldE92ZXJsYXlTcGVjaWZpY2F0aW9uc1dydENvbnRhaW5lcihcbiAgICBjb250YWluZXJIZWlnaHQsIGNvbnRhaW5lcldpZHRoLFxuICAgIG92ZXJsYXlOYXR1cmFsSGVpZ2h0LCBvdmVybGF5TmF0dXJhbFdpZHRoXG4gICkge1xuICAgIGNvbnN0IG92ZXJsYXlIZWlnaHRXaWR0aFJhdGlvID0gb3ZlcmxheU5hdHVyYWxIZWlnaHQgLyBvdmVybGF5TmF0dXJhbFdpZHRoO1xuICAgIC8vIE1heCB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBjb250YWluZXIgd2lkdGgvaGVpZ2h0IHdpdGggbWFyZ2lucyBhcHBsaWVkXG4gICAgY29uc3QgbWF4V2lkdGggPSBjb250YWluZXJXaWR0aCAtIDIgKiBjb250YWluZXJXaWR0aCAqIHRoaXMub3ZlcmxheVhNYXJnaW47XG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0IC0gMiAqIGNvbnRhaW5lckhlaWdodCAqIHRoaXMub3ZlcmxheVlNYXJnaW47XG5cbiAgICBsZXQgd2lkdGg7XG4gICAgbGV0IGhlaWdodDtcbiAgICAvLyBPdmVybGF5IGRpbWVuc2lvbiBpcyBiZWluZyByZXN0cmljdGVkIGJ5IHdpZHRoXG4gICAgaWYgKG1heFdpZHRoICogb3ZlcmxheUhlaWdodFdpZHRoUmF0aW8gPj0gbWF4SGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICB3aWR0aCA9IGhlaWdodCAvIG92ZXJsYXlIZWlnaHRXaWR0aFJhdGlvO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aWR0aCA9IG1heFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gd2lkdGggKiBvdmVybGF5SGVpZ2h0V2lkdGhSYXRpbztcbiAgICB9XG5cbiAgICBjb25zdCB4T2Zmc2V0ID0gKGNvbnRhaW5lcldpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICBjb25zdCB5T2Zmc2V0ID0gKGNvbnRhaW5lckhlaWdodCAtIGhlaWdodCkgLyAyO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodCxcbiAgICAgIHdpZHRoLFxuICAgICAgeU9mZnNldCxcbiAgICAgIHhPZmZzZXRcbiAgICB9O1xuICB9XG59XG5cbkNhbWVyYU92ZXJsYXlIYW5kbGVyLiRpbmplY3QgPSBbXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFPdmVybGF5SGFuZGxlcjtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFVwbG9hZEJ1dHRvbiBmcm9tICcuL3VwbG9hZC1idXR0b24uY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5idXR0b24nLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRCdXR0b24nLCBVcGxvYWRCdXR0b24pXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdXBsb2FkLWJ1dHRvbi5odG1sJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vdXBsb2FkLWJ1dHRvbi5jb250cm9sbGVyJztcblxuY29uc3QgVXBsb2FkQnV0dG9uID0ge1xuICB0ZW1wbGF0ZSxcbiAgY29udHJvbGxlcixcbiAgYmluZGluZ3M6IHtcbiAgICBuYW1lOiAnPCcsXG4gICAgbGFiZWw6ICc8JyxcbiAgICBpc1NlY29uZGFyeTogJzwnLFxuICAgIHNtYWxsOiAnPCcsXG4gICAgYmxvY2s6ICc8JyxcbiAgICBhY2NlcHQ6ICc8JyxcbiAgICBtb2RlbDogJzwnLFxuICAgIG11bHRpcGxlOiAnPCcsXG4gICAgZGlzYWJsZWQ6ICc8JyxcbiAgICBvbkNsaWNrOiAnJicsXG4gICAgb25DYXB0dXJlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkQnV0dG9uO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxsYWJlbCBjbGFzcz1idG4gbmctY2xpY2s9JGN0cmwub25CdXR0b25DbGljaygpIG5nLWNsYXNzPVxcXCJ7ICdkaXNhYmxlZCc6ICRjdHJsLmRpc2FibGVkLFxcbiAgICAgICAgICAgICAgJ2J0bi1wcmltYXJ5JzogISRjdHJsLmlzU2Vjb25kYXJ5LFxcbiAgICAgICAgICAgICAgJ2J0bi1kZWZhdWx0JzogJGN0cmwuaXNTZWNvbmRhcnksXFxuICAgICAgICAgICAgICAnYnRuLWJsb2NrJzogJGN0cmwuYmxvY2ssXFxuICAgICAgICAgICAgICAnYnRuLXNtJzogJGN0cmwuc21hbGxcXG4gICAgICAgICAgICB9XFxcIj4gPHNwYW4gbmctaWY9JGN0cmwubGFiZWwgbmctYmluZD0kY3RybC5sYWJlbD48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5sYWJlbCBjbGFzcz1cXFwiaWNvbiBpY29uLXVwbG9hZCBtLXItMFxcXCI+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkPiA8aW5wdXQgbmctaWY9ISRjdHJsLm11bHRpcGxlIHR3LWZpbGUtaW5wdXQgdHlwZT1maWxlIGFjY2VwdD1cXFwie3sgJGN0cmwuYWNjZXB0IH19XFxcIiBjbGFzcz1cXFwidHctZHJvcHBhYmxlLWlucHV0IGhpZGRlblxcXCIgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuYW1lPVxcXCJ7eyAkY3RybC5uYW1lIH19XFxcIiBvbi11c2VyLWlucHV0PSRjdHJsLm9uQnV0dG9uQ2FwdHVyZSgpIG5nLW1vZGVsPSRjdHJsLm1vZGVsIC8+IDxpbnB1dCBuZy1pZj0kY3RybC5tdWx0aXBsZSB0dy1maWxlLWlucHV0IHR5cGU9ZmlsZSBhY2NlcHQ9XFxcInt7ICRjdHJsLmFjY2VwdCB9fVxcXCIgY2xhc3M9XFxcInR3LWRyb3BwYWJsZS1pbnB1dCBoaWRkZW5cXFwiIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmFtZT1cXFwie3sgJGN0cmwubmFtZSB9fVxcXCIgb24tdXNlci1pbnB1dD0kY3RybC5vbkJ1dHRvbkNhcHR1cmUoKSBuZy1tb2RlbD0kY3RybC5tb2RlbCBtdWx0aXBsZT1tdWx0aXBsZSAvPiA8L3NwYW4+IDwvbGFiZWw+XCI7IiwiY2xhc3MgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICB9XG5cbiAgb25CdXR0b25DbGljaygpIHtcbiAgICBpZiAodGhpcy5vbkNsaWNrKSB7XG4gICAgICB0aGlzLm9uQ2xpY2soKTtcbiAgICB9XG4gIH1cblxuICBvbkJ1dHRvbkNhcHR1cmUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF07XG4gICAgY29uc3QgdXBsb2FkSW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50dy1kcm9wcGFibGUtaW5wdXQnKTtcbiAgICBjb25zdCBmaWxlcyA9IHVwbG9hZElucHV0LmZpbGVzO1xuXG4gICAgdGhpcy5vbkNhcHR1cmUoeyBmaWxlcyB9KTtcbiAgfVxufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDYW1lcmFCdXR0b24gZnJvbSAnLi9jYW1lcmEtYnV0dG9uLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuY2FtZXJhLWJ1dHRvbicsIFtdKVxuICAuY29tcG9uZW50KCd0d0NhbWVyYUJ1dHRvbicsIENhbWVyYUJ1dHRvbilcbiAgLm5hbWU7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9jYW1lcmEtYnV0dG9uLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jYW1lcmEtYnV0dG9uLmNvbnRyb2xsZXInO1xuXG5jb25zdCBDYW1lcmFCdXR0b24gPSB7XG4gIHRlbXBsYXRlLFxuICBjb250cm9sbGVyLFxuICBiaW5kaW5nczoge1xuICAgIGxhYmVsOiAnPCcsXG4gICAgZGlzYWJsZWQ6ICc8JyxcbiAgICBvbkNsaWNrOiAnJicsXG4gICAgb25DYXB0dXJlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhQnV0dG9uO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxsYWJlbCBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBuZy1jbGljaz0kY3RybC5vbkJ1dHRvbkNsaWNrKCkgbmctY2xhc3M9XFxcInsgJ2Rpc2FibGVkJzogJGN0cmwuZGlzYWJsZWQgfVxcXCI+IDxzcGFuIG5nLWlmPSRjdHJsLmxhYmVsIG5nLWJpbmQ9JGN0cmwubGFiZWw+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwubGFiZWwgY2xhc3M9XFxcImljb24gaWNvbi11cGxvYWQgbS1yLTBcXFwiPjwvc3Bhbj4gPC9sYWJlbD4gXCI7IiwiY2xhc3MgQ29udHJvbGxlciB7XG4gIG9uQnV0dG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMub25DbGljaykge1xuICAgICAgdGhpcy5vbkNsaWNrKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJcbmZ1bmN0aW9uIEZpbGVJbnB1dERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6IEZpbGVJbnB1dENvbnRyb2xsZXIsXG4gICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgc2NvcGU6IHtcbiAgICAgIG9uVXNlcklucHV0OiAnJidcbiAgICB9XG4gIH07XG59XG5cbmNsYXNzIEZpbGVJbnB1dENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkZWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9uVXNlcklucHV0XG4gICAgICAgICYmIHR5cGVvZiB0aGlzLm9uVXNlcklucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub25Vc2VySW5wdXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5GaWxlSW5wdXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVJbnB1dERpcmVjdGl2ZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IE11bHRpVXBsb2FkIGZyb20gJy4vbXVsdGktdXBsb2FkLmNvbXBvbmVudCc7XG5pbXBvcnQgRHJhZ0FuZERyb3AgZnJvbSAnLi4vLi4vZHJhZy1hbmQtZHJvcCc7XG5pbXBvcnQgUHJvY2Vzc2luZ0NhcmQgZnJvbSAnLi4vcHJvY2Vzc2luZy1jYXJkJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5tdWx0aScsIFtcbiAgICBQcm9jZXNzaW5nQ2FyZCxcbiAgICBEcmFnQW5kRHJvcFxuICBdKVxuICAuY29tcG9uZW50KCd0d011bHRpVXBsb2FkJywgTXVsdGlVcGxvYWQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9tdWx0aS11cGxvYWQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9tdWx0aS11cGxvYWQuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ0NoYW5nZTogJyYnLFxuICAgIG5hbWU6ICdAJyxcbiAgICBsYWJlbDogJ0AnLFxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG4gICAgaWNvbjogJ0AnLCAvLyBpbGx1c3RyYXRpb24gaW4gaWNvbiBzaG93biBpbiB1cGxvYWQgYm94XG5cbiAgICBidXR0b25UZXh0OiAnQCcsIC8vIEJ1dHRvbiB0ZXh0IHNob3duIGluIGRlZmF1bHQgc3RhdGVcbiAgICBzZWNvbmRhcnlCdXR0b25UZXh0OiAnQCcsIC8vIEJ1dHRvbiB0ZXh0IHNob3duIGluIHByb2Nlc3Npbmcgc3RhdGVcblxuICAgIGRyb3BwaW5nVGV4dDogJ0AnLCAvLyBUZXh0IHNob3duIHdoZW4gaG92ZXJpbmcgd2l0aCBhIGZpbGVcbiAgICBwcm9jZXNzaW5nVGV4dDogJ0AnLCAvLyBUZXh0IHNob3duIHdoaWxlIHByb2Nlc3NpbmcvdXBsb2FkaW5nXG4gICAgc3VjY2Vzc1RleHQ6ICdAJywgLy8gVGV4dCBhZnRlciB1cGxvYWQgaXMgc3VjY2Vzc2Z1bCwgc2hvd24gcXVpdGUgYnJpZWZseSBiZWZvcmUgcHJldmlld1xuICAgIGZhaWx1cmVUZXh0OiAnQCcsXG5cbiAgICB0b29MYXJnZU1lc3NhZ2U6ICdAJyxcbiAgICAvLyB3cm9uZ1R5cGVNZXNzYWdlOiAnQCcsXG5cbiAgICB2YWxpZGF0aW9uTWVzc2FnZXM6ICc8JyxcblxuICAgIG9uU3RhcnQ6ICcmJyxcbiAgICBvbkZpbmlzaDogJyYnLFxuXG4gICAgYWNjZXB0OiAnQCcsXG4gICAgaHR0cE9wdGlvbnM6ICc8JyxcblxuICAgIG1heFNpemU6ICc8JywgLy8gVE9ETyBtb3ZlIHRvIG5nTWF4P1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJGVsZW1lbnQsXG4gICAgJHNjb3BlLFxuICAgICRhdHRycyxcbiAgICAkdGltZW91dCxcbiAgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuZmlsZXMgPSBbXTtcbiAgICB0aGlzLm1vZGVsID0gW107XG4gICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuaWNvbikge1xuICAgICAgdGhpcy52aWV3SWNvbiA9IGNoYW5nZXMuaWNvbi5jdXJyZW50VmFsdWUgPyBjaGFuZ2VzLmljb24uY3VycmVudFZhbHVlIDogJ3VwbG9hZCc7XG4gICAgfVxuICB9XG5cbiAgb25GaWxlQ2FwdHVyZShmaWxlcykge1xuICAgIGlmICh0aGlzLm5nRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWZpbGVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXRyaWV2ZSBmaWxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25TdGFydCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25TdGFydCgpO1xuICAgIH1cblxuICAgIHRoaXMuZmlsZXMgPSBbLi4udGhpcy5maWxlcywgLi4uZmlsZXNdO1xuXG4gICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBvYmpEaXYgPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5wcm9jZXNzaW5nLWxpc3QnKTtcbiAgICAgIGlmIChvYmpEaXYpIHtcbiAgICAgICAgb2JqRGl2LnNjcm9sbFRvcCA9IG9iakRpdi5zY3JvbGxIZWlnaHQ7XG4gICAgICB9XG4gICAgfSwgNjAwKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc1N1Y2Nlc3MoaW5kZXgsIGZpbGUsIGRhdGFVcmwsIGlkKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5odHRwT3B0aW9ucyA/ICdpZCcgOiAnZGF0YVVybCc7XG5cbiAgICB0aGlzLmZpbGVzW2luZGV4XVtrZXldID0gdGhpcy5odHRwT3B0aW9ucyA/IGlkIDogZGF0YVVybDtcblxuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5maWxlcy5tYXAoZmlsZU9iamVjdCA9PiBmaWxlT2JqZWN0W2tleV0pLmZpbHRlcih2YWx1ZSA9PiAhIXZhbHVlKTtcblxuICAgIHRoaXMuc2V0TmdNb2RlbChtb2RlbCk7XG5cbiAgICBpZiAodGhpcy5vbkZpbmlzaCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25GaW5pc2goKTtcbiAgICB9XG4gIH1cblxuICBhcmVBbGxGaWxlc1Byb2Nlc3NlZCgpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmh0dHBPcHRpb25zID8gJ2lkJyA6ICdkYXRhVXJsJztcblxuICAgIGNvbnN0IHByb2Nlc3NpbmdGaWxlID0gdGhpcy5maWxlcy5zb21lKGZpbGUgPT4gZmlsZVtrZXldID09IG51bGwgJiYgZmlsZS5lcnJvciA9PSBudWxsKTtcblxuICAgIHJldHVybiAhcHJvY2Vzc2luZ0ZpbGU7XG4gIH1cblxuICBvblByb2Nlc3NGYWlsdXJlKGluZGV4LCBmaWxlLCBlcnJvcikge1xuICAgIHRoaXMuZmlsZXNbaW5kZXhdLmVycm9yID0gZXJyb3I7XG5cbiAgICBpZiAodGhpcy5vbkZpbmlzaCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25GaW5pc2goKTtcbiAgICB9XG4gIH1cblxuICBvblByb2Nlc3NDYW5jZWwoaW5kZXgpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmh0dHBPcHRpb25zID8gJ2lkJyA6ICdkYXRhVXJsJztcblxuICAgIHRoaXMuZmlsZXMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5maWxlcy5tYXAoZmlsZU9iamVjdCA9PiBmaWxlT2JqZWN0W2tleV0pLmZpbHRlcih2YWx1ZSA9PiAhIXZhbHVlKTtcblxuICAgIHRoaXMuc2V0TmdNb2RlbChtb2RlbCk7XG4gIH1cblxuICBvbkRyYWdFbnRlcigpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIG9uRHJhZ0xlYXZlKCkge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSBmYWxzZTtcbiAgfVxuXG4gIG9uRHJvcChmaWxlcykge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm9uRmlsZUNhcHR1cmUoZmlsZXMpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zZXROZ01vZGVsKG51bGwpO1xuICB9XG5cbiAgc2V0TmdNb2RlbCh2YWx1ZSkge1xuICAgIC8vIElmIG5nTW9kZWwgbm90IGFzc2lnbmFibGUsIHdlIGRvbid0IHdhbnQgdG8gZXJyb3IuXG4gICAgaWYgKHR5cGVvZiB0aGlzLiRhdHRycy5uZ01vZGVsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICAgIGlmICghJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHNjb3BlJyxcbiAgJyRhdHRycycsXG4gICckdGltZW91dCcsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcIndlbGwgZHJvcHBhYmxlIHAtci0wIHAtbC0wIHAtdC0xIHAtYi0wIG11bHRpLXVwbG9hZFxcXCIgdHctZHJvcD0kY3RybC5vbkRyb3AoZmlsZXMpIHR3LWRyYWctZW50ZXI9JGN0cmwub25EcmFnRW50ZXIoKSB0dy1kcmFnLWxlYXZlPSRjdHJsLm9uRHJhZ0xlYXZlKCkgbmctY2xhc3M9XFxcInsnZHJvcHBhYmxlLWRyb3BwaW5nJzogJGN0cmwuaXNEcm9wcGFibGV9XFxcIj4gPGRpdiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRyb3BwaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiPiA8dHctdXBsb2FkLWRyb3BwaW5nIGRyb3BwaW5nLXRleHQ9JGN0cmwuZHJvcHBpbmdUZXh0PjwvdHctdXBsb2FkLWRyb3BwaW5nPiA8L2Rpdj4gPGRpdiBuZy1pZj1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID09PSAwXFxcIiBjbGFzcz1cXFwiZW1wdHktcHJvY2Vzc2luZy1saXN0IGRyb3BwYWJsZS1kZWZhdWx0LWNhcmQgdGV4dC14cy1jZW50ZXIgcC10LTNcXFwiPiA8ZGl2IGNsYXNzPWVtcHR5LXNjcmVlbj4gPGRpdiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1zbSBtLWItMyBtLXQtM1xcXCI+IDxpbWcgbmctaWY9JGN0cmwuaGVscEltYWdlIG5nLXNyYz17eyRjdHJsLmhlbHBJbWFnZX19IGFsdD17eyRjdHJsLmxhYmVsfX0gY2xhc3M9XFxcInRodW1ibmFpbCB0ZXh0LXhzLWNlbnRlclxcXCIvPiA8c3BhbiBuZy1pZj0hJGN0cmwuaGVscEltYWdlIGNsYXNzPVxcXCJpY29uIGljb24te3skY3RybC52aWV3SWNvbn19IGljb24teHhsXFxcIj48L3NwYW4+IDwvZGl2PiA8aDQgbmctaWY9JGN0cmwubGFiZWwgY2xhc3M9bS1iLTE+e3skY3RybC5sYWJlbH19PC9oND4gPHAgbmctaWY9JGN0cmwucGxhY2Vob2xkZXIgY2xhc3M9XFxcInAtbC0zIHAtci0zXFxcIj4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvcD4gPC9kaXY+IDwvZGl2PiA8ZGl2IG5nLWlmPVxcXCIkY3RybC5maWxlcy5sZW5ndGggPiAwXFxcIiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRlZmF1bHQtY2FyZCBwLWwtMyBwcm9jZXNzaW5nLWxpc3RcXFwiPiA8ZGl2IG5nLXJlcGVhdD1cXFwiKGluZGV4LCBmaWxlKSBpbiAkY3RybC5maWxlc1xcXCIgY2xhc3M9cC1yLTMgbmctY2xhc3M9XFxcInsnbGFzdC1pdGVtJzogJGxhc3R9XFxcIj4gPHR3LXVwbG9hZC1wcm9jZXNzaW5nLW1pbmkgbmFtZT0kY3RybC5uYW1lIGZpbGU9ZmlsZSBvbi1zdWNjZXNzPVxcXCIkY3RybC5vblByb2Nlc3NTdWNjZXNzKGluZGV4LCBmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UpXFxcIiBvbi1mYWlsdXJlPVxcXCIkY3RybC5vblByb2Nlc3NGYWlsdXJlKGluZGV4LCBmaWxlLCBlcnJvcilcXFwiIG9uLWNhbmNlbD0kY3RybC5vblByb2Nlc3NDYW5jZWwoaW5kZXgpIG1heC1zaXplPSRjdHJsLm1heFNpemUgYWNjZXB0PSRjdHJsLmFjY2VwdCBodHRwLW9wdGlvbnM9JGN0cmwuaHR0cE9wdGlvbnMgcHJvY2Vzc2luZy1tZXNzYWdlPSRjdHJsLnByb2Nlc3NpbmdUZXh0IHN1Y2Nlc3MtbWVzc2FnZT0kY3RybC5zdWNjZXNzVGV4dCBlcnJvci1tZXNzYWdlPSRjdHJsLmZhaWx1cmVUZXh0IHZhbGlkYXRpb24tbWVzc2FnZXM9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzIHRvby1sYXJnZS1tZXNzYWdlPSRjdHJsLnRvb0xhcmdlTWVzc2FnZSBjYW5jZWwtdGV4dD0kY3RybC5jYW5jZWxUZXh0PjwvdHctdXBsb2FkLXByb2Nlc3NpbmctbWluaT4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPW0tYS0zPiA8dHctdXBsb2FkLWJ1dHRvbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkIG5hbWU9JGN0cmwubmFtZSBsYWJlbD1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID09PSAwID8gJGN0cmwuYnV0dG9uVGV4dCA6ICRjdHJsLnNlY29uZGFyeUJ1dHRvblRleHRcXFwiIGlzLXNlY29uZGFyeT1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID4gMFxcXCIgYWNjZXB0PSRjdHJsLmFjY2VwdCBtb2RlbD0kY3RybC5pbnB1dEZpbGUgZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBvbi1jYXB0dXJlPSRjdHJsLm9uRmlsZUNhcHR1cmUoZmlsZXMpIGJsb2NrPXRydWUgc21hbGw9dHJ1ZSBtdWx0aXBsZT10cnVlPjwvdHctdXBsb2FkLWJ1dHRvbj4gPC9kaXY+IDwvZGl2PiBcIjsiLCJmdW5jdGlvbiB0d0Ryb3AoJHBhcnNlLCAkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogKCkgPT4ge1xuXG4gICAgfSxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW0sIGF0dHIpID0+IHtcbiAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuICAgICAgZWxlbVswXS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gJHBhcnNlKGF0dHIudHdEcm9wKTtcblxuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICBmbihzY29wZSwge1xuICAgICAgICAgICAgZmlsZXM6IGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuXG50d0Ryb3AuJGluamVjdCA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInXTtcblxuZXhwb3J0IGRlZmF1bHQgdHdEcm9wO1xuIiwiZnVuY3Rpb24gdHdEcmFnRW50ZXIoJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAndHdEcm9wJyxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW0sIGF0dHIpID0+IHtcbiAgICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gJHBhcnNlKGF0dHIudHdEcmFnRW50ZXIpO1xuICAgICAgICBzY29wZS5jb3VudGVyKys7XG5cbiAgICAgICAgaWYgKHNjb3BlLmNvdW50ZXIgPj0gMSkge1xuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgZm4oc2NvcGUsIHsgJGV2ZW50OiBldmVudCB9KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuXG50d0RyYWdFbnRlci4kaW5qZWN0ID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZSddO1xuXG5leHBvcnQgZGVmYXVsdCB0d0RyYWdFbnRlcjtcbiIsImZ1bmN0aW9uIHR3RHJhZ0xlYXZlKCRwYXJzZSwgJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJ3R3RHJvcCcsXG4gICAgbGluazogKHNjb3BlLCBlbGVtLCBhdHRyKSA9PiB7XG4gICAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBmbiA9ICRwYXJzZShhdHRyLnR3RHJhZ0xlYXZlKTtcbiAgICAgICAgc2NvcGUuY291bnRlci0tO1xuXG4gICAgICAgIGlmIChzY29wZS5jb3VudGVyIDw9IDApIHtcbiAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgIGZuKHNjb3BlLCB7ICRldmVudDogZXZlbnQgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcbn1cblxudHdEcmFnTGVhdmUuJGluamVjdCA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnXTtcblxuZXhwb3J0IGRlZmF1bHQgdHdEcmFnTGVhdmU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2RhdGUuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kYXRlLmh0bWwnO1xuXG5jb25zdCBEYXRlQ29udHJvbCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6IHtcbiAgICAkbmdNb2RlbDogJ25nTW9kZWwnXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdNb2RlbDogJz0nLFxuICAgIHJlcXVpcmVkOiAnQCcsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIGRpc2FibGVkOiAnQCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIGxvY2FsZTogJ0AnLFxuICAgIHR3TG9jYWxlOiAnPCcsXG4gICAgbWluOiAnQCcsXG4gICAgbmdNaW46ICc8JyxcbiAgICBtYXg6ICdAJyxcbiAgICBuZ01heDogJzwnLFxuICAgIG1vZGVsVHlwZTogJ0AnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVDb250cm9sO1xuIiwiY2xhc3MgRGF0ZUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkZWxlbWVudCwgJGxvZywgJHNjb3BlLCBUd0RhdGVTZXJ2aWNlKSB7XG4gICAgY29uc3QgJG5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG5cbiAgICB0aGlzLkRhdGVTZXJ2aWNlID0gVHdEYXRlU2VydmljZTtcbiAgICB0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLm5nTW9kZWwpIHtcbiAgICAgIHRoaXMuYXBwbHlEYXRlTW9kZWxJZlZhbGlkT3JUaHJvd0Vycm9yKCk7XG4gICAgICB0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5tb2RlbFR5cGUpIHtcbiAgICAgICAgaWYgKHRoaXMubW9kZWxUeXBlID09PSBTVFJJTkdfVFlQRSB8fCB0aGlzLm1vZGVsVHlwZSA9PT0gT0JKRUNUX1RZUEUpIHtcbiAgICAgICAgICB0aGlzLmRhdGVNb2RlbFR5cGUgPSB0aGlzLm1vZGVsVHlwZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbW9kZWxUeXBlLCBzaG91bGQgYmUgJHtTVFJJTkdfVFlQRX0gb3IgJHtPQkpFQ1RfVFlQRX1gKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kYXRlTW9kZWxUeXBlID0gT0JKRUNUX1RZUEU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF5ID0gbnVsbDtcbiAgICAgIHRoaXMubW9udGggPSAwO1xuICAgICAgdGhpcy55ZWFyID0gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLnNldERhdGVSZXF1aXJlZCgpO1xuICAgIHRoaXMuc2V0RGF0ZURpc2FibGVkKCk7XG4gICAgdGhpcy5zZXREYXRlTG9jYWxlKCk7XG5cbiAgICB0aGlzLnNldE1vbnRocygpO1xuXG4gICAgdGhpcy5hZGRWYWxpZGF0b3JzKCRuZ01vZGVsKTtcbiAgICB0aGlzLmFkZFdhdGNoZXJzKCRzY29wZSwgJG5nTW9kZWwpO1xuICAgIGFkZEZvY3VzSGFuZGxlcnMoJGVsZW1lbnQpO1xuICAgIGFkZEJsdXJIYW5kbGVycygkZWxlbWVudCwgJG5nTW9kZWwpO1xuICB9XG5cblxuICBhcHBseURhdGVNb2RlbElmVmFsaWRPclRocm93RXJyb3IoKSB7XG4gICAgaWYgKHZhbGlkRGF0ZSh0aGlzLm5nTW9kZWwpKSB7XG4gICAgICB0aGlzLmRhdGVNb2RlbFR5cGUgPSB0eXBlb2YgdGhpcy5uZ01vZGVsID09PSAnc3RyaW5nJyA/IFNUUklOR19UWVBFIDogT0JKRUNUX1RZUEU7XG5cbiAgICAgIHRoaXMuZXhwbG9kZURhdGVNb2RlbCh0aGlzLm5nTW9kZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGUgbW9kZWwgcGFzc2VkIHNob3VsZCBlaXRoZXIgYmUgaW5zdGFuY2Ugb2YgJ1xuICAgICAgICArICdEYXRlIG9yIHZhbGlkIElTTzg2MDEgc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgc2V0TW9udGhzKCkge1xuICAgIHRoaXMuZGF0ZU1vbnRocyA9IHRoaXMuZ2V0TW9udGhzQmFzZWRPbkludGxTdXBwb3J0Rm9yTG9jYWxlKCk7XG4gIH1cblxuICBzZXREYXRlUmVxdWlyZWQoKSB7XG4gICAgdGhpcy5kYXRlUmVxdWlyZWQgPSB0aGlzLm5nUmVxdWlyZWQgIT09IHVuZGVmaW5lZFxuICAgICAgPyB0aGlzLm5nUmVxdWlyZWRcbiAgICAgIDogdGhpcy5yZXF1aXJlZCAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0RGF0ZURpc2FibGVkKCkge1xuICAgIHRoaXMuZGF0ZURpc2FibGVkID0gdGhpcy5uZ0Rpc2FibGVkICE9PSB1bmRlZmluZWRcbiAgICAgID8gdGhpcy5uZ0Rpc2FibGVkXG4gICAgICA6IHRoaXMuZGlzYWJsZWQgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHNldERhdGVMb2NhbGUoKSB7XG4gICAgaWYgKCF0aGlzLmxvY2FsZSkge1xuICAgICAgdGhpcy5sb2NhbGUgPSBERUZBVUxUX0xPQ0FMRV9FTjtcbiAgICB9XG4gICAgdGhpcy5tb250aEJlZm9yZURheSA9IHRoaXMuRGF0ZVNlcnZpY2UuaXNNb250aEJlZm9yZURheSh0aGlzLmxvY2FsZSk7XG4gIH1cblxuICBleHBsb2RlRGF0ZU1vZGVsKGRhdGUpIHtcbiAgICBjb25zdCBkYXRlT2JqID0gdHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnID8gbmV3IERhdGUoZGF0ZSkgOiBkYXRlO1xuXG4gICAgdGhpcy5kYXkgPSBkYXRlT2JqLmdldFVUQ0RhdGUoKTtcbiAgICB0aGlzLm1vbnRoID0gZGF0ZU9iai5nZXRVVENNb250aCgpO1xuICAgIHRoaXMueWVhciA9IGRhdGVPYmouZ2V0VVRDRnVsbFllYXIoKTtcbiAgfVxuXG4gIGFkZFZhbGlkYXRvcnMoJG5nTW9kZWwpIHtcbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5taW4gPSAodmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGxpbWl0ID0gcHJlcERhdGVMaW1pdEZvckNvbXBhcmlzb24odGhpcy5uZ01pbiwgdGhpcy5taW4pO1xuICAgICAgY29uc3QgZGF0ZVZhbHVlID0gcHJlcERhdGVWYWx1ZUZvckNvbXBhcmlzb24odmFsdWUpO1xuXG4gICAgICByZXR1cm4gIWxpbWl0IHx8ICFkYXRlVmFsdWUgfHwgZGF0ZVZhbHVlID49IGxpbWl0O1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5tYXggPSAodmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGxpbWl0ID0gcHJlcERhdGVMaW1pdEZvckNvbXBhcmlzb24odGhpcy5uZ01heCwgdGhpcy5tYXgpO1xuICAgICAgY29uc3QgZGF0ZVZhbHVlID0gcHJlcERhdGVWYWx1ZUZvckNvbXBhcmlzb24odmFsdWUpO1xuXG4gICAgICByZXR1cm4gIWxpbWl0IHx8ICFkYXRlVmFsdWUgfHwgZGF0ZVZhbHVlIDw9IGxpbWl0O1xuICAgIH07XG4gIH1cblxuICBhZGRXYXRjaGVycygkc2NvcGUsICRuZ01vZGVsKSB7XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwuZGF5JywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSAmJiB0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5tb250aCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5hZGp1c3RMYXN0RGF5KCk7XG4gICAgICAgICRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7IC8vIElucHV0IHdhdGNoZXIgZG9lc24ndCB3b3JrIGZvciBtb250aFxuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXNlZFdpdGhEYXRlKSB7XG4gICAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLnllYXInLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlICYmIHRoaXMuaW5pdGlhbGlzZWRXaXRoRGF0ZSkge1xuICAgICAgICAkbmdNb2RlbC4kc2V0RGlydHkoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nTW9kZWwnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgPT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbGlkRGF0ZSh0aGlzLm5nTW9kZWwpKSB7XG4gICAgICAgICRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgICB0aGlzLmV4cGxvZGVEYXRlTW9kZWwodGhpcy5uZ01vZGVsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nUmVxdWlyZWQnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0RGF0ZVJlcXVpcmVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ0Rpc2FibGVkJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldERhdGVEaXNhYmxlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubG9jYWxlJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldERhdGVMb2NhbGUoKTtcbiAgICAgICAgdGhpcy5zZXRNb250aHMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdldE1vbnRoc0Jhc2VkT25JbnRsU3VwcG9ydEZvckxvY2FsZSgpIHtcbiAgICBjb25zdCBtb250aE5hbWVzID0gdGhpcy5EYXRlU2VydmljZS5nZXRNb250aE5hbWVzRm9yTG9jYWxlKHRoaXMubG9jYWxlKTtcblxuICAgIHJldHVybiBleHRlbmRNb250aHNXaXRoSWRzKG1vbnRoTmFtZXMpO1xuICB9XG5cbiAgY29tYmluZURhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuRGF0ZVNlcnZpY2UuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIE51bWJlcih0aGlzLnllYXIpLFxuICAgICAgTnVtYmVyKHRoaXMubW9udGgpLFxuICAgICAgTnVtYmVyKHRoaXMuZGF5KVxuICAgICk7XG4gIH1cblxuICB1cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIHtcbiAgICB0aGlzLmFkanVzdExhc3REYXkoKTtcblxuICAgIGlmICghaXNFeHBsb2RlZERhdGVQYXR0ZXJuQ29ycmVjdCh0aGlzLnllYXIsIHRoaXMubW9udGgsIHRoaXMuZGF5KSkge1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGVPYmogPSB0aGlzLmNvbWJpbmVEYXRlKCk7XG5cbiAgICBpZiAodGhpcy5kYXRlTW9kZWxUeXBlID09PSBTVFJJTkdfVFlQRSkge1xuICAgICAgY29uc3QgaXNvU3RyaW5nID0gZGF0ZU9iai50b0lTT1N0cmluZygpO1xuICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IGlzb1N0cmluZy5zdWJzdHJpbmcoMCwgaXNvU3RyaW5nLmluZGV4T2YoJ1QnKSk7XG5cbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZShkYXRlU3RyaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGRhdGVPYmopO1xuICAgIH1cbiAgfVxuXG4gIGFkanVzdExhc3REYXkoKSB7XG4gICAgY29uc3QgZGF5ID0gTnVtYmVyKHRoaXMuZGF5KTtcbiAgICBjb25zdCBtb250aCA9IE51bWJlcih0aGlzLm1vbnRoKTtcbiAgICBjb25zdCB5ZWFyID0gTnVtYmVyKHRoaXMueWVhcik7XG5cbiAgICBjb25zdCBsYXN0VVRDRGF5Rm9yTW9udGhBbmRZZWFyID0gdGhpcy5EYXRlU2VydmljZS5nZXRMYXN0RGF5T2ZNb250aCh5ZWFyLCBtb250aCk7XG5cbiAgICBpZiAoZGF5ID4gbGFzdFVUQ0RheUZvck1vbnRoQW5kWWVhcikge1xuICAgICAgLy8gVXNpbmcgc2V0Vmlld1ZhbHVlIGRvZXMgbm90IHVwZGF0ZSBET00sIG9ubHkgbW9kZWwuXG4gICAgICB0aGlzLmRheSA9IHBhcnNlSW50KGxhc3RVVENEYXlGb3JNb250aEFuZFllYXIsIDEwKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgREVGQVVMVF9MT0NBTEVfRU4gPSAnZW4nO1xuY29uc3QgU1RSSU5HX1RZUEUgPSAnc3RyaW5nJztcbmNvbnN0IE9CSkVDVF9UWVBFID0gJ29iamVjdCc7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xufVxuXG5mdW5jdGlvbiBpc051bWVyaWNTdHJpbmcodmFsdWUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhaXNOYU4oTnVtYmVyKHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGlzRXhwbG9kZWREYXRlUGF0dGVybkNvcnJlY3QoeWVhciwgbW9udGgsIGRheSkge1xuICByZXR1cm4gaXNOdW1iZXIoeWVhcilcbiAgICAmJiBpc051bWJlcihkYXkpXG4gICAgJiYgKGlzTnVtYmVyKG1vbnRoKSB8fCBpc051bWVyaWNTdHJpbmcobW9udGgpKTtcbn1cblxuZnVuY3Rpb24gdmFsaWREYXRlKGRhdGUpIHtcbiAgcmV0dXJuIHZhbGlkRGF0ZU9iamVjdChkYXRlKSB8fCB2YWxpZERhdGVTdHJpbmcoZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkRGF0ZU9iamVjdChkYXRlT2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0ZU9iaikgPT09ICdbb2JqZWN0IERhdGVdJ1xuICAgICYmICFpc05hTihkYXRlT2JqLmdldFRpbWUoKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG59XG5cbmZ1bmN0aW9uIHZhbGlkRGF0ZVN0cmluZyhkYXRlU3RyaW5nKSB7XG4gIHJldHVybiB0eXBlb2YgZGF0ZVN0cmluZyA9PT0gJ3N0cmluZycgJiYgdmFsaWREYXRlT2JqZWN0KG5ldyBEYXRlKGRhdGVTdHJpbmcpKTtcbn1cblxuZnVuY3Rpb24gcHJlcERhdGVMaW1pdEZvckNvbXBhcmlzb24obmdMaW1pdCwgYXR0ckxpbWl0KSB7XG4gIGxldCBsaW1pdCA9IG5nTGltaXQgfHwgYXR0ckxpbWl0O1xuXG4gIGlmICghbGltaXQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGltaXQgPSB0eXBlb2YgbGltaXQgPT09ICdzdHJpbmcnID8gbmV3IERhdGUobGltaXQpIDogbGltaXQ7XG4gIGlmICghdmFsaWREYXRlT2JqZWN0KGxpbWl0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gbGltaXQ7XG59XG5cbmZ1bmN0aW9uIHByZXBEYXRlVmFsdWVGb3JDb21wYXJpc29uKGRhdGVWYWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIGRhdGVWYWx1ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZShkYXRlVmFsdWUpIDogZGF0ZVZhbHVlO1xufVxuXG5mdW5jdGlvbiBleHRlbmRNb250aHNXaXRoSWRzKG1vbnRoTmFtZXMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycm93LWJvZHktc3R5bGVcbiAgcmV0dXJuIG1vbnRoTmFtZXMubWFwKChtb250aE5hbWUsIGluZGV4KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBpbmRleCxcbiAgICAgIGxhYmVsOiBtb250aE5hbWVcbiAgICB9O1xuICB9KTtcbn1cblxuLy8gVE9ETyBiZWhhdmlvdXIgb2YgZm9jdXMvYmx1ciBjb3VsZCBiZSBpbXByb3ZlZCB0byBwcmV2ZW50IG11bHRpcGxlIGZpcmVzXG5mdW5jdGlvbiBhZGRGb2N1c0hhbmRsZXJzKCRlbGVtZW50KSB7XG4gIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgY29uc3QgZGF5SW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9ZGF5XScpO1xuICBjb25zdCB5ZWFySW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9eWVhcl0nKTtcblxuICBkYXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+IHtcbiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfSk7XG5cbiAgeWVhcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQmx1ckhhbmRsZXJzKCRlbGVtZW50LCAkbmdNb2RlbCkge1xuICBsZXQgZGF5VG91Y2hlZDtcbiAgbGV0IHllYXJUb3VjaGVkO1xuXG4gIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgY29uc3QgZGF5SW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9ZGF5XScpO1xuICBjb25zdCB5ZWFySW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W25hbWU9eWVhcl0nKTtcblxuICBkYXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgIGRheVRvdWNoZWQgPSB0cnVlO1xuICAgIGlmIChkYXlUb3VjaGVkICYmIHllYXJUb3VjaGVkKSB7XG4gICAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHllYXJJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgIHllYXJUb3VjaGVkID0gdHJ1ZTtcbiAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gIH0pO1xufVxuXG5EYXRlQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJGxvZycsXG4gICckc2NvcGUnLFxuICAnVHdEYXRlU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9cm93PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNSB0dy1kYXRlLW1vbnRoLWNvbHVtblxcXCIgbmctaWY9JGN0cmwubW9udGhCZWZvcmVEYXk+IDxsYWJlbCBjbGFzcz1zci1vbmx5Pk1vbnRoPC9sYWJlbD4gPHR3LXNlbGVjdCBuYW1lPW1vbnRoIGNsYXNzPXR3LWRhdGUtbW9udGggbmctbW9kZWw9JGN0cmwubW9udGggbmctY2hhbmdlPSRjdHJsLnVwZGF0ZURhdGVNb2RlbEFuZFZhbGlkYXRpb25DbGFzc2VzKCkgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLmRhdGVEaXNhYmxlZCBvcHRpb25zPSRjdHJsLmRhdGVNb250aHM+IDwvdHctc2VsZWN0PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLXNtLTMgdHctZGF0ZS1kYXktY29sdW1uXFxcIj4gPGxhYmVsIGNsYXNzPXNyLW9ubHk+RGF5PC9sYWJlbD4gPGlucHV0IHR5cGU9bnVtYmVyIG5hbWU9ZGF5IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdHctZGF0ZS1kYXlcXFwiIG5nLW1vZGVsPSRjdHJsLmRheSBuZy1jaGFuZ2U9JGN0cmwudXBkYXRlRGF0ZU1vZGVsQW5kVmFsaWRhdGlvbkNsYXNzZXMoKSBwbGFjZWhvbGRlcj1ERCBtaW49MSBuZy1taW49MSBuZy1kaXNhYmxlZD0kY3RybC5kYXRlRGlzYWJsZWQgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIHR3LWZvY3VzYWJsZS8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNSB0dy1kYXRlLW1vbnRoLWNvbHVtblxcXCIgbmctaWY9ISRjdHJsLm1vbnRoQmVmb3JlRGF5PiA8bGFiZWwgY2xhc3M9c3Itb25seT5Nb250aDwvbGFiZWw+IDx0dy1zZWxlY3QgbmFtZT1tb250aCBjbGFzcz10dy1kYXRlLW1vbnRoIG5nLW1vZGVsPSRjdHJsLm1vbnRoIG5nLWNoYW5nZT0kY3RybC51cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIG5nLXJlcXVpcmVkPSRjdHJsLmRhdGVSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5kYXRlRGlzYWJsZWQgb3B0aW9ucz0kY3RybC5kYXRlTW9udGhzPiA8L3R3LXNlbGVjdD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbC1zbS00IHR3LWRhdGUteWVhci1jb2x1bW5cXFwiPiA8bGFiZWwgY2xhc3M9c3Itb25seT5ZZWFyPC9sYWJlbD4gPGlucHV0IHR5cGU9bnVtYmVyIG5hbWU9eWVhciBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHR3LWRhdGUteWVhclxcXCIgcGxhY2Vob2xkZXI9WVlZWSBuZy1tb2RlbD0kY3RybC55ZWFyIG5nLWNoYW5nZT0kY3RybC51cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIG5nLW1pbj0kY3RybC5taW4uZ2V0RnVsbFllYXIoKSBuZy1tYXg9JGN0cmwubWF4LmdldEZ1bGxZZWFyKCkgbWF4bGVuZ3RoPTQgbmctbWF4bGVuZ3RoPTQgbmctZGlzYWJsZWQ9JGN0cmwuZGF0ZURpc2FibGVkIG5nLXJlcXVpcmVkPSRjdHJsLmRhdGVSZXF1aXJlZCB0dy1mb2N1c2FibGUvPiA8L2Rpdj4gPC9kaXY+IFwiOyIsIlxuZnVuY3Rpb24gRGF0ZVNlcnZpY2UoKSB7XG4gIHRoaXMuZ2V0TG9jYWxlRGF0ZSA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0TG9jYWxlTW9udGggPSAoZGF0ZSkgPT4ge1xuICAgIGlmICghZGF0ZSkgeyBkYXRlID0gbmV3IERhdGUoKTsgfVxuICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRMb2NhbGVGdWxsWWVhciA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfTtcblxuICAvLyBnZXQgVVRDIGRhdGUgZm9yIHVzZXJzIGN1cnJlbnQgZGF5XG4gIHRoaXMuZ2V0TG9jYWxlVG9kYXkgPSAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgdGhpcy5nZXRMb2NhbGVGdWxsWWVhcihub3cpLFxuICAgICAgdGhpcy5nZXRMb2NhbGVNb250aChub3cpLFxuICAgICAgdGhpcy5nZXRMb2NhbGVEYXRlKG5vdylcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDRGF0ZSA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDTW9udGggPSAoZGF0ZSkgPT4ge1xuICAgIGlmICghZGF0ZSkgeyBkYXRlID0gbmV3IERhdGUoKTsgfVxuICAgIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENGdWxsWWVhciA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ1RvZGF5ID0gKCkgPT4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIHRoaXMuZ2V0VVRDRnVsbFllYXIobm93KSxcbiAgICAgIHRoaXMuZ2V0VVRDTW9udGgobm93KSxcbiAgICAgIHRoaXMuZ2V0VVRDRGF0ZShub3cpXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldExhc3REYXlPZk1vbnRoID0gKHllYXIsIG1vbnRoKSA9PiB7XG4gICAgY29uc3QgbGFzdERheSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyh5ZWFyLCBtb250aCArIDEsIDApO1xuICAgIHJldHVybiBsYXN0RGF5LmdldFVUQ0RhdGUoKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMgPSAoeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpID0+IHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXkpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoaG91cnMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENNaW51dGVzKG1pbnV0ZXMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENTZWNvbmRzKHNlY29uZHMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENNaWxsaXNlY29uZHMoMCk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH07XG5cbiAgdGhpcy5nZXRMb2NhbGVEYXRlRnJvbVBhcnRzID0gKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF5KTtcbiAgICBkYXRlLnNldEhvdXJzKGhvdXJzIHx8IDApO1xuICAgIGRhdGUuc2V0TWludXRlcyhtaW51dGVzIHx8IDApO1xuICAgIGRhdGUuc2V0U2Vjb25kcyhzZWNvbmRzIHx8IDApO1xuICAgIGRhdGUuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgIHJldHVybiBkYXRlO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGF0ZVBhcnRzRnJvbUlzbyA9IChpc29EYXRlKSA9PiB7XG4gICAgbGV0IGhvdXJzT2Zmc2V0ID0gMDtcbiAgICBsZXQgbWludXRlc09mZnNldCA9IDA7XG5cbiAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQoaXNvRGF0ZS5zdWJzdHIoMCwgNCksIDEwKTtcbiAgICBjb25zdCBtb250aCA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDUsIDIpLCAxMCkgLSAxO1xuICAgIGNvbnN0IGRheSA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDgsIDIpLCAxMCk7XG4gICAgY29uc3QgaG91cnMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxMSwgMiksIDEwKSB8fCAwO1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxNCwgMiksIDEwKSB8fCAwO1xuICAgIGNvbnN0IHNlY29uZHMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxNywgMiksIDEwKSB8fCAwO1xuXG4gICAgLy8gSXQncyBwb3NzaWJsZSBmb3IgdGhlIGRhdGUgdG8gbWF0Y2ggdGhlIG9mZnNldCByZWdleFxuICAgIGNvbnN0IHN0cmluZ0FmdGVyRGF0ZSA9IGlzb0RhdGUuc3Vic3RyaW5nKDEwKTtcbiAgICBjb25zdCBvZmZzZXRSZWdleCA9ICdbKy1dezF9WzAtOV17Mn0oOlswLTldezJ9KT8kJztcbiAgICBjb25zdCBvZmZzZXQgPSBzdHJpbmdBZnRlckRhdGUubWF0Y2gob2Zmc2V0UmVnZXgpO1xuXG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgLy8gVE9ETyBpZiB0aGVyZSBhcmUgbWlsbGlzZWNvbmRzLCBuZWVkIHRvIGFkanVzdCB0aGlzXG4gICAgICBob3Vyc09mZnNldCA9IHBhcnNlSW50KG9mZnNldFswXS5zdWJzdHIoMSwgMiksIDEwKSB8fCAwO1xuICAgICAgbWludXRlc09mZnNldCA9IHBhcnNlSW50KG9mZnNldFswXS5zdWJzdHIoNCwgMiksIDEwKSB8fCAwO1xuXG4gICAgICBpZiAob2Zmc2V0WzBdLnN1YnN0cigwLCAxKSA9PT0gJy0nKSB7XG4gICAgICAgIGhvdXJzT2Zmc2V0ICo9IC0xO1xuICAgICAgICBtaW51dGVzT2Zmc2V0ICo9IC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGhvdXJzT2Zmc2V0LCBtaW51dGVzT2Zmc2V0XTtcbiAgfTtcblxuICB0aGlzLmlzSXNvU3RyaW5nVmFsaWQgPSAoaXNvRGF0ZSkgPT4ge1xuICAgIGNvbnN0IGRhdGVTZWN0aW9uID0gJ1swLTldezR9LVswLTldezJ9LVswLTldezJ9JztcbiAgICBjb25zdCB0aW1lU2VjdGlvbiA9ICdUWzAtOV17Mn06WzAtOV17Mn06WzAtOV17Mn0nO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kU2VjdGlvbiA9ICcoLlswLTldezN9KT8nO1xuICAgIGNvbnN0IHpvbmVTZWN0aW9uID0gJyhafFsrLC1dWzAtOV17Mn0oOlswLTldezJ9KT8pJztcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke2RhdGVTZWN0aW9ufSgke3RpbWVTZWN0aW9ufSR7bWlsbGlzZWNvbmRTZWN0aW9ufSR7em9uZVNlY3Rpb259KT8kYCk7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoaXNvRGF0ZSk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENEYXRlRnJvbUlzbyA9IChpc29EYXRlKSA9PiB7XG4gICAgaWYgKCF0aGlzLmlzSXNvU3RyaW5nVmFsaWQoaXNvRGF0ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IFtcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRheSxcbiAgICAgIGhvdXJzLFxuICAgICAgbWludXRlcyxcbiAgICAgIHNlY29uZHMsXG4gICAgICBob3Vyc09mZnNldCxcbiAgICAgIG1pbnV0ZXNPZmZzZXRcbiAgICBdID0gdGhpcy5nZXREYXRlUGFydHNGcm9tSXNvKGlzb0RhdGUpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIHllYXIsIG1vbnRoLCBkYXksXG4gICAgICBob3VycyArIGhvdXJzT2Zmc2V0LCBtaW51dGVzICsgbWludXRlc09mZnNldCwgc2Vjb25kc1xuICAgICk7XG4gIH07XG5cblxuICAvLyBTdW5kYXkgaXMgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIGluIEpTXG4gIHRoaXMuZ2V0RGF5TmFtZXNGb3JMb2NhbGUgPSAobG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkYXlzID0gW107XG4gICAgY29uc3QgdmFsaWRGb3JtYXQgPSBnZXRWYWxpZERhdGVGb3JtYXQoZm9ybWF0KTtcbiAgICBmb3IgKGxldCBkYXkgPSAwOyBkYXkgPCA3OyBkYXkrKykge1xuICAgICAgZGF5cy5wdXNoKHRoaXMuZ2V0RGF5TmFtZUZvckxvY2FsZShkYXksIGxvY2FsZSwgdmFsaWRGb3JtYXQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRheXM7XG4gIH07XG5cbiAgdGhpcy5nZXREYXlOYW1lRm9yTG9jYWxlID0gKGRheU9mV2VlaywgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0RGF5TmFtZSA9IGdldERlZmF1bHREYXlOYW1lKGRheU9mV2VlaywgbG9jYWxlLCBmb3JtYXQpO1xuICAgIGlmIChkZWZhdWx0RGF5TmFtZSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHREYXlOYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkTG9jYWxlID0gZ2V0VmFsaWRMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCB2YWxpZEZvcm1hdCA9IGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cygyMDA2LCAwLCBkYXlPZldlZWsgKyAxKTsgLy8gMjAwNiBzdGFydGVkIHdpdGggYSBTdW5kYXlcblxuICAgIGNvbnN0IGxvY2FsRGF0ZU5hbWUgPSBnZXRMb2NhbGlzZWREYXRlTmFtZShkYXRlLCB2YWxpZExvY2FsZSwgeyB3ZWVrZGF5OiAnbG9uZycgfSk7XG5cbiAgICByZXR1cm4gbG9jYWxEYXRlTmFtZSB8fCBnZXREZWZhdWx0RGF5TmFtZShkYXlPZldlZWssICdlbi1HQicsIHZhbGlkRm9ybWF0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXREZWZhdWx0RGF5TmFtZShkYXlPZldlZWssIGxvY2FsZSwgZm9ybWF0KSB7XG4gICAgbGV0IGRlZmF1bHREYXlOYW1lO1xuICAgIGNvbnN0IGxhbmd1YWdlID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG5cbiAgICBpZiAoREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0VbbGFuZ3VhZ2VdKSB7XG4gICAgICBkZWZhdWx0RGF5TmFtZSA9IERFRkFVTFRfREFZX05BTUVTX0JZX0xBTkdVQUdFW2xhbmd1YWdlXVtkYXlPZldlZWtdO1xuICAgIH1cblxuICAgIGlmIChkZWZhdWx0RGF5TmFtZSkge1xuICAgICAgaWYgKGZvcm1hdCA9PT0gJ3Nob3J0Jykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERheU5hbWUuc3Vic3RyKDAsIDMpO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdCA9PT0gJ25hcnJvdycpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXlOYW1lLnN1YnN0cigwLCAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZhdWx0RGF5TmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRoaXMuZ2V0TW9udGhOYW1lc0ZvckxvY2FsZSA9IChsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGNvbnN0IG1vbnRocyA9IFtdO1xuICAgIGNvbnN0IHZhbGlkRm9ybWF0ID0gZ2V0VmFsaWREYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgICBmb3IgKGxldCBtb250aCA9IDA7IG1vbnRoIDwgMTI7IG1vbnRoKyspIHtcbiAgICAgIG1vbnRocy5wdXNoKHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKG1vbnRoLCBsb2NhbGUsIHZhbGlkRm9ybWF0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vbnRocztcbiAgfTtcblxuICB0aGlzLmdldE1vbnRoTmFtZUZvckxvY2FsZSA9IChtb250aCwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0TW9udGhOYW1lID0gZ2V0RGVmYXVsdE1vbnRoTmFtZShtb250aCwgbG9jYWxlLCBmb3JtYXQpO1xuXG4gICAgaWYgKGRlZmF1bHRNb250aE5hbWUpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TW9udGhOYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkTG9jYWxlID0gZ2V0VmFsaWRMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCB2YWxpZEZvcm1hdCA9IGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gICAgLy8gRGF5IGluIG1pZGRsZSBvZiBtb250aCBhdm9pZHMgdGltZXpvbmUgaXNzdWVzXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cygyMDAwLCBtb250aCwgMTUpO1xuICAgIGlmIChmb3JtYXQgPT09ICdzaG9ydCcpIHtcbiAgICAgIG1vbnRoID0gZ2V0TG9jYWxpc2VkRGF0ZU5hbWUoZGF0ZSwgdmFsaWRMb2NhbGUsIHsgbW9udGg6ICdsb25nJyB9KTtcbiAgICAgIHJldHVybiAobW9udGgubGVuZ3RoID4gNCkgPyBtb250aC5zbGljZSgwLCAzKSA6IG1vbnRoO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbE1vbnRoTmFtZSA9IGdldExvY2FsaXNlZERhdGVOYW1lKGRhdGUsIHZhbGlkTG9jYWxlLCB7IG1vbnRoOiAnbG9uZycgfSk7XG5cbiAgICByZXR1cm4gbG9jYWxNb250aE5hbWUgfHwgZ2V0RGVmYXVsdE1vbnRoTmFtZShtb250aCwgJ2VuLUdCJywgdmFsaWRGb3JtYXQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRNb250aE5hbWUobW9udGgsIGxvY2FsZSwgZm9ybWF0KSB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcblxuICAgIGlmIChsYW5ndWFnZVxuICAgICAgJiYgREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRVtsYW5ndWFnZV1cbiAgICAgICYmIChmb3JtYXQgIT09ICdzaG9ydCcgfHwgbGFuZ3VhZ2UgPT09ICdqYScpKSB7XG4gICAgICByZXR1cm4gREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRVtsYW5ndWFnZV1bbW9udGhdO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICB0aGlzLmdldFdlZWtkYXkgPSAoeWVhciwgbW9udGgsIGRheSkgPT4ge1xuICAgIGNvbnN0IHV0Y0RhdGUgPSB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMoeWVhciwgbW9udGgsIGRheSk7XG4gICAgcmV0dXJuIHV0Y0RhdGUuZ2V0VVRDRGF5KCk7XG4gIH07XG5cbiAgdGhpcy5pc01vbnRoQmVmb3JlRGF5ID0gKGxvY2FsZSkgPT4ge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICByZXR1cm4gKChsYW5nID09PSAnamEnKSB8fCAobG9jYWxlICYmIGxvY2FsZS5pbmRleE9mKCdVUycsIGxvY2FsZS5sZW5ndGggLSAyKSAhPT0gLTEpKTtcbiAgfTtcblxuICB0aGlzLmlzWWVhckJlZm9yZU1vbnRoID0gKGxvY2FsZSkgPT4ge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICByZXR1cm4gKGxhbmcgPT09ICdqYScpO1xuICB9O1xuXG4gIHRoaXMuYWRkWWVhcnMgPSAoZGF0ZSwgeWVhcnMpID0+IHRoaXMuYWRkVG9EYXRlKGRhdGUsIHllYXJzLCAwLCAwKTtcbiAgdGhpcy5hZGRNb250aHMgPSAoZGF0ZSwgbW9udGhzKSA9PiB0aGlzLmFkZFRvRGF0ZShkYXRlLCAwLCBtb250aHMsIDApO1xuICB0aGlzLmFkZERheXMgPSAoZGF0ZSwgZGF5cykgPT4gdGhpcy5hZGRUb0RhdGUoZGF0ZSwgMCwgMCwgZGF5cyk7XG5cbiAgdGhpcy5hZGRUb0RhdGUgPSAoZGF0ZSwgeWVhcnMsIG1vbnRocywgZGF5cykgPT4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHllYXJzLFxuICAgIGRhdGUuZ2V0VVRDTW9udGgoKSArIG1vbnRocyxcbiAgICBkYXRlLmdldFVUQ0RhdGUoKSArIGRheXNcbiAgKTtcblxuICB0aGlzLmdldExvY2FsZVRpbWVTdHJpbmcgPSAoZGF0ZSwgbG9jYWxlKSA9PiB0aGlzLmdldFRpbWVTdHJpbmcoXG4gICAgZGF0ZS5nZXRIb3VycygpLFxuICAgIGRhdGUuZ2V0TWludXRlcygpLFxuICAgIGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgIGxvY2FsZVxuICApO1xuXG4gIHRoaXMuZ2V0VGltZVN0cmluZyA9IChob3VycywgbWludXRlcywgc2Vjb25kcywgbG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuXG4gICAgaWYgKGhvdXJzIDwgMTApIHtcbiAgICAgIGhvdXJzID0gYDAke2hvdXJzfWA7XG4gICAgfVxuICAgIGlmIChtaW51dGVzIDwgMTApIHtcbiAgICAgIG1pbnV0ZXMgPSBgMCR7bWludXRlc31gO1xuICAgIH1cblxuICAgIGlmIChsYW5nID09PSAnZW4nKSB7XG4gICAgICBjb25zdCBhbXBtID0gaG91cnMgPj0gMTIgPyAncG0nIDogJ2FtJztcbiAgICAgIGhvdXJzICU9IDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICAgIGhvdXJzID0gMTI7XG4gICAgICB9XG4gICAgICBpZiAobWludXRlcyA9PT0gJzAwJykge1xuICAgICAgICByZXR1cm4gYCR7aG91cnN9JHthbXBtfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlc30ke2FtcG19YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXN9YDtcbiAgfTtcblxuICB0aGlzLmdldFllYXJBbmRNb250aFByZXNlbnRhdGlvbiA9ICh5ZWFyLCBtb250aCwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCB5ZWFyTmFtZSA9IGdldFllYXJOYW1lKHllYXIsIGxvY2FsZSk7XG4gICAgY29uc3QgbW9udGhOYW1lID0gdGhpcy5nZXRNb250aE5hbWVGb3JMb2NhbGUobW9udGgsIGxvY2FsZSwgZm9ybWF0IHx8ICdsb25nJyk7XG5cbiAgICBjb25zdCBsYW5ndWFnZSA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IGRlbGltaXRlciA9IGdldERlbGltaXRlcihsYW5ndWFnZSk7XG5cbiAgICBpZiAodGhpcy5pc1llYXJCZWZvcmVNb250aChsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gW3llYXJOYW1lLCBtb250aE5hbWVdLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIFttb250aE5hbWUsIHllYXJOYW1lXS5qb2luKGRlbGltaXRlcik7XG4gIH07XG5cbiAgdGhpcy5nZXRZZWFyTW9udGhEYXRlUHJlc2VudGF0aW9uID0gKHllYXIsIG1vbnRoLCBkYXksIGxvY2FsZSwgZm9ybWF0KSA9PiB7XG4gICAgY29uc3QgeWVhck5hbWUgPSBnZXRZZWFyTmFtZSh5ZWFyLCBsb2NhbGUpO1xuICAgIGNvbnN0IG1vbnRoTmFtZSA9IHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKG1vbnRoLCBsb2NhbGUsIGZvcm1hdCB8fCAnbG9uZycpO1xuICAgIGNvbnN0IGRhdGVOYW1lID0gZ2V0RGF0ZU5hbWUoZGF5LCBsb2NhbGUpO1xuXG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBkZWxpbWl0ZXIgPSBnZXREZWxpbWl0ZXIobGFuZ3VhZ2UpO1xuXG4gICAgaWYgKHRoaXMuaXNZZWFyQmVmb3JlTW9udGgobG9jYWxlKSkge1xuICAgICAgcmV0dXJuIFt5ZWFyTmFtZSwgbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc01vbnRoQmVmb3JlRGF5KGxvY2FsZSkpIHtcbiAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBbbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICAgICAgcmV0dXJuIGAke2RhdGVTdHJpbmd9LCAke3llYXJOYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiBbZGF0ZU5hbWUsIG1vbnRoTmFtZSwgeWVhck5hbWVdLmpvaW4oZGVsaW1pdGVyKTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZU5vdyA9ICgpID0+IG5ldyBEYXRlKCk7XG5cbiAgdGhpcy5nZXRVVENOb3cgPSAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBub3cuZ2V0VVRDTW9udGgoKSxcbiAgICAgIG5vdy5nZXRVVENEYXRlKCksXG4gICAgICBub3cuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG5vdy5nZXRVVENNaW51dGVzKCksXG4gICAgICBub3cuZ2V0VVRDU2Vjb25kcygpXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZURhdGVTdHJpbmcgPSAoZGF0ZSwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICAvLyBDaGVjayB0aGF0IHRoZSBkYXRlIGV4aXN0c1xuICAgIGlmICghZGF0ZS5nZXRGdWxsWWVhcikge1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSB2YXJpYWJsZXNcbiAgICBjb25zdCBub3cgPSB0aGlzLmdldExvY2FsZU5vdygpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZVN0cmluZyhcbiAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRIb3VycygpLFxuICAgICAgZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0RGF5KCksXG4gICAgICBsb2NhbGUsXG4gICAgICBkYXRlIC0gbm93LFxuICAgICAgbm93LmdldEZ1bGxZZWFyKCksXG4gICAgICBmb3JtYXRcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDRGF0ZVN0cmluZyA9IChkYXRlLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIC8vIENoZWNrIHRoYXQgdGhlIGRhdGUgZXhpc3RzXG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBjb25zdCBub3cgPSB0aGlzLmdldFVUQ05vdygpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZVN0cmluZyhcbiAgICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0VVRDTW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF5KCksXG4gICAgICBsb2NhbGUsXG4gICAgICBkYXRlIC0gbm93LFxuICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBmb3JtYXRcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGF0ZVN0cmluZyA9IChcbiAgICB5ZWFyLFxuICAgIG1vbnRoLFxuICAgIGRheSxcbiAgICBob3VycyxcbiAgICBtaW51dGVzLFxuICAgIHNlY29uZHMsXG4gICAgZGF5T2ZXZWVrLFxuICAgIGxvY2FsZSxcbiAgICBvZmZzZXQsXG4gICAgY3VycmVudFllYXIsXG4gICAgZm9ybWF0XG4gICkgPT4ge1xuICAgIGNvbnN0IHNpeERheXMgPSAxNDQgKiA2MCAqIDYwICogMTAwMDtcbiAgICBjb25zdCBlaWdodERheXMgPSA4ICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuICAgIGNvbnN0IGhhc1RpbWUgPSBNYXRoLmFicyhvZmZzZXQpIDwgc2l4RGF5cyAmJiBmb3JtYXQgIT09ICdsb25nJztcbiAgICBjb25zdCBoYXNEYXRlID0gIWhhc1RpbWU7XG4gICAgY29uc3QgaGFzV2Vla2RheSA9IE1hdGguYWJzKG9mZnNldCkgPCBlaWdodERheXMgfHwgZm9ybWF0ID09PSAnbG9uZyc7XG4gICAgY29uc3QgaGFzTW9udGggPSAhaGFzV2Vla2RheSB8fCBmb3JtYXQgPT09ICdsb25nJztcbiAgICBjb25zdCBoYXNZZWFyID0gKCFoYXNXZWVrZGF5ICYmIGN1cnJlbnRZZWFyICE9PSB5ZWFyKSB8fCBmb3JtYXQgPT09ICdsb25nJztcblxuICAgIGNvbnN0IHllYXJOYW1lID0gaGFzWWVhciA/IGdldFllYXJOYW1lKHllYXIsIGxvY2FsZSkgOiAnJztcbiAgICBjb25zdCBtb250aE5hbWUgPSBoYXNNb250aCA/IHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKFxuICAgICAgbW9udGgsXG4gICAgICBsb2NhbGUsXG4gICAgICBmb3JtYXQgPT09ICdzaG9ydCcgPyAnc2hvcnQnIDogJ2xvbmcnXG4gICAgKSA6ICcnO1xuICAgIGNvbnN0IGRhdGVOYW1lID0gaGFzRGF0ZSA/IGdldERhdGVOYW1lKGRheSwgbG9jYWxlKSA6ICcnO1xuICAgIGNvbnN0IHdlZWtkYXlOYW1lID0gaGFzV2Vla2RheSA/IHRoaXMuZ2V0RGF5TmFtZUZvckxvY2FsZShcbiAgICAgIGRheU9mV2VlayxcbiAgICAgIGxvY2FsZSxcbiAgICAgIGZvcm1hdCA9PT0gJ3Nob3J0JyA/ICdzaG9ydCcgOiAnbG9uZydcbiAgICApIDogJyc7XG4gICAgY29uc3QgdGltZU5hbWUgPSBoYXNUaW1lID8gdGhpcy5nZXRUaW1lU3RyaW5nKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBsb2NhbGUpIDogJyc7XG5cbiAgICByZXR1cm4gdGhpcy5jb21iaW5lRGF0ZVBhcnRzKHllYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lLCB0aW1lTmFtZSwgd2Vla2RheU5hbWUsIGxvY2FsZSk7XG4gIH07XG5cbiAgdGhpcy5jb21iaW5lRGF0ZVBhcnRzID0gKHllYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lLCB0aW1lTmFtZSwgZGF5TmFtZSwgbG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IGRlbGltaXRlciA9IGdldERlbGltaXRlcihsYW5nKTtcblxuICAgIGxldCBkYXRlU3RyaW5nO1xuXG4gICAgaWYgKHRoaXMuaXNZZWFyQmVmb3JlTW9udGgobG9jYWxlKSkge1xuICAgICAgZGF0ZVN0cmluZyA9IFt5ZWFyTmFtZSwgbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpLnRyaW0oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNb250aEJlZm9yZURheShsb2NhbGUpKSB7XG4gICAgICBkYXRlU3RyaW5nID0gW21vbnRoTmFtZSwgZGF0ZU5hbWVdLmpvaW4oZGVsaW1pdGVyKS50cmltKCk7XG4gICAgICBpZiAoeWVhck5hbWUpIHtcbiAgICAgICAgZGF0ZVN0cmluZyArPSBgLCAke3llYXJOYW1lfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmcgPSBbZGF0ZU5hbWUsIG1vbnRoTmFtZSwgeWVhck5hbWVdLmpvaW4oZGVsaW1pdGVyKS50cmltKCk7XG4gICAgfVxuXG4gICAgaWYgKGRheU5hbWUpIHtcbiAgICAgIGlmIChsYW5nID09PSAnamEnKSB7XG4gICAgICAgIHJldHVybiBgJHtkYXRlU3RyaW5nfSAke3RpbWVOYW1lfSAoJHtkYXlOYW1lfSlgLnRyaW0oKTtcbiAgICAgIH1cbiAgICAgIC8vIEZvciBsb25nZXIgZGF0ZXMgdXNlIGEgY29tbWFcbiAgICAgIGlmIChtb250aE5hbWUgfHwgeWVhck5hbWUpIHtcbiAgICAgICAgZGF0ZVN0cmluZyA9IGAke2RheU5hbWV9LCAke2RhdGVTdHJpbmd9YC50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlU3RyaW5nID0gYCR7ZGF5TmFtZX0gJHtkYXRlU3RyaW5nfWAudHJpbSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBkYXRlU3RyaW5nID0gYCR7ZGF0ZVN0cmluZ30gJHt0aW1lTmFtZX1gO1xuXG4gICAgcmV0dXJuIGRhdGVTdHJpbmcudHJpbSgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERhdGVOYW1lKGRheU9mTW9udGgsIGxvY2FsZSkge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBzdWZmaXggPSBnZXRTdWZmaXgoREFZX1NVRkZJWEVTX0JZX0xBTkdVQUdFLCBkYXlPZk1vbnRoLCBsYW5nKSB8fCAnJztcbiAgICByZXR1cm4gYCR7ZGF5T2ZNb250aH0ke3N1ZmZpeH1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0WWVhck5hbWUoeWVhciwgbG9jYWxlKSB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IHN1ZmZpeCA9IGdldFN1ZmZpeChZRUFSX1NVRkZJWEVTX0JZX0xBTkdVQUdFLCB5ZWFyLCBsYW5nKTtcbiAgICByZXR1cm4gYCR7eWVhcn0ke3N1ZmZpeH1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TG9jYWxpc2VkRGF0ZU5hbWUoZGF0ZSwgbG9jYWxlLCBmb3JtYXR0aW5nT2JqZWN0KSB7XG4gICAgaWYgKCFkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IG5hbWUgPSBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZyhsb2NhbGUsIGZvcm1hdHRpbmdPYmplY3QpO1xuXG4gICAgaWYgKGlzTG9jYWxlVHJhbnNsYXRpb25SZXF1aXJlc1N0cmlwcGluZyhsb2NhbGUpKSB7XG4gICAgICAvLyBzdHJpcCBvdXQgYW55IG51bWJlcnMsIHNwYWNlcywgY29tbWFzIGFuZCBkb3RzIGluIGNhc2UgYnJvd3NlciAoY291Z2guLi5TYWZhcmkpXG4gICAgICAvLyBkb2Vzbid0IHJlc3BlY3QgZm9ybWF0XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bMC05XXxcXHN8LHxcXC4vZywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBjb25zdCB2YWxpZEZvcm1hdHMgPSBbJ25hcnJvdycsICdzaG9ydCcsICdsb25nJ107XG4gICAgaWYgKCFmb3JtYXQgfHwgdmFsaWRGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA8IDApIHtcbiAgICAgIHJldHVybiAnbG9uZyc7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWxpZExvY2FsZShsb2NhbGUpIHtcbiAgICBpZiAoIWlzSW50bFN1cHBvcnRlZEZvckxvY2FsZShsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gJ2VuLUdCJztcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW50bFN1cHBvcnRlZEZvckxvY2FsZShsb2NhbGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3VwcG9ydGVkTG9jYWxlcyA9IHdpbmRvdy5JbnRsLkRhdGVUaW1lRm9ybWF0LnN1cHBvcnRlZExvY2FsZXNPZihbbG9jYWxlXSk7XG4gICAgICByZXR1cm4gc3VwcG9ydGVkTG9jYWxlcy5sZW5ndGggPiAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNMb2NhbGVUcmFuc2xhdGlvblJlcXVpcmVzU3RyaXBwaW5nKGxvY2FsZSkge1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgaWYgKGxhbmcgPT09ICdqYScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpIHtcbiAgICBpZiAoIWxvY2FsZSkge1xuICAgICAgcmV0dXJuICdlbic7XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGUuc3Vic3RyaW5nKDAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVsaW1pdGVyKGxhbmcpIHtcbiAgICByZXR1cm4gKERFTElNSVRFUlNfQllfTEFOR1VBR0VbbGFuZ10gIT09IHVuZGVmaW5lZCkgPyBERUxJTUlURVJTX0JZX0xBTkdVQUdFW2xhbmddIDogJyAnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3VmZml4KHN1ZmZpeGVzLCB2YWx1ZSwgbGFuZykge1xuICAgIGlmICghc3VmZml4ZXNbbGFuZ10pIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKHN1ZmZpeGVzW2xhbmddLmV4YWN0TWF0Y2ggJiYgc3VmZml4ZXNbbGFuZ10uZXhhY3RNYXRjaFt2YWx1ZV0pIHtcbiAgICAgIHJldHVybiBzdWZmaXhlc1tsYW5nXS5leGFjdE1hdGNoW3ZhbHVlXTtcbiAgICB9XG4gICAgaWYgKHN1ZmZpeGVzW2xhbmddLmVuZHNXaXRoICYmIHN1ZmZpeGVzW2xhbmddLmVuZHNXaXRoW3ZhbHVlICUgMTBdKSB7XG4gICAgICByZXR1cm4gc3VmZml4ZXNbbGFuZ10uZW5kc1dpdGhbdmFsdWUgJSAxMF07XG4gICAgfVxuICAgIHJldHVybiBzdWZmaXhlc1tsYW5nXS5kZWZhdWx0O1xuICB9XG5cbiAgY29uc3QgREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRSA9IHtcbiAgICBlbjogW1xuICAgICAgJ0phbnVhcnknLFxuICAgICAgJ0ZlYnJ1YXJ5JyxcbiAgICAgICdNYXJjaCcsXG4gICAgICAnQXByaWwnLFxuICAgICAgJ01heScsXG4gICAgICAnSnVuZScsXG4gICAgICAnSnVseScsXG4gICAgICAnQXVndXN0JyxcbiAgICAgICdTZXB0ZW1iZXInLFxuICAgICAgJ09jdG9iZXInLFxuICAgICAgJ05vdmVtYmVyJyxcbiAgICAgICdEZWNlbWJlcidcbiAgICBdLFxuICAgIGphOiBbXG4gICAgICAnMeaciCcsXG4gICAgICAnMuaciCcsXG4gICAgICAnM+aciCcsXG4gICAgICAnNOaciCcsXG4gICAgICAnNeaciCcsXG4gICAgICAnNuaciCcsXG4gICAgICAnN+aciCcsXG4gICAgICAnOOaciCcsXG4gICAgICAnOeaciCcsXG4gICAgICAnMTDmnIgnLFxuICAgICAgJzEx5pyIJyxcbiAgICAgICcxMuaciCdcbiAgICBdXG4gIH07XG5cbiAgY29uc3QgREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0UgPSB7XG4gICAgZW46IFtcbiAgICAgICdTdW5kYXknLFxuICAgICAgJ01vbmRheScsXG4gICAgICAnVHVlc2RheScsXG4gICAgICAnV2VkbmVzZGF5JyxcbiAgICAgICdUaHVyc2RheScsXG4gICAgICAnRnJpZGF5JyxcbiAgICAgICdTYXR1cmRheSdcbiAgICBdLFxuICAgIGphOiBbXG4gICAgICAn5pelJywgJ+aciCcsICfngasnLCAn5rC0JywgJ+acqCcsICfph5EnLCAn5ZyfJ1xuICAgIF1cbiAgfTtcblxuICBjb25zdCBEQVlfU1VGRklYRVNfQllfTEFOR1VBR0UgPSB7XG4gICAgZW46IHtcbiAgICAgIGV4YWN0TWF0Y2g6IHtcbiAgICAgICAgMTE6ICd0aCcsXG4gICAgICAgIDEyOiAndGgnLFxuICAgICAgICAxMzogJ3RoJ1xuICAgICAgfSxcbiAgICAgIGVuZHNXaXRoOiB7XG4gICAgICAgIDE6ICdzdCcsXG4gICAgICAgIDI6ICduZCcsXG4gICAgICAgIDM6ICdyZCdcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiAndGgnXG4gICAgfSxcbiAgICBkZToge1xuICAgICAgZGVmYXVsdDogJy4nXG4gICAgfSxcbiAgICBmaToge1xuICAgICAgZGVmYXVsdDogJy4nXG4gICAgfSxcbiAgICBqYToge1xuICAgICAgZGVmYXVsdDogJ+aXpSdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgWUVBUl9TVUZGSVhFU19CWV9MQU5HVUFHRSA9IHtcbiAgICBqYToge1xuICAgICAgZGVmYXVsdDogJ+W5tCdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgREVMSU1JVEVSU19CWV9MQU5HVUFHRSA9IHtcbiAgICBqYTogJydcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0ZVNlcnZpY2U7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kYXRlLWZvcm1hdC5odG1sJztcblxuY29uc3QgRGF0ZURpc3BsYXkgPSB7XG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIGRhdGU6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICBmb3JtYXQ6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlRGlzcGxheTtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3BhbiB0dy10b29sLXRpcCBkYXRhLW9yaWdpbmFsLXRpdGxlPVxcXCJ7eyAkY3RybC5kYXRlIHwgdHdEYXRlRm9ybWF0IDogJGN0cmwubG9jYWxlIDogJ2xvbmcnIH19XFxcIj4gPHNwYW4gY2xhc3M9XFxcImhpZGRlbi14cyBoaWRkZW4tc21cXFwiPiB7eyAkY3RybC5kYXRlIHwgdHdEYXRlRm9ybWF0IDogJGN0cmwubG9jYWxlIDogJGN0cmwuZm9ybWF0IH19IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImhpZGRlbi1tZCBoaWRkZW4tbGcgaGlkZGVuLXhsXFxcIj4ge3sgJGN0cmwuZGF0ZSB8IHR3RGF0ZUZvcm1hdCA6ICRjdHJsLmxvY2FsZSA6ICdzaG9ydCcgfX0gPC9zcGFuPiA8L3NwYW4+IFwiOyIsIlxuZnVuY3Rpb24gRGF0ZUZvcm1hdEZpbHRlcihUd0RhdGVTZXJ2aWNlKSB7XG4gIHJldHVybiAoZGF0ZVN1cHBsaWVkLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGlmICghZGF0ZVN1cHBsaWVkKSB7XG4gICAgICByZXR1cm4gZGF0ZVN1cHBsaWVkO1xuICAgIH1cbiAgICBsZXQgZGF0ZSA9IGRhdGVTdXBwbGllZDtcblxuICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRhdGUgPSBUd0RhdGVTZXJ2aWNlLmdldFVUQ0RhdGVGcm9tSXNvKGRhdGUpO1xuXG4gICAgICBjb25zdCBkYXRlT25seSA9IG5ldyBSZWdFeHAoJ15bMC05XXs0fS1bMC05XXsyfS1bMC05XXsyfSQnKTsgLy8geXl5eS1tbS1kZFxuICAgICAgaWYgKGRhdGVPbmx5LnRlc3QoZGF0ZVN1cHBsaWVkKSkge1xuICAgICAgICByZXR1cm4gVHdEYXRlU2VydmljZS5nZXRVVENEYXRlU3RyaW5nKGRhdGUsIGxvY2FsZSwgZm9ybWF0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWRhdGUpIHsgcmV0dXJuIGRhdGVTdXBwbGllZDsgfVxuICAgIC8vIFVzZSBsb2NhbGUgdGltZXpvbmVcbiAgICByZXR1cm4gVHdEYXRlU2VydmljZS5nZXRMb2NhbGVEYXRlU3RyaW5nKGRhdGUsIGxvY2FsZSwgZm9ybWF0KTtcbiAgfTtcbn1cblxuRGF0ZUZvcm1hdEZpbHRlci4kaW5qZWN0ID0gWydUd0RhdGVTZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVGb3JtYXRGaWx0ZXI7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2Zvcm0tY29udHJvbC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2Zvcm0tY29udHJvbC5odG1sJztcblxuY29uc3QgRm9ybUNvbnRyb2wgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICByZXF1aXJlOiB7XG4gICAgJG5nTW9kZWw6ICduZ01vZGVsJ1xuICB9LFxuICBiaW5kaW5nczoge1xuICAgIHR5cGU6ICdAJyxcbiAgICBuYW1lOiAnQCcsXG4gICAgaWQ6ICdAJyxcbiAgICBsYWJlbDogJ0AnLFxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG4gICAgc3RlcDogJ0AnLFxuICAgIGxvY2FsZTogJ0AnLFxuICAgIHVwbG9hZEFjY2VwdDogJ0AnLFxuICAgIHVwbG9hZEljb246ICdAJyxcbiAgICB1cGxvYWRUb29MYXJnZU1lc3NhZ2U6ICdAJyxcbiAgICBvcHRpb25zOiAnPCcsXG5cbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdDaGFuZ2U6ICcmJyxcbiAgICBuZ0ZvY3VzOiAnJicsXG4gICAgbmdCbHVyOiAnJicsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcblxuICAgIC8vIG5nTWlubGVuZ3RoL25nTWF4bGVuZ3RoIGhhdmUgZGVmYXVsdCBiZWhhdmlvdXIgdGhhdCBjYW5ub3QgYmUgb3ZlcnJpZGRlblxuICAgIG5nTWlubGVuZ3RoOiAnPHR3TWlubGVuZ3RoJyxcbiAgICBuZ01heGxlbmd0aDogJzx0d01heGxlbmd0aCcsXG4gICAgbmdNaW46ICc8JyxcbiAgICBuZ01heDogJzwnLFxuICAgIG5nUGF0dGVybjogJzwnLFxuXG4gICAgdXBsb2FkT3B0aW9uczogJzwnLFxuICAgIGhlbHBPcHRpb25zOiAnPCcsXG4gICAgdGV4dEZvcm1hdDogJzwnLFxuICAgIHZhbGlkYXRpb25Bc3luYzogJzwnLFxuICAgIHBlcnNpc3RBc3luYzogJzwnLFxuICAgIG9uQXN5bmNGYWlsdXJlOiAnJicsXG4gICAgb25Bc3luY1N1Y2Nlc3M6ICcmJyxcbiAgICAvLyBMaXZlIGNhcHR1cmUgcGFyYW1ldGVycyBmb3IgdXBsb2FkIGNvbXBvbmVudFxuICAgIGZpbGVVcGxvYWRTb3VyY2U6ICc8JyxcbiAgICBjYW1lcmFPcHRpb25zOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2w7XG4iLCJsZXQgJGN0cmw7XG5cbmNsYXNzIEZvcm1Db250cm9sQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBsYW1lLCBidXQgbmVjZXNzYXJ5IGR1ZSB0byB0aGUgd2F5IHR3VXBsb2FkJ3MgY2FsbGJhY2tzIHdvcmtcbiAgICAvLyBCZWNhdXNlIHRoZXkgdXNlICc9Jywgbm90ICcmJywgd2UgbG9zZSByZWZlcmVuY2UgdG8gdGhpcyBjb250cm9sbGVyLlxuICAgICRjdHJsID0gdGhpcztcbiAgfVxuXG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy4kbmdNb2RlbCA9IHRoaXMuJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIHRoaXMuYWRkVmFsaWRhdG9ycygpO1xuXG4gICAgaWYgKCF0aGlzLnVwbG9hZE9wdGlvbnMpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZSgpIHtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuXG4gICAgLy8gUGFzcyBpbnRlcm5hbCB2YWx1ZSB0aHJvdWdoIG91ciB2YWxpZGF0b3JzXG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMuaW50ZXJuYWxNb2RlbCk7XG4gIH1cblxuICBmb2N1cygpIHtcbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9XG5cbiAgYmx1cigpIHtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIG9uQXN5bmNVcGxvYWRTdWNjZXNzKGZpbGUsIHJlc3BvbnNlKSB7XG4gICAgaWYgKCRjdHJsLm9uQXN5bmNTdWNjZXNzKSB7XG4gICAgICAkY3RybC5vbkFzeW5jU3VjY2Vzcyh7IHJlc3BvbnNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBvbkFzeW5jVXBsb2FkRmFpbHVyZShyZXNwb25zZSkge1xuICAgIGlmICgkY3RybC5vbkFzeW5jRmFpbHVyZSkge1xuICAgICAgJGN0cmwub25Bc3luY0ZhaWx1cmUoeyByZXNwb25zZSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogYXV0b2NvbXBsZXRlIGhpZGVzIG91ciBmb3JtIGhlbHAgc28gd2UgbmVlZCB0byBkaXNhYmxlIGl0IHdoZW4gaGVscCB0ZXh0XG4gICAqIGlzIHByZXNlbnQuIENocm9tZSBpZ25vcmVzIGF1dG9jb21wbGV0ZT1vZmYsIHRoZSBvbmx5IHdheSB0byBkaXNhYmxlIGl0IGlzXG4gICAqIHRvIHByb3ZpZGUgYW4gJ2ludmFsaWQnIHZhbHVlLCBmb3Igd2hpY2ggJ2Rpc2FibGVkJyBzZXJ2ZXMuXG4gICAqL1xuICBnZXRBdXRvY29tcGxldGVTdGF0dXMoKSB7XG4gICAgcmV0dXJuICh0aGlzLmhlbHBPcHRpb25zICYmIHRoaXMuaGVscE9wdGlvbnMubWVzc2FnZSkgPyAnZGlzYWJsZWQnIDogJ29uJztcbiAgfVxuXG4gIGFkZFZhbGlkYXRvcnMoKSB7XG4gICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRuZ01vZGVsO1xuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdGhpcy5uZ1JlcXVpcmVkO1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5taW5sZW5ndGggPSAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ3RleHQnIHx8ICF0aGlzLm5nTWlubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPj0gdGhpcy5uZ01pbmxlbmd0aDtcbiAgICB9O1xuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWF4bGVuZ3RoID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICAgIGlmICh0aGlzLnR5cGUgIT09ICd0ZXh0JyB8fCAhdGhpcy5uZ01heGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhdmFsdWUgfHwgdmFsdWUubGVuZ3RoIDw9IHRoaXMubmdNYXhsZW5ndGg7XG4gICAgfTtcblxuICAgIC8vIE1pbiBhbmQgbWF4IGRvIG5vdCB3b3JrIG9uIGN1c3RvbSBlbGVtZW50cywgYWRkIG1hbnVhbCB2YWxpZGF0b3JzXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWluID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5uZ01pbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAmJiB0eXBlb2YgdGhpcy5uZ01pbiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IHRoaXMubmdNaW47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnZGF0ZSdcbiAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiB0eXBlb2YgdGhpcy5uZ01pbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IHRoaXMubmdNaW47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnZGF0ZSdcbiAgICAgICAgJiYgdmFsdWUgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAgICYmIHRoaXMubmdNaW4gaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA+PSB0aGlzLm5nTWluO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1heCA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgICBpZiAodHlwZW9mIHRoaXMubmdNYXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcidcbiAgICAgICAgJiYgdHlwZW9mIHRoaXMubmdNYXggPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8PSB0aGlzLm5nTWF4O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RhdGUnXG4gICAgICAgICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgJiYgdHlwZW9mIHRoaXMubmdNYXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8PSB0aGlzLm5nTWF4O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RhdGUnXG4gICAgICAgICYmIHZhbHVlIGluc3RhbmNlb2YgRGF0ZVxuICAgICAgICAmJiB0aGlzLm5nTWF4IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPD0gdGhpcy5uZ01heDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKChtb2RlbFZhbHVlKSA9PiB7XG4gICAgICB0aGlzLmludGVybmFsTW9kZWwgPSBtb2RlbFZhbHVlO1xuICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cblxuRm9ybUNvbnRyb2xDb250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IG5nLXN3aXRjaD0kY3RybC50eXBlPiA8ZGl2IG5nLXN3aXRjaC13aGVuPXJhZGlvIGNsYXNzPXJhZGlvIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6ICRjdHJsLm5nRGlzYWJsZWQsICdyYWRpby1sZyc6IG9wdGlvbi5zZWNvbmRhcnl9XFxcIiBuZy1yZXBlYXQ9XFxcIm9wdGlvbiBpbiAkY3RybC5vcHRpb25zXFxcIj4gPGxhYmVsPiA8dHctcmFkaW8gbmFtZT17eyRjdHJsLm5hbWV9fSBuZy12YWx1ZT1vcHRpb24udmFsdWUgbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZShvcHRpb24udmFsdWUpIG5nLWNsaWNrPSRjdHJsLmNoYW5nZShvcHRpb24udmFsdWUpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCk+PC90dy1yYWRpbz4ge3tvcHRpb24ubGFiZWx9fSA8c21hbGwgbmctaWY9b3B0aW9uLnNlY29uZGFyeT57e29wdGlvbi5zZWNvbmRhcnl9fTwvc21hbGw+IDwvbGFiZWw+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPWNoZWNrYm94IGNsYXNzPWNoZWNrYm94IG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6ICRjdHJsLm5nRGlzYWJsZWR9XFxcIj4gPGxhYmVsPiA8dHctY2hlY2tib3ggbmFtZT17eyRjdHJsLm5hbWV9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWNsaWNrPSRjdHJsLmNoYW5nZSgpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCk+PC90dy1jaGVja2JveD4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvbGFiZWw+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPXNlbGVjdD4gPHR3LXNlbGVjdCBuYW1lPXt7JGN0cmwubmFtZX19IG9wdGlvbnM9JGN0cmwub3B0aW9ucyBmaWx0ZXI9XFxcInt7ICRjdHJsLm9wdGlvbnMubGVuZ3RoID4gOSA/ICcgJyA6ICcnIH19XFxcIiBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpPjwvdHctc2VsZWN0PiA8L2Rpdj4gPGRpdiBuZy1zd2l0Y2gtd2hlbj1maWxlPiA8dHctdXBsb2FkIG5hbWU9e3skY3RybC5uYW1lfX0gbGFiZWw9e3skY3RybC5sYWJlbH19IGljb249e3skY3RybC51cGxvYWRJY29ufX0gaGVscC1pbWFnZT17eyRjdHJsLmhlbHBPcHRpb25zLmltYWdlfX0gcGxhY2Vob2xkZXI9e3skY3RybC5wbGFjZWhvbGRlcn19IGFjY2VwdD17eyRjdHJsLnVwbG9hZEFjY2VwdH19IGNvbXBsZXRlLXRleHQ9e3skY3RybC5sYWJlbH19IGJ1dHRvbi10ZXh0PXt7JGN0cmwudXBsb2FkT3B0aW9ucy5idXR0b25UZXh0fX0gY2FuY2VsLXRleHQ9e3skY3RybC51cGxvYWRPcHRpb25zLmNhbmNlbFRleHR9fSBwcm9jZXNzaW5nLXRleHQ9XFxcInt7ICRjdHJsLnVwbG9hZE9wdGlvbnMucHJvY2Vzc2luZ1RleHQgfX1cXFwiIHN1Y2Nlc3MtdGV4dD1cXFwie3sgJGN0cmwudXBsb2FkT3B0aW9ucy5zdWNjZXNzVGV4dCB9fVxcXCIgZmFpbHVyZS10ZXh0PVxcXCJ7eyAkY3RybC51cGxvYWRPcHRpb25zLmZhaWx1cmVUZXh0IH19XFxcIiB2YWxpZGF0aW9uLW1lc3NhZ2VzPSRjdHJsLnVwbG9hZE9wdGlvbnMudmFsaWRhdGlvbk1lc3NhZ2VzIHZpZXctaW1hZ2UtdGV4dD17eyRjdHJsLnVwbG9hZE9wdGlvbnMudmlld0ltYWdlVGV4dH19IHRvby1sYXJnZS1tZXNzYWdlPXt7JGN0cmwudXBsb2FkVG9vTGFyZ2VNZXNzYWdlfX0gbWF4LXNpemU9JGN0cmwubmdNYXggbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIGh0dHAtb3B0aW9ucz0kY3RybC5wZXJzaXN0QXN5bmMgc291cmNlPSRjdHJsLmZpbGVVcGxvYWRTb3VyY2UgY2FtZXJhLW92ZXJsYXk9e3skY3RybC5jYW1lcmFPcHRpb25zLm92ZXJsYXl9fSBjYW1lcmEtZGlyZWN0aW9uPXt7JGN0cmwuY2FtZXJhT3B0aW9ucy5kaXJlY3Rpb259fSBvbi1zdWNjZXNzPSRjdHJsLm9uQXN5bmNVcGxvYWRTdWNjZXNzIG9uLWZhaWx1cmU9JGN0cmwub25Bc3luY1VwbG9hZEZhaWx1cmU+PC90dy11cGxvYWQ+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPWRhdGV8ZGF0ZS10aW1lIG5nLXN3aXRjaC13aGVuLXNlcGFyYXRvcj18PiA8dHctZGF0ZSBuYW1lPXt7JGN0cmwubmFtZX19IGxvY2FsZT17eyRjdHJsLmxvY2FsZX19IG5nLW1pbj0kY3RybC5uZ01pbiBuZy1tYXg9JGN0cmwubmdNYXggbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIG1vZGVsLXR5cGU9c3RyaW5nPjwvdHctZGF0ZT4gPC9kaXY+IDxkaXYgbmctc3dpdGNoLXdoZW49dGVsPiA8dHctdGVsZXBob25lIG5hbWU9XFxcInt7ICRjdHJsLm5hbWUgfX1cXFwiIHBsYWNlaG9sZGVyPVxcXCJ7eyAkY3RybC5wbGFjZWhvbGRlciB9fVxcXCIgbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDMwMCB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIGxvY2FsZT1cXFwie3sgJGN0cmwubG9jYWxlIH19XFxcIiBzZWFyY2gtcGxhY2Vob2xkZXI9XFxcIiBcXFwiPjwvdHctdGVsZXBob25lPiA8L2Rpdj4gPGlucHV0IG5nLXN3aXRjaC13aGVuPW51bWJlciBuYW1lPXt7JGN0cmwubmFtZX19IHR5cGU9bnVtYmVyIHN0ZXA9e3skY3RybC5zdGVwfX0gY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbmctbWluPSRjdHJsLm5nTWluIG5nLW1heD0kY3RybC5uZ01heCBhdXRvY29tcGxldGU9XFxcInt7ICRjdHJsLmdldEF1dG9jb21wbGV0ZVN0YXR1cygpIH19XFxcIi8+IDxpbnB1dCBuZy1zd2l0Y2gtd2hlbj1oaWRkZW4gbmFtZT17eyRjdHJsLm5hbWV9fSB0eXBlPWhpZGRlbiBuZy1tb2RlbD0kY3RybC5uZ01vZGVsIC8+IDxpbnB1dCBuZy1zd2l0Y2gtd2hlbj1wYXNzd29yZCBuYW1lPXt7JGN0cmwubmFtZX19IHR5cGU9cGFzc3dvcmQgY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbmctbWlubGVuZ3RoPSRjdHJsLm5nTWlubGVuZ3RoIG5nLW1heGxlbmd0aD0kY3RybC5uZ01heGxlbmd0aCBhdXRvY29tcGxldGU9XFxcInt7ICRjdHJsLmdldEF1dG9jb21wbGV0ZVN0YXR1cygpIH19XFxcIi8+IDx0ZXh0YXJlYSBuZy1zd2l0Y2gtd2hlbj10ZXh0YXJlYSBuYW1lPXt7JGN0cmwubmFtZX19IGNsYXNzPWZvcm0tY29udHJvbCBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDMwMCB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLXBhdHRlcm49JGN0cmwubmdQYXR0ZXJuIG5nLW1pbmxlbmd0aD0kY3RybC5uZ01pbmxlbmd0aCBuZy1tYXhsZW5ndGg9JGN0cmwubmdNYXhsZW5ndGggbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgYXV0b2NvbXBsZXRlPVxcXCJ7eyAkY3RybC5nZXRBdXRvY29tcGxldGVTdGF0dXMoKSB9fVxcXCI+PC90ZXh0YXJlYT4gPGlucHV0IG5nLXN3aXRjaC1kZWZhdWx0IG5hbWU9e3skY3RybC5uYW1lfX0gdHlwZT10ZXh0IGNsYXNzPWZvcm0tY29udHJvbCBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDMwMCB9XFxcIiBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLXBhdHRlcm49JGN0cmwubmdQYXR0ZXJuIG5nLW1pbmxlbmd0aD0kY3RybC5uZ01pbmxlbmd0aCBuZy1tYXhsZW5ndGg9JGN0cmwubmdNYXhsZW5ndGggbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgdHctdGV4dC1mb3JtYXQ9XFxcInt7ICRjdHJsLnRleHRGb3JtYXQgfX1cXFwiIGF1dG9jb21wbGV0ZT1cXFwie3sgJGN0cmwuZ2V0QXV0b2NvbXBsZXRlU3RhdHVzKCkgfX1cXFwiLz4gPC9kaXY+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vZmllbGQuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9maWVsZC5odG1sJztcblxuY29uc3QgRmllbGQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIG5hbWU6ICdAJyxcbiAgICBtb2RlbDogJz0nLFxuICAgIGluaXRpYWxGaWVsZDogJzxmaWVsZCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgcmVxdWlyZWQ6ICc8JyxcbiAgICB1cGxvYWRPcHRpb25zOiAnPCcsXG4gICAgY2hhbmdlSGFuZGxlcjogJyY/b25DaGFuZ2UnLFxuICAgIGZvY3VzSGFuZGxlcjogJyY/b25Gb2N1cycsXG4gICAgYmx1ckhhbmRsZXI6ICcmP29uQmx1cicsXG4gICAgZXJyb3JNZXNzYWdlOiAnPCcsXG4gICAgd2FybmluZ01lc3NhZ2U6ICc8JyxcbiAgICB2YWxpZGF0aW9uTWVzc2FnZXM6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGaWVsZDtcbiIsImNsYXNzIEZpZWxkQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFJlcXVpcmVtZW50c1NlcnZpY2UpIHtcbiAgICB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UgPSBSZXF1aXJlbWVudHNTZXJ2aWNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuaW5pdGlhbEZpZWxkKSB7XG4gICAgICB0aGlzLmZpZWxkID0gY29weUpTT04odGhpcy5pbml0aWFsRmllbGQpO1xuXG4gICAgICB0aGlzLmNvbnRyb2wgPSB0aGlzLmZpZWxkLmNvbnRyb2wgPyB0aGlzLmZpZWxkLmNvbnRyb2xcbiAgICAgICAgOiB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UuZ2V0Q29udHJvbFR5cGUoY2hhbmdlcy5pbml0aWFsRmllbGQuY3VycmVudFZhbHVlKTtcblxuICAgICAgLy8gVE9ETyB3ZSBzaG91bGQgcHJvYmFibHkgZG8gdGhpcyBhdCBmaWVsZHNldCBsZXZlbCwgc28gdGhlIG1vZGVsIGlzIGF2YWlsYWJsZVxuICAgICAgaWYgKHRoaXMuZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICAgICAgdGhpcy5SZXF1aXJlbWVudHNTZXJ2aWNlLnByZXBWYWx1ZXNBc3luYyh0aGlzLmZpZWxkLCB7fSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWVsZCBpcyByZXF1aXJlZCwgYW5kIG9ubHkgYWxsb3dzIG9uZSB2YWx1ZSwgc2V0IGl0IHRvIHRoYXRcbiAgICAgIGlmICh0aGlzLnJlcXVpcmVkICYmIHRoaXMuZmllbGQuZW51bSAmJiB0aGlzLmZpZWxkLmVudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMubW9kZWwgPSB0aGlzLmZpZWxkLmVudW1bMF07XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpZWxkLmRlZmF1bHQgJiYgIXRoaXMubW9kZWwpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMuZmllbGQuZGVmYXVsdDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzICYmICF0aGlzLmZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcykge1xuICAgICAgICB0aGlzLmZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyA9IHRoaXMudmFsaWRhdGlvbk1lc3NhZ2VzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNIYW5kbGVyKSB7XG4gICAgICB0aGlzLmZvY3VzSGFuZGxlcigpO1xuICAgIH1cbiAgfVxuXG4gIG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5ibHVySGFuZGxlcikge1xuICAgICAgdGhpcy5ibHVySGFuZGxlcigpO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2hhbmdlKG5ld1ZhbHVlKSB7XG4gICAgaWYgKHRoaXMuY2hhbmdlSGFuZGxlcikge1xuICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyKHsgdmFsdWU6IG5ld1ZhbHVlIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5lcnJvck1lc3NhZ2UpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmVycm9yTWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICBvblBlcnNpc3RBc3luY0ZhaWx1cmUocmVzcG9uc2UpIHtcbiAgICAvLyBJbnRlcnJvZ2F0ZSByZXNwb25zZSBhbmQgZXh0cmFjdCBlcnJvciBtZXNzYWdlXG4gICAgaWYgKCF0aGlzLnVwbG9hZE9wdGlvbnMpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChyZXNwb25zZS5kYXRhKSB7XG4gICAgICAvLyBXaGVuIHdlIGRvIGlkIHByZSBldmFsLCB3ZSBnZXQgZXJyb3IgbWVzc2FnZXMgYW5kIHZhbGlkYXRpb25zIGJhY2sgaW5cbiAgICAgIC8vIHRoZSByZXNwb25zZSwgZXh0cmFjdCB0aGVtIGFuZCBwYXNzIGJhY2sgdG8gYmUgc2hvd24gaW4gdGhlIHVwbG9hZC5cbiAgICAgIHRoaXMuZXh0cmFjdEVycm9ycyhyZXNwb25zZS5kYXRhKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLm9yaWdpbmFsRGF0YSkge1xuICAgICAgLy8gZnJvbnRlbmQtY29tbW9uIGhhcyBhbiBpbnRlcmNlcHRvciB0aGF0IHNvbWV0aW1lcyBjaGFuZ2VzIHRoZSByZXNwb25zZVxuICAgICAgLy8gZm9ybWF0LCBtb3ZpbmcgdGhlIHJlc3BvbnNlIGRhdGEgdW5kZXIgYSBuZXcga2V5ICdvcmlnaW5hbERhdGEnXG4gICAgICB0aGlzLmV4dHJhY3RFcnJvcnMocmVzcG9uc2Uub3JpZ2luYWxEYXRhKTtcbiAgICB9XG4gIH1cblxuICBleHRyYWN0RXJyb3JzKGRhdGEpIHtcbiAgICAvLyBOb3RlOiBlcnJvciBkYXRhIGNhbiBtYW5pcHVsYXRlZCBieSBpbnRlcmNlcHRvcnMsIHRoaXMgZW5zdXJlcyB3ZSBzdGlsbCBnZXQgZGF0YSBuZWVkZWRcbiAgICBpZiAoZGF0YS5tZXNzYWdlKSB7XG4gICAgICB0aGlzLnVwbG9hZE9wdGlvbnMuZmFpbHVyZVRleHQgPSBkYXRhLm1lc3NhZ2U7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YS5lcnJvcnMpKSB7XG4gICAgICB0aGlzLnVwbG9hZE9wdGlvbnMudmFsaWRhdGlvbk1lc3NhZ2VzID0gZGF0YS5lcnJvcnMubWFwKGVycm9yID0+IGVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIG9uUGVyc2lzdEFzeW5jU3VjY2VzcyhyZXNwb25zZSkge1xuICAgIGlmICghdGhpcy51cGxvYWRPcHRpb25zKSB7XG4gICAgICB0aGlzLnVwbG9hZE9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBUaGVzZSBhcmUgdG9vIHNwZWNpZmljIHRvIG9uZSB1c2UgY2FzZS5cbiAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucy5zdWNjZXNzVGV4dCA9IHJlc3BvbnNlLmRhdGEubWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgc2l6ZU9mKG9iaikge1xuICAgIHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA6IDA7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaXNGZWVkYmFja0RldGFjaGVkKGNvbnRyb2xUeXBlKSB7XG4gICAgaWYgKGNvbnRyb2xUeXBlID09PSAnZGF0ZSdcbiAgICAgICAgfHwgY29udHJvbFR5cGUgPT09ICdmaWxlJ1xuICAgICAgICB8fCBjb250cm9sVHlwZSA9PT0gJ3JhZGlvJ1xuICAgICAgICB8fCBjb250cm9sVHlwZSA9PT0gJ3RlbCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weUpTT04ob2JqKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG5GaWVsZENvbnRyb2xsZXIuJGluamVjdCA9IFsnVHdSZXF1aXJlbWVudHNTZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHR3LWZpZWxkLXt7ICRjdHJsLm5hbWUgfX1cXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICdoYXMtZXJyb3InOiAkY3RybC5maWVsZC5lcnJvck1lc3NhZ2UgfHwgJGN0cmwuZXJyb3JNZXNzYWdlLFxcbiAgICAnaGFzLXdhcm5pbmcnOiAkY3RybC5maWVsZC53YXJuaW5nTWVzc2FnZSB8fCAkY3RybC53YXJuaW5nTWVzc2FnZSxcXG4gICAgJ2hpZGRlbic6ICRjdHJsLmZpZWxkLmhpZGRlblxcbiAgfVxcXCI+IDxsYWJlbCBjbGFzcz1jb250cm9sLWxhYmVsIG5nLWlmPVxcXCIkY3RybC5jb250cm9sICE9PSAnZmlsZSdcXFwiPiB7eyRjdHJsLmZpZWxkLnRpdGxlfX0gPC9sYWJlbD4gPHR3LWZvcm0tY29udHJvbCBuYW1lPVxcXCJ7eyAkY3RybC5uYW1lIH19XFxcIiBsYWJlbD1cXFwie3sgJGN0cmwuZmllbGQudGl0bGUgfX1cXFwiIHR5cGU9XFxcInt7ICRjdHJsLmNvbnRyb2wgfCBsb3dlcmNhc2UgfX1cXFwiIHBsYWNlaG9sZGVyPVxcXCJ7eyAkY3RybC5maWVsZC5wbGFjZWhvbGRlciB9fVxcXCIgaGVscC1vcHRpb25zPSRjdHJsLmZpZWxkLmhlbHAgbG9jYWxlPVxcXCJ7eyAkY3RybC5sb2NhbGUgfX1cXFwiIHVwbG9hZC1hY2NlcHQ9XFxcInt7ICRjdHJsLmZpZWxkLmFjY2VwdCB9fVxcXCIgdXBsb2FkLWljb249XFxcInt7ICRjdHJsLmZpZWxkLmljb24gfX1cXFwiIHVwbG9hZC10b28tbGFyZ2UtbWVzc2FnZT1cXFwie3sgJGN0cmwuZmllbGQudG9vTGFyZ2VNZXNzYWdlIH19XFxcIiBvcHRpb25zPSRjdHJsLmZpZWxkLnZhbHVlcyB1cGxvYWQtb3B0aW9ucz0kY3RybC51cGxvYWRPcHRpb25zIG5nLW1vZGVsPSRjdHJsLm1vZGVsIG5nLWZvY3VzPSRjdHJsLm9uRm9jdXMoKSBuZy1ibHVyPSRjdHJsLm9uQmx1cigpIG5nLWNoYW5nZT0kY3RybC5vbkNoYW5nZSgkY3RybC5tb2RlbCkgbmctcmVxdWlyZWQ9JGN0cmwucmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwuZmllbGQuZGlzYWJsZWQgdHctbWlubGVuZ3RoPVxcXCIkY3RybC5maWVsZC5taW5sZW5ndGggfHwgJGN0cmwuZmllbGQubWluTGVuZ3RoXFxcIiB0dy1tYXhsZW5ndGg9XFxcIiRjdHJsLmZpZWxkLm1heGxlbmd0aCB8fCAkY3RybC5maWVsZC5tYXhMZW5ndGhcXFwiIG5nLW1pbj0kY3RybC5maWVsZC5taW5pbXVtIG5nLW1heD0kY3RybC5maWVsZC5tYXhpbXVtIG5nLXBhdHRlcm49JGN0cmwuZmllbGQucGF0dGVybiB0ZXh0LWZvcm1hdD0kY3RybC5maWVsZC5kaXNwbGF5Rm9ybWF0IHZhbGlkYXRpb24tYXN5bmM9JGN0cmwuZmllbGQudmFsaWRhdGlvbkFzeW5jIHBlcnNpc3QtYXN5bmM9JGN0cmwuZmllbGQucGVyc2lzdEFzeW5jIGZpbGUtdXBsb2FkLXNvdXJjZT0kY3RybC5maWVsZC5zb3VyY2VUeXBlIGNhbWVyYS1vcHRpb25zPSRjdHJsLmZpZWxkLmNhbWVyYSBvbi1hc3luYy1zdWNjZXNzPSRjdHJsLm9uUGVyc2lzdEFzeW5jU3VjY2VzcyhyZXNwb25zZSkgb24tYXN5bmMtZmFpbHVyZT0kY3RybC5vblBlcnNpc3RBc3luY0ZhaWx1cmUocmVzcG9uc2UpIHR3LXZhbGlkYXRpb24+PC90dy1mb3JtLWNvbnRyb2w+IDxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LWRhbmdlciBlcnJvci1tZXNzYWdlc1xcXCIgbmctaWY9XFxcIiRjdHJsLnNpemVPZigkY3RybC5maWVsZC52YWxpZGF0aW9uTWVzc2FnZXMpID4gMCB8fCAkY3RybC5lcnJvck1lc3NhZ2VcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2FsZXJ0LWRldGFjaCc6ICRjdHJsLmlzRmVlZGJhY2tEZXRhY2hlZCgkY3RybC5jb250cm9sKVxcbiAgICB9XFxcIj4gPGRpdiBuZy1yZXBlYXQ9XFxcIih2YWxpZGF0aW9uVHlwZSwgdmFsaWRhdGlvbk1lc3NhZ2UpIGluICRjdHJsLmZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyB0cmFjayBieSAkaW5kZXhcXFwiIGNsYXNzPVxcXCJlcnJvci17eyB2YWxpZGF0aW9uVHlwZSB8IGxvd2VyY2FzZSB9fVxcXCI+IHt7dmFsaWRhdGlvbk1lc3NhZ2V9fSA8L2Rpdj4gPGRpdiBjbGFzcz1lcnJvci1wcm92aWRlZCBuZy1pZj0kY3RybC5lcnJvck1lc3NhZ2U+IHt7ICRjdHJsLmVycm9yTWVzc2FnZSB9fSA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcXFwiIG5nLWlmPSRjdHJsLndhcm5pbmdNZXNzYWdlIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2FsZXJ0LWRldGFjaCc6ICRjdHJsLmlzRmVlZGJhY2tEZXRhY2hlZCgkY3RybC5jb250cm9sKVxcbiAgICB9XFxcIj4ge3sgJGN0cmwud2FybmluZ01lc3NhZ2UgfX0gPC9kaXY+IDxkaXYgbmctaWY9JGN0cmwuZmllbGQuaGVscCBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZm9jdXNcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2FsZXJ0LWRldGFjaCc6ICRjdHJsLmlzRmVlZGJhY2tEZXRhY2hlZCgkY3RybC5jb250cm9sKVxcbiAgICB9XFxcIj4gPHNwYW4gbmctaWY9JGN0cmwuZmllbGQuaGVscC5tZXNzYWdlPiB7eyAkY3RybC5maWVsZC5oZWxwLm1lc3NhZ2UgfX0gPC9zcGFuPiA8dWwgbmctaWY9JGN0cmwuZmllbGQuaGVscC5saXN0IGNsYXNzPWxpc3QtdW5zdHlsZWQ+IDxsaSBuZy1yZXBlYXQ9XFxcImhlbHBNZXNzYWdlIGluICRjdHJsLmZpZWxkLmhlbHAubGlzdFxcXCI+e3sgaGVscE1lc3NhZ2UgfX08L2xpPiA8L3VsPiA8aW1nIG5nLWlmPVxcXCIkY3RybC5maWVsZC5oZWxwLmltYWdlICYmICRjdHJsLmNvbnRyb2wgIT09ICdmaWxlJ1xcXCIgbmctc3JjPXt7JGN0cmwuZmllbGQuaGVscC5pbWFnZX19IGFsdD1cXFwie3sgJGN0cmwuZmllbGQudGl0bGUgfX1cXFwiIGNsYXNzPVxcXCJ0aHVtYm5haWwgbS15LTJcXFwiLz4gPC9kaXY+IDwvZGl2PiBcIjsiLCJmdW5jdGlvbiBSZXF1aXJlbWVudHNTZXJ2aWNlKCRodHRwKSB7XG4gIHRoaXMucHJlcFJlcXVpcmVtZW50cyA9IChhbHRlcm5hdGl2ZXMpID0+IHtcbiAgICBpZiAoIWFsdGVybmF0aXZlcyB8fCAhYWx0ZXJuYXRpdmVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IHByZXBwZWRBbHRlcm5hdGl2ZXMgPSBjb3B5T2YoYWx0ZXJuYXRpdmVzKTtcblxuICAgIHByZXBwZWRBbHRlcm5hdGl2ZXMuZm9yRWFjaCgoYWx0ZXJuYXRpdmUpID0+IHtcbiAgICAgIGlmIChhbHRlcm5hdGl2ZS5wcmVwYXJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJlcExlZ2FjeUFsdGVybmF0aXZlcyhhbHRlcm5hdGl2ZSk7XG5cbiAgICAgIGFsdGVybmF0aXZlLnByb3BlcnRpZXMgPSB0aGlzLnByZXBGaWVsZHMoYWx0ZXJuYXRpdmUucHJvcGVydGllcyB8fCBhbHRlcm5hdGl2ZS5maWVsZHMpO1xuXG4gICAgICAvLyBJZiB3ZSdyZSBzdGlsbCB0cmVhdGluZyB0eXBlIGFzIGEgc3BlY2lhbCBjYXNlLCBtb3ZlIGl0IHRvIGEgaGlkZGVuIHZhbHVlXG4gICAgICBpZiAoYWx0ZXJuYXRpdmUudHlwZVxuICAgICAgICAgICYmIGFsdGVybmF0aXZlLnR5cGUgIT09ICdvYmplY3QnXG4gICAgICAgICAgJiYgIWFsdGVybmF0aXZlLnR5cGVzKSB7XG4gICAgICAgIGFsdGVybmF0aXZlLnByb3BlcnRpZXMudHlwZSA9IHtcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBlbnVtOiBbYWx0ZXJuYXRpdmUudHlwZV0sXG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgaGlkZGVuOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgYWx0ZXJuYXRpdmUudHlwZSA9ICdvYmplY3QnO1xuICAgICAgfVxuXG4gICAgICBhbHRlcm5hdGl2ZS5wcmVwYXJlZCA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJlcHBlZEFsdGVybmF0aXZlcztcbiAgfTtcblxuICB0aGlzLnByZXBGaWVsZHMgPSAoZmllbGRzLCBtb2RlbCwgdmFsaWRhdGlvbk1lc3NhZ2VzKSA9PiB7XG4gICAgaWYgKCFmaWVsZHMpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICBsZXQgcHJlcGFyZWRGaWVsZHMgPSBjb3B5T2YoZmllbGRzKTtcblxuICAgIHByZXBhcmVkRmllbGRzID0gZmxhdHRlbkZpZWxkc1dpdGhHcm91cHMocHJlcGFyZWRGaWVsZHMpO1xuICAgIHByZXBhcmVkRmllbGRzID0gdHJhbnNmb3JtRmllbGRBcnJheVRvTWFwKHByZXBhcmVkRmllbGRzKTtcbiAgICBwcmVwYXJlZEZpZWxkcyA9IHRyYW5zZm9ybU5lc3RlZEtleXNUb05lc3RlZFNwZWNzKHByZXBhcmVkRmllbGRzKTtcblxuICAgIE9iamVjdC5rZXlzKHByZXBhcmVkRmllbGRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIHByZXBhcmVkRmllbGRzW2tleV0gPSB0aGlzLnByZXBGaWVsZChwcmVwYXJlZEZpZWxkc1trZXldLCBtb2RlbCwgdmFsaWRhdGlvbk1lc3NhZ2VzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcmVwYXJlZEZpZWxkcztcbiAgfTtcblxuICB0aGlzLnByZXBGaWVsZCA9IChmaWVsZCwgbW9kZWwsIHZhbGlkYXRpb25NZXNzYWdlcykgPT4ge1xuICAgIGNvbnN0IHByZXBhcmVkRmllbGQgPSBjb3B5T2YoZmllbGQpO1xuXG4gICAgdGhpcy5wcmVwTGVnYWN5UHJvcHMocHJlcGFyZWRGaWVsZCk7XG4gICAgdGhpcy5wcmVwVHlwZShwcmVwYXJlZEZpZWxkKTtcbiAgICB0aGlzLnByZXBQYXR0ZXJuKHByZXBhcmVkRmllbGQpO1xuICAgIHRoaXMucHJlcFZhbHVlc0FzeW5jKHByZXBhcmVkRmllbGQsIG1vZGVsKTtcbiAgICB0aGlzLnByZXBWYWxpZGF0aW9uTWVzc2FnZXMocHJlcGFyZWRGaWVsZCwgdmFsaWRhdGlvbk1lc3NhZ2VzKTtcbiAgICB0aGlzLnByZXBIZWxwKHByZXBhcmVkRmllbGQpO1xuXG4gICAgcmV0dXJuIHByZXBhcmVkRmllbGQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluIGFuIG9sZGVyIGZvcm1hdCB3ZSBoYWQgYW4gZXh0cmEgZmllbGRHcm91cCBsZXZlbCwgaGVyZSB3ZSBmbGF0dGVuIHRoYXQgb3V0XG4gICAqIFNvIHRoZSBpbm5lciBhcnJheXMgb2YgZmllbGRzIHdpdGhpbiB0aGUgZGlmZmVyZW50IGZpZWxkIGdyb3VwcyBhcmUgZmxhdHRlbmVkXG4gICAqIHRvIGEgc2luZ2xlIGFycmF5LCB3aGljaCBpcyByZXR1cm5lZC5cbiAgICovXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GaWVsZHNXaXRoR3JvdXBzKGZpZWxkcykge1xuICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgbGV0IGZsYXR0ZW5lZEZpZWxkcyA9IFtdO1xuICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBncm91cCB3aXRoIG5lc3RlZCBmaWVsZHMsIGJyZWFrIHRoZW0gb3V0LlxuICAgICAgICBpZiAoZmllbGQuZmllbGRzKSB7XG4gICAgICAgICAgZmxhdHRlbmVkRmllbGRzID0gZmxhdHRlbmVkRmllbGRzLmNvbmNhdChmbGF0dGVuRmllbGRXaXRoR3JvdXAoZmllbGQsIGZpZWxkLmZpZWxkcykpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLmdyb3VwKSB7XG4gICAgICAgICAgZmxhdHRlbmVkRmllbGRzID0gZmxhdHRlbmVkRmllbGRzLmNvbmNhdChmbGF0dGVuRmllbGRXaXRoR3JvdXAoZmllbGQsIGZpZWxkLmdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGl0J3MgYSByZWd1bGFyIGZpZWxkLCBqdXN0IGFkZCBpdC5cbiAgICAgICAgICBmbGF0dGVuZWRGaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZsYXR0ZW5lZEZpZWxkcztcbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GaWVsZFdpdGhHcm91cChmaWVsZCwgc3ViRmllbGRzKSB7XG4gICAgLy8gSWYgZmlyc3QgZmllbGQgZG9lc24ndCBoYXZlIGEgbGFiZWwsIHVzZSB0aGUgb25lIGZyb20gdGhlIGdyb3VwXG4gICAgaWYgKGZpZWxkLm5hbWUgJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLm5hbWUpIHtcbiAgICAgIHN1YkZpZWxkc1swXS5uYW1lID0gZmllbGQubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQud2lkdGggJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLndpZHRoKSB7XG4gICAgICBzdWJGaWVsZHNbMF0ud2lkdGggPSBmaWVsZC53aWR0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3YXMgYSB0b29sdGlwIGF0IGZpZWxkR3JvdXAgbGV2ZWwgbW92ZSBpdCB0byBmaXJzdCBmaWVsZC5cbiAgICBpZiAoZmllbGQudG9vbHRpcCAmJiBzdWJGaWVsZHMubGVuZ3RoICYmICFzdWJGaWVsZHNbMF0uaGVscFRleHQpIHtcbiAgICAgIHN1YkZpZWxkc1swXS5oZWxwVGV4dCA9IGZpZWxkLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLmluZm8gJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLmhlbHBUZXh0KSB7XG4gICAgICBzdWJGaWVsZHNbMF0uaGVscFRleHQgPSBmaWVsZC5pbmZvO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGFyZSB0d28gcGFydHMgb2YgdGhpcyBncm91cCwgcmVuZGVyIHRoZW0gc2lkZSBieSBzaWRlXG4gICAgaWYgKHN1YkZpZWxkcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHN1YkZpZWxkcy5mb3JFYWNoKChuZXN0ZWRGaWVsZCkgPT4ge1xuICAgICAgICBuZXN0ZWRGaWVsZC53aWR0aCA9ICdtZCc7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgdGhyZWUgcGFydHMsIHJlbmRlciB0aGUgZmlyc3QgdHdvIHNpZGUgYnkgc2lkZVxuICAgIGlmIChzdWJGaWVsZHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBzdWJGaWVsZHNbMF0ud2lkdGggPSAnbWQnO1xuICAgICAgc3ViRmllbGRzWzFdLndpZHRoID0gJ21kJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3ViRmllbGRzO1xuICB9XG5cbiAgLypcbiAgICogU29tZSBvbGRlciByZXF1aXJlbWVudHMgcmV0dXJuIGFuIGFycmF5IG9mIGZpZWxkcywgd2hlcmUgaXQgc2hvdWxkIGJlIGEgbWFwXG4gICAqIGZyb20gdGhlIHByb3BlcnR5IG5hbWUgdG8gdGhlIHNwZWMuICBUaGlzIGNvbnZlcnRzIGFycmF5cyB0byBtYXBzLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJhbnNmb3JtRmllbGRBcnJheVRvTWFwKGZpZWxkcykge1xuICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgY29uc3QgZmllbGRNYXAgPSB7fTtcbiAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBmaWVsZC5rZXkgfHwgZmllbGQubmFtZTtcbiAgICAgICAgZGVsZXRlIGZpZWxkLmtleTtcblxuICAgICAgICBmaWVsZE1hcFtrZXldID0gY29weU9mKGZpZWxkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpZWxkTWFwO1xuICAgIH1cbiAgICByZXR1cm4gZmllbGRzO1xuICB9XG5cbiAgLypcbiAgICogU29tZSBvbGRlciBmb3JtYXQgcmV0dXJuIGtleXMgbGlrZSAnYWRkcmVzcy5jaXR5JywgZXhwZWN0aW5nIHRoZSB2YWx1ZSBvZlxuICAgKiBjaXR5IHRvIGJlIG5lc3RlZCBpbnNpZGUgYW4gYWRkcmVzcyBvYmplY3QuICBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBzcGVjIG9mXG4gICAqIHR5cGUgJ29iamVjdCcsIGFuZCBuZXN0cyBzdWNoIGZpZWxkcyBpbnNpZGUgb2YgaXQuICBXaGVuIHdlIHJlbmRlciB3ZSBwYXNzXG4gICAqIHRoaXMgb2JqZWN0IHNwZWMgdG8gYSBuZXN0ZWQgZmllbGRzZXQuXG4gICAqL1xuICBmdW5jdGlvbiB0cmFuc2Zvcm1OZXN0ZWRLZXlzVG9OZXN0ZWRTcGVjcyhmaWVsZE1hcCkge1xuICAgIGlmIChmaWVsZE1hcCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGluZyBhIG1hcCBvZiBmaWVsZHMsIG5vdCBhbiBhcnJheScpO1xuICAgIH1cblxuICAgIGNvbnN0IG5lc3RlZEZpZWxkcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGZpZWxkTWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAvLyBJZiB0aGUga2V5IGNvbnRhaW5zIGEgcGVyaW9kIHdlIG5lZWQgdG8gbmVzdCB0aGUgZmllbGRzIGluIGFub3RoZXIgb2JqZWN0XG4gICAgICAgIGNvbnN0IHBhdGhTZWN0aW9ucyA9IGtleS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBuZXN0ZWRLZXkgPSBwYXRoU2VjdGlvbnNbMF07XG5cbiAgICAgICAgLy8gSWYgdGhpcyBzdWIgb2JqZWN0IGRvZXNuJ3QgZXhpc3QgeWV0LCBjcmVhdGUgaXRcbiAgICAgICAgaWYgKCFuZXN0ZWRGaWVsZHNbbmVzdGVkS2V5XSkge1xuICAgICAgICAgIG5lc3RlZEZpZWxkc1tuZXN0ZWRLZXldID0ge1xuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbmVzdGVkRmllbGRzW25lc3RlZEtleV0ucHJvcGVydGllc1twYXRoU2VjdGlvbnNbMV1dID0gZmllbGRNYXBba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5lc3RlZEZpZWxkc1trZXldID0gZmllbGRNYXBba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmVzdGVkRmllbGRzO1xuICB9XG5cbiAgdGhpcy5wcmVwVHlwZSA9IChmaWVsZCkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBmaWVsZC50eXBlICYmIGZpZWxkLnR5cGUudG9Mb3dlckNhc2UgJiYgZmllbGQudHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgZmllbGQudHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGZpZWxkLmZvcm1hdCA9ICdkYXRlJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuY29udHJvbCA9ICdwYXNzd29yZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ2Jvb2xlYW4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGlmICghZmllbGQuY29udHJvbCkge1xuICAgICAgICAgIGZpZWxkLmNvbnRyb2wgPSAnc2VsZWN0JztcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgZmllbGQudHlwZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIGZpZWxkLmNvbnRyb2wgPSAncmFkaW8nO1xuICAgICAgICBkZWxldGUgZmllbGQudHlwZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1cGxvYWQnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGZpZWxkLmZvcm1hdCA9ICdiYXNlNjR1cmwnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RlbCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuZm9ybWF0ID0gJ3Bob25lJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuY29udHJvbCA9ICd0ZXh0YXJlYSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICB9XG5cbiAgICBpZiAoIWZpZWxkLmNvbnRyb2wgJiYgZmllbGQudHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGZpZWxkLmNvbnRyb2wgPSB0aGlzLmdldENvbnRyb2xUeXBlKGZpZWxkKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwTGVnYWN5QWx0ZXJuYXRpdmVzID0gKGFsdGVybmF0aXZlKSA9PiB7XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS50aXRsZSAmJiBhbHRlcm5hdGl2ZS5sYWJlbCkge1xuICAgICAgYWx0ZXJuYXRpdmUudGl0bGUgPSBhbHRlcm5hdGl2ZS5sYWJlbDtcbiAgICB9XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS50aXRsZSkge1xuICAgICAgYWx0ZXJuYXRpdmUudGl0bGUgPSBnZXROYW1lRnJvbVR5cGUoYWx0ZXJuYXRpdmUudHlwZSk7XG4gICAgfVxuICAgIGlmICghYWx0ZXJuYXRpdmUudHlwZSAmJiBhbHRlcm5hdGl2ZS5uYW1lKSB7XG4gICAgICBhbHRlcm5hdGl2ZS50eXBlID0gYWx0ZXJuYXRpdmUubmFtZTtcbiAgICB9XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS5kZXNjcmlwdGlvbiAmJiBhbHRlcm5hdGl2ZS50b29sdGlwKSB7XG4gICAgICBhbHRlcm5hdGl2ZS5kZXNjcmlwdGlvbiA9IGFsdGVybmF0aXZlLnRvb2x0aXA7XG4gICAgfVxuICAgIGlmIChhbHRlcm5hdGl2ZS5maWVsZEdyb3VwcyAmJiAhYWx0ZXJuYXRpdmUuZmllbGRzKSB7XG4gICAgICBhbHRlcm5hdGl2ZS5maWVsZHMgPSBmbGF0dGVuRmllbGRzV2l0aEdyb3VwcyhhbHRlcm5hdGl2ZS5maWVsZEdyb3Vwcyk7XG4gICAgICBkZWxldGUgYWx0ZXJuYXRpdmUuZmllbGRHcm91cHM7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucHJlcExlZ2FjeVByb3BzID0gKGZpZWxkKSA9PiB7XG4gICAgaWYgKGZpZWxkLm5hbWUgJiYgIWZpZWxkLnRpdGxlKSB7XG4gICAgICBmaWVsZC50aXRsZSA9IGZpZWxkLm5hbWU7XG4gICAgICBkZWxldGUgZmllbGQubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsaWRhdGlvblJlZ2V4cCkge1xuICAgICAgZmllbGQucGF0dGVybiA9IGZpZWxkLnZhbGlkYXRpb25SZWdleHA7XG4gICAgICBkZWxldGUgZmllbGQudmFsaWRhdGlvblJlZ2V4cDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQubWluKSB7XG4gICAgICBmaWVsZC5taW5pbXVtID0gZmllbGQubWluO1xuICAgICAgZGVsZXRlIGZpZWxkLm1pbjtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQubWF4KSB7XG4gICAgICBmaWVsZC5tYXhpbXVtID0gZmllbGQubWF4O1xuICAgICAgZGVsZXRlIGZpZWxkLm1heDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQuZXhhbXBsZSAmJiAhZmllbGQucGxhY2Vob2xkZXIpIHtcbiAgICAgIGZpZWxkLnBsYWNlaG9sZGVyID0gZmllbGQuZXhhbXBsZTtcbiAgICAgIGRlbGV0ZSBmaWVsZC5leGFtcGxlO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC50b29sdGlwICYmICFmaWVsZC5oZWxwVGV4dCkge1xuICAgICAgZmllbGQuaGVscFRleHQgPSBmaWVsZC50b29sdGlwO1xuICAgICAgZGVsZXRlIGZpZWxkLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlc0FsbG93ZWQgJiYgIWZpZWxkLnZhbHVlcykge1xuICAgICAgZmllbGQudmFsdWVzID0gZmllbGQudmFsdWVzQWxsb3dlZDtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWx1ZXNBbGxvd2VkO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC52YWx1ZXMgJiYgZmllbGQudmFsdWVzLm1hcCkge1xuICAgICAgZmllbGQudmFsdWVzID0gdGhpcy5wcmVwTGVnYWN5VmFsdWVzKGZpZWxkLnZhbHVlcyk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlICYmICFmaWVsZC5kZWZhdWx0KSB7XG4gICAgICBmaWVsZC5kZWZhdWx0ID0gZmllbGQudmFsdWU7XG4gICAgICBkZWxldGUgZmllbGQudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlcykge1xuICAgICAgLy8gSW4gc29tZSBsZWdhY3kgYXJyYXlzIHRoZSBmaXJzdCB2YWx1ZSBpcyBhIHBsYWNlaG9sZGVyLCBleHRyYWN0IGl0LlxuICAgICAgaWYgKGZpZWxkLnZhbHVlc1xuICAgICAgICAmJiBmaWVsZC52YWx1ZXMubGVuZ3RoXG4gICAgICAgICYmIGZpZWxkLnZhbHVlc1swXVxuICAgICAgICAmJiAhZmllbGQudmFsdWVzWzBdLnZhbHVlXG4gICAgICAgICYmIGZpZWxkLnZhbHVlc1swXS5sYWJlbFxuICAgICAgICAmJiAhZmllbGQucGxhY2Vob2xkZXIpIHtcbiAgICAgICAgZmllbGQucGxhY2Vob2xkZXIgPSBmaWVsZC52YWx1ZXNbMF0ubGFiZWw7XG4gICAgICAgIGZpZWxkLnZhbHVlcyA9IGZpZWxkLnZhbHVlcy5zbGljZSgxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwTGVnYWN5VmFsdWVzID0gdmFsdWVzID0+IHZhbHVlcy5tYXAocHJlcExlZ2FjeVZhbHVlKTtcblxuICBmdW5jdGlvbiBwcmVwTGVnYWN5VmFsdWUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlLmxhYmVsICYmIHZhbHVlLnRpdGxlKSB7XG4gICAgICB2YWx1ZS5sYWJlbCA9IHZhbHVlLnRpdGxlO1xuICAgICAgZGVsZXRlIHZhbHVlLnRpdGxlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlLmxhYmVsICYmIHZhbHVlLm5hbWUpIHtcbiAgICAgIHZhbHVlLmxhYmVsID0gdmFsdWUubmFtZTtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5uYW1lO1xuICAgIH1cblxuICAgIGlmICghdmFsdWUudmFsdWUgJiYgdmFsdWUuY29kZSkge1xuICAgICAgdmFsdWUudmFsdWUgPSB2YWx1ZS5jb2RlO1xuICAgICAgZGVsZXRlIHZhbHVlLmNvZGU7XG4gICAgfVxuICAgIGlmICghdmFsdWUudmFsdWUgJiYgdmFsdWUua2V5KSB7XG4gICAgICB2YWx1ZS52YWx1ZSA9IHZhbHVlLmtleTtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5rZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdGhpcy5wcmVwUGF0dGVybiA9IChmaWVsZCkgPT4ge1xuICAgIGlmIChmaWVsZC5wYXR0ZXJuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBSZWdFeHAoZmllbGQucGF0dGVybik7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ0FQSSByZWdleHAgaXMgaW52YWxpZCcpO1xuICAgICAgICBkZWxldGUgZmllbGQucGF0dGVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGZpZWxkLnBhdHRlcm47XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucHJlcFZhbHVlc0FzeW5jID0gKGZpZWxkLCBtb2RlbCkgPT4ge1xuICAgIGlmICghZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcG9zdERhdGEgPSB7fTtcbiAgICBpZiAoZmllbGQudmFsdWVzQXN5bmMucGFyYW1zXG4gICAgICAmJiBmaWVsZC52YWx1ZXNBc3luYy5wYXJhbXMubGVuZ3RoKSB7XG4gICAgICBwb3N0RGF0YSA9IHRoaXMuZ2V0UGFyYW1WYWx1ZXNGcm9tTW9kZWwobW9kZWwsIGZpZWxkLnZhbHVlc0FzeW5jLnBhcmFtcyk7XG4gICAgfVxuXG4gICAgLy8gUmV0cnkgb25jZSBvbiBmYWlsdXJlXG4gICAgdGhpcy5mZXRjaFZhbHVlc0FzeW5jKGZpZWxkLCBwb3N0RGF0YSlcbiAgICAgIC5jYXRjaCgoKSA9PiB0aGlzLmZldGNoVmFsdWVzQXN5bmMoZmllbGQsIHBvc3REYXRhKSk7XG4gIH07XG5cbiAgdGhpcy5mZXRjaFZhbHVlc0FzeW5jID0gKGZpZWxkLCBwb3N0RGF0YSkgPT4gJGh0dHAoe1xuICAgIG1ldGhvZDogZmllbGQudmFsdWVzQXN5bmMubWV0aG9kIHx8ICdHRVQnLFxuICAgIHVybDogZmllbGQudmFsdWVzQXN5bmMudXJsLFxuICAgIGRhdGE6IHBvc3REYXRhIHx8IHt9XG4gIH0pLnRoZW4oXG4gICAgKHJlc3BvbnNlKSA9PiB7IGZpZWxkLnZhbHVlcyA9IHRoaXMucHJlcExlZ2FjeVZhbHVlcyhyZXNwb25zZS5kYXRhKTsgfVxuICApO1xuXG4gIHRoaXMuZ2V0UGFyYW1WYWx1ZXNGcm9tTW9kZWwgPSAobW9kZWwsIHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICBwYXJhbXMuZm9yRWFjaCgocGFyYW0pID0+IHtcbiAgICAgIGlmIChtb2RlbFtwYXJhbS5rZXldKSB7XG4gICAgICAgIGRhdGFbcGFyYW0ucGFyYW1ldGVyTmFtZV0gPSBtb2RlbFtwYXJhbS5rZXldO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbS5yZXF1aXJlZCkge1xuICAgICAgICAvLyBUT0RPIFByb2JsZW0sIHBhcmFtZXRlciBpcyByZXF1aXJlZCwgYnV0IGRhdGEgaXMgbWlzc2luZy5cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICB0aGlzLnByZXBWYWxpZGF0aW9uTWVzc2FnZXMgPSAoZmllbGQpID0+IHtcbiAgICBpZiAoZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzICYmIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5taW5pbXVtKSB7XG4gICAgICBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWluID0gZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1pbmltdW07XG4gICAgICBkZWxldGUgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1pbmltdW07XG4gICAgfVxuICAgIGlmIChmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMgJiYgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1heGltdW0pIHtcbiAgICAgIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXggPSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4aW11bTtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4aW11bTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwSGVscCA9IChmaWVsZCkgPT4ge1xuICAgIGlmICghZmllbGQuaGVscFxuICAgICAgJiYgKGZpZWxkLmhlbHBUZXh0IHx8IGZpZWxkLmhlbHBJbWFnZSB8fCBmaWVsZC5oZWxwTGlzdCB8fCBmaWVsZC51cGxvYWRQbGFjZWhvbGRlckltYWdlKSkge1xuICAgICAgZmllbGQuaGVscCA9IHt9O1xuICAgIH1cbiAgICBpZiAoZmllbGQuaGVscFRleHQpIHtcbiAgICAgIGZpZWxkLmhlbHAubWVzc2FnZSA9IGZpZWxkLmhlbHBUZXh0O1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBUZXh0O1xuICAgIH1cbiAgICBpZiAoZmllbGQuaGVscEltYWdlKSB7XG4gICAgICBmaWVsZC5oZWxwLmltYWdlID0gZmllbGQuaGVscEltYWdlO1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBJbWFnZTtcbiAgICB9XG4gICAgLy8gaGVscEltYWdlIGRvZXMgbm90IGhhdmUgc2FtZSBsaW5lYWdlIHBsYWNlaG9sZGVyIGltYWdlXG4gICAgLy8gMiBmaWVsZHMgY2FuIG92ZXJ3cml0ZSBlYWNoIG90aGVyIHNhZmVseSAob25seSBvbmUgd2lsbCBiZSBwcmVzZW50IGF0IGEgdGltZSlcbiAgICBpZiAoZmllbGQudXBsb2FkUGxhY2Vob2xkZXJJbWFnZSkge1xuICAgICAgZmllbGQuaGVscC5pbWFnZSA9IGZpZWxkLnVwbG9hZFBsYWNlaG9sZGVySW1hZ2U7XG4gICAgICBkZWxldGUgZmllbGQudXBsb2FkUGxhY2Vob2xkZXJJbWFnZTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmxpc3QpIHtcbiAgICAgIGZpZWxkLmhlbHAubGlzdCA9IGZpZWxkLmhlbHBMaXN0O1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBMaXN0O1xuICAgIH1cbiAgfTtcblxuICB0aGlzLmdldFJlcXVpcmVkRmllbGRzID0gZ2V0UmVxdWlyZWRGaWVsZHM7XG4gIHRoaXMuZ2V0Q29udHJvbFR5cGUgPSBnZXRDb250cm9sVHlwZTtcbn1cblxuLyoqXG4gKiBPbGRlciBzdHlsZSBmb3JtYXQgaGFkIHJlcXVpcmVkIGFzIGEgcHJvcGVydHkgb2YgZmllbGRzLCBpbiBKU09OIHNjaGVtYSBpdFxuICogc2hvdWxkIGJlIGEgc2VwYXJhdGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXNcbiAqL1xuZnVuY3Rpb24gZ2V0UmVxdWlyZWRGaWVsZHMoZmllbGRzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGZpZWxkcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGZpZWxkIG1hcCcpO1xuICB9XG4gIC8vIFJldHVybiBhcnJheSBvZiBrZXlzIHRoYXQgaGF2ZSByZXF1aXJlZCBzZXRcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGZpZWxkcykuZmlsdGVyKHByb3BlcnR5ID0+IGZpZWxkc1twcm9wZXJ0eV0ucmVxdWlyZWQpO1xufVxuXG5mdW5jdGlvbiBnZXRDb250cm9sVHlwZShmaWVsZCkge1xuICBpZiAoZmllbGQuY29udHJvbCkge1xuICAgIHJldHVybiBmaWVsZC5jb250cm9sLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgaWYgKGZpZWxkLmhpZGRlbikge1xuICAgIHJldHVybiAnaGlkZGVuJztcbiAgfVxuICBpZiAoZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICByZXR1cm4gJ3NlbGVjdCc7XG4gIH1cbiAgaWYgKGZpZWxkLnZhbHVlcyAmJiBmaWVsZC52YWx1ZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGdldFNlbGVjdGlvblR5cGUoZmllbGQpO1xuICB9XG5cbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBnZXRDb250cm9sRm9yU3RyaW5nRm9ybWF0KGZpZWxkLmZvcm1hdCk7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiAnY2hlY2tib3gnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ3RleHQnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbnRyb2xGb3JTdHJpbmdGb3JtYXQoZm9ybWF0KSB7XG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgICByZXR1cm4gJ2RhdGUnO1xuICAgIGNhc2UgJ2Jhc2U2NHVybCc6XG4gICAgICByZXR1cm4gJ2ZpbGUnO1xuICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgIHJldHVybiAncGFzc3dvcmQnO1xuICAgIGNhc2UgJ3VyaSc6XG4gICAgICByZXR1cm4gJ3RleHQnOyAvLyAndXJsJzsgLSBub3QgaW1wbGVtZW50ZWRcbiAgICBjYXNlICdlbWFpbCc6XG4gICAgICByZXR1cm4gJ3RleHQnOyAvLyAnZW1haWwnOyAtIG5vdCBpbXBsZW1lbnRlZFxuICAgIGNhc2UgJ3Bob25lJzpcbiAgICAgIHJldHVybiAndGVsJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICd0ZXh0JztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25UeXBlKGZpZWxkKSB7XG4gIGlmIChmaWVsZC5jb250cm9sKSB7XG4gICAgcmV0dXJuIGZpZWxkLmNvbnRyb2w7XG4gIH1cblxuICBpZiAoZmllbGQudHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gJ3NlbGVjdCc7XG4gIH1cblxuICBpZiAoZmllbGQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIHJldHVybiAncmFkaW8nO1xuICB9XG5cbiAgY29uc3QgdmFsdWVzID0gZmllbGQuZW51bSB8fCBmaWVsZC52YWx1ZXM7XG4gIGlmICh2YWx1ZXMpIHtcbiAgICByZXR1cm4gdmFsdWVzLmxlbmd0aCA+IDMgPyAnc2VsZWN0JyA6ICdyYWRpbyc7XG4gIH1cbiAgcmV0dXJuICdzZWxlY3QnO1xufVxuXG5mdW5jdGlvbiBjb3B5T2Yob2JqKSB7XG4gIC8vIE9iamVjdC5hc3NpZ24gaXMgbmljZXIsIGJ1dCBsYWNrcyBpZSBzdXBwb3J0XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG4vKipcbiAqIFNvbWUgb2xkZXIgcmVxdWlybWVudHMgZm9ybWF0cyBkbyBub3QgaW5jbHVkZSBhIGxhYmVsIGZvciBhbHRlcm5hdGl2ZXNcbiAqL1xuZnVuY3Rpb24gZ2V0TmFtZUZyb21UeXBlKHRhYlR5cGUpIHtcbiAgaWYgKHRhYlR5cGUgJiYgdGFiVHlwZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgdGFiTmFtZVdpdGhTcGFjZXMgPSB0YWJUeXBlLnRvTG93ZXJDYXNlKCkuc3BsaXQoJ18nKS5qb2luKCcgJyk7IC8vIFN0cmluZy5yZXBsYWNlIG1ldGhvZCBvbmx5IHJlcGxhY2VzIGZpcnN0IGluc3RhbmNlXG4gICAgcmV0dXJuIHRhYk5hbWVXaXRoU3BhY2VzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGFiTmFtZVdpdGhTcGFjZXMuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5cblJlcXVpcmVtZW50c1NlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnXTtcblxuZXhwb3J0IGRlZmF1bHQgUmVxdWlyZW1lbnRzU2VydmljZTtcbiIsImltcG9ydCBWYWxpZGF0aW9uQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2wtdmFsaWRhdGlvbi5jb250cm9sbGVyLmpzJztcblxuZnVuY3Rpb24gVHdWYWxpZGF0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZToge1xuICAgICAgJG5nTW9kZWw6ICduZ01vZGVsJyxcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IFZhbGlkYXRpb25Db250cm9sbGVyXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFR3VmFsaWRhdGlvbjtcbiIsIlxuY2xhc3MgVmFsaWRhdGlvbkNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgY29uc3QgZm9ybUdyb3VwID0gVHdEb21TZXJ2aWNlLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnZhbGlkJywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgdmFsaWRhdGlvbiB0b29sdGlwc1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLnZhbGlkYXRpb24gPSAoKSA9PiB7XG4gICAgICAvLyBFdmFsdWF0ZSBhZnRlciBuZ01vZGVsIHVwZGF0ZXMsIHdlIGFyZSBzdGlsbCBpbiB2YWxpZGF0aW9uIGNoYWluXG4gICAgICAkc2NvcGUuJGV2YWxBc3luYygoKSA9PiB7XG4gICAgICAgIGNoZWNrTW9kZWxBbmRVcGRhdGUoJG5nTW9kZWwsIGZvcm1Hcm91cCwgZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBUaGUgZmlyc3QgdGltZSB3ZSBibHVyLCBtb2RlbCBpcyBzdGlsbCBwcmlzdGluZSB3aGVuIHZhbGlkYXRpb24gb2NjdXJzLCBzbyBwZXJmb3JtIGFnYWluLlxuICAgIGNvbnN0IG9uQmx1ciA9ICgpID0+IHtcbiAgICAgIC8vIEN1c3RvbSBlbGVtZW50cyBtdXN0IHRyaWdnZXIgYmx1ciBtYW51YWxseSBmb3IgY29ycmVjdCBiZWhhdmlvdXJcbiAgICAgICRzY29wZS4kZXZhbEFzeW5jKCgpID0+IHtcbiAgICAgICAgY2hlY2tNb2RlbEFuZFVwZGF0ZSgkbmdNb2RlbCwgZm9ybUdyb3VwLCBlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrTW9kZWxBbmRVcGRhdGUobmdNb2RlbCwgZm9ybUdyb3VwLCBlbGVtZW50KSB7XG4gIGlmIChuZ01vZGVsLiR2YWxpZCkge1xuICAgIGlmIChmb3JtR3JvdXApIHtcbiAgICAgIGZvcm1Hcm91cC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgICB9XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChuZ01vZGVsLiR0b3VjaGVkICYmIG5nTW9kZWwuJGRpcnR5KSB7XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgICAvLyBTZXQgYXJpYSBpbnZhbGlkIGZvciBzY3JlZW4gcmVhZGVyc1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWludmFsaWQnLCAndHJ1ZScpO1xuICB9XG59XG5cblZhbGlkYXRpb25Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckZWxlbWVudCcsICdUd0RvbVNlcnZpY2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdGlvbkNvbnRyb2xsZXI7XG4iLCJpbXBvcnQgeyBpc09iamVjdCwgaXNBcnJheSB9IGZyb20gJy4uL3R5cGUtdmFsaWRhdG9ycyc7XG5cbmltcG9ydCB7XG4gIGdldFN0cmluZ1ZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0TnVtYmVyVmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRJbnRlZ2VyVmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRBcnJheVZhbGlkYXRpb25GYWlsdXJlc1xufSBmcm9tICcuLi92YWxpZGF0aW9uLWZhaWx1cmVzJztcblxuZnVuY3Rpb24gaXNWYWxpZFN0cmluZ1NjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIHJldHVybiAhZ2V0U3RyaW5nVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWROdW1iZXJTY2hlbWEodmFsdWUsIHNjaGVtYSkge1xuICByZXR1cm4gIWdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hKS5sZW5ndGg7XG59XG5mdW5jdGlvbiBpc1ZhbGlkSW50ZWdlclNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIHJldHVybiAhZ2V0SW50ZWdlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hKS5sZW5ndGg7XG59XG5mdW5jdGlvbiBpc1ZhbGlkQm9vbGVhblNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIHJldHVybiAhZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hKS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRPYmplY3RTY2hlbWEodmFsdWUsIHNjaGVtYSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBzY2hlbWEudHlwZSAhPT0gJ29iamVjdCcgfHwgIWlzT2JqZWN0KHNjaGVtYS5wcm9wZXJ0aWVzKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhzY2hlbWEucHJvcGVydGllcylcbiAgICAubWFwKHByb3BlcnR5TmFtZSA9PiBpc09iamVjdFByb3BlcnR5VmFsaWQoXG4gICAgICB2YWx1ZVtwcm9wZXJ0eU5hbWVdLFxuICAgICAgc2NoZW1hLnByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSxcbiAgICAgIHNjaGVtYS5yZXF1aXJlZCAmJiBzY2hlbWEucmVxdWlyZWQuaW5kZXhPZihwcm9wZXJ0eU5hbWUpID49IDBcbiAgICApKVxuICAgIC5yZWR1Y2UoKHZhbGlkU29GYXIsIHZhbGlkUHJvcGVydHkpID0+IHZhbGlkU29GYXIgJiYgdmFsaWRQcm9wZXJ0eSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0UHJvcGVydHlWYWxpZChwcm9wZXJ0eVZhbHVlLCBwcm9wZXJ0eVNjaGVtYSwgaXNSZXF1aXJlZCkge1xuICBpZiAodHlwZW9mIHByb3BlcnR5VmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuICFpc1JlcXVpcmVkO1xuICB9XG4gIHJldHVybiBpc1ZhbGlkU2NoZW1hKHByb3BlcnR5VmFsdWUsIHByb3BlcnR5U2NoZW1hKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEFycmF5U2NoZW1hKHZhbHVlLCBzY2hlbWEpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoc2NoZW1hLnR5cGUgIT09ICdhcnJheScgfHwgIWlzT2JqZWN0KHNjaGVtYS5pdGVtcykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoZ2V0QXJyYXlWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlLnJlZHVjZSgodmFsaWRTb0ZhciwgaXRlcikgPT4gaXNWYWxpZFNjaGVtYShpdGVyLCBzY2hlbWEuaXRlbXMpLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE9uZU9mU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoIWlzQXJyYXkoc2NoZW1hLm9uZU9mKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gc2NoZW1hLm9uZU9mLnJlZHVjZSgodmFsaWRTb0ZhciwgaXRlcikgPT4gdmFsaWRTb0ZhciB8fCBpc1ZhbGlkU2NoZW1hKHZhbHVlLCBpdGVyKSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkQWxsT2ZTY2hlbWEodmFsdWUsIHNjaGVtYSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGlmICghaXNBcnJheShzY2hlbWEuYWxsT2YpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBzY2hlbWEuYWxsT2YucmVkdWNlKCh2YWxpZFNvRmFyLCBpdGVyKSA9PiB2YWxpZFNvRmFyICYmIGlzVmFsaWRTY2hlbWEodmFsdWUsIGl0ZXIpLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSBhbnkgdmFsdWUgYWdhaW5zdCBhIGdpdmVuIHNjaGVtYVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS5vbmVPZikge1xuICAgIHJldHVybiBpc1ZhbGlkT25lT2ZTY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gIH1cblxuICBpZiAoc2NoZW1hLmFsbE9mKSB7XG4gICAgcmV0dXJuIGlzVmFsaWRBbGxPZlNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgfVxuXG4gIHN3aXRjaCAoc2NoZW1hLnR5cGUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIGlzVmFsaWRTdHJpbmdTY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIHJldHVybiBpc1ZhbGlkTnVtYmVyU2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgcmV0dXJuIGlzVmFsaWRJbnRlZ2VyU2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIGlzVmFsaWRCb29sZWFuU2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgIHJldHVybiBpc1ZhbGlkQXJyYXlTY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiBpc1ZhbGlkT2JqZWN0U2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IHsgaXNWYWxpZFNjaGVtYSB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4iLCJcbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG5mdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59XG5mdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nO1xufVxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuXG5leHBvcnQge1xuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzSW50ZWdlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNBcnJheVxufTtcbiIsImltcG9ydCB7XG4gIGlzT2JqZWN0LFxuICBpc0FycmF5LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzSW50ZWdlcixcbiAgaXNCb29sZWFuXG59IGZyb20gJy4uL3R5cGUtdmFsaWRhdG9ycyc7XG5cbmltcG9ydCB7XG4gIGlzVmFsaWRSZXF1aXJlZCxcbiAgaXNWYWxpZE1pbkxlbmd0aCxcbiAgaXNWYWxpZE1heExlbmd0aCxcbiAgaXNWYWxpZFBhdHRlcm4sXG4gIGlzVmFsaWRNYXgsXG4gIGlzVmFsaWRNaW4sXG4gIGlzVmFsaWRNaW5JdGVtcyxcbiAgaXNWYWxpZE1heEl0ZW1zXG59IGZyb20gJy4uL3J1bGUtdmFsaWRhdG9ycyc7XG5cbmZ1bmN0aW9uIGdldFZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIHN3aXRjaCAoc2NoZW1hLnR5cGUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIGdldFN0cmluZ1ZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKTtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKTtcbiAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgIHJldHVybiBnZXRJbnRlZ2VyVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuIGdldEJvb2xlYW5WYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCk7XG4gICAgY2FzZSAnYXJyYXknOlxuICAgICAgcmV0dXJuIGdldEFycmF5VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gZ2V0T2JqZWN0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW107XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U3RyaW5nVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpIHtcbiAgaWYgKCFpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gWyd0eXBlJ107XG4gIH1cblxuICBjb25zdCBmYWlsdXJlcyA9IFtdO1xuICBpZiAoIWlzVmFsaWRSZXF1aXJlZCh2YWx1ZSwgaXNSZXF1aXJlZCkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdyZXF1aXJlZCcpO1xuICB9XG4gIGlmICghaXNWYWxpZE1pbkxlbmd0aCh2YWx1ZSwgc2NoZW1hLm1pbkxlbmd0aCkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtaW5MZW5ndGgnKTtcbiAgfVxuICBpZiAoIWlzVmFsaWRNYXhMZW5ndGgodmFsdWUsIHNjaGVtYS5tYXhMZW5ndGgpKSB7XG4gICAgZmFpbHVyZXMucHVzaCgnbWF4TGVuZ3RoJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkUGF0dGVybih2YWx1ZSwgc2NoZW1hLnBhdHRlcm4pKSB7XG4gICAgZmFpbHVyZXMucHVzaCgncGF0dGVybicpO1xuICB9XG4gIGlmICghaXNWYWxpZE1pbih2YWx1ZSwgc2NoZW1hLm1pbikpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtaW4nKTtcbiAgfVxuICBpZiAoIWlzVmFsaWRNYXgodmFsdWUsIHNjaGVtYS5tYXgpKSB7XG4gICAgZmFpbHVyZXMucHVzaCgnbWF4Jyk7XG4gIH1cbiAgcmV0dXJuIGZhaWx1cmVzO1xufVxuXG5mdW5jdGlvbiBnZXROdW1iZXJWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCkge1xuICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGNvbnN0IGZhaWx1cmVzID0gW107XG4gIGlmICghaXNWYWxpZFJlcXVpcmVkKHZhbHVlLCBpc1JlcXVpcmVkKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ3JlcXVpcmVkJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkTWluKHZhbHVlLCBzY2hlbWEubWluKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21pbicpO1xuICB9XG4gIGlmICghaXNWYWxpZE1heCh2YWx1ZSwgc2NoZW1hLm1heCkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtYXgnKTtcbiAgfVxuICByZXR1cm4gZmFpbHVyZXM7XG59XG5cbmZ1bmN0aW9uIGdldEludGVnZXJWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCkge1xuICBpZiAoIWlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gWyd0eXBlJ107XG4gIH1cbiAgcmV0dXJuIGdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIGlmICghaXNCb29sZWFuKHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGNvbnN0IGZhaWx1cmVzID0gW107XG4gIGlmICghaXNWYWxpZFJlcXVpcmVkKHZhbHVlLCBpc1JlcXVpcmVkKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ3JlcXVpcmVkJyk7XG4gIH1cbiAgcmV0dXJuIGZhaWx1cmVzO1xufVxuXG5mdW5jdGlvbiBnZXRBcnJheVZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hKSB7XG4gIGlmICghaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gWyd0eXBlJ107XG4gIH1cblxuICBjb25zdCBmYWlsdXJlcyA9IFtdO1xuICBpZiAoIWlzVmFsaWRNaW5JdGVtcyh2YWx1ZSwgc2NoZW1hLm1pbkl0ZW1zKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21pbkl0ZW1zJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkTWF4SXRlbXModmFsdWUsIHNjaGVtYS5tYXhJdGVtcykpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtYXhJdGVtcycpO1xuICB9XG4gIHJldHVybiBmYWlsdXJlcztcbn1cblxuLyoqXG4gKiBXaGVuIHZhbGlkYXRpbmcgYW4gb2JqZWN0IHdlIG9ubHkgY2hlY2tpbmcgdGhhdCBpdCBpcyBhbiBvYmplY3QgYW5kIHRoYXQgaXRcbiAqIGhhcyB0aGUgcmVxdWlyZWQgcHJvcGVydGllcywgd2UgZG8gbm90IGNoZWNrIGlmIHRoZSBwcm9wZXJ0aWVzIGFyZSB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gZ2V0T2JqZWN0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gWyd0eXBlJ107XG4gIH1cblxuICBpZiAoIWlzQXJyYXkoc2NoZW1hLnJlcXVpcmVkKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGFsbFByZXNlbnQgPSBzY2hlbWEucmVxdWlyZWRcbiAgICAubWFwKHByb3AgPT4gdHlwZW9mIHZhbHVlW3Byb3BdICE9PSAndW5kZWZpbmVkJylcbiAgICAucmVkdWNlKChwcm9wSW5Nb2RlbCwgdmFsaWRTb0ZhcikgPT4gcHJvcEluTW9kZWwgJiYgdmFsaWRTb0ZhciwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGFsbFByZXNlbnQgPyBbXSA6IFsncmVxdWlyZWQnXTtcbn1cblxuZXhwb3J0IHtcbiAgZ2V0VmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRTdHJpbmdWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0SW50ZWdlclZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0QXJyYXlWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldE9iamVjdFZhbGlkYXRpb25GYWlsdXJlc1xufTtcbiIsIlxuZnVuY3Rpb24gZ2V0VmFsaWRNb2RlbFBhcnRzKG1vZGVsLCBzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS5hbGxPZikge1xuICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aEFsbE9mU2NoZW1hKG1vZGVsLCBzY2hlbWEpO1xuICB9XG5cbiAgaWYgKHNjaGVtYS5vbmVPZikge1xuICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aE9uZU9mU2NoZW1hKG1vZGVsLCBzY2hlbWEpO1xuICB9XG5cbiAgaWYgKHNjaGVtYS50eXBlKSB7XG4gICAgc3dpdGNoIChzY2hlbWEudHlwZSkge1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoT2JqZWN0U2NoZW1hKG1vZGVsLCBzY2hlbWEpO1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICByZXR1cm4gY2xlYW5Nb2RlbFdpdGhBcnJheVNjaGVtYShtb2RlbCwgc2NoZW1hKTtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aFN0cmluZ1NjaGVtYShtb2RlbCk7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnaW50ZWdlcic6XG4gICAgICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aE51bWJlclNjaGVtYShtb2RlbCk7XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoQm9vbGVhblNjaGVtYShtb2RlbCk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBpZiAoc2NoZW1hLmVudW0gJiYgc2NoZW1hLmVudW0uaW5kZXhPZihtb2RlbCkgPj0gMCkge1xuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuICAvLyBVbnJlY29nbmlzZWQgc2NoZW1hXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aE9iamVjdFNjaGVtYShtb2RlbCwgc2NoZW1hKSB7XG4gIGNvbnN0IGNsZWFuZWRNb2RlbCA9IHt9O1xuICBPYmplY3Qua2V5cyhzY2hlbWEucHJvcGVydGllcykuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAvLyBJZiB0aGUgcHJvcGVydHkgZXhpc3RzIGluIHRoZSBtb2RlbCwgY2xlYW4gaXQsIGFuZCBhZGQgaXRcbiAgICBpZiAobW9kZWwgJiYgdHlwZW9mIG1vZGVsW3Byb3BlcnR5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gZ2V0VmFsaWRNb2RlbFBhcnRzKG1vZGVsW3Byb3BlcnR5XSwgc2NoZW1hLnByb3BlcnRpZXNbcHJvcGVydHldKTtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBjbGVhbmVkTW9kZWxbcHJvcGVydHldID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNsZWFuZWRNb2RlbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhBcnJheVNjaGVtYShtb2RlbCwgc2NoZW1hKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KG1vZGVsKSkge1xuICAgIHJldHVybiBtb2RlbC5tYXAoY2hpbGRNb2RlbCA9PiBnZXRWYWxpZE1vZGVsUGFydHMoY2hpbGRNb2RlbCwgc2NoZW1hKSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNsZWFuTW9kZWxXaXRoU3RyaW5nU2NoZW1hKG1vZGVsKSB7XG4gIGlmICh0eXBlb2YgbW9kZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aE51bWJlclNjaGVtYShtb2RlbCkge1xuICBpZiAodHlwZW9mIG1vZGVsID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhCb29sZWFuU2NoZW1hKG1vZGVsKSB7XG4gIGlmICh0eXBlb2YgbW9kZWwgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhBbGxPZlNjaGVtYShtb2RlbCwgc2NoZW1hKSB7XG4gIGNvbnN0IGNsZWFuZWRNb2RlbCA9IHt9O1xuICBsZXQgdmFsaWRTdWJzZXRPZk1vZGVsO1xuXG4gIHNjaGVtYS5hbGxPZi5mb3JFYWNoKChuZXN0ZWRTY2hlbWEpID0+IHtcbiAgICB2YWxpZFN1YnNldE9mTW9kZWwgPSBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWwsIG5lc3RlZFNjaGVtYSk7XG5cbiAgICBpZiAodHlwZW9mIHZhbGlkU3Vic2V0T2ZNb2RlbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGFuZ3VsYXIuZXh0ZW5kKGNsZWFuZWRNb2RlbCwgdmFsaWRTdWJzZXRPZk1vZGVsKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xlYW5lZE1vZGVsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aE9uZU9mU2NoZW1hKG1vZGVsLCBzY2hlbWEpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICByZXR1cm4gbW9kZWw7XG59XG5cbmV4cG9ydCB7IGdldFZhbGlkTW9kZWxQYXJ0cyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4iLCJcbmZ1bmN0aW9uIGlzVmFsaWRSZXF1aXJlZCh2YWx1ZSwgaXNSZXF1aXJlZCkge1xuICByZXR1cm4gIWlzUmVxdWlyZWQgfHwgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJztcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1pbkxlbmd0aCh2YWx1ZSwgbWluTGVuZ3RoKSB7XG4gIHJldHVybiB0eXBlb2YgbWluTGVuZ3RoID09PSAndW5kZWZpbmVkJyB8fCAoISF2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1heExlbmd0aCh2YWx1ZSwgbWF4TGVuZ3RoKSB7XG4gIHJldHVybiB0eXBlb2YgbWF4TGVuZ3RoID09PSAndW5kZWZpbmVkJyB8fCAoISF2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPD0gbWF4TGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFBhdHRlcm4odmFsdWUsIHBhdHRlcm4pIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybik7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgISFyZWdleC50ZXN0KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWF4KHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXggPT09ICd1bmRlZmluZWQnIHx8ICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIDw9IG1heCk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNaW4odmFsdWUsIG1pbikge1xuICByZXR1cm4gdHlwZW9mIG1pbiA9PT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgPj0gbWluKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1pbkl0ZW1zKHZhbHVlLCBtaW5JdGVtcykge1xuICByZXR1cm4gIW1pbkl0ZW1zIHx8ICghIXZhbHVlICYmIHZhbHVlLmxlbmd0aCA+PSBtaW5JdGVtcyk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNYXhJdGVtcyh2YWx1ZSwgbWF4SXRlbXMpIHtcbiAgcmV0dXJuICFtYXhJdGVtcyB8fCAoISF2YWx1ZSAmJiB2YWx1ZS5sZW5ndGggPD0gbWF4SXRlbXMpO1xufVxuXG5leHBvcnQge1xuICBpc1ZhbGlkUmVxdWlyZWQsXG4gIGlzVmFsaWRNaW5MZW5ndGgsXG4gIGlzVmFsaWRNYXhMZW5ndGgsXG4gIGlzVmFsaWRQYXR0ZXJuLFxuICBpc1ZhbGlkTWF4LFxuICBpc1ZhbGlkTWluLFxuICBpc1ZhbGlkTWluSXRlbXMsXG4gIGlzVmFsaWRNYXhJdGVtc1xufTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEuYWxsLW9mJywgW10pXG4gIC5jb21wb25lbnQoJ2FsbE9mU2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5hcnJheScsIFtdKVxuICAuY29tcG9uZW50KCdhcnJheVNjaGVtYScsIENvbXBvbmVudCkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi4vLi4vZm9ybXMvZmllbGQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hLmJhc2ljLXR5cGUnLCBbXG4gICAgRmllbGRcbiAgXSlcbiAgLmNvbXBvbmVudCgnYmFzaWNUeXBlU2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5vYmplY3QnLCBbXSlcbiAgLmNvbXBvbmVudCgnb2JqZWN0U2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCBSYWRpbyBmcm9tICcuLi8uLi9mb3Jtcy9yYWRpbyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEub25lLW9mJywgW1xuICAgIFJhZGlvXG4gIF0pXG4gIC5jb21wb25lbnQoJ29uZU9mU2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmltcG9ydCBGb3JtIGZyb20gJy4vZm9ybSc7XG5pbXBvcnQgQWxsT2ZTY2hlbWEgZnJvbSAnLi9hbGwtb2Ytc2NoZW1hJztcbmltcG9ydCBBcnJheVNjaGVtYSBmcm9tICcuL2FycmF5LXNjaGVtYSc7XG5pbXBvcnQgQmFzaWNUeXBlU2NoZW1hIGZyb20gJy4vYmFzaWMtdHlwZS1zY2hlbWEnO1xuaW1wb3J0IEdlbmVyaWNTY2hlbWEgZnJvbSAnLi9nZW5lcmljLXNjaGVtYSc7XG5pbXBvcnQgT2JqZWN0U2NoZW1hIGZyb20gJy4vb2JqZWN0LXNjaGVtYSc7XG5pbXBvcnQgT25lT2ZTY2hlbWEgZnJvbSAnLi9vbmUtb2Ytc2NoZW1hJztcbmltcG9ydCBWYWxpZGF0aW9uIGZyb20gJy4vdmFsaWRhdGlvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXIubW9kdWxlKCd0dy5qc29uLXNjaGVtYScsIFtcbiAgRm9ybSxcbiAgQWxsT2ZTY2hlbWEsXG4gIEFycmF5U2NoZW1hLFxuICBCYXNpY1R5cGVTY2hlbWEsXG4gIEdlbmVyaWNTY2hlbWEsXG4gIE9iamVjdFNjaGVtYSxcbiAgT25lT2ZTY2hlbWEsXG4gIFZhbGlkYXRpb25cbl0pLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hLmZvcm0nLCBbXSlcbiAgLmNvbXBvbmVudCgnanNvblNjaGVtYUZvcm0nLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc2NoZW1hOiAnPCcsXG4gICAgbW9kZWw6ICc8JyxcbiAgICBlcnJvcnM6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICB0cmFuc2xhdGlvbnM6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImltcG9ydCB7IGlzVmFsaWRTY2hlbWEgfSBmcm9tICcuLi92YWxpZGF0aW9uL3NjaGVtYS12YWxpZGF0b3JzJztcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gIG9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSkge1xuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICBjb25zdCBpc1ZhbGlkID0gaXNWYWxpZFNjaGVtYShtb2RlbCwgdGhpcy5zY2hlbWEpO1xuICAgICAgdGhpcy5vbkNoYW5nZSh7IG1vZGVsLCBpc1ZhbGlkLCBzY2hlbWEgfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGdlbmVyaWMtc2NoZW1hIHNjaGVtYT0kY3RybC5zY2hlbWEgbW9kZWw9JGN0cmwubW9kZWwgZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9nZW5lcmljLXNjaGVtYT4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgeyBnZXRWYWxpZE1vZGVsUGFydHMgfSBmcm9tICcuLi92YWxpZGF0aW9uL3ZhbGlkLW1vZGVsJztcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnNjaGVtYSB8fCBjaGFuZ2VzLm1vZGVsKSB7XG4gICAgICAvLyBXZSBrZWVwIGVhY2ggbW9kZWwgc2VwYXJhdGVseSwgYW5kIGNvbWJpbmUgdGhlbSBmb3IgYnJvYWRjYXN0LCB0aGlzIGdpdmVzXG4gICAgICAvLyBiZXR0ZXIgY29udHJvbCBvdmVyIGNsZWFuaW5nIHVwIHRoZSBtb2RlbCBhcyB3ZSBkZWFsIHdpdGggdmFsdWVzIHRoYXQgYXJlXG4gICAgICAvLyByZW1vdmVkLlxuICAgICAgdGhpcy5tb2RlbHMgPSBzcGxpdE1vZGVsKHRoaXMubW9kZWwsIHRoaXMuc2NoZW1hID8gdGhpcy5zY2hlbWEuYWxsT2YgOiBbXSk7XG4gICAgfVxuICB9XG5cbiAgb25Nb2RlbENoYW5nZShpbmRleCwgbW9kZWwsIHNjaGVtYSkge1xuICAgIGNvbnN0IHNjaGVtYUZvckluZGV4ID0gdGhpcy5zY2hlbWEuYWxsT2ZbaW5kZXhdO1xuXG4gICAgdGhpcy5tb2RlbHNbaW5kZXhdID0gZ2V0VmFsaWRNb2RlbFBhcnRzKG1vZGVsLCBzY2hlbWFGb3JJbmRleCk7XG5cbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh7IG1vZGVsOiBjb21iaW5lTW9kZWxzKHRoaXMubW9kZWxzKSwgc2NoZW1hIH0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpdE1vZGVsKG1vZGVsLCBzY2hlbWFzKSB7XG4gIC8vIElmIHdlIHJlY2VpdmUgYSBtb2RlbCwgYnJlYWsgaXQgZG93biB0byBwYXJ0cyB2YWxpZCBmb3IgZWFjaCBzY2hlbWFcbiAgY29uc3QgbW9kZWxzID0gW107XG4gIGlmIChtb2RlbCAmJiBzY2hlbWFzKSB7XG4gICAgc2NoZW1hcy5mb3JFYWNoKChzY2hlbWEpID0+IHtcbiAgICAgIG1vZGVscy5wdXNoKGdldFZhbGlkTW9kZWxQYXJ0cyhtb2RlbCwgc2NoZW1hKSB8fCB7fSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG1vZGVscztcbn1cblxuZnVuY3Rpb24gY29tYmluZU1vZGVscyhtb2RlbHMpIHtcbiAgcmV0dXJuIG1vZGVscy5yZWR1Y2UoKGN1cnJlbnQsIGNvbWJpbmVkKSA9PiBhbmd1bGFyLmV4dGVuZChjb21iaW5lZCwgY3VycmVudCksIHt9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8aDMgbmctaWY9JGN0cmwuc2NoZW1hLnRpdGxlIGNsYXNzPXBhZ2UtaGVhZGVyPiB7eyAkY3RybC5zY2hlbWEudGl0bGUgfX0gPC9oMz4gPHAgbmctaWY9JGN0cmwuc2NoZW1hLmRlc2NyaXB0aW9uPiB7eyAkY3RybC5zY2hlbWEuZGVzY3JpcHRpb24gfX0gPC9wPiA8ZGl2IG5nLWlmPSRjdHJsLnNjaGVtYS5oZWxwLndhcm5pbmcgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcXFwiPiB7eyAkY3RybC5zY2hlbWEuaGVscC53YXJuaW5nIH19IDwvZGl2PiA8ZGl2IGNsYXNzPXJvdz4gPGRpdiBuZy1yZXBlYXQ9XFxcIihpbmRleCwgbmVzdGVkU2NoZW1hKSBpbiAkY3RybC5zY2hlbWEuYWxsT2ZcXFwiIGNsYXNzPWNvbC14cy0xMiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICdjb2wtc20tNCc6ICEkY3RybC5uYXJyb3cgICYmIG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ3NtJyxcXG4gICAgICAnY29sLXNtLTYnOiAhJGN0cmwubmFycm93ICAmJiBuZXN0ZWRTY2hlbWEud2lkdGggPT09ICdtZCcsXFxuICAgICAgJ2NvbC1zbS0xMic6ICRjdHJsLm5hcnJvdyB8fCBuZXN0ZWRTY2hlbWEud2lkdGggPT09ICdsZydcXG4gICAgfVxcXCI+IDxnZW5lcmljLXNjaGVtYSBzY2hlbWE9bmVzdGVkU2NoZW1hIG1vZGVsPSRjdHJsLm1vZGVsc1tpbmRleF0gZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKGluZGV4LCBtb2RlbCwgc2NoZW1hKVxcXCI+IDwvZ2VuZXJpYy1zY2hlbWE+IDwvZGl2PiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJjb25zdCBzaW1wbGVUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdpbnRlZ2VyJywgJ2Jvb2xlYW4nXTtcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gICRvbkluaXQoKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMubW9kZWwpKSB7XG4gICAgICBjb25zdCBhcnJheVR5cGUgPSBnZXRBcnJheVR5cGUodGhpcy5zY2hlbWEpO1xuICAgICAgY29uc3QgbmV3SXRlbSA9IGdldE5ld0l0ZW0oYXJyYXlUeXBlKTtcblxuICAgICAgdGhpcy5tb2RlbCA9IFtdO1xuICAgICAgaWYgKG5ld0l0ZW0pIHtcbiAgICAgICAgLy8gU2VlZCB0aGUgYXJyYXkgd2l0aCBhIG5ld0l0ZW0gdG8gc2hvdyBvbmUgZW1wdHkgZm9ybVxuICAgICAgICB0aGlzLm1vZGVsLnB1c2gobmV3SXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25Nb2RlbENoYW5nZShpbmRleCwgbW9kZWwsIHNjaGVtYSkge1xuICAgIHRoaXMubW9kZWxbaW5kZXhdID0gbW9kZWw7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoeyBtb2RlbDogdGhpcy5tb2RlbCwgc2NoZW1hIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZShpbmRleCkge1xuICAgIGlmICh0aGlzLm1vZGVsW2luZGV4XSkge1xuICAgICAgdGhpcy5tb2RlbC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIGFkZCgpIHtcbiAgICBjb25zdCBhcnJheVR5cGUgPSBnZXRBcnJheVR5cGUodGhpcy5zY2hlbWEpO1xuICAgIGNvbnN0IG5ld0l0ZW0gPSBnZXROZXdJdGVtKGFycmF5VHlwZSk7XG4gICAgaWYgKG5ld0l0ZW0pIHtcbiAgICAgIHRoaXMubW9kZWwucHVzaChuZXdJdGVtKTtcbiAgICB9XG4gIH1cblxuICBpc1NpbXBsZVR5cGUodHlwZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHNpbXBsZVR5cGVzLmluZGV4T2YodHlwZSkgPj0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBcnJheVR5cGUoc2NoZW1hKSB7XG4gIHJldHVybiBzY2hlbWEgJiYgc2NoZW1hLml0ZW1zICYmIHNjaGVtYS5pdGVtcy50eXBlO1xufVxuXG5mdW5jdGlvbiBnZXROZXdJdGVtKGFycmF5VHlwZSkge1xuICBpZiAoYXJyYXlUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoYXJyYXlUeXBlID09PSAnYXJyYXknKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBuZy1pZj0kY3RybC5pc1NpbXBsZVR5cGUoJGN0cmwuc2NoZW1hLml0ZW1zLnR5cGUpPiBVbnN1cHBvcnRlZCA8L2Rpdj4gPGRpdiBuZy1pZj0hJGN0cmwuaXNTaW1wbGVUeXBlKCRjdHJsLnNjaGVtYS5pdGVtcy50eXBlKT4gPGg0IGNsYXNzPXBhZ2UtaGVhZGVyIG5nLWlmPSRjdHJsLnNjaGVtYS50aXRsZT4ge3sgJGN0cmwuc2NoZW1hLnRpdGxlIH19IDwvaDQ+IDxwIG5nLWlmPSRjdHJsLnNjaGVtYS5kZXNjcmlwdGlvbj4ge3sgJGN0cmwuc2NoZW1hLmRlc2NyaXB0aW9uIH19IDwvcD4gPGRpdiBuZy1yZXBlYXQ9XFxcIihpbmRleCwgY2hpbGRNb2RlbCkgaW4gJGN0cmwubW9kZWxcXFwiPiA8aHIgbmctaWY9XFxcImluZGV4ID4gMFxcXCIgY2xhc3M9XFxcIm0tdC0xIG0tYi0yXFxcIi8+IDxkaXYgY2xhc3M9cm93PiA8ZGl2IGNsYXNzPWNvbC1zbS05PiA8Z2VuZXJpYy1zY2hlbWEgc2NoZW1hPSRjdHJsLnNjaGVtYS5pdGVtcyBtb2RlbD1jaGlsZE1vZGVsIGVycm9ycz0kY3RybC5lcnJvcnNbaW5kZXhdIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UoaW5kZXgsIG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9nZW5lcmljLXNjaGVtYT4gPC9kaXY+IDxkaXYgY2xhc3M9Y29sLXNtLTM+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGFuZ2VyIGJ0bi1ibG9jayBtLXQtM1xcXCIgbmctY2xpY2s9JGN0cmwucmVtb3ZlKGluZGV4KSBuZy1kaXNhYmxlZD1cXFwiaW5kZXggPCAkY3RybC5zY2hlbWEubWluSXRlbXNcXFwiPiB7eyAkY3RybC50cmFuc2xhdGlvbnMuYXJyYXkucmVtb3ZlIH19IDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHRcXFwiIG5nLWRpc2FibGVkPVxcXCIkY3RybC5zY2hlbWEubWF4SXRlbXMgJiYgJGN0cmwubW9kZWwubGVuZ3RoID49ICRjdHJsLnNjaGVtYS5tYXhJdGVtc1xcXCIgbmctY2xpY2s9JGN0cmwuYWRkKCk+IHt7ICRjdHJsLnRyYW5zbGF0aW9ucy5hcnJheS5hZGQgfX0gPC9idXR0b24+IDwvZGl2PiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc2NoZW1hOiAnPCcsXG4gICAgbW9kZWw6ICc8JyxcbiAgICBlcnJvcnM6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICB0cmFuc2xhdGlvbnM6ICc8JyxcbiAgICByZXF1aXJlZDogJzwnLFxuICAgIG9uQ2hhbmdlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuIiwiaW1wb3J0IHsgZ2V0VmFsaWRhdGlvbkZhaWx1cmVzIH0gZnJvbSAnLi4vdmFsaWRhdGlvbi92YWxpZGF0aW9uLWZhaWx1cmVzJztcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy5rZXkgPSBNYXRoLmZsb29yKDEwMDAwMDAwMCAqIE1hdGgucmFuZG9tKCkpO1xuXG4gICAgaWYgKCF0aGlzLm1vZGVsICYmIHRoaXMuc2NoZW1hLmRlZmF1bHQpIHtcbiAgICAgIHRoaXMub25Nb2RlbENoYW5nZSh0aGlzLnNjaGVtYS5kZWZhdWx0KTtcbiAgICB9XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKG1vZGVsKSB7XG4gICAgdGhpcy52YWxpZGF0aW9uS2V5cyA9IGdldFZhbGlkYXRpb25GYWlsdXJlcyhtb2RlbCwgdGhpcy5zY2hlbWEsIHRoaXMucmVxdWlyZWQpO1xuXG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoeyBtb2RlbCwgc2NoZW1hOiB0aGlzLnNjaGVtYSB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRWYWxpZGF0aW9uTWVzc2FnZXMoKSB7XG4gICAgcmV0dXJuICh0aGlzLnNjaGVtYSAmJiB0aGlzLnNjaGVtYS52YWxpZGF0aW9uTWVzc2FnZXMpXG4gICAgICB8fCAodGhpcy50cmFuc2xhdGlvbnMgJiYgdGhpcy50cmFuc2xhdGlvbnMudmFsaWRhdGlvbikgfHwgbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjx0dy1maWVsZCBuYW1lPVxcXCJ7eyAkY3RybC5rZXkgfX1cXFwiIG1vZGVsPSRjdHJsLm1vZGVsIGZpZWxkPSRjdHJsLnNjaGVtYSByZXF1aXJlZD0kY3RybC5yZXF1aXJlZCBsb2NhbGU9XFxcInt7ICRjdHJsLmxvY2FsZSB9fVxcXCIgb24tY2hhbmdlPSRjdHJsLm9uTW9kZWxDaGFuZ2UodmFsdWUpIGVycm9yLW1lc3NhZ2U9JGN0cmwuZXJyb3JzIHdhcm5pbmctbWVzc2FnZT0kY3RybC5zY2hlbWEuaGVscC53YXJuaW5nIHZhbGlkYXRpb24tbWVzc2FnZXM9JGN0cmwuZ2V0VmFsaWRhdGlvbk1lc3NhZ2VzKCkgdXBsb2FkLW9wdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zLnVwbG9hZCBjbGFzcz1idG4tYmxvY2s+IDwvdHctZmllbGQ+IFwiOyIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmltcG9ydCBCYXNpY1R5cGVTY2hlbWEgZnJvbSAnLi4vYmFzaWMtdHlwZS1zY2hlbWEnO1xuaW1wb3J0IE9iamVjdFNjaGVtYSBmcm9tICcuLi9vYmplY3Qtc2NoZW1hJztcbmltcG9ydCBBcnJheVNjaGVtYSBmcm9tICcuLi9hcnJheS1zY2hlbWEnO1xuaW1wb3J0IEFsbE9mU2NoZW1hIGZyb20gJy4uL2FsbC1vZi1zY2hlbWEnO1xuaW1wb3J0IE9uZU9mU2NoZW1hIGZyb20gJy4uL29uZS1vZi1zY2hlbWEnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hLmdlbmVyaWMnLCBbXG4gICAgQmFzaWNUeXBlU2NoZW1hLFxuICAgIE9iamVjdFNjaGVtYSxcbiAgICBBcnJheVNjaGVtYSxcbiAgICBBbGxPZlNjaGVtYSxcbiAgICBPbmVPZlNjaGVtYVxuICBdKVxuICAuY29tcG9uZW50KCdnZW5lcmljU2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgcmVxdWlyZWQ6ICc8JyxcbiAgICBoaWRlVGl0bGU6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5zY2hlbWEpIHtcbiAgICAgIGNvbnN0IG5ld1NjaGVtYSA9IGNoYW5nZXMuc2NoZW1hLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgLy8gSWYgdGhpcyBzY2hlbWEgaXMganVzdCBhIHNpbmdsZSBlbnVtLCBzZXQgdGhlIHZhbHVlXG4gICAgICBpZiAobmV3U2NoZW1hICYmIG5ld1NjaGVtYS5lbnVtICYmIG5ld1NjaGVtYS5lbnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UobmV3U2NoZW1hLmVudW1bMF0sIG5ld1NjaGVtYSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKSB7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoeyBtb2RlbCwgc2NoZW1hIH0pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxvbmUtb2Ytc2NoZW1hIG5nLWlmPSRjdHJsLnNjaGVtYS5vbmVPZiBtb2RlbD0kY3RybC5tb2RlbCBzY2hlbWE9JGN0cmwuc2NoZW1hIGVycm9ycz0kY3RybC5lcnJvcnMgbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKVxcXCI+IDwvb25lLW9mLXNjaGVtYT4gPGFsbC1vZi1zY2hlbWEgbmctaWY9JGN0cmwuc2NoZW1hLmFsbE9mIG1vZGVsPSRjdHJsLm1vZGVsIHNjaGVtYT0kY3RybC5zY2hlbWEgZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9hbGwtb2Ytc2NoZW1hPiA8YmFzaWMtdHlwZS1zY2hlbWEgbmctaWY9XFxcIiRjdHJsLnNjaGVtYS50eXBlICYmICgkY3RybC5zY2hlbWEudHlwZSAhPT0gJ29iamVjdCcgJiYgJGN0cmwuc2NoZW1hLnR5cGUgIT09ICdhcnJheScpXFxcIiBtb2RlbD0kY3RybC5tb2RlbCBzY2hlbWE9JGN0cmwuc2NoZW1hIGVycm9ycz0kY3RybC5lcnJvcnMgbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIHJlcXVpcmVkPSRjdHJsLnJlcXVpcmVkIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKVxcXCI+IDwvYmFzaWMtdHlwZS1zY2hlbWE+IDxvYmplY3Qtc2NoZW1hIG5nLWlmPVxcXCIkY3RybC5zY2hlbWEudHlwZSA9PT0gJ29iamVjdCdcXFwiIG1vZGVsPSRjdHJsLm1vZGVsIHNjaGVtYT0kY3RybC5zY2hlbWEgZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpXFxcIiBoaWRlLXRpdGxlPSRjdHJsLmhpZGVUaXRsZT4gPC9vYmplY3Qtc2NoZW1hPiA8YXJyYXktc2NoZW1hIG5nLWlmPVxcXCIkY3RybC5zY2hlbWEudHlwZSA9PT0gJ2FycmF5J1xcXCIgbW9kZWw9JGN0cmwubW9kZWwgc2NoZW1hPSRjdHJsLnNjaGVtYSBlcnJvcnM9JGN0cmwuZXJyb3JzIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSlcXFwiPiA8L2FycmF5LXNjaGVtYT4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgaGlkZVRpdGxlOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLm91dHB1dE1vZGVsID0gYW5ndWxhci5leHRlbmQoe30sIHRoaXMubW9kZWwgfHwge30pO1xuICB9XG5cbiAgb25Nb2RlbENoYW5nZShwcm9wZXJ0eSwgbW9kZWwsIHNjaGVtYSkge1xuICAgIHRoaXMub3V0cHV0TW9kZWxbcHJvcGVydHldID0gbW9kZWw7XG5cbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh7IG1vZGVsOiB0aGlzLm91dHB1dE1vZGVsLCBzY2hlbWEgfSk7XG4gICAgfVxuICB9XG5cbiAgaXNSZXF1aXJlZChwcm9wZXJ0eSkge1xuICAgIHJldHVybiB0aGlzLnNjaGVtYS5yZXF1aXJlZCAmJiB0aGlzLnNjaGVtYS5yZXF1aXJlZC5pbmNsdWRlcyhwcm9wZXJ0eSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZmllbGRzZXQ+IDxsZWdlbmQgbmctaWY9XFxcIiRjdHJsLnNjaGVtYS50aXRsZSAmJiAhJGN0cmwuaGlkZVRpdGxlXFxcIj4ge3sgJGN0cmwuc2NoZW1hLnRpdGxlIH19IDwvbGVnZW5kPiA8cCBuZy1pZj0kY3RybC5zY2hlbWEuZGVzY3JpcHRpb24+IHt7ICRjdHJsLnNjaGVtYS5kZXNjcmlwdGlvbiB9fSA8L3A+IDxkaXYgbmctaWY9JGN0cmwuc2NoZW1hLmhlbHAud2FybmluZyBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtd2FybmluZ1xcXCI+IHt7ICRjdHJsLnNjaGVtYS5oZWxwLndhcm5pbmcgfX0gPC9kaXY+IDxkaXYgY2xhc3M9cm93PiA8ZGl2IG5nLXJlcGVhdD1cXFwiKHByb3BlcnR5LCBuZXN0ZWRTY2hlbWEpIGluICRjdHJsLnNjaGVtYS5wcm9wZXJ0aWVzXFxcIiBjbGFzcz1jb2wteHMtMTIgbmctaGlkZT1uZXN0ZWRTY2hlbWEuaGlkZGVuIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgICAnY29sLXNtLTQnOiAhJGN0cmwubmFycm93ICAmJiBuZXN0ZWRTY2hlbWEud2lkdGggPT09ICdzbScsXFxuICAgICAgICAnY29sLXNtLTYnOiAhJGN0cmwubmFycm93ICAmJiBuZXN0ZWRTY2hlbWEud2lkdGggPT09ICdtZCcsXFxuICAgICAgICAnY29sLXNtLTEyJzogJGN0cmwubmFycm93IHx8IG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ2xnJ1xcbiAgICAgIH1cXFwiPiA8Z2VuZXJpYy1zY2hlbWEgc2NoZW1hPW5lc3RlZFNjaGVtYSBtb2RlbD0kY3RybC5tb2RlbFtwcm9wZXJ0eV0gZXJyb3JzPSRjdHJsLmVycm9yc1twcm9wZXJ0eV0gbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIHJlcXVpcmVkPSRjdHJsLmlzUmVxdWlyZWQocHJvcGVydHkpIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShwcm9wZXJ0eSwgbW9kZWwsIHNjaGVtYSlcXFwiPiA8L2dlbmVyaWMtc2NoZW1hPiA8L2Rpdj4gPC9kaXY+IDwvZmllbGRzZXQ+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5odG1sJztcblxuY29uc3QgQ29tcG9uZW50ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBzY2hlbWE6ICc8JyxcbiAgICBtb2RlbDogJzwnLFxuICAgIGVycm9yczogJzwnLFxuICAgIGxvY2FsZTogJzwnLFxuICAgIHRyYW5zbGF0aW9uczogJzwnLFxuICAgIG9uQ2hhbmdlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuIiwiaW1wb3J0IHsgZ2V0VmFsaWRNb2RlbFBhcnRzIH0gZnJvbSAnLi4vdmFsaWRhdGlvbi92YWxpZC1tb2RlbCc7XG5pbXBvcnQgeyBpc1ZhbGlkU2NoZW1hIH0gZnJvbSAnLi4vdmFsaWRhdGlvbi9zY2hlbWEtdmFsaWRhdG9ycyc7XG5cbmNsYXNzIENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBbXTtcbiAgICB0aGlzLmFjdGl2ZUluZGV4ID0gMTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnNjaGVtYSB8fCBjaGFuZ2VzLm1vZGVsKSB7XG4gICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gZ2V0QWN0aXZlU2NoZW1hSW5kZXgodGhpcy5zY2hlbWEsIHRoaXMubW9kZWwpO1xuICAgICAgdGhpcy5wcmVmaWxsTW9kZWxzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJlZmlsbE1vZGVscygpIHtcbiAgICBpZiAoIXRoaXMuc2NoZW1hIHx8ICF0aGlzLnNjaGVtYS5vbmVPZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm1vZGVscyA9IGdldE1vZGVsUGFydHNGb3JTY2hlbWFzKHRoaXMubW9kZWwsIHRoaXMuc2NoZW1hLm9uZU9mKTtcbiAgfVxuXG4gIG9uU2NoZW1hQ2hhbmdlKG5ld1NjaGVtYSwgaW5kZXgpIHtcbiAgICB0aGlzLm1vZGVsc1tpbmRleF0gPSBnZXRWYWxpZE1vZGVsUGFydHModGhpcy5tb2RlbHNbaW5kZXhdLCBuZXdTY2hlbWEpO1xuICAgIHRoaXMub25Nb2RlbENoYW5nZSh0aGlzLm1vZGVsc1tpbmRleF0sIG5ld1NjaGVtYSk7XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEsIGluZGV4KSB7XG4gICAgdGhpcy5tb2RlbHNbaW5kZXhdID0gbW9kZWw7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoeyBtb2RlbCwgc2NoZW1hIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZSB3aGljaCBzY2hlbWEgdG8gc2hvdyBpbnRpdGlhbGx5IGJhc2VkIG9uIHZhbGlkaXR5IG9mIG1vZGVsXG4gKiBEZWZhdWx0IHRvIDEgKGFjdGl2ZSBpcyAxLWluZGV4ZWQpXG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZVNjaGVtYUluZGV4KHNjaGVtYSwgbW9kZWwpIHtcbiAgaWYgKCFzY2hlbWEgfHwgIXNjaGVtYS5vbmVPZikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWEub25lT2YubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNWYWxpZFNjaGVtYShtb2RlbCwgc2NoZW1hLm9uZU9mW2ldKSkge1xuICAgICAgcmV0dXJuIGkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAxO1xufVxuXG5mdW5jdGlvbiBnZXRNb2RlbFBhcnRzRm9yU2NoZW1hcyhtb2RlbCwgc2NoZW1hcykge1xuICByZXR1cm4gc2NoZW1hcy5tYXAoc2NoZW1hID0+IGdldFZhbGlkTW9kZWxQYXJ0cyhtb2RlbCwgc2NoZW1hKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGxhYmVsIGNsYXNzPWNvbnRyb2wtbGFiZWwgbmctaWY9JGN0cmwuc2NoZW1hLnRpdGxlPiB7eyAkY3RybC5zY2hlbWEudGl0bGUgfX0gPC9sYWJlbD4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBtLWItNVxcXCI+IDxkaXYgY2xhc3M9cmFkaW8gbmctcmVwZWF0PVxcXCIoaW5kZXgsIHNjaGVtYSkgaW4gJGN0cmwuc2NoZW1hLm9uZU9mXFxcIiBuZy1jbGFzcz1cXFwieydyYWRpby1sZyc6IHNjaGVtYS5kZXNjcmlwdGlvbn1cXFwiPiA8bGFiZWw+IDx0dy1yYWRpbyBuZy1tb2RlbD0kY3RybC5hY3RpdmVJbmRleCBuZy12YWx1ZT1cXFwiKGluZGV4ICsgMSlcXFwiIG5nLWNoYW5nZT1cXFwiJGN0cmwub25TY2hlbWFDaGFuZ2Uoc2NoZW1hLCBpbmRleClcXFwiPjwvdHctcmFkaW8+IHt7IHNjaGVtYS50aXRsZSB9fSA8cCBuZy1pZj1zY2hlbWEuZGVzY3JpcHRpb24gY2xhc3M9XFxcInNlY29uZGFyeSBtLWItMFxcXCI+IHt7IHNjaGVtYS5kZXNjcmlwdGlvbiB9fSA8L3A+IDwvbGFiZWw+IDwvZGl2PiA8L2Rpdj4gPGRpdiBuZy1yZXBlYXQ9XFxcIihpbmRleCwgc2NoZW1hKSBpbiAkY3RybC5zY2hlbWEub25lT2ZcXFwiPiA8Z2VuZXJpYy1zY2hlbWEgbmctaWY9XFxcIiRjdHJsLmFjdGl2ZUluZGV4ID09PSAoaW5kZXggKyAxKVxcXCIgc2NoZW1hPXNjaGVtYSBtb2RlbD0kY3RybC5tb2RlbHNbaW5kZXhdIGVycm9ycz0kY3RybC5lcnJvcnMgbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hLCBpbmRleClcXFwiIGhpZGUtdGl0bGU9dHJ1ZT4gPC9nZW5lcmljLXNjaGVtYT4gPC9kaXY+IFwiOyIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgeyBnZXRWYWxpZE1vZGVsUGFydHMgfSBmcm9tICcuL3ZhbGlkLW1vZGVsJztcbmltcG9ydCB7IGdldFZhbGlkYXRpb25GYWlsdXJlcyB9IGZyb20gJy4vdmFsaWRhdGlvbi1mYWlsdXJlcyc7XG5pbXBvcnQgeyBpc1ZhbGlkU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEtdmFsaWRhdG9ycyc7XG5pbXBvcnQgKiBhcyBydWxlVmFsaWRhdG9ycyBmcm9tICcuL3J1bGUtdmFsaWRhdG9ycyc7XG5pbXBvcnQgKiBhcyB0eXBlVmFsaWRhdG9ycyBmcm9tICcuL3R5cGUtdmFsaWRhdG9ycyc7XG5cbmZ1bmN0aW9uIFZhbGlkYXRpb24oKSB7XG4gIHRoaXMuZ2V0VmFsaWRNb2RlbFBhcnRzID0gZ2V0VmFsaWRNb2RlbFBhcnRzO1xuICB0aGlzLmdldFZhbGlkYXRpb25GYWlsdXJlcyA9IGdldFZhbGlkYXRpb25GYWlsdXJlcztcbiAgdGhpcy5pc1ZhbGlkU2NoZW1hID0gaXNWYWxpZFNjaGVtYTtcbiAgdGhpcy5ydWxlVmFsaWRhdG9ycyA9IHJ1bGVWYWxpZGF0b3JzO1xuICB0aGlzLnR5cGVWYWxpZGF0b3JzID0gdHlwZVZhbGlkYXRvcnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEudmFsaWRhdGlvbicsIFtdKVxuICAuc2VydmljZSgnU2NoZW1hVmFsaWRhdGlvbicsIFZhbGlkYXRpb24pLm5hbWU7XG4iXSwic291cmNlUm9vdCI6IiJ9