angular.module("tw.form-styling", []);
!function(a){"use strict";function b(){return{restrict:"C",link:d}}function c(){return{restrict:"A",link:d}}function d(a,b){var c=$(b).closest(".form-group");$(b).on("focus",function(){c.addClass("focus")}).on("blur",function(){c.removeClass("focus")})}a.module("tw.form-styling").directive("formControl",b),a.module("tw.form-styling").directive("twFocusable",c)}(window.angular),function(a){function b(){function a(){$(this).closest(".form-group").addClass("focus"),$(this).closest(g).addClass("focus")}function b(){$(this).closest(".form-group").removeClass("focus"),$(this).closest(g).removeClass("focus")}function c(a){d(this),a.stopPropagation()}function d(a){var b=$(a).closest("label").find("input");"undefined"!=typeof b[0]&&(MouseEvent?b[0].dispatchEvent(new MouseEvent("click",{view:window,bubbles:!0,cancelable:!0})):b.click())}function e(a){13===(a.keyCode?a.keyCode:a.which)&&d(this)}function f(d,f,k){if(k.type){var l=k.type.toLowerCase();if(("radio"===l||"checkbox"===l)&&0!==$(f).closest(g).length){var m;m=$("radio"===l?i:h),m.keypress(e).click(c).focus(a).blur(b),$(f).hide().after(m),m.after(j)}}}var g=".checkbox > label, .radio > label",h="<button type='button' class='input-replacement'><span class='glyphicon glyphicon-ok'></span></button>",i="<button type='button' class='input-replacement'><span></span></button>",j="<span class='disabled-replacement input-replacement'><span></span></span>";return{restrict:"EA",link:f}}a.module("tw.form-styling").directive("twInput",b)}(window.angular),function(a){"use strict";function b(){return{require:"ngModel",bindToController:!0,controller:"TwSelectController",controllerAs:"vm",replace:!1,restrict:"EA",scope:{ngModel:"=",ngRequired:"=",ngDisabled:"=",ngChange:"&",twOptions:"=",name:"@",disabled:"@",required:"@",placeholder:"@"},template:"<div class='btn-group btn-block'> 					<button type='button' class='btn btn-input dropdown-toggle' 						data-toggle='dropdown' aria-expanded='false' 						ng-disabled='vm.ngDisabled' 						tw-focusable> 						<span class='form-control-placeholder' ng-if='!vm.selectedText'>{{vm.placeholder}}</span> 						<span ng-if='vm.selectedText'>{{vm.selectedText}}</span> <span class='caret'></span> 					</button> 					<ul class='dropdown-menu' role='menu'> 						<li ng-repeat='option in vm.twOptions' 							ng-class='{active: vm.ngModel === option.value}'> 							<a href='' ng-click='vm.clickOption(option)'>{{option.label}}</a> 						</li> 					</ul> 					<select class='hidden' 						ng-options='option.value as option.label for option in vm.twOptions' 						ng-model='vm.ngModel'> 					</select> 					<input type='hidden' name='{{vm.name}}' value='{{vm.ngModel}}' /> 				</div>"}}function c(a,b){function c(){i=b.closest(".form-group"),a.$watch("vm.ngModel",d),d(j.ngModel),b.find(".btn").on("blur",function(){h(b,i)}),b.find(".btn").on("keypress",function(a){console.log(a.key)})}function d(a,c){if(a!==c){var d=e(a);j.selectedText=d?d.label:null,j.ngChange?(console.log("change"),j.ngChange()):console.log("no chnage"),h(b,i)}}function e(a){return j.twOptions.find(function(b){return b.value===a})}function f(a){j.ngModel=a.value}function g(){j.ngModel=null}function h(a,b){setTimeout(function(){a.hasClass("ng-invalid")?b.addClass("has-error"):b.removeClass("has-error")})}var i,j=this;j.clickOption=f,j.unset=g,c()}a.module("tw.form-components").directive("twSelect",b),a.module("tw.form-components").controller("TwSelectController",c),c.$inject=["$scope","$element"]}(window.angular);