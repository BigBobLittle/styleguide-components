!function(angular) {
    "use strict";
    function TwDateController($scope) {
        function init() {
            vm.month = 1, vm.dateMode = typeof vm.date, $scope.$watch("vm.date", function(date) {
                vm.explodeDate(date);
            }), vm.explodeDate(vm.date), vm.months = [ {
                id: 1,
                name: "January"
            }, {
                id: 2,
                name: "February"
            }, {
                id: 3,
                name: "March"
            }, {
                id: 4,
                name: "April"
            }, {
                id: 5,
                name: "May"
            }, {
                id: 6,
                name: "June"
            }, {
                id: 7,
                name: "July"
            }, {
                id: 8,
                name: "August"
            }, {
                id: 9,
                name: "September"
            }, {
                id: 10,
                name: "October"
            }, {
                id: 11,
                name: "November"
            }, {
                id: 12,
                name: "December"
            } ], "" === vm.required && (vm.required = !0);
        }
        function explodeDate(date) {
            var dateObj;
            if (date) {
                if (dateObj = "string" == typeof date ? new Date(date) : date, !validDate(dateObj)) return vm.day = null, 
                vm.month = 1, void (vm.year = null);
                vm.day = dateObj.getUTCDate(), vm.month = dateObj.getUTCMonth() + 1, vm.year = dateObj.getUTCFullYear();
            }
        }
        function updateDate() {
            var dateObj;
            return vm.day && null !== vm.month && void 0 !== vm.month && vm.year ? (vm.day = vm.correctHighDay(vm.day, vm.month, vm.year), 
            dateObj = new Date(Date.UTC(Number(vm.year), Number(vm.month) - 1, Number(vm.day))), 
            void (vm.date = "string" === vm.dateMode ? dateObj.getUTCFullYear() + "-" + pad(dateObj.getUTCMonth() + 1) + "-" + pad(dateObj.getUTCDate()) : dateObj)) : void (vm.date = null);
        }
        function pad(n) {
            return 10 > n ? "0" + n : n;
        }
        function validDate(dateObj) {
            return "[object Date]" === Object.prototype.toString.call(dateObj) && !isNaN(dateObj.getTime());
        }
        function correctHighDay(day, month, year) {
            var dateObj = new Date(0);
            return dateObj.setUTCFullYear(year), dateObj.setUTCMonth(month), dateObj.setUTCDate(0), 
            day > dateObj.getUTCDate() ? dateObj.getUTCDate() : day;
        }
        var vm = this;
        vm.init = init, vm.explodeDate = explodeDate, vm.updateDate = updateDate, vm.correctHighDay = correctHighDay, 
        vm.pad = pad, vm.validDate = validDate, init();
    }
    angular.module("tw.styleguide-components").controller("TwDateController", TwDateController), 
    TwDateController.$inject = [ "$scope" ];
}(window.angular), function(angular) {
    "use strict";
    function TwSortCodeController($scope) {
        function explodeSortCode(sortCode) {
            var sortCodeString = "" + sortCode;
            sortCodeString && vm.validSortCode(sortCodeString) && (vm.firstTwo = sortCodeString.slice(0, 2), 
            vm.secondTwo = sortCodeString.slice(2, 4), vm.thirdTwo = sortCodeString.slice(4, 6));
        }
        function updateSortCode() {
            {
                var sortCodeString;
                new RegExp(vm.shortRegexp);
            }
            return sortCodeString = "" + vm.firstTwo + vm.secondTwo + vm.thirdTwo, vm.validSortCode(sortCodeString) ? void (vm.sortCode = sortCodeString) : void (vm.sortCode = null);
        }
        function validSortCode(sortCodeString) {
            var reg = new RegExp(vm.pattern);
            return reg.test(sortCodeString);
        }
        function init() {
            $scope.$watch("vm.sortCode", function(sortCode) {
                vm.explodeSortCode(sortCode);
            }), vm.explodeSortCode(vm.sortCode), "" === vm.required && (vm.required = !0);
        }
        var vm = this;
        vm.init = init, vm.explodeSortCode = explodeSortCode, vm.updateSortCode = updateSortCode, 
        vm.validSortCode = validSortCode, vm.pattern = /^[0-9]{6}$/, vm.shortPattern = /^[0-9]{2}$/, 
        vm.init();
    }
    angular.module("tw.styleguide-components").controller("TwSortCodeController", TwSortCodeController), 
    TwSortCodeController.$inject = [ "$scope" ];
}(window.angular), function(angular) {
    "use strict";
    function TwDateDirective() {
        var directive = {
            bindToController: !0,
            controller: "TwDateController",
            controllerAs: "vm",
            replace: !0,
            restrict: "E",
            scope: {
                date: "=ngModel",
                disabled: "@",
                required: "@"
            },
            templateUrl: "../dist/templates/tw-date.html",
            link: TwDateLink
        };
        return directive;
    }
    function TwDateLink(scope, element, attrs) {
        attrs.ngDisabled && scope.$parent.$watch(attrs.ngDisabled, function(isDisabled) {
            scope.disabled = isDisabled;
        }), attrs.ngRequired && scope.$parent.$watch(attrs.ngRequired, function(isRequired) {
            scope.required = isRequired;
        });
    }
    angular.module("tw.styleguide-components").directive("twInputDate", TwDateDirective), 
    TwDateDirective.$inject = [];
}(window.angular), function(angular) {
    "use strict";
    function checkValid(formControl, formGroup) {
        formControl.hasClass("ng-invalid") && formControl.hasClass("ng-touched") ? formGroup.addClass("has-error") : formGroup.removeClass("has-error");
    }
    function TwActiveFormControl() {
        return {
            restrict: "C",
            link: function(scope, element) {
                var potentialParents = ".form-group, .checkbox > label, .radio > label", formControls = $(element), formGroup = formControls.parents(".form-group");
                formControls.on("focus", function() {
                    var formControl = $(this);
                    formControl.parents(potentialParents).addClass("focus");
                }).on("blur", function() {
                    var formControl = $(this);
                    formControl.parents(potentialParents).removeClass("focus"), checkValid(formControl, formGroup);
                }).on("keyup", function() {
                    var formControl = $(this);
                    setTimeout(function() {
                        checkValid(formControl, formGroup);
                    });
                }).on("invalid", function(event) {
                    event.preventDefault();
                });
            }
        };
    }
    angular.module("tw.styleguide-components").directive("formControl", TwActiveFormControl);
}(window.angular), function(angular) {
    "use strict";
    function TwInvalid() {
        return {
            restrict: "E",
            link: function(scope, element) {
                $(element).on("submit", function() {
                    var invalid = $(element).find(".form-control.ng-invalid");
                    return invalid.parents(".form-group").addClass("has-error"), !0;
                });
            }
        };
    }
    angular.module("tw.styleguide-components").directive("form", TwInvalid);
}(window.angular), function(angular) {
    function TwInput() {
        function onFocus() {
            $(this).parents(parents).addClass("focus");
        }
        function onBlur() {
            $(this).parents(parents).removeClass("focus");
        }
        function onClick(event) {
            fakeClick(this), event.stopPropagation();
        }
        function fakeClick(buttonReplacement) {
            var input = $(buttonReplacement).parents("label").find("input");
            input.click();
        }
        function onKeypress(event) {
            13 === (event.keyCode ? event.keyCode : event.which) && fakeClick(this);
        }
        var parents = ".form-group, .checkbox > label, .radio > label", checkboxTemplate = "<button type='button' class='input-replacement'><span class='glyphicon glyphicon-ok'></span></button>", radioTemplate = "<button type='button' class='input-replacement'><span></span></button>", disabledReplacement = "<span class='disabled-replacement input-replacement'><span><span></span>";
        return {
            restrict: "E",
            link: function(scope, element, attrs) {
                if (attrs.type) {
                    var type = attrs.type.toLowerCase();
                    if (("radio" === type || "checkbox" === type) && 0 !== $(element).parents(parents).length) {
                        var replacement;
                        replacement = $("radio" === type ? radioTemplate : checkboxTemplate), replacement.keypress(onKeypress).click(onClick).focus(onFocus).blur(onBlur), 
                        $(element).hide().after(replacement), replacement.after(disabledReplacement);
                    }
                }
            }
        };
    }
    angular.module("tw.styleguide-components").directive("input", TwInput);
}(window.angular), function(angular) {
    "use strict";
    function TwSelect() {
        return {
            restrict: "E",
            link: function() {}
        };
    }
    angular.module("tw.styleguide-components").directive("select", TwSelect), TwSelect.$inject = [ "$parse", "$timeout" ];
}(window.angular), function(angular) {
    "use strict";
    function TwSortCodeDirective() {
        var directive = {
            bindToController: !0,
            controller: "TwSortCodeController",
            controllerAs: "vm",
            replace: !0,
            restrict: "E",
            scope: {
                sortCode: "=ngModel",
                disabled: "@",
                required: "@"
            },
            templateUrl: "../dist/templates/tw-sort-code.html",
            link: TwSortCodeLink
        };
        return directive;
    }
    function TwSortCodeLink(scope, element, attrs) {
        attrs.ngDisabled && scope.$parent.$watch(attrs.ngDisabled, function(isDisabled) {
            scope.disabled = isDisabled;
        }), attrs.ngRequired && scope.$parent.$watch(attrs.ngRequired, function(isRequired) {
            scope.required = isRequired;
        }), attrs.required && (scope.required = !0), connectInputs(element);
    }
    function connectInputs(element) {
        function getCaretPosition(input) {
            return "number" == typeof input.selectionStart ? input.selectionStart : $(input).val().length;
        }
        function setCaretPositionStart(input) {
            setCaretPosition(input, 0);
        }
        function setCaretPosition(input, pos) {
            if (input.setSelectionRange) input.setSelectionRange(pos, pos); else if (input.createTextRange) {
                var range = input.createTextRange();
                range.collapse(!0), 0 > pos && (pos = $(input).val().length + pos), range.moveEnd("character", pos), 
                range.moveStart("character", pos), range.select();
            }
        }
        function textIsSelected(current) {
            return "undefined" != typeof current.selectionStart && "undefined" != typeof current.selectionEnd && current.selectionStart !== current.selectionEnd;
        }
        function connectForward(current, next) {
            $(current).on("keyup", function() {
                return textIsSelected(current) ? !0 : (getCaretPosition(current) >= 2 && ($(next).focus(), 
                setCaretPositionStart(next)), void (textWasSelected = !1));
            });
        }
        function connectBack(current, previous) {
            $(current).on("keydown", function(event) {
                return textIsSelected(current) ? !0 : 0 !== getCaretPosition(current) || event.which !== keys["delete"] && event.which !== keys.left ? void 0 : ($(previous).focus(), 
                !0);
            });
        }
        var inputs = $(element).find("input"), keys = {
            "delete": 8,
            tab: 9,
            left: 37,
            right: 39
        };
        connectForward(inputs[0], inputs[1]), connectForward(inputs[1], inputs[2]), connectBack(inputs[1], inputs[0]), 
        connectBack(inputs[2], inputs[1]);
        var textWasSelected = !1;
        $(inputs).on("keydown", function(event) {
            var input = this;
            return textIsSelected(input) ? !0 : $(input).val().length >= 2 && event.which !== keys["delete"] && event.which !== keys.tab && event.which !== keys.left && event.which !== keys.right ? !1 : void 0;
        });
    }
    angular.module("tw.styleguide-components").directive("twInputSortCode", TwSortCodeDirective), 
    TwSortCodeDirective.$inject = [];
}(window.angular);