!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=207)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(30));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.dom",[]).service("TwDomService",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(31)),a=s(n(32)),l=s(n(1));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.focusable",[l.default]).directive("twFocusable",i.default).directive("formControl",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(95));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.date",[]).service("TwDateService",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(36)),a=s(n(1)),l=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.select",[a.default,l.default]).component("twSelect",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(105));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.requirements",[]).service("TwRequirementsService",i.default).name},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(l=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([i]).join("\n")}var l;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(r[a]=!0)}for(i=0;i<e.length;i++){var l=e[i];"number"==typeof l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="("+l[2]+") and ("+n+")"),t.push(l))}},t}},function(e,t,n){var r,i,a={},l=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),o=null,c=0,u=[],d=n(44);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=a[r.id];if(i){i.refs++;for(var l=0;l<i.parts.length;l++)i.parts[l](r.parts[l]);for(;l<r.parts.length;l++)i.parts.push(y(r.parts[l],t))}else{var s=[];for(l=0;l<r.parts.length;l++)s.push(y(r.parts[l],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],r={},i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[l]?r[l].parts.push(s):n.push(r[l]={id:l,parts:[s]})}return n}function p(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(e.insertAt.before,n);n.insertBefore(t,i)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),p(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,i,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var l=c++;n=o||(o=m(t)),r=w.bind(null,n,l,!1),i=w.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),p(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||a)&&(r=d(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var l=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(l),s&&URL.revokeObjectURL(s)}.bind(null,n,t),i=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=l()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return f(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var l=n[i];(s=a[l.id]).refs--,r.push(s)}e&&f(h(e,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var o=0;o<s.parts.length;o++)s.parts[o]();delete a[s.id]}}}};var b,$=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function w(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=$(t,i);else{var a=document.createTextNode(i),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(a,l[t]):e.appendChild(a)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(60));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.loading.process",[]).component("twProcess",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=t[0],i=n.getClosestParentByClassName(r,"form-group");i&&r&&(r.addEventListener("focus",function(){i.classList.add("focus")}),r.addEventListener("blur",function(){i.classList.remove("focus")}))};r.$inject=["$element","TwDomService"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(33)),a=s(n(1)),l=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.radio",[a.default,l.default]).component("twRadio",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=d(n(0)),i=d(n(52)),a=d(n(54)),l=d(n(56)),s=d(n(57)),o=d(n(58)),c=d(n(18)),u=d(n(8));function d(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.processing",[c.default,l.default,s.default,o.default,u.default]).component("twUploadProcessing",i.default).component("twUploadProcessingMini",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=t,this.AsyncFileReader=n,this.AsyncFileSaver=r,this.AsyncTasksConfig=i,this.FileValidation=a,this.processingState=null}return r(e,[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&this.onFileCapture(e.file.currentValue)}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");if(this.reset(),this.file=e,this.isProcessing=!0,this.processingState=null,this.onStart({file:e}),!this.FileValidation.isSmallerThanMaxSize(e,this.maxSize))return this.validationMessages=[this.tooLargeMessage],void l({status:413,data:{message:this.tooLargeMessage}},null,this);this.httpOptions?this.asyncFileRead(e).then(function(n){return t.asyncFileSave(e).then(function(e){return a(e,n,t)})}).catch(function(e){return l(e,null,t)}):this.asyncFileRead(e).then(function(e){return a(null,e,t)}).catch(function(e){return l(e,null,t)})}}},{key:"asyncFileSave",value:function(e){var t=this.AsyncTasksConfig.extendHttpOptions(this.httpOptions);return this.AsyncFileSaver.save(t.param||this.name,e,t)}},{key:"asyncFileRead",value:function(e){return this.AsyncFileReader.read(e)}},{key:"reset",value:function(){this.processingState=0,this.isProcessing=!1,this.isSuccess=!1,this.isError=!1}},{key:"onRemove",value:function(){this.onCancel()}}]),e}();function a(e,t,n){n.processingState=1;var r=null,i=n.file,a=n.httpOptions;return a&&a.idProperty&&e&&e.data&&e.data[a.idProperty]&&(r=e.data[a.idProperty]),n.$timeout(function(){n.isProcessing=!1,n.isSuccess=!0,n.onSuccess({file:i,dataUrl:t,id:r,response:e})},3600),t}function l(e,t,n){return n.processingState=-1,n.$timeout(function(){n.isProcessing=!1,n.isError=!0},3600),n.$timeout(function(){n.onFailure({error:e})},3600),e}i.$inject=["$timeout","AsyncFileReader","AsyncFileSaver","AsyncTasksConfig","FileValidationService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={name:"<",file:"<",onStart:"&",onSuccess:"&",onFailure:"&",onCancel:"&",maxSize:"<",accept:"<",httpOptions:"<",processingMessage:"<",successMessage:"<",errorMessage:"<",tooLargeMessage:"<",validationMessages:"<",cancelText:"<"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(89)),a=s(n(90)),l=s(n(91));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.drag-and-drop",[]).directive("twDrop",i.default).directive("twDragEnter",a.default).directive("twDragLeave",l.default).name},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(27)),a=s(n(1)),l=s(n(2));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.checkbox",[a.default,l.default]).component("twCheckbox",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=g(n(0)),i=g(n(39)),a=g(n(45)),l=g(n(49)),s=g(n(11)),o=g(n(63)),c=g(n(67)),u=g(n(76)),d=g(n(80)),f=g(n(84)),h=g(n(85)),p=g(n(14));function g(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload",[a.default,l.default,s.default,o.default,c.default,u.default,d.default,h.default,p.default]).directive("twFileInput",f.default).component("twUpload",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(59));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.services.async-tasks-config",[]).service("AsyncTasksConfig",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(0)),i=c(n(92)),a=c(n(3)),l=c(n(20)),s=c(n(4)),o=c(n(2));function c(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.date",[a.default,l.default,s.default,o.default]).component("twDate",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(96)),a=s(n(98)),l=s(n(3));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.formatting.date",[l.default]).component("twDateFormat",i.default).filter("twDateFormat",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(0)),i=u(n(4)),a=u(n(10)),l=u(n(16)),s=u(n(19)),o=u(n(17)),c=u(n(99));function u(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.form-control",[i.default,a.default,l.default,s.default,o.default]).component("twFormControl",c.default).component("twDynamicFormControl",c.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(n(0)),i=o(n(21)),a=o(n(102)),l=o(n(5)),s=o(n(23));function o(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.field",[i.default,l.default,s.default]).component("twField",a.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(0)),i=l(n(106)),a=l(n(1));function l(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.stylguide.validation.control",[a.default]).directive("twValidation",i.default).name},,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(28)),i=a(n(29));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{name:"@",ngModel:"=",ngTrueValue:"<",ngFalseValue:"<",ngRequired:"<",ngDisabled:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.addLabelHandler(),this.addWatchers(t,n,i),this.checkboxContainer=this.dom.getClosestParentByClassName(this.element,"checkbox"),this.label=!!this.checkboxContainer&&this.checkboxContainer.getElementsByTagName("label")[0]}return r(e,[{key:"$onInit",value:function(){this.checked=this.isChecked()}},{key:"isChecked",value:function(){return this.ngTrueValue&&this.ngTrueValue===this.ngModel||!this.ngTrueValue&&this.ngModel||!1}},{key:"buttonClick",value:function(e){this.checked?(this.checked=!1,this.$ngModel.$setViewValue(this.ngFalseValue||!1)):(this.checked=!0,this.$ngModel.$setViewValue(this.ngTrueValue||!0)),this.$ngModel.$setTouched(),e&&e.stopPropagation(),a(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur")),this.$ngModel.$setTouched(),a(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"addLabelHandler",value:function(){var e=this,t=this.dom.getClosestParentByTagName(this.element,"label");t&&t.addEventListener("click",function(n){t.getAttribute("disabled")||e.element.getElementsByTagName("button")[0].dispatchEvent(new CustomEvent("click"));n.preventDefault(),n.stopPropagation()})}},{key:"addWatchers",value:function(e,t,n){var r=this;e.$watch("$ctrl.ngModel",function(e,i){e!==i&&(n.$setDirty(),a(r.checked,t,n,r.ngRequired,r.dom),r.checked=r.isChecked())}),e.$watch("$ctrl.ngDisabled",function(e,n){var i=t[0],a=r.dom.getClosestParentByClassName(i,"checkbox"),l=r.dom.getClosestParentByTagName(i,"label");a&&(e&&!n?(a.classList.add("disabled"),l.setAttribute("disabled","true")):!e&&n&&(a.classList.remove("disabled"),l.removeAttribute("disabled")))}),e.$watch("$ctrl.ngRequired",function(e,i){e!==i&&a(r.checked,t,n,r.ngRequired,r.dom)})}}],[{key:"hiddenClick",value:function(e){e.stopPropagation()}}]),e}();function a(e,t,n,r,i){if(n.$touched){var a=t[0],l=a.getElementsByClassName("tw-checkbox-button")[0],s=i.getClosestParentByClassName(a,"checkbox"),o=i.getClosestParentByClassName(a,"form-group");!e&&r?(n.$setValidity("required",!1),l.classList.add("has-error"),s&&s.classList.add("has-error"),o&&o.classList.add("has-error")):(n.$setValidity("required",!0),l.classList.remove("has-error"),s&&s.classList.remove("has-error"),o&&o.classList.remove("has-error"))}}i.$inject=["$scope","$element","TwDomService"],t.default=i},function(e,t){e.exports='<input type=hidden class=sr-only name={{$ctrl.name}} ng-model=$ctrl.ngModel ng-click=$ctrl.hiddenClick($event) ng-disabled=$ctrl.ngDisabled /> <button type=button class=tw-checkbox-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{\'checked\': $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class="tw-checkbox-check glyphicon glyphicon-ok"></span> </button> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){this.getClosestParentByTagName=function(e,t){for(var n=t.toUpperCase(),r=e;r;)if((r=r.parentNode)&&r.tagName&&r.tagName.toUpperCase()===n)return r;return null},this.getClosestParentByClassName=function(e,t){for(var n=e;n;)if((n=n.parentNode)&&n.classList&&n.classList.contains(t))return n;return null},this.getPreviousSiblingWithClassName=function(e,t){for(var n=e.previousElementSibling;n;){if(n.classList.contains(t))return n;n=n.previousElementSibling}return null},this.getNextSiblingWithClassName=function(e,t){for(var n=e.nextElementSibling;n;){if(n.classList.contains(t))return n;n=n.nextElementSibling}return null}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(9),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(){return{restrict:"A",controller:a.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(9),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(){return{restrict:"C",controller:a.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(34)),i=a(n(35));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{name:"@",value:"@",ngModel:"=",ngValue:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.checked=this.isChecked(),this.label=this.dom.getClosestParentByTagName(this.element,"label"),n[0].addEventListener("blur",function(){i.$setTouched()}),this.addWatchers(t,this.element)}return r(e,[{key:"isChecked",value:function(){return this.ngValue&&this.ngModel===this.ngValue||this.value===this.ngModel}},{key:"buttonClick",value:function(){this.ngDisabled||(this.checked=!0,this.$ngModel.$setViewValue(this.ngValue||this.value))}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"hiddenInputChange",value:function(){this.$ngModel.$setViewValue(this.ngValue||this.value)}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.ngModel",function(e,t){e!==t&&n.$ngModel.$setDirty(),n.checked=n.isChecked()}),e.$watch("$ctrl.ngDisabled",function(e,r){var i=n.dom.getClosestParentByClassName(t,"radio");i&&(e&&!r?(i.classList.add("disabled"),i.setAttribute("disabled","true")):!e&&r&&(i.classList.remove("disabled"),i.removeAttribute("disabled")))})}}]),e}();i.$inject=["$scope","$element","TwDomService"],t.default=i},function(e,t){e.exports='<input type=radio class=sr-only name={{$ctrl.name}} ng-value="$ctrl.ngValue || $ctrl.value" ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.hiddenInputChange() tabindex=-1 /> <button type=button class=tw-radio-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{checked: $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class=tw-radio-check></span> </button> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(37)),i=a(n(38));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:"ngModel",transclude:!0,bindings:{ngModel:"=",ngRequired:"<",ngDisabled:"<",options:"<",name:"@",placeholder:"@",filter:"@",size:"@",dropdownRight:"@",dropdownUp:"@",dropdownWidth:"@",inverse:"<",hideNote:"@",hideSecondary:"@",hideIcon:"@",hideCurrency:"@",hideCircle:"@",hideLabel:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=(r=a)&&r.__esModule?r:{default:r};var s=function(){function e(t,n,r,i,a,l){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModel=t.controller("ngModel"),this.$element=t,this.$attrs=i,this.$timeout=r,this.$transclude=n,this.dom=a,this.element=t[0],l.$watch("$ctrl.ngModel",function(e,t){return s.onModelChange(e,t)})}return i(e,[{key:"$onInit",value:function(){var e,t,n,r,i,a,l,s,o;this.button=this.element.getElementsByClassName("btn")[0],this.search="",p(this.$ngModel,this),m(this.$ngModel,this,this.$element,this.$attrs),e=this,t=this.$element,n=this.$ngModel,this.options,r=this.$timeout,i=t[0],a=i.getElementsByClassName("btn")[0],l=i.getElementsByClassName("btn-group")[0],s=i.getElementsByClassName("dropdown-menu")[0],o=function(){r(function(){a===document.activeElement||l.classList.contains("open")||i.dispatchEvent(new CustomEvent("blur"))},150)},i.addEventListener("blur",function(){n.$setTouched()}),a.addEventListener("keypress",function(t){e.optionKeypress(t)}),a.addEventListener("click",function(){r(function(){e.shouldShowSearch()?i.getElementsByClassName("tw-select-filter")[0].focus():f(i)})}),a.addEventListener("focusout",o),s.addEventListener("focusout",o),s.addEventListener("keypress",function(t){"a"===t.target.tagName.toLowerCase()&&e.optionKeypress(t)}),function(e,t){e(function(e){(e.length>1||""!==e.text().trim())&&(t.hasTranscluded=!0)})}(this.$transclude,this),this.responsiveClasses=M,this.optionsPageSize=300,this.numberOfOptionsRevealed=this.optionsPageSize,this.hasMoreOptionsToReveal=!1,this.filterString="",this.filteredOptions=this.getFilteredOptions()}},{key:"$onChanges",value:function(e){e.options&&this.onOptionsChange(e.options.currentValue,e.options.previousValue)}},{key:"onModelChange",value:function(e,t){if(e!==t){(e||t)&&this.$ngModel.$setDirty();var n=g(this.options,e);this.selected=n||null}}},{key:"onOptionsChange",value:function(e,t){e!==t&&(p(this.$ngModel,this),m(this.$ngModel,this,this.$element,this.$attrs),this.filteredOptions=this.getFilteredOptions())}},{key:"circleClasses",value:function(e){var t=M(e),n=M(this.hideSecondary);return this.selected.secondary&&0===n.length?t+=" circle-sm":t+=" circle-xs",t}},{key:"buttonFocus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"optionClick",value:function(e,t){e.disabled?t.stopPropagation():(v(this.$ngModel,this,e),this.button.focus())}},{key:"optionFocus",value:function(e){v(this.$ngModel,this,e)}},{key:"optionKeypress",value:function(e){if(!e.target.classList.contains("tw-select-filter"))if(8!==h(e)){var t=function(e){return String.fromCharCode(h(e))}(e);!function(e,t,n,r){var i=b(e,t,n,t.search+r);i?t.search+=r:(t.search=r,i=b(e,t,n,t.search))}(this.$ngModel,this,this.options,t),f(this.element)}else e.preventDefault()}},{key:"placeholderClick",value:function(){y(this.$ngModel,this),this.button.focus()}},{key:"placeholderFocus",value:function(){y(this.$ngModel,this)}},{key:"getFilteredOptions",value:function(){if(this.hasMoreOptionsToReveal=!1,!this.options||!this.options.filter)return[];for(var e=this.filterString&&this.filterString.toLowerCase().replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),t=Object.create(null),n=[],r=0;r<this.options.length;++r){var i=this.options[r];if(!i.header||i.value||i.label){var a=!1,s=t[i.label],f=l.default.isArray(s);if(f)for(var h=0;h<s.length;h++)if(l.default.equals(s[h],i.value)){a=!0;break}if(!a&&(!e||o(i,e)||c(i,e)||u(i,e)||d(i,e))){if(n.length>=this.numberOfOptionsRevealed){this.hasMoreOptionsToReveal=!0;break}f?s.push(i.value):t[i.label]=[i.value],n.push(i)}}else n.push(i)}return n}},{key:"focusOnFilterInput",value:function(){var e=this.element.getElementsByClassName("tw-select-filter")[0];e&&e.focus()}},{key:"filterChange",value:function(){this.numberOfOptionsRevealed=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions(),!function(e,t){if(!l.default.isArray(e))return;var n=void 0;return e.forEach(function(e){t&&l.default.equals(t.value,e.value)&&(n=t)}),n}(this.filteredOptions,this.selected)&&this.filteredOptions.length&&v(this.$ngModel,this,this.filteredOptions[0])}},{key:"filterKeydown",value:function(e){var t=e.which||e.charCode||e.keyCode,n=this.element.querySelector(".active"),r=!!n&&n.querySelector("a"),i=this.element.getElementsByClassName("tw-select-option-link");return t===x.down?(this.moveDownOneOption(n,r,i),e.preventDefault()):t===x.up?(this.moveUpOneOption(n,r,i),e.preventDefault()):t===x.return&&(n&&(n.click(),this.button.focus()),e.preventDefault()),!0}},{key:"selectOptionUsingLink",value:function(e){var t=this.filteredOptions[e.getAttribute("index")];v(this.$ngModel,this,t)}},{key:"moveUpOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[0]){var r=this.dom.getPreviousSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];this.selectOptionUsingLink(i)}}}else this.selectOptionUsingLink(n[n.length-1])}},{key:"moveDownOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[n.length-1]){var r=this.dom.getNextSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];return void this.selectOptionUsingLink(i)}}var a=this.element.getElementsByClassName("tw-select-transcluded");a.length&&a[0].getElementsByTagName("a")[0].focus()}else this.selectOptionUsingLink(n[0])}},{key:"shouldShowSearch",value:function(){return this.filter||this.options&&this.options.length>12}},{key:"revealMoreOptions",value:function(e){e.stopPropagation(),this.numberOfOptionsRevealed+=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions()}}]),e}();function o(e,t){return e.label&&e.label.toLowerCase().search(t)>=0}function c(e,t){return e.note&&e.note.toLowerCase().search(t)>=0}function u(e,t){return e.secondary&&e.secondary.toLowerCase().search(t)>=0}function d(e,t){return e.searchable&&e.searchable.toLowerCase().search(t)>=0}function f(e){var t=e.getElementsByClassName("active")[0];t&&t.getElementsByTagName("a")[0].focus()}function h(e){return e.which||e.charCode||e.keyCode}function p(e,t){if(w(t.ngModel)){var n=g(t.options,t.ngModel);n&&v(e,t,n)}}function g(e,t){var n=!1;return e.forEach(function(e){l.default.equals(e.value,t)&&(n=e)}),n}function m(e,t,n,r){if((t.ngRequired||r.required)&&!w(t.ngModel)&&!t.placeholder)for(var i=0;i<t.options.length;i++)if(w(t.options[i].value)){v(e,t,t.options[i]);break}}function v(e,t,n){n.disabled||(e.$setViewValue(n.value),e.$commitViewValue(),t.selected=n)}function y(e,t){e.$setViewValue(null),e.$commitViewValue(),t.selected=!1}function b(e,t,n,r){var i=!1,a=r.toLowerCase();return n.forEach(function(n){i||($(n.label,a)||$(n.note,a)||$(n.secondary,a)||$(n.searchable,a))&&(v(e,t,n),i=!0)}),i}function $(e,t){return e&&0===e.toLowerCase().indexOf(t)}function w(e){return e||0===e||!1===e}function M(e){var t="",n=[],r={xs:!0,sm:!0,md:!0,lg:!0,xl:!0};return"boolean"==typeof e&&e?"hidden":e&&e.toLowerCase&&"true"===e.toLowerCase()?"hidden":(e&&(n=e.split(",")),n.forEach(function(e){r[e]&&(t+="hidden-"+e+" ")}),t)}var x={up:38,down:40,return:13};s.$inject=["$element","$transclude","$timeout","$attrs","TwDomService","$scope"],t.default=s},function(e,t){e.exports='<div class="btn-group btn-block tw-select" ng-class="{\n    dropdown: !$ctrl.dropdownUp,\n    dropup: $ctrl.dropdownUp\n  }" aria-hidden=false> <button type=button class="btn btn-input dropdown-toggle" ng-class="{\n      \'btn-input-inverse\': $ctrl.inverse,\n      \'btn-addon\': $ctrl.inverse,\n      \'btn-sm\': $ctrl.size === \'sm\',\n      \'btn-lg\': $ctrl.size === \'lg\'\n    }" data-toggle=dropdown aria-expanded=false ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.buttonFocus() tw-focusable> <span class=tw-select-selected ng-if=$ctrl.selected> <span class="circle circle-inverse pull-xs-left circle-sm" ng-if="$ctrl.selected && $ctrl.selected.icon && $ctrl.selected.secondary"> <span class="icon {{$ctrl.selected.icon}}"></span> </span> <span class="circle circle-inverse pull-xs-left" ng-class=$ctrl.circleClasses($ctrl.hideCircle) ng-if="($ctrl.selected.circleText || $ctrl.selected.circleImage || $ctrl.selected.circleIcon)"> <span ng-if=$ctrl.selected.circleText>{{$ctrl.selected.circleText}}</span> <img alt={{$ctrl.selected.label}} ng-if=$ctrl.selected.circleImage src="data:image/png;base64,\n            iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{$ctrl.selected.circleImage}} /> <span ng-if=$ctrl.selected.circleIcon class="icon {{$ctrl.selected.circleIcon}}"></span> </span> <span class=text-ellipsis> <span class="currency-flag currency-flag-{{$ctrl.selected.currency | lowercase}}" ng-if="$ctrl.selected && $ctrl.selected.currency" ng-class=$ctrl.responsiveClasses($ctrl.hideCurrency)></span> <span class="icon {{$ctrl.selected.icon}}" ng-if="$ctrl.selected && $ctrl.selected.icon && !$ctrl.selected.secondary" ng-class=$ctrl.responsiveClasses($ctrl.hideIcon)></span> <span class=tw-select-label ng-class=$ctrl.responsiveClasses($ctrl.hideLabel)> {{$ctrl.selected.label}} </span> <span ng-if=$ctrl.selected.note ng-class=$ctrl.responsiveClasses($ctrl.hideNote) class="tw-select-note small m-l-1"> {{$ctrl.selected.note}} </span> <span ng-if=$ctrl.selected.secondary ng-class=$ctrl.responsiveClasses($ctrl.hideSecondary) class="tw-select-secondary small secondary text-ellipsis"> {{$ctrl.selected.secondary}} </span> </span> </span> <span class=form-control-placeholder ng-if=!$ctrl.selected>{{$ctrl.placeholder}}</span> <span class=caret></span> </button> <ul class=dropdown-menu role=menu ng-class="{\n      \'dropdown-menu-xs-right\': $ctrl.dropdownRight === \'xs\',\n      \'dropdown-menu-sm-right\': $ctrl.dropdownRight === \'sm\',\n      \'dropdown-menu-md-right\': $ctrl.dropdownRight === \'md\',\n      \'dropdown-menu-lg-right\': $ctrl.dropdownRight === \'lg\',\n      \'dropdown-menu-xl-right\': $ctrl.dropdownRight === \'xl\',\n      \'dropdown-menu-sm\': $ctrl.dropdownWidth === \'sm\',\n      \'dropdown-menu-md\': $ctrl.dropdownWidth === \'md\',\n      \'dropdown-menu-lg\': $ctrl.dropdownWidth === \'lg\'\n    }"> <li ng-if=$ctrl.shouldShowSearch()> <a href="" class="tw-select-filter-link p-a-0" tabindex=-1 ng-focus=$ctrl.focusOnFilterInput()> <div class=input-group> <span class=input-group-addon><span class="icon icon-search"></span> </span> <input type=text class="form-control tw-select-filter" placeholder={{$ctrl.filter}} ng-model=$ctrl.filterString ng-change=$ctrl.filterChange() ng-keydown=$ctrl.filterKeydown($event) /> </div> </a> </li> <li ng-class="{active: !$ctrl.selected}" ng-if="$ctrl.placeholder && !$ctrl.ngRequired && !$ctrl.filter"> <a href="" tabindex=-1 ng-click=$ctrl.placeholderClick() ng-focus=$ctrl.placeholderFocus() class=tw-select-placeholder tw-focusable> {{$ctrl.placeholder}} </a> </li> <li ng-if="($ctrl.placeholder && !$ctrl.ngRequired) || $ctrl.filter" class=divider></li> <li ng-repeat="option in $ctrl.filteredOptions" ng-class="{\n        \'active\': $ctrl.ngModel === option.value,\n        \'disabled\': option.disabled,\n        \'dropdown-header\': option.header,\n        \'tw-select-option\': !option.header && !option.disabled\n      }"> <span ng-if=option.header class=text-ellipsis ng-click=$event.stopPropagation()>{{option.header}}</span> <a href="" ng-if=!option.header ng-click="$ctrl.optionClick(option, $event)" ng-focus=$ctrl.optionFocus(option) ng-class="{\'tw-select-option-link\': !option.disabled}" index={{$index}} tabindex=-1 tw-focusable> <div ng-if="option.icon && option.secondary" class="circle circle-inverse pull-xs-left circle-sm"> <span class="icon {{option.icon}}"></span> </div> <span ng-if="option.icon && !option.secondary" class="icon {{option.icon}} pull-xs-left"> </span> <span ng-if=option.currency class="currency-flag currency-flag-{{option.currency | lowercase}} pull-xs-left"> </span> <span class="circle circle-inverse pull-xs-left" ng-class="{\n            \'circle-sm\': option.secondary,\n            \'circle-xs\': !option.secondary\n          }" ng-if="option.circleText || option.circleImage || option.circleIcon"> <span class=tw-select-circle-text ng-if=option.circleText>{{option.circleText}}</span> <img alt={{option.label}} ng-if=option.circleImage src="data:image/png;base64,\n              iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{option.circleImage}} /> <span ng-if=option.circleIcon class="icon {{option.circleIcon}}"></span> </span>{{option.label}}<span ng-if=option.note class="tw-select-note small m-l-1">{{option.note}}</span><span ng-if=option.secondary class="tw-select-secondary small text-ellipsis">{{option.secondary}}</span> </a> </li> <li ng-if=$ctrl.hasMoreOptionsToReveal> <a href="" ng-click=$ctrl.revealMoreOptions($event) class=tw-select-load-more tabindex=-1 tw-focusable> ... </a> </li> <li ng-if=$ctrl.hasTranscluded class=divider></li> <li ng-transclude ng-if=$ctrl.hasTranscluded class=tw-select-transcluded></li> </ul> </div> <input type=hidden class=tw-select-hidden name={{$ctrl.name}} value={{$ctrl.ngModel}} ng-disabled=$ctrl.ngDisabled /> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(40)),i=a(n(41));function a(e){return e&&e.__esModule?e:{default:e}}n(42);var l={controller:r.default,template:i.default,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",icon:"@",helpImage:"@",label:"@",placeholder:"@",buttonText:"@",cancelText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",size:"@",accept:"@",httpOptions:"<",onStart:"=",onSuccess:"=",onFailure:"=",onCancel:"=",maxSize:"<",source:"<",cameraOverlay:"@",cameraDirection:"@",description:"@",instructions:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.FileValidationService=i,this.isProcessing=!1}return r(e,[{key:"$onChanges",value:function(e){e.source&&(this.isLiveCameraUpload="CAMERA_ONLY"===e.source.currentValue)}},{key:"onFileCapture",value:function(e){if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");this.file=e}}},{key:"reset",value:function(){this.isProcessing=!1,this.isDone=!1,this.clearHtmlInput(),this.setNgModel(null),this.onCancel&&this.onCancel()}},{key:"clearHtmlInput",value:function(){this.$element[0].querySelectorAll("input")&&this.$element[0].querySelectorAll("input").forEach(function(e){e.value=null})}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"isDropEligible",value:function(){return"CAMERA_ONLY"!==this.source}},{key:"onDragEnter",value:function(){this.isDroppable=this.isDropEligible()}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e[0])}},{key:"onProcessStart",value:function(e){this.isDone=!1,this.isProcessing=!0,this.onStart&&this.onStart({file:e})}},{key:"onProcessSuccess",value:function(e,t,n,r){this.isDone=!0,this.isProcessing=!1,this.dataUrl=t,this.isImage=this.FileValidationService.isImage(e),this.httpOptions&&n?this.setNgModel(n):this.setNgModel(t),this.onSuccess(e,r)}},{key:"onProcessFailure",value:function(e){this.onFailure&&this.onFailure({error:e})}}]),e}();i.$inject=["$element","$scope","$attrs","FileValidationService"],t.default=i},function(e,t){e.exports="<div class=droppable tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() tw-drop=$ctrl.onDrop(files) ng-class=\"{\n    'droppable-sm': $ctrl.size ==='sm',\n    'droppable-md': $ctrl.size ==='md' || !$ctrl.size,\n    'droppable-lg': $ctrl.size ==='lg',\n    'droppable-dropping': $ctrl.isDroppable && !$ctrl.ngDisabled,\n    'droppable-processing': !$ctrl.isDone && ($ctrl.isProcessing || $ctrl.isSuccess),\n    'droppable-complete': $ctrl.isDone\n  }\"> <div class=droppable-default-card aria-hidden=\"{{$ctrl.isDone || $ctrl.isProcessing}}\"> <tw-upload-capture label=$ctrl.label icon=$ctrl.icon accept=$ctrl.accept input-file=$ctrl.inputFile help-image=$ctrl.helpImage button-text=$ctrl.buttonText ng-disabled=$ctrl.ngDisabled placeholder=\"$ctrl.placeholder || $ctrl.description\" is-live-camera-upload=$ctrl.isLiveCameraUpload camera-overlay=$ctrl.cameraOverlay camera-direction=$ctrl.cameraDirection on-file-capture=$ctrl.onFileCapture(file)></tw-upload-capture> </div> <div class=\"droppable-processing-card droppable-card\" aria-hidden={{!$ctrl.isProcessing}}> <tw-upload-processing name=$ctrl.name file=$ctrl.file on-start=$ctrl.onProcessStart(file) on-success=\"$ctrl.onProcessSuccess(file, dataUrl, id, response)\" on-failure=$ctrl.onProcessFailure(error) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-processing> </div> <div class=\"droppable-complete-card droppable-card\" aria-hidden={{!$ctrl.isDone}}> <tw-upload-success label=$ctrl.label is-image=$ctrl.isImage file=$ctrl.file data=$ctrl.dataUrl success-message=$ctrl.successText cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-success> </div> <div class=\"droppable-dropping-card droppable-card\"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> </div> "},function(e,t,n){var r=n(43);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,"div.transparent-area{background-color:hsla(0,0%,98%,.9)}.icon-circle-shadow{background:#fff;box-shadow:0 4px 16px rgba(0,0,0,.08);padding:12px;box-sizing:border-box;border-radius:99px}.icon-circle-shadow svg{top:4px;position:relative}.inline-svg{top:.35em;position:relative}@media (min-width:576px){p.first-error{min-height:72px}}@media only screen and (max-width:575px){.empty-processing-list{height:130px}.processing-list{min-height:130px}}@media only screen and (min-width:575px){.multi-upload{height:375px}.multi-upload .empty-screen{padding-top:40px}.empty-processing-list,.processing-list{height:290px}}.processing-list{overflow:auto}.processing-list,.processing-list .processing-item .media-body,.processing-list .processing-item .media-right{border-bottom:1px solid #e2e6e8}.processing-list .last-item .processing-item .media-body,.processing-list .last-item .processing-item .media-right{border-bottom:0}.processing-list .processing-item{position:relative;width:100%}.processing-list .processing-item .vertical-center{align-self:center}.empty-processing-list{display:flex;justify-content:center}.empty-processing-list .circle{background-color:#d8f1fa}.empty-processing-list .empty-screen{align-self:center}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(46));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.capture",[]).component("twUploadCapture",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(47)),i=a(n(48));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{label:"<",icon:"<",accept:"<",buttonText:"<",ngDisabled:"<",placeholder:"<",inputFile:"<",helpImage:"<",isLiveCameraUpload:"<",cameraOverlay:"<",cameraDirection:"<",onFileCapture:"&"}};t.default=l},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <img ng-show=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-show=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 class=m-b-1 ng-if="$ctrl.label || $ctrl.description"> {{$ctrl.label || $ctrl.description}} </h4> <p class=m-b-2 ng-if="$ctrl.placeholder || $ctrl.instructions"> {{$ctrl.placeholder || $ctrl.instructions}} </p> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label=$ctrl.buttonText accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onButtonCapture(files)> </tw-upload-button> <tw-camera-button ng-if=$ctrl.isLiveCameraUpload label=$ctrl.buttonText disabled=$ctrl.ngDisabled on-click=$ctrl.onCameraButtonClick()> </tw-camera-button> <tw-camera-capture ng-if="$ctrl.isLiveCameraUpload && $ctrl.showLiveCaptureScreen" overlay={{$ctrl.cameraOverlay}} direction={{$ctrl.cameraDirection}} on-cancel=$ctrl.onCameraCancel() on-capture=$ctrl.onCameraCapture(file)> </tw-camera-capture> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.showLiveCaptureScreen=!1}return r(e,[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onCameraCancel",value:function(){this.showLiveCaptureScreen=!1}},{key:"onCameraCapture",value:function(e){this.showLiveCaptureScreen=!1,this.onFileCapture({file:e})}},{key:"onCameraButtonClick",value:function(){this.showLiveCaptureScreen=!0}},{key:"onButtonCapture",value:function(e){var t=e[0];this.onFileCapture({file:t})}}]),e}();i.$inject=["$element"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(50));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.dropping",[]).component("twUploadDropping",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(51);var a={template:((r=i)&&r.__esModule?r:{default:r}).default,bindings:{droppingText:"<"}};t.default=a},function(e,t){e.exports='<div class=droppable-card-content> <div class="circle circle-sm m-b-3"> <span class="icon icon-add"></span> </div> <h4> {{ $ctrl.droppingText || \'Drop file to start upload\' }} </h4> <p class="m-t-2 m-b-0"></p> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(12)),i=l(n(53)),a=l(n(13));function l(e){return e&&e.__esModule?e:{default:e}}var s={controller:r.default,template:i.default,bindings:a.default};t.default=s},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <tw-process size=sm state=$ctrl.processingState></tw-process> </div> <h4 class=m-b-2> <span ng-if="$ctrl.isProcessing && $ctrl.processingMessage" class=upload-processing-message> {{$ctrl.processingMessage}} </span> <span ng-if="$ctrl.isError && $ctrl.errorMessage" class=upload-failure-message> {{$ctrl.errorMessage}} </span> </h4> <ul ng-if="$ctrl.isError && $ctrl.validationMessages" class="text-xs-left m-b-2"> <li ng-if=$ctrl.validationMessages[0]>{{ $ctrl.validationMessages[0] }}</li> <li ng-if=$ctrl.validationMessages[1]>{{ $ctrl.validationMessages[1] }}</li> <li ng-if=$ctrl.validationMessages[2]>{{ $ctrl.validationMessages[2] }}</li> </ul> <a href="" ng-if=$ctrl.isError class="btn btn-primary" ng-click=$ctrl.onRemove() role=button> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(12)),i=l(n(55)),a=l(n(13));function l(e){return e&&e.__esModule?e:{default:e}}var s={controller:r.default,template:i.default,bindings:a.default};t.default=s},function(e,t){e.exports='<div class=processing-item> <div class=media> <div class="media-left vertical-center p-r-2 p-y-1"> <tw-process size=xs state=$ctrl.processingState></tw-process> </div> <div class="media-body text-xs-left p-y-1" style=overflow:auto> <div> <small class="m-b-0 text-ellipsis file-name"><strong>{{ $ctrl.file.name }}</strong></small> <small class="m-b-0 text-ellipsis tiny"> <span ng-if=$ctrl.isProcessing>{{ $ctrl.processingMessage }}</span> <span ng-if=$ctrl.isError>{{ $ctrl.errorMessage }}</span> <span ng-if=$ctrl.isSuccess>{{ $ctrl.successMessage }}</span> </small> </div> </div> <div class="media-right p-l-2 p-y-2"> <a href="" ng-if=!$ctrl.isProcessing class=close ng-click=$ctrl.onRemove() role=button>&times;</a> </div> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$q=t}return r(e,[{key:"read",value:function(e){var t=new FileReader,n=this.$q.defer();return t.onload=function(e){n.resolve(e.target.result)},t.onerror=function(e){n.reject(e)},t.readAsDataURL(e),n.promise}}]),e}();i.$inject=["$q"],t.default=angular.module("tw.styleguide.forms.upload.file-reader",[]).service("AsyncFileReader",i).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$http=t}return r(e,[{key:"save",value:function(e,t,n){if(!n)throw new Error("You must supply httpOptions");var r=new FormData,i=n.param||e;r.append(i,t);var a=function(e){var t=angular.copy(e);if(!t.url)throw new Error("You must supply a URL to post image data asynchronously");t.headers||(t.headers={});return t.headers["Content-Type"]=void 0,t.transformRequest=angular.identity,t}(n);return delete a.method,this.$http.post(a.url,r,a)}}]),e}();i.$inject=["$http"],t.default=angular.module("tw.styleguide.forms.upload.file-saver",[]).service("AsyncFileSaver",i).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(0),l=(r=a)&&r.__esModule?r:{default:r};var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return i(e,[{key:"isImage",value:function(e){return e.type&&e.type.indexOf("image")>-1}},{key:"isSmallerThanMaxSize",value:function(e,t){return!l.default.isNumber(t)||e.size<=t}}]),e}();t.default=l.default.module("tw.styleguide.forms.upload.validation-service",[]).service("FileValidationService",s).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl="",this.headers={}}return i(e,[{key:"setBaseUrl",value:function(e){this.baseUrl=e}},{key:"setHeader",value:function(e,t){this.headers[e]=t}},{key:"extendHttpOptions",value:function(e){var t=angular.copy(e);return t.headers=t.headers?r({},t.headers,this.headers):this.headers,t.url&&(t.url=""+this.baseUrl+t.url),t}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(61)),i=a(n(62));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{state:"<",size:"@",onStop:"&",promise:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$interval=n,this.$timeout=r,this.interval=null,this.processing=this.state,this.onStateChange()}return r(e,[{key:"$onChanges",value:function(e){e.state&&this.onStateChange(),e.state&&this.onSizeChange()}},{key:"onStateChange",value:function(){a(this.processing)&&(this.processing=null,this.startProcess())}},{key:"onSizeChange",value:function(){switch(this.stopProcess(),this.startProcess(),this.size||(this.size="sm"),this.size){case"xs":this.radius="11";break;case"sm":this.radius="22";break;case"xl":this.radius="61";break;default:this.radius="46%"}}},{key:"startProcess",value:function(){var e=this;this.interval||(this.interval=this.$interval(function(){e.processing=e.state,a(e.state)&&(e.stopProcess(),e.notifyConsumers())},1500))}},{key:"stopProcess",value:function(){this.interval&&(this.$interval.cancel(this.interval),this.interval=null)}},{key:"notifyConsumers",value:function(){this.onStop&&(0===this.state?this.onStop():this.$timeout(this.onStop,1800))}}]),e}();function a(e){return-1===e||0===e||1===e}i.$inject=["$scope","$interval","$timeout"],t.default=i},function(e,t){e.exports="<span class=process ng-class=\"{\n    'process-success': $ctrl.processing === 1,\n    'process-danger': $ctrl.processing === -1,\n    'process-stopped': $ctrl.processing === 0,\n    'process-xs': $ctrl.size === 'xs',\n    'process-sm': $ctrl.size === 'sm',\n    'process-md': $ctrl.size === 'md',\n    'process-lg': $ctrl.size === 'lg',\n    'process-xl': $ctrl.size === 'xl'\n  }\"> <span class=process-icon-container> <span class=process-icon-horizontal></span> <span class=process-icon-vertical></span> </span> <svg version=1.1 xmlns=http://www.w3.org/2000/svg xml:space=preserve> <circle class=process-circle cx=50% cy=50% ng-attr-r={{$ctrl.radius}} fill-opacity=0.0 /> </svg> </span> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(64));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.success",[]).component("twUploadSuccess",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(65)),i=a(n(66));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{label:"<",file:"<",data:"<",isImage:"<",successMessage:"<",cancelText:"<",onCancel:"&"}};t.default=l},function(e,t){e.exports='<div class=droppable-card-content> <h4 ng-if="$ctrl.successMessage || $ctrl.label" class="m-b-2 upload-success-message"> {{ $ctrl.successMessage || $ctrl.label }} </h4> <img ng-if="$ctrl.isImage && $ctrl.data" src="data:image/png;base64,\n      iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src="{{ $ctrl.data }}" alt=OK class="thumbnail m-b-3"/> <span class="icon icon-pdf icon-xxl" ng-if="!$ctrl.isImage || !$ctrl.data"></span> <p class="m-b-2 text-ellipsis">{{ $ctrl.fileName }}</p> <p class="m-t-2 m-b-0"> <a href="" ng-click=$ctrl.onCancel()> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </p> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.FileValidationService=n}return r(e,[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&(this.fileName=e.file.currentValue.name)}},{key:"onManualReupload",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input-reupload").files[0];this.onFileCapture(e)}}]),e}();i.$inject=["$element","FileValidationService"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(68)),a=s(n(74)),l=s(n(75));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.camera-capture",[]).service("CameraCaptureScreenHandler",a.default).service("CameraOverlayHandler",l.default).component("twCameraCapture",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(69)),i=a(n(71));function a(e){return e&&e.__esModule?e:{default:e}}n(72);var l={controller:r.default,template:i.default,bindings:{overlay:"@",direction:"@",onCancel:"&",onCapture:"&",testMode:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(70),l=(r=a)&&r.__esModule?r:{default:r};var s=function(){function e(t,n,r,i,a,l,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=a,this.$scope=n,this.$log=l,this.$q=i,this.$window=r,this.CameraCaptureScreenHandler=s}return i(e,[{key:"$onInit",value:function(){var e;this.showVideoPreview=!1,this.showVideoInPreview=!0,this.showCaptureInPreview=!1,this.mediaStream=null,this.captureButtonDisabled=!0,this.screenHeight=0,this.screenWidth=0,this.videoResHeight=0,this.videoResWidth=0,this.overlayWidth=0,this.overlayHeight=0,this.overlayXOffset=0,this.overlayYOffset=0,this.displayCanvasXOffset=0,this.displayCanvasYOffset=0,this.videoXOffset=0,this.videoHeight=100,this.videoWidth=100,this.isVideoHorizontallyFlipped=!1,this.hasGetUserMedia()||this.$log.warn("getUserMedia() is not supported by your browser"),this.overlayLoaded=!1,this.overlayElement=this.$element[0].querySelector("#video-preview #overlay"),this.displayCanvas=this.$element[0].querySelector("#video-preview #display-canvas"),this.uploadCanvas=this.$element[0].querySelector("#video-preview #upload-canvas"),this.videoPreviewElement=this.$element[0].querySelector("#video-preview"),this.video=this.$element[0].querySelector("#video-preview #video"),this.video.addEventListener("play",(e=this,function(){var t=this;function n(t){e.videoResHeight=t.videoHeight,e.videoResWidth=t.videoWidth,e.$log.debug("playing updated video : "+e.videoResHeight+" x "+e.videoResWidth);var n=e.CameraCaptureScreenHandler.getVideoSpecifications(e.screenHeight,e.screenWidth,e.videoResHeight,e.videoResWidth),r=n.videoHeightInPercentage,i=n.videoWidthInPercentage;e.isVideoHorizontallyFlipped&&i>100&&(e.videoXOffset=100-i),e.videoHeight=r,e.videoWidth=i}e.captureButtonDisabled=!1,this&&(0===this.videoHeight||0===this.videoWidth?this.addEventListener("playing",function t(){var r=this;e.$scope.$applyAsync(function(){e.videoPlaying=!0,n(r)}),this.removeEventListener("playing",t)}):e.$scope.$applyAsync(function(){e.videoPlaying=!0,n(t)}))})),this.$window.addEventListener("orientationchange",function(e){return function(){e.$window.addEventListener("resize",function t(){e.showVideoPreview&&(e.$log.debug("Orientation change detected, recompute screen"),e.startLiveCamFlow()),e.$window.removeEventListener("resize",t)})}}(this),!1),this.testMode&&"true"===this.testMode.toLowerCase()||this.startLiveCamFlow()}},{key:"startLiveCamFlow",value:function(){var e=this;this.$log.debug("----- Live cam flow start -----"),this.captureButtonDisabled=!0,this.videoPlaying=!1,this.video.pause(),this.tryAcquireFullScreen().then(function(){e.$log.debug("Acquired full screen.")}).catch(function(){e.$log.warn("Failed to acquire full screen.")}).finally(function(){e.setScreenDimensions(),e.overlayLoaded||(0===e.overlayElement.naturalHeight||0===e.overlayElement.naturalWidth?(e.$log.debug("Overlay has not loaded after full screen is acquired"),e.overlayElement.addEventListener("load",o(e))):(e.$log.debug("Overlay has loaded before full screen is acquired"),o(e).call())),e.tryAcquireMediaStream().then(function(t){e.onVideoStreamAcquisition(t)}).catch(function(t){e.$log.error(t),e.onCancelBtnClick()})})}},{key:"tryAcquireFullScreen",value:function(){return l.default.enabled?l.default.isFullscreen?this.$q.resolve():l.default.request(this.videoPreviewElement):this.$q.reject()}},{key:"onVideoStreamAcquisition",value:function(e){this.mediaStream=e,this.video.srcObject!==this.mediaStream&&(this.video.srcObject=this.mediaStream),this.showVideoPreview=!0,this.showVideoInPreview=!0,this.showCaptureInPreview=!1,this.video.play()}},{key:"tryAcquireMediaStream",value:function(){var e=this;return this.mediaStream?this.$q.resolve(this.mediaStream):this.$window.navigator.mediaDevices.enumerateDevices().then(function(t){var n=t.filter(function(e){return"videoinput"===e.kind}).length;return e.$log.debug("Found "+n+" video devices."),1!==n&&e.direction?e.direction=e.direction.toLowerCase():e.direction="user","user"===e.direction&&(e.$log.debug("Changed user video to mirror"),e.video.classList.add("display-mirror"),e.overlayElement.classList.add("display-mirror"),e.isVideoHorizontallyFlipped=!0),e.cameraConstraints={video:{width:{min:640,ideal:1280,max:1280},facingMode:{ideal:e.direction}},audio:!1},e.$window.navigator.mediaDevices.getUserMedia(e.cameraConstraints)})}},{key:"setScreenDimensions",value:function(){this.$log.debug("screen : "+this.$window.screen.height+" x "+this.$window.screen.width),this.$log.debug("screen available : "+this.$window.screen.availHeight+" x "+this.$window.screen.availWidth),this.$log.debug("screen inner : "+this.$window.innerHeight+" x "+this.$window.innerWidth),this.screenHeight=this.$window.innerHeight,this.screenWidth=this.$window.innerWidth,this.$log.debug("**screen resolved** : "+this.screenHeight+" x "+this.screenWidth)}},{key:"closeVideoStream",value:function(){l.default.enabled&&l.default.exit(),this.video.srcObject=null,this.mediaStream&&(this.mediaStream.getTracks().forEach(function(e){return e.stop()}),this.mediaStream=null),this.showVideoPreview=!1,this.captureButtonDisabled=!0}},{key:"onCancelBtnClick",value:function(){this.closeVideoStream(),this.onCancel()}},{key:"onCaptureBtnClick",value:function(){var e=this.CameraCaptureScreenHandler.getCanvasSpecifications(this.videoHeight,this.videoWidth,this.screenHeight,this.screenWidth,this.videoResHeight,this.videoResWidth),t=e.height,n=e.width,r=e.yOffset,i=e.xOffset,a=e.paintHeight,l=e.paintWidth;this.displayCanvasYOffset=r,this.displayCanvasXOffset=i,this.displayCanvas.width=n,this.displayCanvas.height=t;var s=this.displayCanvas.getContext("2d");s.resetTransform(),s.drawImage(this.video,0,0,l,a,0,0,n,t),this.showCaptureInPreview=!0,this.showVideoInPreview=!1}},{key:"onRecaptureBtnClick",value:function(){this.startLiveCamFlow()}},{key:"onUploadBtnClick",value:function(){var e;this.uploadCanvas.width=this.displayCanvas.width,this.uploadCanvas.height=this.displayCanvas.height,this.uploadCanvas.getContext("2d").drawImage(this.displayCanvas,0,0,this.displayCanvas.width,this.displayCanvas.height),this.uploadCanvas.toBlob((e=this,function(t){l.default.enabled&&l.default.exit(),e.showVideoPreview=!1,e.closeVideoStream(),e.$scope.$applyAsync(function(){e.onCapture({file:t})})}),"image/png",1)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"hasGetUserMedia",value:function(){return!(!this.$window.navigator.mediaDevices||!this.$window.navigator.mediaDevices.getUserMedia)}},{key:"getOverlayStyles",value:function(){return{left:this.overlayXOffset+"px",top:this.overlayYOffset+"px",width:this.overlayWidth+"px",height:this.overlayHeight+"px"}}},{key:"getVideoStyles",value:function(){return{left:this.videoXOffset+"%",height:this.videoHeight+"%",width:this.videoWidth+"%"}}},{key:"getCanvasStyles",value:function(){return{left:this.displayCanvasXOffset+"px",top:this.displayCanvasYOffset+"px"}}}]),e}();function o(e){return function(){if(e.overlay){var t=e.CameraCaptureScreenHandler.getOverlaySpecifications(e.screenHeight,e.screenWidth,e.overlayElement.naturalHeight,e.overlayElement.naturalWidth),n=t.height,r=t.width,i=t.yOffset,a=t.xOffset;e.$scope.$applyAsync(function(){e.overlayYOffset=i,e.overlayXOffset=a,e.overlayHeight=n,e.overlayWidth=r,e.overlayLoaded=!0})}}}s.$inject=["$element","$scope","$window","$q","$attrs","$log","CameraCaptureScreenHandler"],t.default=s},function(e,t,n){
/*!
* screenfull
* v4.2.0 - 2019-04-01
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,r="undefined"!=typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,i=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r=0,i=n.length,a={};r<i;r++)if((e=n[r])&&e[1]in t){for(r=0;r<e.length;r++)a[n[0][r]]=e[r];return a}return!1}(),a={change:i.fullscreenchange,error:i.fullscreenerror},l={request:function(e){return new Promise(function(n){var a=i.requestFullscreen,l=function(){this.off("change",l),n()}.bind(this);e=e||t.documentElement,/ Version\/5\.1(?:\.\d+)? Safari\//.test(navigator.userAgent)?e[a]():e[a](r?Element.ALLOW_KEYBOARD_INPUT:{}),this.on("change",l)}.bind(this))},exit:function(){return new Promise(function(e){if(this.isFullscreen){var n=function(){this.off("change",n),e()}.bind(this);t[i.exitFullscreen](),this.on("change",n)}else e()}.bind(this))},toggle:function(e){return this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var r=a[e];r&&t.addEventListener(r,n,!1)},off:function(e,n){var r=a[e];r&&t.removeEventListener(r,n,!1)},raw:i};i?(Object.defineProperties(l,{isFullscreen:{get:function(){return Boolean(t[i.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[i.fullscreenElement]}},enabled:{enumerable:!0,get:function(){return Boolean(t[i.fullscreenEnabled])}}}),n?(e.exports=l,e.exports.default=l):window.screenfull=l):n?e.exports=!1:window.screenfull=!1}()},function(e,t){e.exports='<div> <div id=video-preview ng-show=$ctrl.showVideoPreview class="w-100 h-100 fixed-top bg-dark"> <img id=overlay ng-show="$ctrl.showVideoInPreview && $ctrl.overlayLoaded && $ctrl.videoPlaying" ng-style=$ctrl.getOverlayStyles() ng-src={{$ctrl.overlay}} class="fixed zindex-video-overlay"/> <video id=video ng-show=$ctrl.showVideoInPreview ng-style=$ctrl.getVideoStyles() class="fixed-top zindex-video" playsinline></video> <canvas id=display-canvas ng-show=$ctrl.showCaptureInPreview ng-style=$ctrl.getCanvasStyles() class="fixed zindex-video"></canvas> <canvas id=upload-canvas ng-show=false class=fixed></canvas> <label class="fixed-bottom camera-ctrl-bar"> <span class=camera-ctrl-box-small> <span id=video-cancel class="camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close" ng-if=$ctrl.showVideoInPreview ng-click=$ctrl.onCancelBtnClick()></span> <span id=capture-cancel class="camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close" ng-if=$ctrl.showCaptureInPreview ng-click=$ctrl.onRecaptureBtnClick()></span> </span> <span class=camera-ctrl-box-big> <span id=video-confirm class=camera-ctrl-btn-big ng-if=$ctrl.showVideoInPreview ng-click="!$ctrl.captureButtonDisabled && $ctrl.onCaptureBtnClick()"> <span class=camera-ctrl-btn-big-inner></span> </span> </span> <span class=camera-ctrl-box-small> <span id=capture-confirm class="camera-ctrl-btn-small camera-ctrl-btn-confirm icon icon-check" ng-if=$ctrl.showCaptureInPreview ng-click=$ctrl.onUploadBtnClick()></span> </span> </label> </div> </div> '},function(e,t,n){var r=n(73);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(6)(!1)).push([e.i,".camera-ctrl-box-small{display:inline-block;height:60px;width:60px;margin-left:10px;margin-right:10px;vertical-align:bottom}.camera-ctrl-box-big{display:inline-block;height:84px;width:84px;margin-left:36px;margin-right:36px;vertical-align:bottom}.camera-ctrl-btn-cancel{color:red;background-color:#f8f9fa}.camera-ctrl-btn-confirm{color:green;background-color:#f8f9fa}.camera-ctrl-btn-small{display:inline-block;height:60px;width:60px;padding:4px;margin-bottom:0;font-size:52px;line-height:1;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border-radius:50%}.camera-ctrl-btn-big-inner{height:64px;width:64px;padding:0;background-color:#f8f9fa;border:1px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-btn-big,.camera-ctrl-btn-big-inner{display:inline-block;margin-bottom:0;vertical-align:middle}.camera-ctrl-btn-big{height:84px;width:84px;padding:2px;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#343a40;background-image:none;border:8px solid;border-radius:50%;border-color:#f8f9fa}.fixed{position:fixed;z-index:1030}.fixed-top{top:0}.fixed-bottom,.fixed-top{position:fixed;right:0;left:0;z-index:1030}.fixed-bottom{bottom:0}.camera-ctrl-bar{padding-top:10px;padding-bottom:10px;z-index:1032!important}.bg-dark{background-color:#343a40!important}.zindex-video{z-index:1030!important}.display-mirror{-webkit-transform:scaleX(-1);transform:scaleX(-1)}.zindex-video-overlay{z-index:1031!important}.w-100{width:100%!important}.h-100{height:100%!important}",""])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$log=t,this.CameraOverlayHandler=n}return r(e,[{key:"getVideoSpecifications",value:function(e,t,n,r){this.$log.debug("Computing video specs");var i=100,s=100;if(a(e,t,n,r))this.$log.debug("(video) Portrait narrow screen"),i=parseInt(n/r/(e/t)*100,10);else if(l(e,t,n,r)){this.$log.debug("(video) Landscape narrow screen"),s=parseInt(r/n/(t/e)*100,10)}return this.$log.debug("video width : "+s),this.$log.debug("video height : "+i),{videoHeightInPercentage:i,videoWidthInPercentage:s}}},{key:"getCanvasSpecifications",value:function(e,t,n,r,i,s){this.$log.debug("Computing canvas specs"),this.$log.debug("video width : "+t),this.$log.debug("video height : "+e),this.$log.debug("screen width : "+r),this.$log.debug("screen height : "+n),this.$log.debug("video res width : "+s),this.$log.debug("video res height : "+i);var o=null;a(n,r,i,s)?(this.$log.debug("(canvas) Portrait narrow screen"),o=function(e,t,n,r,i,a){return{height:n,width:r,yOffset:0,xOffset:0,paintHeight:parseInt(i/(e/100),10),paintWidth:a}}(e,0,n,r,i,s)):l(n,r,i,s)?(this.$log.debug("(canvas) Landscape narrow screen"),o=function(e,t,n,r,i,a){return{height:n,width:r,yOffset:0,xOffset:0,paintHeight:i,paintWidth:parseInt(a/(t/100),10)}}(0,t,n,r,i,s)):(this.$log.debug("(canvas) Normal screen"),o=function(e,t,n,r){var i=e/n,a=t/r,l=0,s=0,o=0,c=0;i===a?(l=t,s=e,o=0,c=0):i>a?(l=t,s=parseInt(a*n,10),o=0,c=parseInt((e-s)/2,10)):(l=parseInt(i*r,10),s=e,o=parseInt((t-l)/2,10),c=0);return{height:s,width:l,yOffset:c,xOffset:o,paintHeight:n,paintWidth:r}}(n,r,i,s));var c=o,u=c.height,d=c.width,f=c.yOffset,h=c.xOffset,p=c.paintHeight,g=c.paintWidth;return this.$log.debug("canvas width : "+d),this.$log.debug("canvas height : "+u),this.$log.debug("canvas x-offset : "+h),this.$log.debug("canvas y-offset : "+f),this.$log.debug("canvas width to paint : "+g),this.$log.debug("canvas height to paint : "+p),o}},{key:"getOverlaySpecifications",value:function(t,n,r,i){var a=e.getOverlayContainer(t,n),l=a.height,s=a.width,o=a.yOffset,c=a.xOffset,u=this.CameraOverlayHandler.getOverlaySpecificationsWrtContainer(l,s,r,i);return{height:u.height,width:u.width,yOffset:o+u.yOffset,xOffset:c+u.xOffset}}}],[{key:"getOverlayContainer",value:function(t,n){if(e.isScreenPortrait(t,n))return{height:n,width:n,yOffset:(t-n)/2.5,xOffset:0};var r=.9*t;return{height:r,width:r,yOffset:0,xOffset:(n-r)/2}}},{key:"isScreenPortrait",value:function(e,t){return e>=t}},{key:"isScreenLandscape",value:function(e,t){return t>=e}}]),e}();function a(e,t,n,r){return i.isScreenPortrait(e,t)&&n/r>e/t}function l(e,t,n,r){return i.isScreenLandscape(e,t)&&r/n>t/e}i.$inject=["$log","CameraOverlayHandler"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.overlayXMargin=.075,this.overlayYMargin=.075}return r(e,[{key:"getOverlaySpecificationsWrtContainer",value:function(e,t,n,r){var i=n/r,a=t-2*t*this.overlayXMargin,l=e-2*e*this.overlayYMargin,s=void 0,o=void 0;return a*i>=l?s=(o=l)/i:o=(s=a)*i,{height:o,width:s,yOffset:(e-o)/2,xOffset:(t-s)/2}}}]),e}();i.$inject=[],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(77));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.button",[]).component("twUploadButton",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(78)),i=a(n(79));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{name:"<",label:"<",isSecondary:"<",small:"<",block:"<",accept:"<",model:"<",multiple:"<",disabled:"<",onClick:"&",onCapture:"&"}};t.default=l},function(e,t){e.exports='<label class=btn ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled,\n              \'btn-primary\': !$ctrl.isSecondary,\n              \'btn-default\': $ctrl.isSecondary,\n              \'btn-block\': $ctrl.block,\n              \'btn-sm\': $ctrl.small\n            }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> <span ng-if=!$ctrl.isLiveCameraUpload> <input ng-if=!$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model /> <input ng-if=$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model multiple=multiple /> </span> </label>'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t}return r(e,[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}},{key:"onButtonCapture",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input").files;this.onCapture({files:e})}}]),e}();i.$inject=["$element"],t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(81));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.camera-button",[]).component("twCameraButton",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(82)),i=a(n(83));function a(e){return e&&e.__esModule?e:{default:e}}var l={template:r.default,controller:i.default,bindings:{label:"<",disabled:"<",onClick:"&",onCapture:"&"}};t.default=l},function(e,t){e.exports='<label class="btn btn-primary" ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> </label> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t[0].addEventListener("change",function(){n.onUserInput&&"function"==typeof n.onUserInput&&n.onUserInput()})};r.$inject=["$element"],t.default=function(){return{restrict:"A",controller:r,controllerAs:"$ctrl",bindToController:!0,scope:{onUserInput:"&"}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(0)),i=s(n(86)),a=s(n(14)),l=s(n(11));function s(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.styleguide.forms.upload.multi",[l.default,a.default]).component("twMultiUpload",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(87)),i=a(n(88));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",label:"@",placeholder:"@",icon:"@",buttonText:"@",addMoreButtonText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",onStart:"&",onFinish:"&",onFailure:"&",accept:"@",httpOptions:"<",maxSize:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var a=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.files=[],this.model=[],this.$timeout=i}return r(e,[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");0!==e.length&&(this.onStart&&this.areAllFilesProcessed()&&this.onStart(),this.files=[].concat(i(this.files),i(e)),this.$timeout(function(){var e=t.$element[0].querySelector(".processing-list");e&&(e.scrollTop=e.scrollHeight)},600))}}},{key:"onProcessSuccess",value:function(e,t,n,r){var i=this.httpOptions?"id":"dataUrl";this.files[e][i]=this.httpOptions?r:n;var a=this.files.map(function(e){return e[i]}).filter(function(e){return!!e});this.setNgModel(a),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"areAllFilesProcessed",value:function(){var e=this.httpOptions?"id":"dataUrl";return!this.files.some(function(t){return null==t[e]&&null==t.error})}},{key:"onProcessFailure",value:function(e,t,n){this.files[e].error=n,this.onFailure&&this.onFailure({error:n}),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"onProcessCancel",value:function(e){var t=this.httpOptions?"id":"dataUrl";this.files.splice(e,1);var n=this.files.map(function(e){return e[t]}).filter(function(e){return!!e});this.setNgModel(n)}},{key:"onDragEnter",value:function(){this.isDroppable=!0}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e)}},{key:"reset",value:function(){this.setNgModel(null)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}}]),e}();a.$inject=["$element","$scope","$attrs","$timeout"],t.default=a},function(e,t){e.exports='<div class="well droppable p-r-0 p-l-0 p-t-1 p-b-0 multi-upload" tw-drop=$ctrl.onDrop(files) tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() ng-class="{\'droppable-dropping\': $ctrl.isDroppable}"> <div class="droppable-dropping-card droppable-card"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> <div ng-if="$ctrl.files.length === 0" class="empty-processing-list droppable-default-card text-xs-center p-t-3"> <div class=empty-screen> <div class="circle circle-sm m-b-3 m-t-3"> <img ng-if=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-if=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 ng-if=$ctrl.label class=m-b-1>{{$ctrl.label}}</h4> <p ng-if=$ctrl.placeholder class="p-l-3 p-r-3"> {{$ctrl.placeholder}} </p> </div> </div> <div ng-if="$ctrl.files.length > 0" class="droppable-default-card p-l-3 processing-list"> <div ng-repeat="(index, file) in $ctrl.files" class=p-r-3 ng-class="{\'last-item\': $last}"> <tw-upload-processing-mini name=$ctrl.name file=file on-success="$ctrl.onProcessSuccess(index, file, dataUrl, id, response)" on-failure="$ctrl.onProcessFailure(index, file, error)" on-cancel=$ctrl.onProcessCancel(index) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText></tw-upload-processing-mini> </div> </div> <div class=m-a-3> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label="$ctrl.files.length === 0 ? $ctrl.buttonText : $ctrl.addMoreButtonText" is-secondary="$ctrl.files.length > 0" accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onFileCapture(files) block=true small=true multiple=true></tw-upload-button> </div> </div> '},function(e,t,n){"use strict";function r(e,t,n){return{restrict:"A",controller:function(){},link:function(r,i,a){r.counter=0,i[0].addEventListener("drop",function(i){var l=e(a.twDrop),s=function(){l(r,{files:i.dataTransfer.files})};if(t.$$phase)try{s()}catch(e){n(e)}else r.$apply(s);i.preventDefault(),r.counter=0},!1),i[0].addEventListener("dragover",function(e){e.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$parse","$rootScope","$exceptionHandler"],t.default=r},function(e,t,n){"use strict";function r(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragenter",function(r){var a=e(i.twDragEnter);if(n.counter++,n.counter>=1){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$parse","$rootScope"],t.default=r},function(e,t,n){"use strict";function r(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragleave",function(r){var a=e(i.twDragLeave);if(n.counter--,n.counter<=0){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$parse","$rootScope"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(93)),i=a(n(94));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",required:"@",ngRequired:"<",disabled:"@",ngDisabled:"<",locale:"@",twLocale:"<",min:"@",ngMin:"<",max:"@",ngMax:"<",modelType:"@"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.controller("ngModel");if(this.DateService=i,this.initialisedWithDate=!1,this.ngModel)this.applyDateModelIfValidOrThrowError(),this.initialisedWithDate=!0;else{if(this.modelType){if(this.modelType!==l&&this.modelType!==s)throw new Error("Invalid modelType, should be "+l+" or "+s);this.dateModelType=this.modelType}else this.dateModelType=s;this.day=null,this.month=0,this.year=null}this.setDateRequired(),this.setDateDisabled(),this.setDateLocale(),this.setMonths(),this.addValidators(a),this.addWatchers(r,a),function(e){var t=e[0],n=t.querySelector("input[name=day]"),r=t.querySelector("input[name=year]");n.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))}),r.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))})}(t),function(e,t){var n=void 0,r=e[0],i=r.querySelector("input[name=day]"),a=r.querySelector("input[name=year]");i.addEventListener("blur",function(){!0&&n&&(t.$setTouched(),r.dispatchEvent(new CustomEvent("blur")))}),a.addEventListener("blur",function(){n=!0,t.$setTouched(),r.dispatchEvent(new CustomEvent("blur"))})}(t,a)}return r(e,[{key:"applyDateModelIfValidOrThrowError",value:function(){if(!c(this.ngModel))throw new Error("date model passed should either be instance of Date or valid ISO8601 string");this.dateModelType="string"==typeof this.ngModel?l:s,this.explodeDateModel(this.ngModel)}},{key:"setMonths",value:function(){this.dateMonths=this.getMonthsBasedOnIntlSupportForLocale()}},{key:"setDateRequired",value:function(){this.dateRequired=void 0!==this.ngRequired?this.ngRequired:void 0!==this.required}},{key:"setDateDisabled",value:function(){this.dateDisabled=void 0!==this.ngDisabled?this.ngDisabled:void 0!==this.disabled}},{key:"setDateLocale",value:function(){this.locale||(this.locale=a),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale)}},{key:"explodeDateModel",value:function(e){var t="string"==typeof e?new Date(e):e;this.day=t.getUTCDate(),this.month=t.getUTCMonth(),this.year=t.getUTCFullYear()}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e){var n=d(t.ngMin,t.min),r=f(e);return!n||!r||r>=n},e.$validators.max=function(e){var n=d(t.ngMax,t.max),r=f(e);return!n||!r||r<=n}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.day",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.month",function(e,r){e!==r&&(n.adjustLastDay(),t.$setTouched(),n.initialisedWithDate&&t.$setDirty())}),e.$watch("$ctrl.year",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.ngModel",function(e,r){e!==r&&c(n.ngModel)&&(t.$setDirty(),n.explodeDateModel(n.ngModel))}),e.$watch("$ctrl.ngRequired",function(e,t){e!==t&&n.setDateRequired()}),e.$watch("$ctrl.ngDisabled",function(e,t){e!==t&&n.setDateDisabled()}),e.$watch("$ctrl.locale",function(e,t){e!==t&&(n.setDateLocale(),n.setMonths())})}},{key:"getMonthsBasedOnIntlSupportForLocale",value:function(){return function(e){return e.map(function(e,t){return{value:t,label:e}})}(this.DateService.getMonthNamesForLocale(this.locale))}},{key:"combineDate",value:function(){return this.DateService.getUTCDateFromParts(Number(this.year),Number(this.month),Number(this.day))}},{key:"updateDateModelAndValidationClasses",value:function(){if(this.adjustLastDay(),e=this.year,t=this.month,n=this.day,o(e)&&o(n)&&(o(t)||"string"==typeof(r=t)&&!isNaN(Number(r)))){var e,t,n,r,i=this.combineDate();if(this.dateModelType===l){var a=i.toISOString(),s=a.substring(0,a.indexOf("T"));this.$ngModel.$setViewValue(s)}else this.$ngModel.$setViewValue(i)}else this.$ngModel.$setViewValue(null)}},{key:"adjustLastDay",value:function(){var e=Number(this.day),t=Number(this.month),n=Number(this.year),r=this.DateService.getLastDayOfMonth(n,t);e>r&&(this.day=parseInt(r,10))}}]),e}(),a="en",l="string",s="object";function o(e){return"number"==typeof e}function c(e){return u(e)||"string"==typeof(t=e)&&u(new Date(t));var t}function u(e){return"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e.getTime())}function d(e,t){var n=e||t;return!!n&&(!!u(n="string"==typeof n?new Date(n):n)&&n)}function f(e){return"string"==typeof e?new Date(e):e}i.$inject=["$element","$log","$scope","TwDateService"],t.default=i},function(e,t){e.exports='<div class=row> <div class="col-sm-5 tw-date-month-column" ng-if=$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-3 tw-date-day-column"> <label class=sr-only>Day</label> <input type=number name=day class="form-control tw-date-day" ng-model=$ctrl.day ng-change=$ctrl.updateDateModelAndValidationClasses() placeholder=DD min=1 ng-min=1 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> <div class="col-sm-5 tw-date-month-column" ng-if=!$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-4 tw-date-year-column"> <label class=sr-only>Year</label> <input type=number name=year class="form-control tw-date-year" placeholder=YYYY ng-model=$ctrl.year ng-change=$ctrl.updateDateModelAndValidationClasses() ng-min=$ctrl.min.getFullYear() ng-max=$ctrl.max.getFullYear() maxlength=4 ng-maxlength=4 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var l,s=e[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=this;function t(e,t,n){var r=void 0,i=c(t);return h[i]&&(r=h[i][e]),r?"short"===n?r.substr(0,3):"narrow"===n?r.substr(0,1):r:null}function n(e,t,n){var r=c(t);return r&&f[r]&&("short"!==n||"ja"===r)?f[r][e]:null}function i(e,t){var n=c(t);return""+e+(d(p,e,n)||"")}function a(e,t){var n=c(t);return""+e+d(g,e,n)}function l(e,t,n){if(!e.toLocaleDateString)return null;var r=e.toLocaleDateString(t,n);return function(e){if(!e)return!0;if("ja"===c(e))return!1;return!0}(t)&&(r=r.replace(/[0-9]|\s|,|\./g,"")),r[0].toUpperCase()+r.substring(1)}function s(e){return!e||["narrow","short","long"].indexOf(e)<0?"long":e}function o(e){return function(e){try{return window.Intl.DateTimeFormat.supportedLocalesOf([e]).length>0}catch(e){return!1}}(e)?e:"en-GB"}function c(e){return e?e.substring(0,2):"en"}function u(e){return void 0!==m[e]?m[e]:" "}function d(e,t,n){return e[n]?e[n].exactMatch&&e[n].exactMatch[t]?e[n].exactMatch[t]:e[n].endsWith&&e[n].endsWith[t%10]?e[n].endsWith[t%10]:e[n].default:""}this.getLocaleDate=function(e){return e||(e=new Date),e.getDate()},this.getLocaleMonth=function(e){return e||(e=new Date),e.getMonth()},this.getLocaleFullYear=function(e){return e||(e=new Date),e.getFullYear()},this.getLocaleToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getLocaleFullYear(t),e.getLocaleMonth(t),e.getLocaleDate(t))},this.getUTCDate=function(e){return e||(e=new Date),e.getUTCDate()},this.getUTCMonth=function(e){return e||(e=new Date),e.getUTCMonth()},this.getUTCFullYear=function(e){return e||(e=new Date),e.getUTCFullYear()},this.getUTCToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getUTCFullYear(t),e.getUTCMonth(t),e.getUTCDate(t))},this.getLastDayOfMonth=function(t,n){return e.getUTCDateFromParts(t,n+1,0).getUTCDate()},this.getUTCDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setUTCFullYear(e,t,n),l.setUTCHours(r||0),l.setUTCMinutes(i||0),l.setUTCSeconds(a||0),l.setUTCMilliseconds(0),l},this.getLocaleDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setFullYear(e,t,n),l.setHours(r||0),l.setMinutes(i||0),l.setSeconds(a||0),l.setMilliseconds(0),l},this.getDatePartsFromIso=function(e){var t=0,n=0,r=parseInt(e.substr(0,4),10),i=parseInt(e.substr(5,2),10)-1,a=parseInt(e.substr(8,2),10),l=parseInt(e.substr(11,2),10)||0,s=parseInt(e.substr(14,2),10)||0,o=parseInt(e.substr(17,2),10)||0,c=e.substring(10).match("[+-]{1}[0-9]{2}(:[0-9]{2})?$");return c&&(t=parseInt(c[0].substr(1,2),10)||0,n=parseInt(c[0].substr(4,2),10)||0,"-"===c[0].substr(0,1)&&(t*=-1,n*=-1)),[r,i,a,l,s,o,t,n]},this.isIsoStringValid=function(e){return new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}:[0-9]{2}(.[0-9]{3})?(Z|[+,-][0-9]{2}(:[0-9]{2})?))?$").test(e)},this.getUTCDateFromIso=function(t){if(!e.isIsoStringValid(t))return null;var n=e.getDatePartsFromIso(t),i=r(n,8),a=i[0],l=i[1],s=i[2],o=i[3],c=i[4],u=i[5],d=i[6],f=i[7];return e.getUTCDateFromParts(a,l,s,o+d,c+f,u)},this.getDayNamesForLocale=function(t,n){for(var r=[],i=s(n),a=0;a<7;a++)r.push(e.getDayNameForLocale(a,t,i));return r},this.getDayNameForLocale=function(n,r,i){var a=t(n,r,i);if(a)return a;var c=o(r),u=s(i);return l(e.getUTCDateFromParts(2006,0,n+1),c,{weekday:"long"})||t(n,"en-GB",u)},this.getMonthNamesForLocale=function(t,n){for(var r=[],i=s(n),a=0;a<12;a++)r.push(e.getMonthNameForLocale(a,t,i));return r},this.getMonthNameForLocale=function(t,r,i){var a=n(t,r,i);if(a)return a;var c=o(r),u=s(i),d=e.getUTCDateFromParts(2e3,t,15);return"short"===i?(t=l(d,c,{month:"long"})).length>4?t.slice(0,3):t:l(d,c,{month:"long"})||n(t,"en-GB",u)},this.getWeekday=function(t,n,r){return e.getUTCDateFromParts(t,n,r).getUTCDay()},this.isMonthBeforeDay=function(e){return"ja"===c(e)||e&&-1!==e.indexOf("US",e.length-2)},this.isYearBeforeMonth=function(e){return"ja"===c(e)},this.addYears=function(t,n){return e.addToDate(t,n,0,0)},this.addMonths=function(t,n){return e.addToDate(t,0,n,0)},this.addDays=function(t,n){return e.addToDate(t,0,0,n)},this.addToDate=function(t,n,r,i){return e.getUTCDateFromParts(t.getUTCFullYear()+n,t.getUTCMonth()+r,t.getUTCDate()+i)},this.getLocaleTimeString=function(t,n){return e.getTimeString(t.getHours(),t.getMinutes(),t.getSeconds(),n)},this.getTimeString=function(e,t,n,r){if(e<10&&(e="0"+e),t<10&&(t="0"+t),"en"===c(r)){var i=e>=12?"pm":"am";return 0===(e%=12)&&(e=12),"00"===t?""+e+i:e+":"+t+i}return e+":"+t},this.getYearAndMonthPresentation=function(t,n,r,i){var l=a(t,r),s=e.getMonthNameForLocale(n,r,i||"long"),o=u(c(r));return e.isYearBeforeMonth(r)?[l,s].join(o):[s,l].join(o)},this.getYearMonthDatePresentation=function(t,n,r,l,s){var o=a(t,l),d=e.getMonthNameForLocale(n,l,s||"long"),f=i(r,l),h=u(c(l));return e.isYearBeforeMonth(l)?[o,d,f].join(h):e.isMonthBeforeDay(l)?[d,f].join(h)+", "+o:[f,d,o].join(h)},this.getLocaleNow=function(){return new Date},this.getUTCNow=function(){var t=new Date;return e.getUTCDateFromParts(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds())},this.getLocaleDateString=function(t,n,r){if(!t.getFullYear)return t;var i=e.getLocaleNow();return e.getDateString(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getDay(),n,t-i,i.getFullYear(),r)},this.getUTCDateString=function(t,n,r){if(!t)return t;var i=e.getUTCNow();return e.getDateString(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCDay(),n,t-i,i.getUTCFullYear(),r)},this.getDateString=function(t,n,r,l,s,o,c,u,d,f,h){var p=Math.abs(d)<5184e5&&"long"!==h,g=!p,m=Math.abs(d)<6912e5||"long"===h,v=!m||"long"===h,y=!m&&f!==t||"long"===h?a(t,u):"",b=v?e.getMonthNameForLocale(n,u,"short"===h?"short":"long"):"",$=g?i(r,u):"",w=m?e.getDayNameForLocale(c,u,"short"===h?"short":"long"):"",M=p?e.getTimeString(l,s,o,u):"";return e.combineDateParts(y,b,$,M,w,u)},this.combineDateParts=function(t,n,r,i,a,l){var s=c(l),o=u(s),d=void 0;if(e.isYearBeforeMonth(l)?d=[t,n,r].join(o).trim():e.isMonthBeforeDay(l)?(d=[n,r].join(o).trim(),t&&(d+=", "+t)):d=[r,n,t].join(o).trim(),a){if("ja"===s)return(d+" "+i+" ("+a+")").trim();d=n||t?(a+", "+d).trim():(a+" "+d).trim()}return(d=d+" "+i).trim()};var f={en:["January","February","March","April","May","June","July","August","September","October","November","December"],ja:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]},h={en:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ja:["日","月","火","水","木","金","土"]},p={en:{exactMatch:{11:"th",12:"th",13:"th"},endsWith:{1:"st",2:"nd",3:"rd"},default:"th"},de:{default:"."},fi:{default:"."},ja:{default:"日"}},g={ja:{default:"年"}},m={ja:""}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(97);var a={template:((r=i)&&r.__esModule?r:{default:r}).default,bindings:{date:"<",locale:"<",format:"<"}};t.default=a},function(e,t){e.exports='<span tw-tool-tip data-original-title="{{ $ctrl.date | twDateFormat : $ctrl.locale : \'long\' }}"> <span class="hidden-xs hidden-sm"> {{ $ctrl.date | twDateFormat : $ctrl.locale : $ctrl.format }} </span> <span class="hidden-md hidden-lg hidden-xl"> {{ $ctrl.date | twDateFormat : $ctrl.locale : \'short\' }} </span> </span> '},function(e,t,n){"use strict";function r(e){return function(t,n,r){if(!t)return t;var i=t;if("string"==typeof i&&(i=e.getUTCDateFromIso(i),new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}$").test(t)))return e.getUTCDateString(i,n,r);return i?e.getLocaleDateString(i,n,r):t}}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["TwDateService"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(100)),i=a(n(101));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,require:{$ngModel:"ngModel"},bindings:{type:"@",name:"@",id:"@",label:"@",placeholder:"@",step:"@",locale:"@",uploadAccept:"@",uploadIcon:"@",uploadTooLargeMessage:"@",options:"<",ngModel:"=",ngChange:"&",ngFocus:"&",ngBlur:"&",ngRequired:"<",ngDisabled:"<",ngMinlength:"<twMinlength",ngMaxlength:"<twMaxlength",ngMin:"<",ngMax:"<",ngPattern:"<",uploadOptions:"<",helpOptions:"<",textFormat:"<",validationAsync:"<",persistAsync:"<",onAsyncFailure:"&",onAsyncSuccess:"&",fileUploadSource:"<",cameraOptions:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=void 0,a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.element=t[0],i=this}return r(e,[{key:"$onInit",value:function(){this.$ngModel=this.$element.controller("ngModel"),this.addValidators(),this.uploadOptions||(this.uploadOptions={})}},{key:"change",value:function(){this.$ngModel.$setDirty(),this.$ngModel.$setViewValue(this.internalModel)}},{key:"focus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"blur",value:function(){this.$ngModel.$setTouched(),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"onAsyncUploadSuccess",value:function(e,t){i.onAsyncSuccess&&i.onAsyncSuccess({response:t})}},{key:"onAsyncUploadFailure",value:function(e){i.onAsyncFailure&&i.onAsyncFailure({response:e})}},{key:"getAutocompleteStatus",value:function(){return this.helpOptions&&this.helpOptions.message?"disabled":"on"}},{key:"addValidators",value:function(){var e=this,t=this.$ngModel;t.$validators.required=function(t,n){return!(t||n)||!e.ngRequired},t.$validators.minlength=function(t,n){var r=t||n;return"text"!==e.type||!e.ngMinlength||(!r||r.length>=e.ngMinlength)},t.$validators.maxlength=function(t,n){var r=t||n;return"text"!==e.type||!e.ngMaxlength||(!r||r.length<=e.ngMaxlength)},t.$validators.min=function(t,n){var r=t||n;return void 0===e.ngMin||("number"==typeof r&&"number"==typeof e.ngMin?r>=e.ngMin:"date"===e.type&&"string"==typeof r&&"string"==typeof e.ngMin?r>=e.ngMin:!("date"===e.type&&r instanceof Date&&e.ngMin instanceof Date)||r>=e.ngMin)},t.$validators.max=function(t,n){var r=t||n;return void 0===e.ngMax||("number"==typeof r&&"number"==typeof e.ngMax?r<=e.ngMax:"date"===e.type&&"string"==typeof r&&"string"==typeof e.ngMax?r<=e.ngMax:!("date"===e.type&&r instanceof Date&&e.ngMax instanceof Date)||r<=e.ngMax)},t.$formatters.push(function(t){return e.internalModel=t,t})}}]),e}();a.$inject=["$element"],t.default=a},function(e,t){e.exports='<div ng-switch=$ctrl.type> <div ng-switch-when=radio class=radio ng-class="{disabled: $ctrl.ngDisabled, \'radio-lg\': option.secondary}" ng-repeat="option in $ctrl.options"> <label> <tw-radio name={{$ctrl.name}} ng-value=option.value ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change(option.value) ng-click=$ctrl.change(option.value) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-radio> {{option.label}} <small ng-if=option.secondary>{{option.secondary}}</small> </label> </div> <div ng-switch-when=checkbox class=checkbox ng-class="{disabled: $ctrl.ngDisabled}"> <label> <tw-checkbox name={{$ctrl.name}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-click=$ctrl.change() ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-checkbox> {{$ctrl.placeholder}} </label> </div> <div ng-switch-when=select> <tw-select name={{$ctrl.name}} options=$ctrl.options filter="{{ $ctrl.options.length > 9 ? \' \' : \'\' }}" placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-select> </div> <div ng-switch-when=file> <tw-upload name={{$ctrl.name}} label={{$ctrl.label}} icon={{$ctrl.uploadIcon}} help-image={{$ctrl.helpOptions.image}} placeholder={{$ctrl.placeholder}} accept={{$ctrl.uploadAccept}} complete-text={{$ctrl.label}} button-text={{$ctrl.uploadOptions.buttonText}} cancel-text={{$ctrl.uploadOptions.cancelText}} processing-text="{{ $ctrl.uploadOptions.processingText }}" success-text="{{ $ctrl.uploadOptions.successText }}" failure-text="{{ $ctrl.uploadOptions.failureText }}" validation-messages=$ctrl.uploadOptions.validationMessages view-image-text={{$ctrl.uploadOptions.viewImageText}} too-large-message={{$ctrl.uploadTooLargeMessage}} max-size=$ctrl.ngMax ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() http-options=$ctrl.persistAsync source=$ctrl.fileUploadSource camera-overlay={{$ctrl.cameraOptions.overlay}} camera-direction={{$ctrl.cameraOptions.direction}} on-success=$ctrl.onAsyncUploadSuccess on-failure=$ctrl.onAsyncUploadFailure></tw-upload> </div> <div ng-switch-when=date|date-time ng-switch-when-separator=|> <tw-date name={{$ctrl.name}} locale={{$ctrl.locale}} ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() model-type=string></tw-date> </div> <div ng-switch-when=tel> <tw-telephone name="{{ $ctrl.name }}" placeholder="{{ $ctrl.placeholder }}" ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() locale="{{ $ctrl.locale }}" search-placeholder=" "></tw-telephone> </div> <input ng-switch-when=number name={{$ctrl.name}} type=number step={{$ctrl.step}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <input ng-switch-when=hidden name={{$ctrl.name}} type=hidden ng-model=$ctrl.ngModel /> <input ng-switch-when=password name={{$ctrl.name}} type=password class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <textarea ng-switch-when=textarea name={{$ctrl.name}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-pattern=$ctrl.ngPattern ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled autocomplete="{{ $ctrl.getAutocompleteStatus() }}"></textarea> <input ng-switch-default name={{$ctrl.name}} type=text class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-pattern=$ctrl.ngPattern ng-minlength=$ctrl.ngMinlength ng-maxlength=$ctrl.ngMaxlength ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled tw-text-format="{{ $ctrl.textFormat }}" autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(103)),i=a(n(104));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{name:"@",model:"=",initialField:"<field",locale:"@",required:"<",uploadOptions:"<",changeHandler:"&?onChange",focusHandler:"&?onFocus",blurHandler:"&?onBlur",errorMessage:"<",warningMessage:"<",validationMessages:"<"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t}return r(e,[{key:"$onChanges",value:function(e){var t;e.initialField&&(this.field=(t=this.initialField,JSON.parse(JSON.stringify(t))),this.control=this.field.control?this.field.control:this.RequirementsService.getControlType(e.initialField.currentValue),this.field.valuesAsync&&this.RequirementsService.prepValuesAsync(this.field,{}),this.required&&this.field.enum&&1===this.field.enum.length&&(this.model=this.field.enum[0]),this.field.default&&!this.model&&(this.model=this.field.default),this.validationMessages&&!this.field.validationMessages&&(this.field.validationMessages=this.validationMessages))}},{key:"onFocus",value:function(){this.focusHandler&&this.focusHandler()}},{key:"onBlur",value:function(){this.blurHandler&&this.blurHandler()}},{key:"onChange",value:function(e){this.changeHandler&&this.changeHandler({value:e}),this.errorMessage&&delete this.errorMessage}},{key:"onPersistAsyncFailure",value:function(e){this.uploadOptions||(this.uploadOptions={}),e.data?this.extractErrors(e.data):e.originalData&&this.extractErrors(e.originalData)}},{key:"extractErrors",value:function(e){e.message&&(this.uploadOptions.failureText=e.message),Array.isArray(e.errors)&&(this.uploadOptions.validationMessages=e.errors.map(function(e){return e.message}))}},{key:"onPersistAsyncSuccess",value:function(e){this.uploadOptions||(this.uploadOptions={}),e&&(this.uploadOptions.successText=e.data.message)}},{key:"sizeOf",value:function(e){return e?Object.keys(e).length:0}},{key:"isFeedbackDetached",value:function(e){return"date"===e||"file"===e||"radio"===e||"tel"===e}}]),e}();i.$inject=["TwRequirementsService"],t.default=i},function(e,t){e.exports='<div class="form-group tw-field-{{ $ctrl.name }}" ng-class="{\n    \'has-error\': $ctrl.field.errorMessage || $ctrl.errorMessage,\n    \'has-warning\': $ctrl.field.warningMessage || $ctrl.warningMessage,\n    \'hidden\': $ctrl.field.hidden\n  }"> <label class=control-label ng-if="$ctrl.control !== \'file\'"> {{$ctrl.field.title}} </label> <tw-form-control name="{{ $ctrl.name }}" label="{{ $ctrl.field.title }}" type="{{ $ctrl.control | lowercase }}" placeholder="{{ $ctrl.field.placeholder }}" help-options=$ctrl.field.help locale="{{ $ctrl.locale }}" upload-accept="{{ $ctrl.field.accept }}" upload-icon="{{ $ctrl.field.icon }}" upload-too-large-message="{{ $ctrl.field.tooLargeMessage }}" options=$ctrl.field.values upload-options=$ctrl.uploadOptions ng-model=$ctrl.model ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() ng-change=$ctrl.onChange($ctrl.model) ng-required=$ctrl.required ng-disabled=$ctrl.field.disabled tw-minlength="$ctrl.field.minlength || $ctrl.field.minLength" tw-maxlength="$ctrl.field.maxlength || $ctrl.field.maxLength" ng-min=$ctrl.field.minimum ng-max=$ctrl.field.maximum ng-pattern=$ctrl.field.pattern text-format=$ctrl.field.displayFormat validation-async=$ctrl.field.validationAsync persist-async=$ctrl.field.persistAsync file-upload-source=$ctrl.field.sourceType camera-options=$ctrl.field.camera on-async-success=$ctrl.onPersistAsyncSuccess(response) on-async-failure=$ctrl.onPersistAsyncFailure(response) tw-validation></tw-form-control> <div class="alert alert-danger error-messages" ng-if="$ctrl.sizeOf($ctrl.field.validationMessages) > 0 || $ctrl.errorMessage" ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> <div ng-repeat="(validationType, validationMessage) in $ctrl.field.validationMessages track by $index" class="error-{{ validationType | lowercase }}"> {{validationMessage}} </div> <div class=error-provided ng-if=$ctrl.errorMessage> {{ $ctrl.errorMessage }} </div> </div> <div class="alert alert-warning" ng-if=$ctrl.warningMessage ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> {{ $ctrl.warningMessage }} </div> <div ng-if=$ctrl.field.help class="alert alert-focus" ng-class="{\n      \'alert-detach\': $ctrl.isFeedbackDetached($ctrl.control)\n    }"> <span ng-if=$ctrl.field.help.message> {{ $ctrl.field.help.message }} </span> <ul ng-if=$ctrl.field.help.list class=list-unstyled> <li ng-repeat="helpMessage in $ctrl.field.help.list">{{ helpMessage }}</li> </ul> <img ng-if="$ctrl.field.help.image && $ctrl.control !== \'file\'" ng-src={{$ctrl.field.help.image}} alt="{{ $ctrl.field.title }}" class="thumbnail m-y-2"/> </div> </div> '},function(e,t,n){"use strict";function r(e){var t=this;function n(e){if(e instanceof Array){var t=[];return e.forEach(function(e){e.fields?t=t.concat(r(e,e.fields)):e.group?t=t.concat(r(e,e.group)):t.push(e)}),t}return e}function r(e,t){return e.name&&t.length&&!t[0].name&&(t[0].name=e.name),e.width&&t.length&&!t[0].width&&(t[0].width=e.width),e.tooltip&&t.length&&!t[0].helpText&&(t[0].helpText=e.tooltip),e.info&&t.length&&!t[0].helpText&&(t[0].helpText=e.info),2===t.length&&t.forEach(function(e){e.width="md"}),3===t.length&&(t[0].width="md",t[1].width="md"),t}function s(e){return!e.label&&e.title&&(e.label=e.title,delete e.title),!e.label&&e.name&&(e.label=e.name,delete e.name),!e.value&&e.code&&(e.value=e.code,delete e.code),!e.value&&e.key&&(e.value=e.key,delete e.key),e}this.prepRequirements=function(e){if(!e||!e.length)return[];var n=l(e);return n.forEach(function(e){e.prepared||(t.prepLegacyAlternatives(e),e.properties=t.prepFields(e.properties||e.fields),e.type&&"object"!==e.type&&!e.types&&(e.properties.type={type:"string",enum:[e.type],required:!0,hidden:!0},e.type="object"),e.prepared=!0)}),n},this.prepFields=function(e,r,i){if(!e)return{};var a=l(e);return a=function(e){if(e instanceof Array)throw new Error("Expecting a map of fields, not an array");var t={};return Object.keys(e).forEach(function(n){if(n.indexOf(".")>0){var r=n.split("."),i=r[0];t[i]||(t[i]={type:"object",properties:{}}),t[i].properties[r[1]]=e[n]}else t[n]=e[n]}),t}(a=function(e){if(e instanceof Array){var t={};return e.forEach(function(e){var n=e.key||e.name;delete e.key,t[n]=l(e)}),t}return e}(a=n(a))),Object.keys(a).forEach(function(e){a[e]=t.prepField(a[e],r,i)}),a},this.prepField=function(e,n,r){var i=l(e);return t.prepLegacyProps(i),t.prepType(i),t.prepPattern(i),t.prepValuesAsync(i,n),t.prepValidationMessages(i,r),t.prepHelp(i),i},this.prepType=function(e){switch(e.type&&e.type.toLowerCase&&e.type.toLowerCase()){case"text":e.type="string";break;case"date":e.type="string",e.format="date";break;case"password":e.type="string",e.control="password";break;case"checkbox":e.type="boolean";break;case"select":e.control||(e.control="select"),delete e.type;break;case"radio":e.control="radio",delete e.type;break;case"upload":e.type="string",e.format="base64url";break;case"tel":e.type="string",e.format="phone";break;case"textarea":e.type="string",e.control="textarea"}e.control||"object"===e.type||(e.control=t.getControlType(e))},this.prepLegacyAlternatives=function(e){!e.title&&e.label&&(e.title=e.label),e.title||(e.title=function(e){if(e&&e.length>0){var t=e.toLowerCase().split("_").join(" ");return t.charAt(0).toUpperCase()+t.slice(1)}return""}(e.type)),!e.type&&e.name&&(e.type=e.name),!e.description&&e.tooltip&&(e.description=e.tooltip),e.fieldGroups&&!e.fields&&(e.fields=n(e.fieldGroups),delete e.fieldGroups)},this.prepLegacyProps=function(e){e.name&&!e.title&&(e.title=e.name,delete e.name),e.validationRegexp&&(e.pattern=e.validationRegexp,delete e.validationRegexp),e.min&&(e.minimum=e.min,delete e.min),e.max&&(e.maximum=e.max,delete e.max),e.example&&!e.placeholder&&(e.placeholder=e.example,delete e.example),e.tooltip&&!e.helpText&&(e.helpText=e.tooltip,delete e.tooltip),e.valuesAllowed&&!e.values&&(e.values=e.valuesAllowed,delete e.valuesAllowed),e.values&&e.values.map&&(e.values=t.prepLegacyValues(e.values)),e.value&&!e.default&&(e.default=e.value,delete e.value),e.values&&e.values&&e.values.length&&e.values[0]&&!e.values[0].value&&e.values[0].label&&!e.placeholder&&(e.placeholder=e.values[0].label,e.values=e.values.slice(1))},this.prepLegacyValues=function(e){return e.map(s)},this.prepPattern=function(e){if(e.pattern)try{RegExp(e.pattern)}catch(t){console.warn("API regexp is invalid"),delete e.pattern}else delete e.pattern},this.prepValuesAsync=function(e,n){if(e.valuesAsync){var r={};e.valuesAsync.params&&e.valuesAsync.params.length&&(r=t.getParamValuesFromModel(n,e.valuesAsync.params)),t.fetchValuesAsync(e,r).catch(function(){return t.fetchValuesAsync(e,r)})}},this.fetchValuesAsync=function(n,r){return e({method:n.valuesAsync.method||"GET",url:n.valuesAsync.url,data:r||{}}).then(function(e){n.values=t.prepLegacyValues(e.data)})},this.getParamValuesFromModel=function(e,t){var n={};return t.forEach(function(t){e[t.key]?n[t.parameterName]=e[t.key]:t.required}),n},this.prepValidationMessages=function(e){e.validationMessages&&e.validationMessages.minimum&&(e.validationMessages.min=e.validationMessages.minimum,delete e.validationMessages.minimum),e.validationMessages&&e.validationMessages.maximum&&(e.validationMessages.max=e.validationMessages.maximum,delete e.validationMessages.maximum)},this.prepHelp=function(e){!e.help&&(e.helpText||e.helpImage||e.helpList||e.uploadPlaceholderImage)&&(e.help={}),e.helpText&&(e.help.message=e.helpText,delete e.helpText),e.helpImage&&(e.help.image=e.helpImage,delete e.helpImage),e.uploadPlaceholderImage&&(e.help.image=e.uploadPlaceholderImage,delete e.uploadPlaceholderImage),e.list&&(e.help.list=e.helpList,delete e.helpList)},this.getRequiredFields=i,this.getControlType=a}function i(e){if(Array.isArray(e))throw new Error("Expected field map");return Object.keys(e).filter(function(t){return e[t].required})}function a(e){if(e.control)return e.control.toLowerCase();if(e.hidden)return"hidden";if(e.valuesAsync)return"select";if(e.values&&e.values.length)return function(e){if(e.control)return e.control;if("select"===e.type)return"select";if("radio"===e.type)return"radio";var t=e.enum||e.values;if(t)return t.length>3?"select":"radio";return"select"}(e);switch(e.type){case"string":return function(e){switch(e){case"date":return"date";case"base64url":return"file";case"password":return"password";case"uri":case"email":return"text";case"phone":return"tel";default:return"text"}}(e.format);case"number":case"integer":return"number";case"boolean":return"checkbox";default:return"text"}}function l(e){return JSON.parse(JSON.stringify(e))}Object.defineProperty(t,"__esModule",{value:!0}),r.$inject=["$http"],t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(107),a=(r=i)&&r.__esModule?r:{default:r};t.default=function(){return{restrict:"A",require:{$ngModel:"ngModel"},controller:a.default}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=n[0],l=r.getClosestParentByClassName(a,"form-group"),s=n.controller("ngModel");a.addEventListener("invalid",function(e){e.preventDefault()}),s.$validators.validation=function(){return t.$evalAsync(function(){i(s,l,a)}),!0};a.addEventListener("blur",function(){t.$evalAsync(function(){i(s,l,a)})})};function i(e,t,n){if(e.$valid)return t&&t.classList.remove("has-error"),void n.removeAttribute("aria-invalid");e.$touched&&e.$dirty&&(t&&t.classList.add("has-error"),n.setAttribute("aria-invalid","true"))}r.$inject=["$scope","$element","TwDomService"],t.default=r},,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidSchema=void 0;var r=n(116),i=n(117);function a(e,t){return!(!(0,r.isObject)(e)||"object"!==t.type||!(0,r.isObject)(t.properties))&&Object.keys(t.properties).map(function(n){return function(e,t,n){if(void 0===e)return!n;return l(e,t)}(e[n],t.properties[n],t.required&&t.required.indexOf(n)>=0)}).reduce(function(e,t){return e&&t},!0)}function l(e,t){if(t.oneOf)return function(e,t){return!!(0,r.isArray)(t.oneOf)&&t.oneOf.reduce(function(t,n){return t||l(e,n)},!1)}(e,t);if(t.allOf)return function(e,t){return!!(0,r.isArray)(t.allOf)&&t.allOf.reduce(function(t,n){return t&&l(e,n)},!0)}(e,t);switch(t.type){case"string":return function(e,t){return!(0,i.getStringValidationFailures)(e,t).length}(e,t);case"number":return function(e,t){return!(0,i.getNumberValidationFailures)(e,t).length}(e,t);case"integer":return function(e,t){return!(0,i.getIntegerValidationFailures)(e,t).length}(e,t);case"boolean":return function(e,t){return!(0,i.getBooleanValidationFailures)(e,t).length}(e,t);case"array":return function(e,t){return!("array"!==t.type||!(0,r.isObject)(t.items))&&(!(0,i.getArrayValidationFailures)(e,t).length&&e.reduce(function(e,n){return l(n,t.items)},!0))}(e,t);case"object":return a(e,t);default:return!1}}t.isValidSchema=l},function(e,t,n){"use strict";function r(e){return"number"==typeof e}Object.defineProperty(t,"__esModule",{value:!0}),t.isString=function(e){return"string"==typeof e},t.isNumber=r,t.isInteger=function(e){return r(e)&&Math.floor(e)===e},t.isBoolean=function(e){return"boolean"==typeof e},t.isObject=function(e){return void 0!==e&&e.constructor===Object},t.isArray=function(e){return Array.isArray(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getObjectValidationFailures=t.getArrayValidationFailures=t.getBooleanValidationFailures=t.getIntegerValidationFailures=t.getNumberValidationFailures=t.getStringValidationFailures=t.getValidationFailures=void 0;var r=n(116),i=n(201);function a(e,t,n){if(!(0,r.isString)(e))return["type"];var a=[];return(0,i.isValidRequired)(e,n)||a.push("required"),(0,i.isValidMinLength)(e,t.minLength)||a.push("minLength"),(0,i.isValidMaxLength)(e,t.maxLength)||a.push("maxLength"),(0,i.isValidPattern)(e,t.pattern)||a.push("pattern"),(0,i.isValidMin)(e,t.min)||a.push("min"),(0,i.isValidMax)(e,t.max)||a.push("max"),a}function l(e,t,n){if(!(0,r.isNumber)(e))return["type"];var a=[];return(0,i.isValidRequired)(e,n)||a.push("required"),(0,i.isValidMin)(e,t.min)||a.push("min"),(0,i.isValidMax)(e,t.max)||a.push("max"),a}function s(e,t,n){return(0,r.isInteger)(e)?l(e,t,n):["type"]}function o(e,t,n){if(!(0,r.isBoolean)(e))return["type"];var a=[];return(0,i.isValidRequired)(e,n)||a.push("required"),a}function c(e,t){if(!(0,r.isArray)(e))return["type"];var n=[];return(0,i.isValidMinItems)(e,t.minItems)||n.push("minItems"),(0,i.isValidMaxItems)(e,t.maxItems)||n.push("maxItems"),n}function u(e,t){return(0,r.isObject)(e)?(0,r.isArray)(t.required)?t.required.map(function(t){return void 0!==e[t]}).reduce(function(e,t){return e&&t},!0)?[]:["required"]:[]:["type"]}t.getValidationFailures=function(e,t,n){switch(t.type){case"string":return a(e,t,n);case"number":return l(e,t,n);case"integer":return s(e,t,n);case"boolean":return o(e,t,n);case"array":return c(e,t);case"object":return u(e,t);default:return[]}},t.getStringValidationFailures=a,t.getNumberValidationFailures=l,t.getIntegerValidationFailures=s,t.getBooleanValidationFailures=o,t.getArrayValidationFailures=c,t.getObjectValidationFailures=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function i(e,t){if(t.allOf)return function(e,t){var n={},a=void 0;return t.allOf.forEach(function(t){"object"===(void 0===(a=i(e,t))?"undefined":r(a))&&angular.extend(n,a)}),n}(e,t);if(t.oneOf)return function(e,t){return e}(e);if(t.type)switch(t.type){case"object":return function(e,t){var n={};return Object.keys(t.properties).forEach(function(r){if(e&&void 0!==e[r]){var a=i(e[r],t.properties[r]);null!==a&&(n[r]=a)}}),n}(e,t);case"array":return function(e,t){if(Array.isArray(e))return e.map(function(e){return i(e,t)});return null}(e,t);case"string":return function(e){if("string"==typeof e)return e;return null}(e);case"number":case"integer":return function(e){if("number"==typeof e)return e;return null}(e);case"boolean":return function(e){if("boolean"==typeof e)return e;return null}(e);default:return null}return t.enum&&t.enum.indexOf(e)>=0?e:null}t.getValidModelParts=i},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidRequired=function(e,t){return!t||void 0!==e},t.isValidMinLength=function(e,t){return void 0===t||!!e&&e.length>=t},t.isValidMaxLength=function(e,t){return void 0===t||!!e&&e.length<=t},t.isValidPattern=function(e,t){try{var n=new RegExp(t);return void 0!==e&&!!n.test(e)}catch(e){return!0}},t.isValidMax=function(e,t){return void 0===t||void 0!==e&&e<=t},t.isValidMin=function(e,t){return void 0===t||void 0!==e&&e>=t},t.isValidMinItems=function(e,t){return!t||!!e&&e.length>=t},t.isValidMaxItems=function(e,t){return!t||!!e&&e.length<=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(212));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.all-of",[]).component("allOfSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(215));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.array",[]).component("arraySchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(0)),i=l(n(218)),a=l(n(22));function l(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.basic-type",[a.default]).component("basicTypeSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(225));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.object",[]).component("objectSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l(n(0)),i=l(n(228)),a=l(n(10));function l(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.one-of",[a.default]).component("oneOfSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=f(n(0)),i=f(n(208)),a=f(n(202)),l=f(n(203)),s=f(n(204)),o=f(n(221)),c=f(n(205)),u=f(n(206)),d=f(n(231));function f(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema",[i.default,a.default,l.default,s.default,o.default,c.default,u.default,d.default]).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(0)),i=a(n(209));function a(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.form",[]).component("jsonSchemaForm",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(210)),i=a(n(211));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(115);var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"onModelChange",value:function(e,t){if(this.onChange){var n=(0,i.isValidSchema)(e,this.schema);this.onChange({model:e,isValid:n,schema:t})}}}]),e}();t.default=a},function(e,t){e.exports='<generic-schema schema=$ctrl.schema model=$ctrl.model errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </generic-schema> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(213)),i=a(n(214));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(118);var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onChanges",value:function(e){(e.schema||e.model)&&(this.models=function(e,t){var n=[];e&&t&&t.forEach(function(t){n.push((0,i.getValidModelParts)(e,t)||{})});return n}(this.model,this.schema?this.schema.allOf:[]))}},{key:"onModelChange",value:function(e,t,n){var r,a=this.schema.allOf[e];this.models[e]=(0,i.getValidModelParts)(t,a),this.onChange&&this.onChange({model:(r=this.models,r.reduce(function(e,t){return angular.extend(t,e)},{})),schema:n})}}]),e}();t.default=a},function(e,t){e.exports="<h3 ng-if=$ctrl.schema.title class=page-header> {{ $ctrl.schema.title }} </h3> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(index, nestedSchema) in $ctrl.schema.allOf\" class=col-xs-12 ng-class=\"{\n      'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n      'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n      'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n    }\"> <generic-schema schema=nestedSchema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change=\"$ctrl.onModelChange(index, model, schema)\"> </generic-schema> </div> </div> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(216)),i=a(n(217));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=["string","number","integer","boolean"],a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onInit",value:function(){if(!Array.isArray(this.model)){var e=s(l(this.schema));this.model=[],e&&this.model.push(e)}}},{key:"onModelChange",value:function(e,t,n){this.model[e]=t,this.onChange&&this.onChange({model:this.model,schema:n})}},{key:"remove",value:function(e){this.model[e]&&this.model.splice(e,1)}},{key:"add",value:function(){var e=s(l(this.schema));e&&this.model.push(e)}},{key:"isSimpleType",value:function(e){return i.indexOf(e)>=0}}]),e}();function l(e){return e&&e.items&&e.items.type}function s(e){return"object"===e?{}:"array"===e?[]:null}t.default=a},function(e,t){e.exports='<div ng-if=$ctrl.isSimpleType($ctrl.schema.items.type)> Unsupported </div> <div ng-if=!$ctrl.isSimpleType($ctrl.schema.items.type)> <h4 class=page-header ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </h4> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-repeat="(index, childModel) in $ctrl.model"> <hr ng-if="index > 0" class="m-t-1 m-b-2"/> <div class=row> <div class=col-sm-9> <generic-schema schema=$ctrl.schema.items model=childModel errors=$ctrl.errors[index] locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(index, model, schema)"> </generic-schema> </div> <div class=col-sm-3> <button class="btn btn-danger btn-block m-t-3" ng-click=$ctrl.remove(index) ng-disabled="index < $ctrl.schema.minItems"> {{ $ctrl.translations.array.remove }} </button> </div> </div> </div> <button class="btn btn-default" ng-disabled="$ctrl.schema.maxItems && $ctrl.model.length >= $ctrl.schema.maxItems" ng-click=$ctrl.add()> {{ $ctrl.translations.array.add }} </button> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(219)),i=a(n(220));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(117);var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onInit",value:function(){this.key=Math.floor(1e8*Math.random()),!this.model&&this.schema.default&&this.onModelChange(this.schema.default)}},{key:"onModelChange",value:function(e){this.validationKeys=(0,i.getValidationFailures)(e,this.schema,this.required),this.onChange&&this.onChange({model:e,schema:this.schema})}},{key:"getValidationMessages",value:function(){return this.schema&&this.schema.validationMessages||this.translations&&this.translations.validation||null}}]),e}();t.default=a},function(e,t){e.exports='<tw-field name="{{ $ctrl.key }}" model=$ctrl.model field=$ctrl.schema required=$ctrl.required locale="{{ $ctrl.locale }}" on-change=$ctrl.onModelChange(value) error-message=$ctrl.errors warning-message=$ctrl.schema.help.warning validation-messages=$ctrl.getValidationMessages() upload-options=$ctrl.translations.upload class=btn-block> </tw-field> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(0)),i=u(n(222)),a=u(n(204)),l=u(n(205)),s=u(n(203)),o=u(n(202)),c=u(n(206));function u(e){return e&&e.__esModule?e:{default:e}}t.default=r.default.module("tw.json-schema.generic",[a.default,l.default,s.default,o.default,c.default]).component("genericSchema",i.default).name},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(223)),i=a(n(224));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",hideTitle:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onChanges",value:function(e){if(e.schema){var t=e.schema.currentValue;t&&t.enum&&1===t.enum.length&&this.onModelChange(t.enum[0],t)}}},{key:"onModelChange",value:function(e,t){this.onChange&&this.onChange({model:e,schema:t})}}]),e}();t.default=i},function(e,t){e.exports='<one-of-schema ng-if=$ctrl.schema.oneOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </one-of-schema> <all-of-schema ng-if=$ctrl.schema.allOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </all-of-schema> <basic-type-schema ng-if="$ctrl.schema.type && ($ctrl.schema.type !== \'object\' && $ctrl.schema.type !== \'array\')" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.required on-change="$ctrl.onModelChange(model, schema)"> </basic-type-schema> <object-schema ng-if="$ctrl.schema.type === \'object\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)" hide-title=$ctrl.hideTitle> </object-schema> <array-schema ng-if="$ctrl.schema.type === \'array\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema)"> </array-schema> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(226)),i=a(n(227));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",hideTitle:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"$onInit",value:function(){this.outputModel=angular.extend({},this.model||{})}},{key:"onModelChange",value:function(e,t,n){this.outputModel[e]=t,this.onChange&&this.onChange({model:this.outputModel,schema:n})}},{key:"isRequired",value:function(e){return this.schema.required&&this.schema.required.includes(e)}}]),e}();t.default=i},function(e,t){e.exports="<fieldset> <legend ng-if=\"$ctrl.schema.title && !$ctrl.hideTitle\"> {{ $ctrl.schema.title }} </legend> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(property, nestedSchema) in $ctrl.schema.properties\" class=col-xs-12 ng-hide=nestedSchema.hidden ng-class=\"{\n        'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n        'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n        'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n      }\"> <generic-schema schema=nestedSchema model=$ctrl.model[property] errors=$ctrl.errors[property] locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.isRequired(property) on-change=\"$ctrl.onModelChange(property, model, schema)\"> </generic-schema> </div> </div> </fieldset> "},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(229)),i=a(n(230));function a(e){return e&&e.__esModule?e:{default:e}}var l={controller:r.default,template:i.default,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",onChange:"&"}};t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(118),a=n(115);var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=[],this.activeIndex=1}return r(e,[{key:"$onChanges",value:function(e){(e.schema||e.model)&&(this.activeIndex=function(e,t){if(!e||!e.oneOf)return 1;for(var n=0;n<e.oneOf.length;n++)if((0,a.isValidSchema)(t,e.oneOf[n]))return n+1;return 1}(this.schema,this.model),this.prefillModels())}},{key:"prefillModels",value:function(){var e;this.schema&&this.schema.oneOf&&(this.models=(e=this.model,this.schema.oneOf.map(function(t){return(0,i.getValidModelParts)(e,t)})))}},{key:"onSchemaChange",value:function(e,t){this.models[t]=(0,i.getValidModelParts)(this.models[t],e),this.onModelChange(this.models[t],e)}},{key:"onModelChange",value:function(e,t,n){this.models[n]=e,this.onChange&&this.onChange({model:e,schema:t})}}]),e}();t.default=l},function(e,t){e.exports='<label class=control-label ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </label> <div class="form-group m-b-5"> <div class=radio ng-repeat="(index, schema) in $ctrl.schema.oneOf" ng-class="{\'radio-lg\': schema.description}"> <label> <tw-radio ng-model=$ctrl.activeIndex ng-value="(index + 1)" ng-change="$ctrl.onSchemaChange(schema, index)"></tw-radio> {{ schema.title }} <p ng-if=schema.description class="secondary m-b-0"> {{ schema.description }} </p> </label> </div> </div> <div ng-repeat="(index, schema) in $ctrl.schema.oneOf"> <generic-schema ng-if="$ctrl.activeIndex === (index + 1)" schema=schema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations on-change="$ctrl.onModelChange(model, schema, index)" hide-title=true> </generic-schema> </div> '},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(0),a=(r=i)&&r.__esModule?r:{default:r},l=n(118),s=n(117),o=n(115),c=d(n(201)),u=d(n(116));function d(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.default=a.default.module("tw.json-schema.validation",[]).service("SchemaValidation",function(){this.getValidModelParts=l.getValidModelParts,this.getValidationFailures=s.getValidationFailures,this.isValidSchema=o.isValidSchema,this.ruleValidators=c,this.typeValidators=u}).name}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYW5ndWxhclwiIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZvY3VzYWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvZGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9yZXF1aXJlbWVudHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZGluZy9wcm9jZXNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb2N1c2FibGUvZm9jdXNhYmxlLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmctY2FyZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmcuYmluZGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RyYWctYW5kLWRyb3AvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2NoZWNrYm94L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2FzeW5jVGFza3NDb25maWcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1hdHRpbmcvZGF0ZS1mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2Zvcm0tY29udHJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZmllbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2NoZWNrYm94L2NoZWNrYm94LmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2NoZWNrYm94L2NoZWNrYm94Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2RvbS9kb20uc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9jdXNhYmxlL2ZvY3VzYWJsZS5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZvY3VzYWJsZS9mb3JtLWNvbnRyb2wuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9yYWRpby9yYWRpby5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL3JhZGlvLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL3JhZGlvLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3NlbGVjdC9zZWxlY3QuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9zZWxlY3Qvc2VsZWN0LmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3NlbGVjdC9zZWxlY3QuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLmxlc3M/M2I4ZCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5sZXNzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYXB0dXJlLWNhcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYXB0dXJlLWNhcmQvY2FwdHVyZS1jYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhcHR1cmUtY2FyZC9jYXB0dXJlLWNhcmQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhcHR1cmUtY2FyZC9jYXB0dXJlLWNhcmQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2Ryb3BwaW5nLWNhcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9kcm9wcGluZy1jYXJkL2Ryb3BwaW5nLWNhcmQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvZHJvcHBpbmctY2FyZC9kcm9wcGluZy1jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9wcm9jZXNzaW5nLWNhcmQvcHJvY2Vzc2luZy1jYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9wcm9jZXNzaW5nLWNhcmQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9wcm9jZXNzaW5nLW1pbmkuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmctbWluaS5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc2VydmljZXMvYXN5bmMtZmlsZS1yZWFkZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3NlcnZpY2VzL2FzeW5jLWZpbGUtc2F2ZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3NlcnZpY2VzL2ZpbGUtdmFsaWRhdGlvbi5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9hc3luY1Rhc2tzQ29uZmlnL2FzeW5jVGFza3NDb25maWcuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZGluZy9wcm9jZXNzL3Byb2Nlc3MuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9sb2FkaW5nL3Byb2Nlc3MvcHJvY2Vzcy5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9sb2FkaW5nL3Byb2Nlc3MvcHJvY2Vzcy5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc3VjY2Vzcy1jYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc3VjY2Vzcy1jYXJkL3N1Y2Nlc3MtY2FyZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvc3VjY2Vzcy1jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvc3VjY2Vzcy1jYXJkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2NhbWVyYS1jYXB0dXJlLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2NhbWVyYS1jYXB0dXJlLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjcmVlbmZ1bGwvZGlzdC9zY3JlZW5mdWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2NhbWVyYS1jYXB0dXJlLmxlc3M/OWEzNCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1jYXB0dXJlL2NhbWVyYS1jYXB0dXJlLmxlc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtY2FwdHVyZS1zY3JlZW4taGFuZGxlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLW92ZXJsYXktaGFuZGxlci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLWJ1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC1idXR0b24vdXBsb2FkLWJ1dHRvbi5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQtYnV0dG9uL3VwbG9hZC1idXR0b24uaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC1idXR0b24vdXBsb2FkLWJ1dHRvbi5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWJ1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1idXR0b24vY2FtZXJhLWJ1dHRvbi5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtYnV0dG9uL2NhbWVyYS1idXR0b24uaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhbWVyYS1idXR0b24vY2FtZXJhLWJ1dHRvbi5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvZmlsZS1pbnB1dC5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9tdWx0aS11cGxvYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9tdWx0aS11cGxvYWQvbXVsdGktdXBsb2FkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL211bHRpLXVwbG9hZC9tdWx0aS11cGxvYWQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL211bHRpLXVwbG9hZC9tdWx0aS11cGxvYWQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZHJhZy1hbmQtZHJvcC9kcm9wLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZHJhZy1hbmQtZHJvcC9kcmFnLWVudGVyLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZHJhZy1hbmQtZHJvcC9kcmFnLWxlYXZlLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGF0ZS9kYXRlLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGF0ZS9kYXRlLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RhdGUvZGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9kYXRlL2RhdGUuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy9kYXRlLWZvcm1hdC9kYXRlLWZvcm1hdC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1hdHRpbmcvZGF0ZS1mb3JtYXQvZGF0ZS1mb3JtYXQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy9kYXRlLWZvcm1hdC9kYXRlLWZvcm1hdC5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2Zvcm0tY29udHJvbC9mb3JtLWNvbnRyb2wuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb3JtLWNvbnRyb2wvZm9ybS1jb250cm9sLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2Zvcm0tY29udHJvbC9mb3JtLWNvbnRyb2wuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZmllbGQvZmllbGQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZC9maWVsZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZC9maWVsZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9yZXF1aXJlbWVudHMvcmVxdWlyZW1lbnRzLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uL2NvbnRyb2wtdmFsaWRhdGlvbi5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uL2NvbnRyb2wtdmFsaWRhdGlvbi5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3NjaGVtYS12YWxpZGF0b3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3R5cGUtdmFsaWRhdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvdmFsaWRhdGlvbi92YWxpZGF0aW9uLWZhaWx1cmVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3ZhbGlkLW1vZGVsL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3J1bGUtdmFsaWRhdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYWxsLW9mLXNjaGVtYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYXJyYXktc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9iYXNpYy10eXBlLXNjaGVtYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb2JqZWN0LXNjaGVtYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb25lLW9mLXNjaGVtYS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Zvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Zvcm0vY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9mb3JtL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Zvcm0vdGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYWxsLW9mLXNjaGVtYS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2FsbC1vZi1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYWxsLW9mLXNjaGVtYS90ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hcnJheS1zY2hlbWEvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hcnJheS1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYXJyYXktc2NoZW1hL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Jhc2ljLXR5cGUtc2NoZW1hL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYmFzaWMtdHlwZS1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYmFzaWMtdHlwZS1zY2hlbWEvdGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvZ2VuZXJpYy1zY2hlbWEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2dlbmVyaWMtc2NoZW1hL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvZ2VuZXJpYy1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvZ2VuZXJpYy1zY2hlbWEvdGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb2JqZWN0LXNjaGVtYS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29iamVjdC1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb2JqZWN0LXNjaGVtYS90ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9vbmUtb2Ytc2NoZW1hL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb25lLW9mLXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9vbmUtb2Ytc2NoZW1hL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL3ZhbGlkYXRpb24vaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJhbmd1bGFyIiwic2VydmljZSIsIkRvbVNlcnZpY2UiLCJkaXJlY3RpdmUiLCJGb2N1c2FibGUiLCJGb3JtQ29udHJvbEZvY3VzIiwiRGF0ZVNlcnZpY2UiLCJjb21wb25lbnQiLCJTZWxlY3QiLCJSZXF1aXJlbWVudHNTZXJ2aWNlIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY29uY2F0Iiwiam9pbiIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwicHVzaCIsImZuIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIndpbmRvdyIsImRvY3VtZW50IiwiYWxsIiwiYXRvYiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ2V0RWxlbWVudCIsInRhcmdldCIsInBhcmVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsIm9wdGlvbnMiLCJkb21TdHlsZSIsInJlZnMiLCJqIiwicGFydHMiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsImJhc2UiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImluc2VydEludG8iLCJFcnJvciIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidW5kZWZpbmVkIiwiYXR0cnMiLCJ0eXBlIiwibm9uY2UiLCJnZXROb25jZSIsImFkZEF0dHJzIiwiZWwiLCJrZXlzIiwiZm9yRWFjaCIsInNldEF0dHJpYnV0ZSIsIm9iaiIsInVwZGF0ZSIsInJlbW92ZSIsInJlc3VsdCIsInRyYW5zZm9ybSIsImRlZmF1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsIlByb2Nlc3MiLCJGb2N1c2FibGVDb250cm9sbGVyIiwiJGVsZW1lbnQiLCJUd0RvbVNlcnZpY2UiLCJlbGVtZW50IiwiZm9ybUdyb3VwIiwiZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsIiRpbmplY3QiLCJSYWRpbyIsIkFzeW5jVGFza3NDb25maWciLCJBc3luY0ZpbGVSZWFkZXIiLCJBc3luY0ZpbGVTYXZlciIsIkZpbGVWYWxpZGF0aW9uU2VydmljZSIsIlByb2Nlc3NpbmdDYXJkIiwiUHJvY2Vzc2luZ01pbmkiLCJDb250cm9sbGVyIiwiJHRpbWVvdXQiLCJGaWxlVmFsaWRhdGlvbiIsInByb2Nlc3NpbmdTdGF0ZSIsImNoYW5nZXMiLCJmaWxlIiwiY3VycmVudFZhbHVlIiwib25GaWxlQ2FwdHVyZSIsIm5nRGlzYWJsZWQiLCJyZXNldCIsImlzUHJvY2Vzc2luZyIsIm9uU3RhcnQiLCJpc1NtYWxsZXJUaGFuTWF4U2l6ZSIsIm1heFNpemUiLCJ2YWxpZGF0aW9uTWVzc2FnZXMiLCJ0b29MYXJnZU1lc3NhZ2UiLCJhc3luY0ZhaWx1cmUiLCJzdGF0dXMiLCJkYXRhIiwibWVzc2FnZSIsImh0dHBPcHRpb25zIiwiYXN5bmNGaWxlUmVhZCIsInRoZW4iLCJkYXRhVXJsIiwiYXN5bmNGaWxlU2F2ZSIsInJlc3BvbnNlIiwiYXN5bmNTdWNjZXNzIiwiY2F0Y2giLCJlcnJvciIsImV4dGVuZEh0dHBPcHRpb25zIiwic2F2ZSIsInBhcmFtIiwicmVhZCIsImlzU3VjY2VzcyIsImlzRXJyb3IiLCJvbkNhbmNlbCIsIiRjdHJsIiwiaWRQcm9wZXJ0eSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsImFjY2VwdCIsInByb2Nlc3NpbmdNZXNzYWdlIiwic3VjY2Vzc01lc3NhZ2UiLCJlcnJvck1lc3NhZ2UiLCJjYW5jZWxUZXh0IiwiRHJvcCIsIkRyYWdFbnRlciIsIkRyYWdMZWF2ZSIsIkNoZWNrYm94IiwiQ2FwdHVyZUNhcmQiLCJEcm9wcGluZ0NhcmQiLCJTdWNjZXNzQ2FyZCIsIkNhbWVyYUNhcHR1cmUiLCJVcGxvYWRCdXR0b24iLCJDYW1lcmFCdXR0b24iLCJNdWx0aVVwbG9hZCIsIkRyYWdBbmREcm9wIiwiRmlsZUlucHV0IiwiVXBsb2FkIiwiRGF0ZUZvcm1hdCIsIkRhdGVDb250cm9sIiwiRGF0ZUZpbHRlciIsIkZvcm1Db250cm9sIiwiQ29udHJvbFZhbGlkYXRpb24iLCJGaWVsZCIsImNvbnRyb2xsZXIiLCJ0ZW1wbGF0ZSIsInJlcXVpcmUiLCIkbmdNb2RlbCIsImJpbmRpbmdzIiwibmdNb2RlbCIsIm5nVHJ1ZVZhbHVlIiwibmdGYWxzZVZhbHVlIiwibmdSZXF1aXJlZCIsIkNoZWNrYm94Q29udHJvbGxlciIsIiRzY29wZSIsImRvbSIsImFkZExhYmVsSGFuZGxlciIsImFkZFdhdGNoZXJzIiwiY2hlY2tib3hDb250YWluZXIiLCJsYWJlbCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY2hlY2tlZCIsImlzQ2hlY2tlZCIsImV2ZW50IiwiJHNldFZpZXdWYWx1ZSIsIiRzZXRUb3VjaGVkIiwic3RvcFByb3BhZ2F0aW9uIiwidmFsaWRhdGVDaGVja2JveCIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImdldENsb3Nlc3RQYXJlbnRCeVRhZ05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJwcmV2ZW50RGVmYXVsdCIsIiR3YXRjaCIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCIkc2V0RGlydHkiLCJjaGVja2JveCIsInJlbW92ZUF0dHJpYnV0ZSIsIiRldmVudCIsImlzUmVxdWlyZWQiLCIkdG91Y2hlZCIsImJ1dHRvbiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJjaGVja2JveExhYmVsIiwiJHNldFZhbGlkaXR5IiwidGFnTmFtZSIsInRhZ05hbWVVcHBlciIsInRvVXBwZXJDYXNlIiwiY2xhc3NOYW1lIiwiY29udGFpbnMiLCJnZXRQcmV2aW91c1NpYmxpbmdXaXRoQ2xhc3NOYW1lIiwic2libGluZyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJnZXROZXh0U2libGluZ1dpdGhDbGFzc05hbWUiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJyZXN0cmljdCIsIm5nVmFsdWUiLCJuZ0NoYW5nZSIsIlJhZGlvQ29udHJvbGxlciIsInJhZGlvTGFiZWwiLCJ0cmFuc2NsdWRlIiwicGxhY2Vob2xkZXIiLCJzaXplIiwiZHJvcGRvd25SaWdodCIsImRyb3Bkb3duVXAiLCJkcm9wZG93bldpZHRoIiwiaW52ZXJzZSIsImhpZGVOb3RlIiwiaGlkZVNlY29uZGFyeSIsImhpZGVJY29uIiwiaGlkZUN1cnJlbmN5IiwiaGlkZUNpcmNsZSIsImhpZGVMYWJlbCIsIlNlbGVjdENvbnRyb2xsZXIiLCIkdHJhbnNjbHVkZSIsIiRhdHRycyIsIm9uTW9kZWxDaGFuZ2UiLCJidXR0b25Hcm91cCIsImRyb3Bkb3duIiwib25Gb2N1c091dCIsInNlYXJjaCIsInByZVNlbGVjdE1vZGVsVmFsdWUiLCJzZXREZWZhdWx0SWZSZXF1aXJlZCIsImFjdGl2ZUVsZW1lbnQiLCJvcHRpb25LZXlwcmVzcyIsInNob3VsZFNob3dTZWFyY2giLCJmb2N1cyIsImZvY3VzT25BY3RpdmVMaW5rIiwidG9Mb3dlckNhc2UiLCJjbG9uZSIsInRleHQiLCJ0cmltIiwiaGFzVHJhbnNjbHVkZWQiLCJjaGVja0ZvclRyYW5zY2x1ZGVkQ29udGVudCIsInJlc3BvbnNpdmVDbGFzc2VzIiwib3B0aW9uc1BhZ2VTaXplIiwibnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQiLCJoYXNNb3JlT3B0aW9uc1RvUmV2ZWFsIiwiZmlsdGVyU3RyaW5nIiwiZmlsdGVyZWRPcHRpb25zIiwiZ2V0RmlsdGVyZWRPcHRpb25zIiwib25PcHRpb25zQ2hhbmdlIiwicHJldmlvdXNWYWx1ZSIsIm9wdGlvbiIsImZpbmRPcHRpb25Gcm9tVmFsdWUiLCJzZWxlY3RlZCIsInJlc3BvbnNpdmVPcHRpb24iLCJjbGFzc2VzIiwic2Vjb25kYXJ5Q2xhc3NlcyIsInNlY29uZGFyeSIsImRpc2FibGVkIiwic2VsZWN0T3B0aW9uIiwiZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyIsImNoYXJhY3RlciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImdldENoYXJhY3RlckZyb21LZXlwcmVzcyIsImxldHRlciIsImZvdW5kIiwic2VhcmNoQW5kU2VsZWN0IiwiY29udGludWVTZWFyY2hBbmRTZWxlY3RNYXRjaCIsInJlc2V0T3B0aW9uIiwiZmlsdGVyU3RyaW5nTG93ZXIiLCJyZXBsYWNlIiwiZW5jb3VudGVyZWRMYWJlbHNBbmRWYWx1ZXMiLCJoZWFkZXIiLCJpc0R1cGxpY2F0ZSIsImV4aXN0aW5nVmFsdWVzRm9yTGFiZWwiLCJoYXNFeGlzdGluZ1ZhbHVlcyIsImlzQXJyYXkiLCJlcXVhbHMiLCJsYWJlbE1hdGNoZXMiLCJub3RlTWF0Y2hlcyIsInNlY29uZGFyeU1hdGNoZXMiLCJzZWFyY2hhYmxlTWF0Y2hlcyIsImZpbHRlcklucHV0Iiwic2VsZWN0ZWRPcHRpb24iLCJmaW5kU2VsZWN0ZWQiLCJjaGFyYWN0ZXJDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsImtleUNvZGUiLCJhY3RpdmVPcHRpb24iLCJhY3RpdmVMaW5rIiwib3B0aW9uTGlua3MiLCJkb3duIiwibW92ZURvd25PbmVPcHRpb24iLCJ1cCIsIm1vdmVVcE9uZU9wdGlvbiIsInJldHVybiIsImNsaWNrIiwicHJldmlvdXNPcHRpb24iLCJwcmV2aW91c09wdGlvbkxpbmsiLCJzZWxlY3RPcHRpb25Vc2luZ0xpbmsiLCJuZXh0T3B0aW9uIiwibmV4dE9wdGlvbkxpbmsiLCJ0cmFuc2NsdWRlZE9wdGlvbiIsIm5vdGUiLCJzZWFyY2hhYmxlIiwiaXNWYWxpZE1vZGVsIiwib3B0aW9uTWF0Y2giLCJyZXF1aXJlZCIsIiRjb21taXRWaWV3VmFsdWUiLCJ0ZXJtIiwic2VhcmNoVGVybSIsImNvbnRhaW5zU2VhcmNoIiwiYnJlYWtwb2ludHMiLCJ2YWxpZEJyZWFrcG9pbnRzIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInNwbGl0IiwiYnJlYWtwb2ludCIsImljb24iLCJoZWxwSW1hZ2UiLCJidXR0b25UZXh0IiwiZHJvcHBpbmdUZXh0IiwicHJvY2Vzc2luZ1RleHQiLCJzdWNjZXNzVGV4dCIsImZhaWx1cmVUZXh0IiwiY2FtZXJhT3ZlcmxheSIsImNhbWVyYURpcmVjdGlvbiIsImRlc2NyaXB0aW9uIiwiaW5zdHJ1Y3Rpb25zIiwiVXBsb2FkQ29udHJvbGxlciIsImlzTGl2ZUNhbWVyYVVwbG9hZCIsImlzRG9uZSIsImNsZWFySHRtbElucHV0Iiwic2V0TmdNb2RlbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dCIsImlzRHJvcHBhYmxlIiwiaXNEcm9wRWxpZ2libGUiLCJmaWxlcyIsImlzSW1hZ2UiLCJsb2NhbHMiLCJsb2NhdGlvbiIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwicGF0aG5hbWUiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwiJDEiLCJ0ZXN0IiwiaW5wdXRGaWxlIiwic2hvd0xpdmVDYXB0dXJlU2NyZWVuIiwidmlld0ljb24iLCIkcSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJkZWZlcnJlZCIsImRlZmVyIiwib25sb2FkIiwicmVzb2x2ZSIsIm9uZXJyb3IiLCJyZWplY3QiLCJyZWFkQXNEYXRhVVJMIiwicHJvbWlzZSIsIiRodHRwIiwiZmllbGROYW1lIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFwcGVuZCIsIiRodHRwT3B0aW9ucyIsIiRpbnB1dE9wdGlvbnMiLCJjb3B5IiwidXJsIiwiaGVhZGVycyIsInRyYW5zZm9ybVJlcXVlc3QiLCJpZGVudGl0eSIsInByZXBhcmVIdHRwT3B0aW9ucyIsIm1ldGhvZCIsInBvc3QiLCJpc051bWJlciIsImlucHV0T3B0aW9ucyIsInN0YXRlIiwib25TdG9wIiwiUHJvY2Vzc0NvbnRyb2xsZXIiLCIkaW50ZXJ2YWwiLCJpbnRlcnZhbCIsInByb2Nlc3NpbmciLCJvblN0YXRlQ2hhbmdlIiwib25TaXplQ2hhbmdlIiwiaXNTdG9wcGVkIiwic3RhcnRQcm9jZXNzIiwic3RvcFByb2Nlc3MiLCJyYWRpdXMiLCJub3RpZnlDb25zdW1lcnMiLCJjYW5jZWwiLCJTdWNjZXNzQ2FyZENvbnRyb2xsZXIiLCJmaWxlTmFtZSIsIkNhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyIiwiQ2FtZXJhT3ZlcmxheUhhbmRsZXIiLCJvdmVybGF5IiwiZGlyZWN0aW9uIiwib25DYXB0dXJlIiwidGVzdE1vZGUiLCJDYW1lcmFDYXB0dXJlQ29udHJvbGxlciIsIiR3aW5kb3ciLCIkbG9nIiwic2hvd1ZpZGVvUHJldmlldyIsInNob3dWaWRlb0luUHJldmlldyIsInNob3dDYXB0dXJlSW5QcmV2aWV3IiwibWVkaWFTdHJlYW0iLCJjYXB0dXJlQnV0dG9uRGlzYWJsZWQiLCJzY3JlZW5IZWlnaHQiLCJzY3JlZW5XaWR0aCIsInZpZGVvUmVzSGVpZ2h0IiwidmlkZW9SZXNXaWR0aCIsIm92ZXJsYXlXaWR0aCIsIm92ZXJsYXlIZWlnaHQiLCJvdmVybGF5WE9mZnNldCIsIm92ZXJsYXlZT2Zmc2V0IiwiZGlzcGxheUNhbnZhc1hPZmZzZXQiLCJkaXNwbGF5Q2FudmFzWU9mZnNldCIsInZpZGVvWE9mZnNldCIsInZpZGVvSGVpZ2h0IiwidmlkZW9XaWR0aCIsImlzVmlkZW9Ib3Jpem9udGFsbHlGbGlwcGVkIiwiaGFzR2V0VXNlck1lZGlhIiwid2FybiIsIm92ZXJsYXlMb2FkZWQiLCJvdmVybGF5RWxlbWVudCIsImRpc3BsYXlDYW52YXMiLCJ1cGxvYWRDYW52YXMiLCJ2aWRlb1ByZXZpZXdFbGVtZW50IiwidmlkZW8iLCJhc3NpZ25WaWRlb0RpbWVuc2lvbnMiLCJkZWJ1ZyIsImdldFZpZGVvU3BlY2lmaWNhdGlvbnMiLCJ2aWRlb0hlaWdodEluUGVyY2VudGFnZSIsInZpZGVvV2lkdGhJblBlcmNlbnRhZ2UiLCJ2aWRlb1BsYXlpbmdDYWxsYmFjayIsIiRhcHBseUFzeW5jIiwidmlkZW9QbGF5aW5nIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uT3JpZW50YXRpb25DaGFuZ2UiLCJzdGFydExpdmVDYW1GbG93IiwiY3JlYXRlT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFjayIsInBhdXNlIiwidHJ5QWNxdWlyZUZ1bGxTY3JlZW4iLCJmaW5hbGx5Iiwic2V0U2NyZWVuRGltZW5zaW9ucyIsIm5hdHVyYWxIZWlnaHQiLCJuYXR1cmFsV2lkdGgiLCJjcmVhdGVPdmVybGF5T25Mb2FkQ2FsbGJhY2siLCJ0cnlBY3F1aXJlTWVkaWFTdHJlYW0iLCJzdHJlYW0iLCJvblZpZGVvU3RyZWFtQWNxdWlzaXRpb24iLCJlcnIiLCJvbkNhbmNlbEJ0bkNsaWNrIiwic2NyZWVuZnVsbCIsImVuYWJsZWQiLCJpc0Z1bGxzY3JlZW4iLCJyZXF1ZXN0Iiwic3JjT2JqZWN0IiwicGxheSIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsImVudW1lcmF0ZURldmljZXMiLCJkZXZpY2VzIiwibnVtVmlkZW9EZXZpY2VzIiwiZGV2aWNlIiwia2luZCIsImNhbWVyYUNvbnN0cmFpbnRzIiwid2lkdGgiLCJtaW4iLCJpZGVhbCIsIm1heCIsImZhY2luZ01vZGUiLCJhdWRpbyIsImdldFVzZXJNZWRpYSIsInNjcmVlbiIsImhlaWdodCIsImF2YWlsSGVpZ2h0IiwiYXZhaWxXaWR0aCIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImV4aXQiLCJnZXRUcmFja3MiLCJ0cmFjayIsInN0b3AiLCJjbG9zZVZpZGVvU3RyZWFtIiwiZ2V0Q2FudmFzU3BlY2lmaWNhdGlvbnMiLCJ5T2Zmc2V0IiwieE9mZnNldCIsInBhaW50SGVpZ2h0IiwicGFpbnRXaWR0aCIsImN0eCIsImdldENvbnRleHQiLCJyZXNldFRyYW5zZm9ybSIsImRyYXdJbWFnZSIsInRvQmxvYiIsImxlZnQiLCJ0b3AiLCJnZXRPdmVybGF5U3BlY2lmaWNhdGlvbnMiLCJpc0NvbW1vbmpzIiwia2V5Ym9hcmRBbGxvd2VkIiwiRWxlbWVudCIsInZhbCIsImZuTWFwIiwicmV0IiwiZXZlbnROYW1lTWFwIiwiY2hhbmdlIiwiZnVsbHNjcmVlbmNoYW5nZSIsImZ1bGxzY3JlZW5lcnJvciIsImVsZW0iLCJQcm9taXNlIiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJvbkZ1bGxTY3JlZW5FbnRlcmVkIiwib2ZmIiwiZG9jdW1lbnRFbGVtZW50IiwidXNlckFnZW50IiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJvbiIsIm9uRnVsbFNjcmVlbkV4aXQiLCJleGl0RnVsbHNjcmVlbiIsInRvZ2dsZSIsIm9uY2hhbmdlIiwiY2FsbGJhY2siLCJldmVudE5hbWUiLCJyYXciLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImhhc05hcnJvd1ZpZGVvSW5Qb3J0cmFpdFNjcmVlbiIsInBhcnNlSW50IiwiaGFzTmFycm93VmlkZW9JbkxhbmRTY2FwZVNjcmVlbiIsImNhbnZhc0RpbWVuc2lvbnMiLCJnZXRDYW52YXNTcGVjc0ZvclBvcnRyYWl0U2NyZWVuV2l0aE5hcnJvd1ZpZGVvIiwiZ2V0Q2FudmFzU3BlY3NGb3JMYW5kc2NhcGVTY3JlZW5XaXRoTmFycm93VmlkZW8iLCJoZWlnaHRNdWx0Iiwid2lkdGhNdWx0IiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJjYW52YXNYT2Zmc2V0IiwiY2FudmFzWU9mZnNldCIsImdldENhbnZhc1NwZWNzIiwib3ZlcmxheU5hdHVyYWxIZWlnaHQiLCJvdmVybGF5TmF0dXJhbFdpZHRoIiwiZ2V0T3ZlcmxheUNvbnRhaW5lciIsImNvbnRhaW5lckhlaWdodCIsImNvbnRhaW5lcldpZHRoIiwiY29udGFpbmVyWU9mZnNldCIsImNvbnRhaW5lclhPZmZzZXQiLCJnZXRPdmVybGF5U3BlY2lmaWNhdGlvbnNXcnRDb250YWluZXIiLCJpc1NjcmVlblBvcnRyYWl0IiwiYXZhaWxhYmxlSGVpZ2h0IiwiaXNTY3JlZW5MYW5kc2NhcGUiLCJvdmVybGF5WE1hcmdpbiIsIm92ZXJsYXlZTWFyZ2luIiwib3ZlcmxheUhlaWdodFdpZHRoUmF0aW8iLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsImlzU2Vjb25kYXJ5Iiwic21hbGwiLCJibG9jayIsIm1vZGVsIiwibXVsdGlwbGUiLCJvbkNsaWNrIiwiRmlsZUlucHV0Q29udHJvbGxlciIsIm9uVXNlcklucHV0IiwiY29udHJvbGxlckFzIiwiYmluZFRvQ29udHJvbGxlciIsInNjb3BlIiwiQ29tcG9uZW50IiwiYWRkTW9yZUJ1dHRvblRleHQiLCJvbkZpbmlzaCIsImFyZUFsbEZpbGVzUHJvY2Vzc2VkIiwib2JqRGl2Iiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0IiwiZmlsZU9iamVjdCIsInNvbWUiLCJ0d0Ryb3AiLCIkcGFyc2UiLCIkcm9vdFNjb3BlIiwiJGV4Y2VwdGlvbkhhbmRsZXIiLCJhdHRyIiwiY291bnRlciIsImRhdGFUcmFuc2ZlciIsIiQkcGhhc2UiLCIkYXBwbHkiLCJ0d0RyYWdFbnRlciIsIiRldmFsQXN5bmMiLCJ0d0RyYWdMZWF2ZSIsImxvY2FsZSIsInR3TG9jYWxlIiwibmdNaW4iLCJuZ01heCIsIm1vZGVsVHlwZSIsIkRhdGVDb250cm9sbGVyIiwiVHdEYXRlU2VydmljZSIsImluaXRpYWxpc2VkV2l0aERhdGUiLCJhcHBseURhdGVNb2RlbElmVmFsaWRPclRocm93RXJyb3IiLCJTVFJJTkdfVFlQRSIsIk9CSkVDVF9UWVBFIiwiZGF0ZU1vZGVsVHlwZSIsImRheSIsIm1vbnRoIiwieWVhciIsInNldERhdGVSZXF1aXJlZCIsInNldERhdGVEaXNhYmxlZCIsInNldERhdGVMb2NhbGUiLCJzZXRNb250aHMiLCJhZGRWYWxpZGF0b3JzIiwiZGF5SW5wdXQiLCJ5ZWFySW5wdXQiLCJhZGRGb2N1c0hhbmRsZXJzIiwieWVhclRvdWNoZWQiLCJhZGRCbHVySGFuZGxlcnMiLCJ2YWxpZERhdGUiLCJleHBsb2RlRGF0ZU1vZGVsIiwiZGF0ZU1vbnRocyIsImdldE1vbnRoc0Jhc2VkT25JbnRsU3VwcG9ydEZvckxvY2FsZSIsImRhdGVSZXF1aXJlZCIsImRhdGVEaXNhYmxlZCIsIkRFRkFVTFRfTE9DQUxFX0VOIiwibW9udGhCZWZvcmVEYXkiLCJpc01vbnRoQmVmb3JlRGF5IiwiZGF0ZSIsImRhdGVPYmoiLCJEYXRlIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRnVsbFllYXIiLCIkdmFsaWRhdG9ycyIsImxpbWl0IiwicHJlcERhdGVMaW1pdEZvckNvbXBhcmlzb24iLCJkYXRlVmFsdWUiLCJwcmVwRGF0ZVZhbHVlRm9yQ29tcGFyaXNvbiIsImFkanVzdExhc3REYXkiLCJtb250aE5hbWVzIiwibW9udGhOYW1lIiwiZXh0ZW5kTW9udGhzV2l0aElkcyIsImdldE1vbnRoTmFtZXNGb3JMb2NhbGUiLCJnZXRVVENEYXRlRnJvbVBhcnRzIiwiTnVtYmVyIiwiaXNOYU4iLCJjb21iaW5lRGF0ZSIsImlzb1N0cmluZyIsInRvSVNPU3RyaW5nIiwiZGF0ZVN0cmluZyIsInN1YnN0cmluZyIsImxhc3RVVENEYXlGb3JNb250aEFuZFllYXIiLCJnZXRMYXN0RGF5T2ZNb250aCIsInZhbGlkRGF0ZU9iamVjdCIsImdldFRpbWUiLCJuZ0xpbWl0IiwiYXR0ckxpbWl0IiwiZ2V0RGVmYXVsdERheU5hbWUiLCJkYXlPZldlZWsiLCJmb3JtYXQiLCJkZWZhdWx0RGF5TmFtZSIsImxhbmd1YWdlIiwiZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlIiwiREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0UiLCJzdWJzdHIiLCJnZXREZWZhdWx0TW9udGhOYW1lIiwiREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRSIsImdldERhdGVOYW1lIiwiZGF5T2ZNb250aCIsImxhbmciLCJnZXRTdWZmaXgiLCJEQVlfU1VGRklYRVNfQllfTEFOR1VBR0UiLCJnZXRZZWFyTmFtZSIsIllFQVJfU1VGRklYRVNfQllfTEFOR1VBR0UiLCJnZXRMb2NhbGlzZWREYXRlTmFtZSIsImZvcm1hdHRpbmdPYmplY3QiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJpc0xvY2FsZVRyYW5zbGF0aW9uUmVxdWlyZXNTdHJpcHBpbmciLCJnZXRWYWxpZERhdGVGb3JtYXQiLCJnZXRWYWxpZExvY2FsZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInN1cHBvcnRlZExvY2FsZXNPZiIsImlzSW50bFN1cHBvcnRlZEZvckxvY2FsZSIsImdldERlbGltaXRlciIsIkRFTElNSVRFUlNfQllfTEFOR1VBR0UiLCJzdWZmaXhlcyIsImV4YWN0TWF0Y2giLCJlbmRzV2l0aCIsImdldExvY2FsZURhdGUiLCJnZXREYXRlIiwiZ2V0TG9jYWxlTW9udGgiLCJnZXRNb250aCIsImdldExvY2FsZUZ1bGxZZWFyIiwiZ2V0RnVsbFllYXIiLCJnZXRMb2NhbGVUb2RheSIsIm5vdyIsImdldFVUQ1RvZGF5IiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsInNldFVUQ0Z1bGxZZWFyIiwic2V0VVRDSG91cnMiLCJzZXRVVENNaW51dGVzIiwic2V0VVRDU2Vjb25kcyIsInNldFVUQ01pbGxpc2Vjb25kcyIsImdldExvY2FsZURhdGVGcm9tUGFydHMiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwic2V0TWludXRlcyIsInNldFNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJnZXREYXRlUGFydHNGcm9tSXNvIiwiaXNvRGF0ZSIsImhvdXJzT2Zmc2V0IiwibWludXRlc09mZnNldCIsIm9mZnNldCIsIm1hdGNoIiwiaXNJc29TdHJpbmdWYWxpZCIsIlJlZ0V4cCIsImdldFVUQ0RhdGVGcm9tSXNvIiwiZ2V0RGF5TmFtZXNGb3JMb2NhbGUiLCJkYXlzIiwidmFsaWRGb3JtYXQiLCJnZXREYXlOYW1lRm9yTG9jYWxlIiwidmFsaWRMb2NhbGUiLCJ3ZWVrZGF5IiwibW9udGhzIiwiZ2V0TW9udGhOYW1lRm9yTG9jYWxlIiwiZGVmYXVsdE1vbnRoTmFtZSIsInNsaWNlIiwiZ2V0V2Vla2RheSIsImdldFVUQ0RheSIsImlzWWVhckJlZm9yZU1vbnRoIiwiYWRkWWVhcnMiLCJ5ZWFycyIsImFkZFRvRGF0ZSIsImFkZE1vbnRocyIsImFkZERheXMiLCJnZXRMb2NhbGVUaW1lU3RyaW5nIiwiZ2V0VGltZVN0cmluZyIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJhbXBtIiwiZ2V0WWVhckFuZE1vbnRoUHJlc2VudGF0aW9uIiwieWVhck5hbWUiLCJkZWxpbWl0ZXIiLCJnZXRZZWFyTW9udGhEYXRlUHJlc2VudGF0aW9uIiwiZGF0ZU5hbWUiLCJnZXRMb2NhbGVOb3ciLCJnZXRVVENOb3ciLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiZ2V0TG9jYWxlRGF0ZVN0cmluZyIsImdldERhdGVTdHJpbmciLCJnZXREYXkiLCJnZXRVVENEYXRlU3RyaW5nIiwiY3VycmVudFllYXIiLCJoYXNUaW1lIiwiTWF0aCIsImFicyIsImhhc0RhdGUiLCJoYXNXZWVrZGF5IiwiaGFzTW9udGgiLCJ3ZWVrZGF5TmFtZSIsInRpbWVOYW1lIiwiY29tYmluZURhdGVQYXJ0cyIsImRheU5hbWUiLCJlbiIsImphIiwiMTEiLCIxMiIsIjEzIiwiMSIsIjIiLCIzIiwiZGUiLCJmaSIsIkRhdGVEaXNwbGF5IiwiRGF0ZUZvcm1hdEZpbHRlciIsImRhdGVTdXBwbGllZCIsInN0ZXAiLCJ1cGxvYWRBY2NlcHQiLCJ1cGxvYWRJY29uIiwidXBsb2FkVG9vTGFyZ2VNZXNzYWdlIiwibmdGb2N1cyIsIm5nQmx1ciIsIm5nTWlubGVuZ3RoIiwibmdNYXhsZW5ndGgiLCJuZ1BhdHRlcm4iLCJ1cGxvYWRPcHRpb25zIiwiaGVscE9wdGlvbnMiLCJ0ZXh0Rm9ybWF0IiwidmFsaWRhdGlvbkFzeW5jIiwicGVyc2lzdEFzeW5jIiwib25Bc3luY0ZhaWx1cmUiLCJvbkFzeW5jU3VjY2VzcyIsImZpbGVVcGxvYWRTb3VyY2UiLCJjYW1lcmFPcHRpb25zIiwiRm9ybUNvbnRyb2xDb250cm9sbGVyIiwiaW50ZXJuYWxNb2RlbCIsIm1vZGVsVmFsdWUiLCJ2aWV3VmFsdWUiLCJtaW5sZW5ndGgiLCJtYXhsZW5ndGgiLCIkZm9ybWF0dGVycyIsImluaXRpYWxGaWVsZCIsImNoYW5nZUhhbmRsZXIiLCJmb2N1c0hhbmRsZXIiLCJibHVySGFuZGxlciIsIndhcm5pbmdNZXNzYWdlIiwiRmllbGRDb250cm9sbGVyIiwiZmllbGQiLCJwYXJzZSIsImNvbnRyb2wiLCJnZXRDb250cm9sVHlwZSIsInZhbHVlc0FzeW5jIiwicHJlcFZhbHVlc0FzeW5jIiwiZW51bSIsImV4dHJhY3RFcnJvcnMiLCJvcmlnaW5hbERhdGEiLCJBcnJheSIsImVycm9ycyIsImNvbnRyb2xUeXBlIiwiZmxhdHRlbkZpZWxkc1dpdGhHcm91cHMiLCJmaWVsZHMiLCJmbGF0dGVuZWRGaWVsZHMiLCJmbGF0dGVuRmllbGRXaXRoR3JvdXAiLCJncm91cCIsInN1YkZpZWxkcyIsInRvb2x0aXAiLCJoZWxwVGV4dCIsImluZm8iLCJuZXN0ZWRGaWVsZCIsInByZXBMZWdhY3lWYWx1ZSIsInRpdGxlIiwiY29kZSIsInByZXBSZXF1aXJlbWVudHMiLCJhbHRlcm5hdGl2ZXMiLCJwcmVwcGVkQWx0ZXJuYXRpdmVzIiwiY29weU9mIiwiYWx0ZXJuYXRpdmUiLCJwcmVwYXJlZCIsInByZXBMZWdhY3lBbHRlcm5hdGl2ZXMiLCJwcm9wZXJ0aWVzIiwicHJlcEZpZWxkcyIsInR5cGVzIiwiaGlkZGVuIiwicHJlcGFyZWRGaWVsZHMiLCJmaWVsZE1hcCIsIm5lc3RlZEZpZWxkcyIsInBhdGhTZWN0aW9ucyIsIm5lc3RlZEtleSIsInRyYW5zZm9ybU5lc3RlZEtleXNUb05lc3RlZFNwZWNzIiwidHJhbnNmb3JtRmllbGRBcnJheVRvTWFwIiwicHJlcEZpZWxkIiwicHJlcGFyZWRGaWVsZCIsInByZXBMZWdhY3lQcm9wcyIsInByZXBUeXBlIiwicHJlcFBhdHRlcm4iLCJwcmVwVmFsaWRhdGlvbk1lc3NhZ2VzIiwicHJlcEhlbHAiLCJ0YWJUeXBlIiwidGFiTmFtZVdpdGhTcGFjZXMiLCJjaGFyQXQiLCJnZXROYW1lRnJvbVR5cGUiLCJmaWVsZEdyb3VwcyIsInZhbGlkYXRpb25SZWdleHAiLCJwYXR0ZXJuIiwibWluaW11bSIsIm1heGltdW0iLCJleGFtcGxlIiwidmFsdWVzQWxsb3dlZCIsInZhbHVlcyIsInByZXBMZWdhY3lWYWx1ZXMiLCJleCIsImNvbnNvbGUiLCJwb3N0RGF0YSIsInBhcmFtcyIsImdldFBhcmFtVmFsdWVzRnJvbU1vZGVsIiwiZmV0Y2hWYWx1ZXNBc3luYyIsInBhcmFtZXRlck5hbWUiLCJoZWxwIiwiaGVscExpc3QiLCJ1cGxvYWRQbGFjZWhvbGRlckltYWdlIiwiaW1hZ2UiLCJnZXRSZXF1aXJlZEZpZWxkcyIsImdldFNlbGVjdGlvblR5cGUiLCJnZXRDb250cm9sRm9yU3RyaW5nRm9ybWF0IiwiVmFsaWRhdGlvbkNvbnRyb2xsZXIiLCJ2YWxpZGF0aW9uIiwiY2hlY2tNb2RlbEFuZFVwZGF0ZSIsIiR2YWxpZCIsIiRkaXJ0eSIsImlzVmFsaWRPYmplY3RTY2hlbWEiLCJzY2hlbWEiLCJpc09iamVjdCIsInByb3BlcnR5TmFtZSIsInByb3BlcnR5VmFsdWUiLCJwcm9wZXJ0eVNjaGVtYSIsImlzVmFsaWRTY2hlbWEiLCJpc09iamVjdFByb3BlcnR5VmFsaWQiLCJyZWR1Y2UiLCJ2YWxpZFNvRmFyIiwidmFsaWRQcm9wZXJ0eSIsIm9uZU9mIiwiaXRlciIsImlzVmFsaWRPbmVPZlNjaGVtYSIsImFsbE9mIiwiaXNWYWxpZEFsbE9mU2NoZW1hIiwiZ2V0U3RyaW5nVmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZFN0cmluZ1NjaGVtYSIsImdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyIsImlzVmFsaWROdW1iZXJTY2hlbWEiLCJnZXRJbnRlZ2VyVmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZEludGVnZXJTY2hlbWEiLCJnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZEJvb2xlYW5TY2hlbWEiLCJpdGVtcyIsImdldEFycmF5VmFsaWRhdGlvbkZhaWx1cmVzIiwiaXNWYWxpZEFycmF5U2NoZW1hIiwiaXNTdHJpbmciLCJpc0ludGVnZXIiLCJmbG9vciIsImlzQm9vbGVhbiIsImNvbnN0cnVjdG9yIiwiZmFpbHVyZXMiLCJpc1ZhbGlkUmVxdWlyZWQiLCJpc1ZhbGlkTWluTGVuZ3RoIiwibWluTGVuZ3RoIiwiaXNWYWxpZE1heExlbmd0aCIsIm1heExlbmd0aCIsImlzVmFsaWRQYXR0ZXJuIiwiaXNWYWxpZE1pbiIsImlzVmFsaWRNYXgiLCJpc1ZhbGlkTWluSXRlbXMiLCJtaW5JdGVtcyIsImlzVmFsaWRNYXhJdGVtcyIsIm1heEl0ZW1zIiwiZ2V0T2JqZWN0VmFsaWRhdGlvbkZhaWx1cmVzIiwicHJvcCIsInByb3BJbk1vZGVsIiwiZ2V0VmFsaWRhdGlvbkZhaWx1cmVzIiwiZ2V0VmFsaWRNb2RlbFBhcnRzIiwiY2xlYW5lZE1vZGVsIiwidmFsaWRTdWJzZXRPZk1vZGVsIiwibmVzdGVkU2NoZW1hIiwiZXh0ZW5kIiwiY2xlYW5Nb2RlbFdpdGhBbGxPZlNjaGVtYSIsImNsZWFuTW9kZWxXaXRoT25lT2ZTY2hlbWEiLCJjbGVhbk1vZGVsV2l0aE9iamVjdFNjaGVtYSIsImNoaWxkTW9kZWwiLCJjbGVhbk1vZGVsV2l0aEFycmF5U2NoZW1hIiwiY2xlYW5Nb2RlbFdpdGhTdHJpbmdTY2hlbWEiLCJjbGVhbk1vZGVsV2l0aE51bWJlclNjaGVtYSIsImNsZWFuTW9kZWxXaXRoQm9vbGVhblNjaGVtYSIsInJlZ2V4IiwiRm9ybSIsIkFsbE9mU2NoZW1hIiwiQXJyYXlTY2hlbWEiLCJCYXNpY1R5cGVTY2hlbWEiLCJHZW5lcmljU2NoZW1hIiwiT2JqZWN0U2NoZW1hIiwiT25lT2ZTY2hlbWEiLCJWYWxpZGF0aW9uIiwidHJhbnNsYXRpb25zIiwib25DaGFuZ2UiLCJpc1ZhbGlkIiwibW9kZWxzIiwic2NoZW1hcyIsInNwbGl0TW9kZWwiLCJzY2hlbWFGb3JJbmRleCIsImN1cnJlbnQiLCJjb21iaW5lZCIsInNpbXBsZVR5cGVzIiwibmV3SXRlbSIsImdldE5ld0l0ZW0iLCJnZXRBcnJheVR5cGUiLCJhcnJheVR5cGUiLCJyYW5kb20iLCJ2YWxpZGF0aW9uS2V5cyIsImhpZGVUaXRsZSIsIm5ld1NjaGVtYSIsIm91dHB1dE1vZGVsIiwiaW5jbHVkZXMiLCJhY3RpdmVJbmRleCIsImdldEFjdGl2ZVNjaGVtYUluZGV4IiwicHJlZmlsbE1vZGVscyIsInJ1bGVWYWxpZGF0b3JzIiwidHlwZVZhbGlkYXRvcnMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFF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QUFpQkEsSUFLbUJya0MiLCJmaWxlIjoiZGVtby9saWIvanNvbi1zY2hlbWEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjA3KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjsiLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4vZG9tLnNlcnZpY2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMuZG9tJywgW10pXG4gIC5zZXJ2aWNlKCdUd0RvbVNlcnZpY2UnLCBEb21TZXJ2aWNlKS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4vZm9jdXNhYmxlLmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgRm9ybUNvbnRyb2xGb2N1cyBmcm9tICcuL2Zvcm0tY29udHJvbC5kaXJlY3RpdmUuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmZvY3VzYWJsZScsIFtcbiAgICBEb21TZXJ2aWNlXG4gIF0pXG4gIC5kaXJlY3RpdmUoJ3R3Rm9jdXNhYmxlJywgRm9jdXNhYmxlKVxuICAuZGlyZWN0aXZlKCdmb3JtQ29udHJvbCcsIEZvcm1Db250cm9sRm9jdXMpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEYXRlU2VydmljZSBmcm9tICcuL2RhdGUuc2VydmljZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcy5kYXRlJywgW10pXG4gIC5zZXJ2aWNlKCdUd0RhdGVTZXJ2aWNlJywgRGF0ZVNlcnZpY2UpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi9zZWxlY3QuY29tcG9uZW50LmpzJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RvbSc7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4uL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5zZWxlY3QnLCBbXG4gICAgRG9tU2VydmljZSxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdTZWxlY3QnLCBTZWxlY3QpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBSZXF1aXJlbWVudHNTZXJ2aWNlIGZyb20gJy4vcmVxdWlyZW1lbnRzLnNlcnZpY2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMucmVxdWlyZW1lbnRzJywgW10pXG4gIC5zZXJ2aWNlKCdUd1JlcXVpcmVtZW50c1NlcnZpY2UnLCBSZXF1aXJlbWVudHNTZXJ2aWNlKS5uYW1lO1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFByb2Nlc3MgZnJvbSAnLi9wcm9jZXNzLmNvbXBvbmVudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5sb2FkaW5nLnByb2Nlc3MnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdQcm9jZXNzJywgUHJvY2VzcykubmFtZTtcbiIsIlxuY2xhc3MgRm9jdXNhYmxlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgY29uc3QgZm9ybUdyb3VwID0gVHdEb21TZXJ2aWNlLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuXG4gICAgaWYgKGZvcm1Hcm91cCAmJiBlbGVtZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICAgIH0pO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5Gb2N1c2FibGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBGb2N1c2FibGVDb250cm9sbGVyO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgUmFkaW8gZnJvbSAnLi9yYWRpby5jb21wb25lbnQuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcbmltcG9ydCBGb2N1c2FibGUgZnJvbSAnLi4vZm9jdXNhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnJhZGlvJywgW1xuICAgIERvbVNlcnZpY2UsXG4gICAgRm9jdXNhYmxlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3UmFkaW8nLCBSYWRpbykubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFByb2Nlc3NpbmdDYXJkIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkLmNvbXBvbmVudCc7XG5pbXBvcnQgUHJvY2Vzc2luZ01pbmkgZnJvbSAnLi9wcm9jZXNzaW5nLW1pbmkuY29tcG9uZW50JztcbmltcG9ydCBBc3luY0ZpbGVSZWFkZXIgZnJvbSAnLi4vc2VydmljZXMvYXN5bmMtZmlsZS1yZWFkZXIuc2VydmljZS5qcyc7XG5pbXBvcnQgQXN5bmNGaWxlU2F2ZXIgZnJvbSAnLi4vc2VydmljZXMvYXN5bmMtZmlsZS1zYXZlci5zZXJ2aWNlLmpzJztcbmltcG9ydCBGaWxlVmFsaWRhdGlvblNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvZmlsZS12YWxpZGF0aW9uLnNlcnZpY2UuanMnO1xuaW1wb3J0IEFzeW5jVGFza3NDb25maWcgZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvYXN5bmNUYXNrc0NvbmZpZyc7XG5pbXBvcnQgUHJvY2VzcyBmcm9tICcuLi8uLi8uLi9sb2FkaW5nL3Byb2Nlc3MnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLnByb2Nlc3NpbmcnLCBbXG4gICAgQXN5bmNUYXNrc0NvbmZpZyxcbiAgICBBc3luY0ZpbGVSZWFkZXIsXG4gICAgQXN5bmNGaWxlU2F2ZXIsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlLFxuICAgIFByb2Nlc3NcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRQcm9jZXNzaW5nJywgUHJvY2Vzc2luZ0NhcmQpXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkUHJvY2Vzc2luZ01pbmknLCBQcm9jZXNzaW5nTWluaSlcbiAgLm5hbWU7XG4iLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJHRpbWVvdXQsXG4gICAgQXN5bmNGaWxlUmVhZGVyLFxuICAgIEFzeW5jRmlsZVNhdmVyLFxuICAgIEFzeW5jVGFza3NDb25maWcsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLkFzeW5jRmlsZVJlYWRlciA9IEFzeW5jRmlsZVJlYWRlcjtcbiAgICB0aGlzLkFzeW5jRmlsZVNhdmVyID0gQXN5bmNGaWxlU2F2ZXI7XG4gICAgdGhpcy5Bc3luY1Rhc2tzQ29uZmlnID0gQXN5bmNUYXNrc0NvbmZpZztcbiAgICB0aGlzLkZpbGVWYWxpZGF0aW9uID0gRmlsZVZhbGlkYXRpb25TZXJ2aWNlO1xuXG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSBudWxsO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZmlsZSAmJiBjaGFuZ2VzLmZpbGUuY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLm9uRmlsZUNhcHR1cmUoY2hhbmdlcy5maWxlLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgb25GaWxlQ2FwdHVyZShmaWxlKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZmlsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcmV0cmlldmUgZmlsZScpO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQoKTtcblxuICAgIHRoaXMuZmlsZSA9IGZpbGU7XG5cbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSBudWxsO1xuXG4gICAgdGhpcy5vblN0YXJ0KHsgZmlsZSB9KTtcblxuICAgIGlmICghdGhpcy5GaWxlVmFsaWRhdGlvbi5pc1NtYWxsZXJUaGFuTWF4U2l6ZShmaWxlLCB0aGlzLm1heFNpemUpKSB7XG4gICAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcyA9IFt0aGlzLnRvb0xhcmdlTWVzc2FnZV07XG4gICAgICBhc3luY0ZhaWx1cmUoe1xuICAgICAgICBzdGF0dXM6IDQxMyxcbiAgICAgICAgZGF0YTogeyBtZXNzYWdlOiB0aGlzLnRvb0xhcmdlTWVzc2FnZSB9XG4gICAgICB9LCBudWxsLCB0aGlzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5odHRwT3B0aW9ucykge1xuICAgICAgLy8gUG9zdCBmaWxlIG5vd1xuICAgICAgdGhpcy5hc3luY0ZpbGVSZWFkKGZpbGUpXG4gICAgICAgIC50aGVuKGRhdGFVcmwgPT4gdGhpcy5hc3luY0ZpbGVTYXZlKGZpbGUpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gYXN5bmNTdWNjZXNzKHJlc3BvbnNlLCBkYXRhVXJsLCB0aGlzKSkpXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiBhc3luY0ZhaWx1cmUoZXJyb3IsIG51bGwsIHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUG9zdCBvbiBmb3JtIHN1Ym1pdFxuICAgICAgdGhpcy5hc3luY0ZpbGVSZWFkKGZpbGUpXG4gICAgICAgIC50aGVuKGRhdGFVcmwgPT4gYXN5bmNTdWNjZXNzKG51bGwsIGRhdGFVcmwsIHRoaXMpKVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gYXN5bmNGYWlsdXJlKGVycm9yLCBudWxsLCB0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmNGaWxlU2F2ZShmaWxlKSB7XG4gICAgY29uc3QgaHR0cE9wdGlvbnMgPSB0aGlzLkFzeW5jVGFza3NDb25maWcuZXh0ZW5kSHR0cE9wdGlvbnModGhpcy5odHRwT3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuQXN5bmNGaWxlU2F2ZXIuc2F2ZShodHRwT3B0aW9ucy5wYXJhbSB8fCB0aGlzLm5hbWUsIGZpbGUsIGh0dHBPcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jRmlsZVJlYWQoZmlsZSkge1xuICAgIHJldHVybiB0aGlzLkFzeW5jRmlsZVJlYWRlci5yZWFkKGZpbGUpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSAwO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc1N1Y2Nlc3MgPSBmYWxzZTtcbiAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZTtcbiAgfVxuXG4gIG9uUmVtb3ZlKCkge1xuICAgIHRoaXMub25DYW5jZWwoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3luY1N1Y2Nlc3MocmVzcG9uc2UsIGRhdGFVcmwsICRjdHJsKSB7XG4gICRjdHJsLnByb2Nlc3NpbmdTdGF0ZSA9IDE7XG4gIGxldCBpZCA9IG51bGw7XG4gIGNvbnN0IGZpbGUgPSAkY3RybC5maWxlO1xuICBjb25zdCBodHRwT3B0aW9ucyA9ICRjdHJsLmh0dHBPcHRpb25zO1xuXG4gIGlmIChodHRwT3B0aW9uc1xuICAgICAgJiYgaHR0cE9wdGlvbnMuaWRQcm9wZXJ0eVxuICAgICAgJiYgcmVzcG9uc2VcbiAgICAgICYmIHJlc3BvbnNlLmRhdGFcbiAgICAgICYmIHJlc3BvbnNlLmRhdGFbaHR0cE9wdGlvbnMuaWRQcm9wZXJ0eV0pIHtcbiAgICBpZCA9IHJlc3BvbnNlLmRhdGFbaHR0cE9wdGlvbnMuaWRQcm9wZXJ0eV07XG4gIH1cblxuICAvLyBUaW1lIHN1Y2Nlc3MgbWVzc2FnaW5nIHRvIG1hdGNoIGFuaW1hdGlvblxuICAkY3RybC4kdGltZW91dCgoKSA9PiB7XG4gICAgJGN0cmwuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgJGN0cmwuaXNTdWNjZXNzID0gdHJ1ZTtcbiAgICAkY3RybC5vblN1Y2Nlc3MoeyBmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfSwgMzYwMCk7XG5cbiAgcmV0dXJuIGRhdGFVcmw7XG59XG5mdW5jdGlvbiBhc3luY0ZhaWx1cmUoZXJyb3IsIGRhdGFVcmwsICRjdHJsKSB7XG4gIC8vIFN0YXJ0IGNoYW5naW5nIHByb2Nlc3MgaW5kaWNhdG9yIGltbWVkaWF0ZWx5XG4gICRjdHJsLnByb2Nlc3NpbmdTdGF0ZSA9IC0xO1xuXG4gIC8vIFdhaXQgYmVmb3JlIHVwZGF0aW5nIHRleHRcbiAgJGN0cmwuJHRpbWVvdXQoKCkgPT4ge1xuICAgICRjdHJsLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICRjdHJsLmlzRXJyb3IgPSB0cnVlO1xuICB9LCAzNjAwKTtcbiAgLy8gQWxsb3cgYSBzbWFsbCBhbW91bnQgb2YgZXh0cmEgdGltZSBiZWZvcmUgbm90aWZ5aW5nIGV4dGVybmFsIGhhbmRsZXJzXG4gICRjdHJsLiR0aW1lb3V0KCgpID0+IHtcbiAgICAkY3RybC5vbkZhaWx1cmUoeyBlcnJvciB9KTtcbiAgfSwgMzYwMCk7IC8vIDM1MDApOyBUT0RPIGZvciBzb21lIHJlYXNvbiBtb3JlIHRpbWUgaXMgbmVlZGVkXG5cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckdGltZW91dCcsXG4gICdBc3luY0ZpbGVSZWFkZXInLFxuICAnQXN5bmNGaWxlU2F2ZXInLFxuICAnQXN5bmNUYXNrc0NvbmZpZycsXG4gICdGaWxlVmFsaWRhdGlvblNlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnPCcsXG4gIGZpbGU6ICc8JyxcblxuICBvblN0YXJ0OiAnJicsXG4gIG9uU3VjY2VzczogJyYnLFxuICBvbkZhaWx1cmU6ICcmJyxcbiAgb25DYW5jZWw6ICcmJyxcblxuICBtYXhTaXplOiAnPCcsXG4gIGFjY2VwdDogJzwnLFxuICBodHRwT3B0aW9uczogJzwnLFxuXG4gIHByb2Nlc3NpbmdNZXNzYWdlOiAnPCcsXG4gIHN1Y2Nlc3NNZXNzYWdlOiAnPCcsXG4gIGVycm9yTWVzc2FnZTogJzwnLFxuICB0b29MYXJnZU1lc3NhZ2U6ICc8JyxcblxuICB2YWxpZGF0aW9uTWVzc2FnZXM6ICc8JyxcblxuICBjYW5jZWxUZXh0OiAnPCdcbn07XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEcm9wIGZyb20gJy4vZHJvcC5kaXJlY3RpdmUnO1xuaW1wb3J0IERyYWdFbnRlciBmcm9tICcuL2RyYWctZW50ZXIuZGlyZWN0aXZlJztcbmltcG9ydCBEcmFnTGVhdmUgZnJvbSAnLi9kcmFnLWxlYXZlLmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5kcmFnLWFuZC1kcm9wJywgW10pXG4gIC5kaXJlY3RpdmUoJ3R3RHJvcCcsIERyb3ApXG4gIC5kaXJlY3RpdmUoJ3R3RHJhZ0VudGVyJywgRHJhZ0VudGVyKVxuICAuZGlyZWN0aXZlKCd0d0RyYWdMZWF2ZScsIERyYWdMZWF2ZSlcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuL2NoZWNrYm94LmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuaW1wb3J0IEZvY3VzYWJsZSBmcm9tICcuLi9mb2N1c2FibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMuY2hlY2tib3gnLCBbXG4gICAgRG9tU2VydmljZSxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdDaGVja2JveCcsIENoZWNrYm94KS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmltcG9ydCBVcGxvYWQgZnJvbSAnLi91cGxvYWQuY29tcG9uZW50LmpzJztcblxuaW1wb3J0IENhcHR1cmVDYXJkIGZyb20gJy4vY2FwdHVyZS1jYXJkJztcbmltcG9ydCBEcm9wcGluZ0NhcmQgZnJvbSAnLi9kcm9wcGluZy1jYXJkJztcbmltcG9ydCBQcm9jZXNzaW5nQ2FyZCBmcm9tICcuL3Byb2Nlc3NpbmctY2FyZCc7XG5pbXBvcnQgU3VjY2Vzc0NhcmQgZnJvbSAnLi9zdWNjZXNzLWNhcmQnO1xuaW1wb3J0IENhbWVyYUNhcHR1cmUgZnJvbSAnLi9jYW1lcmEtY2FwdHVyZSc7XG5pbXBvcnQgVXBsb2FkQnV0dG9uIGZyb20gJy4vdXBsb2FkLWJ1dHRvbic7XG5pbXBvcnQgQ2FtZXJhQnV0dG9uIGZyb20gJy4vY2FtZXJhLWJ1dHRvbic7XG5cbmltcG9ydCBGaWxlSW5wdXQgZnJvbSAnLi9maWxlLWlucHV0LmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgTXVsdGlVcGxvYWQgZnJvbSAnLi9tdWx0aS11cGxvYWQnO1xuaW1wb3J0IERyYWdBbmREcm9wIGZyb20gJy4uL2RyYWctYW5kLWRyb3AnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkJywgW1xuICAgIENhcHR1cmVDYXJkLFxuICAgIERyb3BwaW5nQ2FyZCxcbiAgICBQcm9jZXNzaW5nQ2FyZCxcbiAgICBTdWNjZXNzQ2FyZCxcbiAgICBDYW1lcmFDYXB0dXJlLFxuICAgIFVwbG9hZEJ1dHRvbixcbiAgICBDYW1lcmFCdXR0b24sXG4gICAgTXVsdGlVcGxvYWQsXG4gICAgRHJhZ0FuZERyb3BcbiAgXSlcbiAgLmRpcmVjdGl2ZSgndHdGaWxlSW5wdXQnLCBGaWxlSW5wdXQpXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkJywgVXBsb2FkKVxuICAubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IEFzeW5jVGFza3NDb25maWcgZnJvbSAnLi9hc3luY1Rhc2tzQ29uZmlnLnNlcnZpY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMuYXN5bmMtdGFza3MtY29uZmlnJywgW10pXG4gIC5zZXJ2aWNlKCdBc3luY1Rhc2tzQ29uZmlnJywgQXN5bmNUYXNrc0NvbmZpZykubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IERhdGVDb250cm9sIGZyb20gJy4vZGF0ZS5jb21wb25lbnQnO1xuaW1wb3J0IERhdGVTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhdGUnO1xuaW1wb3J0IERhdGVGb3JtYXQgZnJvbSAnLi4vLi4vZm9ybWF0dGluZy9kYXRlLWZvcm1hdCc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4uL3NlbGVjdCc7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4uL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5kYXRlJywgW1xuICAgIERhdGVTZXJ2aWNlLFxuICAgIERhdGVGb3JtYXQsXG4gICAgU2VsZWN0LFxuICAgIEZvY3VzYWJsZVxuICBdKVxuICAuY29tcG9uZW50KCd0d0RhdGUnLCBEYXRlQ29udHJvbCkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IERhdGVGb3JtYXQgZnJvbSAnLi9kYXRlLWZvcm1hdC5jb21wb25lbnQnO1xuaW1wb3J0IERhdGVGaWx0ZXIgZnJvbSAnLi9kYXRlLWZvcm1hdC5maWx0ZXInO1xuaW1wb3J0IERhdGVTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybWF0dGluZy5kYXRlJywgW1xuICAgIERhdGVTZXJ2aWNlXG4gIF0pXG4gIC5jb21wb25lbnQoJ3R3RGF0ZUZvcm1hdCcsIERhdGVGb3JtYXQpXG4gIC5maWx0ZXIoJ3R3RGF0ZUZvcm1hdCcsIERhdGVGaWx0ZXIpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4uL3NlbGVjdCc7XG5pbXBvcnQgUmFkaW8gZnJvbSAnLi4vcmFkaW8nO1xuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uL2NoZWNrYm94JztcbmltcG9ydCBEYXRlQ29udHJvbCBmcm9tICcuLi9kYXRlJztcbmltcG9ydCBVcGxvYWQgZnJvbSAnLi4vdXBsb2FkJztcblxuaW1wb3J0IEZvcm1Db250cm9sIGZyb20gJy4vZm9ybS1jb250cm9sLmNvbXBvbmVudC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5mb3JtLWNvbnRyb2wnLCBbXG4gICAgU2VsZWN0LFxuICAgIFJhZGlvLFxuICAgIENoZWNrYm94LFxuICAgIERhdGVDb250cm9sLFxuICAgIFVwbG9hZFxuICBdKVxuICAuY29tcG9uZW50KCd0d0Zvcm1Db250cm9sJywgRm9ybUNvbnRyb2wpXG4gIC5jb21wb25lbnQoJ3R3RHluYW1pY0Zvcm1Db250cm9sJywgRm9ybUNvbnRyb2wpIC8vIERlcHJlY2F0ZWRcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBGb3JtQ29udHJvbCBmcm9tICcuLi9mb3JtLWNvbnRyb2wnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4vZmllbGQuY29tcG9uZW50JztcbmltcG9ydCBSZXF1aXJlbWVudHNTZXJ2aWNlIGZyb20gJy4uLy4uL3NlcnZpY2VzL3JlcXVpcmVtZW50cyc7XG5pbXBvcnQgQ29udHJvbFZhbGlkYXRpb24gZnJvbSAnLi4vLi4vdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24nO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMuZmllbGQnLCBbXG4gICAgRm9ybUNvbnRyb2wsXG4gICAgUmVxdWlyZW1lbnRzU2VydmljZSxcbiAgICBDb250cm9sVmFsaWRhdGlvblxuICBdKVxuICAuY29tcG9uZW50KCd0d0ZpZWxkJywgRmllbGQpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb250cm9sVmFsaWRhdGlvbiBmcm9tICcuL2NvbnRyb2wtdmFsaWRhdGlvbi5kaXJlY3RpdmUuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZ3VpZGUudmFsaWRhdGlvbi5jb250cm9sJywgW1xuICAgIERvbVNlcnZpY2VcbiAgXSlcbiAgLmRpcmVjdGl2ZSgndHdWYWxpZGF0aW9uJywgQ29udHJvbFZhbGlkYXRpb24pLm5hbWU7XG4iLCJcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY2hlY2tib3guY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9jaGVja2JveC5odG1sJztcblxuY29uc3QgQ2hlY2tib3ggPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICByZXF1aXJlOiB7XG4gICAgJG5nTW9kZWw6ICduZ01vZGVsJ1xuICB9LFxuICBiaW5kaW5nczoge1xuICAgIG5hbWU6ICdAJyxcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdUcnVlVmFsdWU6ICc8JyxcbiAgICBuZ0ZhbHNlVmFsdWU6ICc8JyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94O1xuIiwiXG5jbGFzcyBDaGVja2JveENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCAkbmdNb2RlbCA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcblxuICAgIHRoaXMuZG9tID0gVHdEb21TZXJ2aWNlO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLmVsZW1lbnQgPSAkZWxlbWVudFswXTtcblxuICAgIHRoaXMuYWRkTGFiZWxIYW5kbGVyKCk7XG4gICAgdGhpcy5hZGRXYXRjaGVycygkc2NvcGUsICRlbGVtZW50LCAkbmdNb2RlbCk7XG5cbiAgICB0aGlzLmNoZWNrYm94Q29udGFpbmVyID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKFxuICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgJ2NoZWNrYm94J1xuICAgICk7XG5cbiAgICB0aGlzLmxhYmVsID0gdGhpcy5jaGVja2JveENvbnRhaW5lclxuICAgICAgPyB0aGlzLmNoZWNrYm94Q29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdsYWJlbCcpWzBdXG4gICAgICA6IGZhbHNlO1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpO1xuICB9XG5cbiAgaXNDaGVja2VkKCkge1xuICAgIHJldHVybiAodGhpcy5uZ1RydWVWYWx1ZSAmJiB0aGlzLm5nVHJ1ZVZhbHVlID09PSB0aGlzLm5nTW9kZWwpXG4gICAgICB8fCAoIXRoaXMubmdUcnVlVmFsdWUgJiYgdGhpcy5uZ01vZGVsKVxuICAgICAgfHwgZmFsc2U7XG4gIH1cblxuICBidXR0b25DbGljayhldmVudCkge1xuICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcbiAgICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMubmdGYWxzZVZhbHVlIHx8IGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSh0aGlzLm5nVHJ1ZVZhbHVlIHx8IHRydWUpO1xuICAgIH1cbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG5cbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIC8vIFByZXZlbnQgYnV0dG9uIGNsaWNrIHByb3BnYXRpb24gZnJvbSBmaXJpbmcgbGFiZWxcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlQ2hlY2tib3goXG4gICAgICB0aGlzLmNoZWNrZWQsXG4gICAgICB0aGlzLiRlbGVtZW50LFxuICAgICAgdGhpcy4kbmdNb2RlbCxcbiAgICAgIHRoaXMubmdSZXF1aXJlZCxcbiAgICAgIHRoaXMuZG9tXG4gICAgKTtcbiAgfVxuXG4gIGJ1dHRvbkZvY3VzKCkge1xuICAgIGlmICh0aGlzLmxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfVxuXG4gIGJ1dHRvbkJsdXIoKSB7XG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuXG4gICAgdmFsaWRhdGVDaGVja2JveChcbiAgICAgIHRoaXMuY2hlY2tlZCxcbiAgICAgIHRoaXMuJGVsZW1lbnQsXG4gICAgICB0aGlzLiRuZ01vZGVsLFxuICAgICAgdGhpcy5uZ1JlcXVpcmVkLFxuICAgICAgdGhpcy5kb21cbiAgICApO1xuICB9XG5cbiAgLy8gSUUgJ2NsaWNrcycgdGhlIGhpZGRlbiBpbnB1dCB3aGVuIGxhYmVsIGlzIGNsaWNrZWRcbiAgc3RhdGljIGhpZGRlbkNsaWNrKCRldmVudCkge1xuICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGFkZExhYmVsSGFuZGxlcigpIHtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuZG9tLmdldENsb3Nlc3RQYXJlbnRCeVRhZ05hbWUodGhpcy5lbGVtZW50LCAnbGFiZWwnKTtcblxuICAgIGlmICghbGFiZWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGFiZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBsYWJlbC5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICBpZiAoIWlzRGlzYWJsZWQpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdidXR0b24nKVswXTtcbiAgICAgICAgLy8gVHJpZ2dlciBvdXIgYnV0dG9uLCBwcmV2ZW50IGRlZmF1bHQgbGFiZWwgYmVoYXZpb3VyXG4gICAgICAgIGJ1dHRvbi5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnY2xpY2snKSk7XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG4gIH1cblxuICBhZGRXYXRjaGVycygkc2NvcGUsICRlbGVtZW50LCAkbmdNb2RlbCkge1xuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nTW9kZWwnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgICRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgICB2YWxpZGF0ZUNoZWNrYm94KFxuICAgICAgICAgIHRoaXMuY2hlY2tlZCxcbiAgICAgICAgICAkZWxlbWVudCxcbiAgICAgICAgICAkbmdNb2RlbCxcbiAgICAgICAgICB0aGlzLm5nUmVxdWlyZWQsXG4gICAgICAgICAgdGhpcy5kb21cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gdGhpcy5pc0NoZWNrZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nRGlzYWJsZWQnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgICBjb25zdCBjaGVja2JveCA9IHRoaXMuZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnY2hlY2tib3gnKTtcbiAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZShlbGVtZW50LCAnbGFiZWwnKTtcblxuICAgICAgaWYgKCFjaGVja2JveCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobmV3VmFsdWUgJiYgIW9sZFZhbHVlKSB7XG4gICAgICAgIGNoZWNrYm94LmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGNoZWNrYm94LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICB9IGVsc2UgaWYgKCFuZXdWYWx1ZSAmJiBvbGRWYWx1ZSkge1xuICAgICAgICBjaGVja2JveC5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpO1xuICAgICAgICAvLyBjaGVja2JveC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIGxhYmVsLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nUmVxdWlyZWQnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHZhbGlkYXRlQ2hlY2tib3goXG4gICAgICAgICAgdGhpcy5jaGVja2VkLFxuICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICRuZ01vZGVsLFxuICAgICAgICAgIHRoaXMubmdSZXF1aXJlZCxcbiAgICAgICAgICB0aGlzLmRvbVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hlY2tib3goaXNDaGVja2VkLCAkZWxlbWVudCwgJG5nTW9kZWwsIGlzUmVxdWlyZWQsIGRvbSkge1xuICBpZiAoISRuZ01vZGVsLiR0b3VjaGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgY29uc3QgYnV0dG9uID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0dy1jaGVja2JveC1idXR0b24nKVswXTtcbiAgY29uc3QgY2hlY2tib3hMYWJlbCA9IGRvbS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoZWxlbWVudCwgJ2NoZWNrYm94Jyk7XG4gIGNvbnN0IGZvcm1Hcm91cCA9IGRvbS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoZWxlbWVudCwgJ2Zvcm0tZ3JvdXAnKTtcblxuICBpZiAoIWlzQ2hlY2tlZCAmJiBpc1JlcXVpcmVkKSB7XG4gICAgJG5nTW9kZWwuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIGZhbHNlKTtcbiAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnaGFzLWVycm9yJyk7XG4gICAgaWYgKGNoZWNrYm94TGFiZWwpIHtcbiAgICAgIGNoZWNrYm94TGFiZWwuY2xhc3NMaXN0LmFkZCgnaGFzLWVycm9yJyk7XG4gICAgfVxuICAgIGlmIChmb3JtR3JvdXApIHtcbiAgICAgIGZvcm1Hcm91cC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgJG5nTW9kZWwuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIHRydWUpO1xuICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgICBpZiAoY2hlY2tib3hMYWJlbCkge1xuICAgICAgY2hlY2tib3hMYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgICB9XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgfVxufVxuXG5DaGVja2JveENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBDaGVja2JveENvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGlucHV0IHR5cGU9aGlkZGVuIGNsYXNzPXNyLW9ubHkgbmFtZT17eyRjdHJsLm5hbWV9fSBuZy1tb2RlbD0kY3RybC5uZ01vZGVsIG5nLWNsaWNrPSRjdHJsLmhpZGRlbkNsaWNrKCRldmVudCkgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCAvPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPXR3LWNoZWNrYm94LWJ1dHRvbiB0dy1mb2N1c2FibGUgbmctY2xpY2s9JGN0cmwuYnV0dG9uQ2xpY2soJGV2ZW50KSBuZy1mb2N1cz0kY3RybC5idXR0b25Gb2N1cygpIG5nLWJsdXI9JGN0cmwuYnV0dG9uQmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2xhc3M9XFxcInsnY2hlY2tlZCc6ICRjdHJsLmNoZWNrZWR9XFxcIiBhcmlhLXByZXNzZWQ9e3skY3RybC5jaGVja2VkfX0+IDxzcGFuIGNsYXNzPVxcXCJ0dy1jaGVja2JveC1jaGVjayBnbHlwaGljb24gZ2x5cGhpY29uLW9rXFxcIj48L3NwYW4+IDwvYnV0dG9uPiBcIjsiLCJmdW5jdGlvbiBEb21TZXJ2aWNlKCkge1xuICB0aGlzLmdldENsb3Nlc3RQYXJlbnRCeVRhZ05hbWUgPSAoZWxlbWVudCwgdGFnTmFtZSkgPT4ge1xuICAgIGNvbnN0IHRhZ05hbWVVcHBlciA9IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudDtcblxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudGFnTmFtZSAmJiBwYXJlbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSB0YWdOYW1lVXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUgPSAoZWxlbWVudCwgY2xhc3NOYW1lKSA9PiB7XG4gICAgbGV0IHBhcmVudCA9IGVsZW1lbnQ7XG5cbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNsYXNzTGlzdCAmJiBwYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy5nZXRQcmV2aW91c1NpYmxpbmdXaXRoQ2xhc3NOYW1lID0gKGVsZW1lbnQsIGNsYXNzTmFtZSkgPT4ge1xuICAgIGxldCBzaWJsaW5nID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gICAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICAgIGlmIChzaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nO1xuICAgICAgfVxuICAgICAgc2libGluZyA9IHNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy5nZXROZXh0U2libGluZ1dpdGhDbGFzc05hbWUgPSAoZWxlbWVudCwgY2xhc3NOYW1lKSA9PiB7XG4gICAgbGV0IHNpYmxpbmcgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcblxuICAgIHdoaWxlIChzaWJsaW5nKSB7XG4gICAgICBpZiAoc2libGluZy5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgICByZXR1cm4gc2libGluZztcbiAgICAgIH1cbiAgICAgIHNpYmxpbmcgPSBzaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IERvbVNlcnZpY2U7XG4iLCJpbXBvcnQgRm9jdXNhYmxlQ29udHJvbGxlciBmcm9tICcuL2ZvY3VzYWJsZS5jb250cm9sbGVyLmpzJztcblxuZnVuY3Rpb24gRm9jdXNhYmxlKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogRm9jdXNhYmxlQ29udHJvbGxlclxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBGb2N1c2FibGU7XG4iLCIvLyBUaGlzIGRpcmVjdGl2ZSBwcm92aWRlIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vLyBJdCBzaG91bGQgbm8gbG9uZ2VyIGJlIG5lY2Vzc2FyeSB3aGVuIGJyb3dzZXJzIHN1cHBvcnQgOmZvY3VzLXdpdGhpblxuaW1wb3J0IEZvY3VzYWJsZUNvbnRyb2xsZXIgZnJvbSAnLi9mb2N1c2FibGUuY29udHJvbGxlci5qcyc7XG5cbmZ1bmN0aW9uIEZvcm1Db250cm9sRm9jdXMoKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdDJyxcbiAgICBjb250cm9sbGVyOiBGb2N1c2FibGVDb250cm9sbGVyXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250cm9sRm9jdXM7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL3JhZGlvLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vcmFkaW8uaHRtbCc7XG5cbmNvbnN0IFJhZGlvID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZToge1xuICAgICRuZ01vZGVsOiAnbmdNb2RlbCdcbiAgfSxcbiAgYmluZGluZ3M6IHtcbiAgICBuYW1lOiAnQCcsXG4gICAgdmFsdWU6ICdAJyxcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdWYWx1ZTogJzwnLFxuICAgIG5nUmVxdWlyZWQ6ICc8JyxcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgbmdDaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpbztcbiIsIlxuY2xhc3MgUmFkaW9Db250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJHNjb3BlLCAkZWxlbWVudCwgVHdEb21TZXJ2aWNlKSB7XG4gICAgY29uc3QgJG5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG5cbiAgICB0aGlzLmRvbSA9IFR3RG9tU2VydmljZTtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgdGhpcy5jaGVja2VkID0gdGhpcy5pc0NoZWNrZWQoKTtcbiAgICB0aGlzLmxhYmVsID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZSh0aGlzLmVsZW1lbnQsICdsYWJlbCcpO1xuXG4gICAgJGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICAgICRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZFdhdGNoZXJzKCRzY29wZSwgdGhpcy5lbGVtZW50KTtcbiAgfVxuXG4gIGlzQ2hlY2tlZCgpIHtcbiAgICByZXR1cm4gKHRoaXMubmdWYWx1ZSAmJiB0aGlzLm5nTW9kZWwgPT09IHRoaXMubmdWYWx1ZSlcbiAgICAgIHx8IHRoaXMudmFsdWUgPT09IHRoaXMubmdNb2RlbDtcbiAgfVxuXG4gIGJ1dHRvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLm5nRGlzYWJsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrZWQgPSB0cnVlO1xuICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSh0aGlzLm5nVmFsdWUgfHwgdGhpcy52YWx1ZSk7XG4gIH1cblxuICBidXR0b25Gb2N1cygpIHtcbiAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgdGhpcy5sYWJlbC5jbGFzc0xpc3QuYWRkKCdmb2N1cycpO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9XG5cbiAgYnV0dG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgdGhpcy5sYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgIH1cbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gIH1cblxuICBoaWRkZW5JbnB1dENoYW5nZSgpIHtcbiAgICAvLyBUaGlzIG9ubHkgZmlyZXMgb24gbGFiZWwgY2xpY2tcbiAgICAvLyBTZXR0aW5nIHZpZXcgdmFsdWUgd2lsbCBhbHNvIHRyaWdnZXIgb25DaGFuZ2VcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodGhpcy5uZ1ZhbHVlIHx8IHRoaXMudmFsdWUpO1xuICB9XG5cbiAgYWRkV2F0Y2hlcnMoJHNjb3BlLCBlbGVtZW50KSB7XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0RGlydHkoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuaXNDaGVja2VkKCk7XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ0Rpc2FibGVkJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgcmFkaW9MYWJlbCA9IHRoaXMuZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAncmFkaW8nKTtcblxuICAgICAgaWYgKCFyYWRpb0xhYmVsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZSAmJiAhb2xkVmFsdWUpIHtcbiAgICAgICAgcmFkaW9MYWJlbC5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgICAgICByYWRpb0xhYmVsLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgfSBlbHNlIGlmICghbmV3VmFsdWUgJiYgb2xkVmFsdWUpIHtcbiAgICAgICAgcmFkaW9MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpO1xuICAgICAgICByYWRpb0xhYmVsLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5SYWRpb0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBSYWRpb0NvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGlucHV0IHR5cGU9cmFkaW8gY2xhc3M9c3Itb25seSBuYW1lPXt7JGN0cmwubmFtZX19IG5nLXZhbHVlPVxcXCIkY3RybC5uZ1ZhbHVlIHx8ICRjdHJsLnZhbHVlXFxcIiBuZy1tb2RlbD0kY3RybC5uZ01vZGVsIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmhpZGRlbklucHV0Q2hhbmdlKCkgdGFiaW5kZXg9LTEgLz4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz10dy1yYWRpby1idXR0b24gdHctZm9jdXNhYmxlIG5nLWNsaWNrPSRjdHJsLmJ1dHRvbkNsaWNrKCRldmVudCkgbmctZm9jdXM9JGN0cmwuYnV0dG9uRm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJ1dHRvbkJsdXIoKSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNsYXNzPVxcXCJ7Y2hlY2tlZDogJGN0cmwuY2hlY2tlZH1cXFwiIGFyaWEtcHJlc3NlZD17eyRjdHJsLmNoZWNrZWR9fT4gPHNwYW4gY2xhc3M9dHctcmFkaW8tY2hlY2s+PC9zcGFuPiA8L2J1dHRvbj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9zZWxlY3QuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9zZWxlY3QuaHRtbCc7XG5cbmNvbnN0IFNlbGVjdCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBvcHRpb25zOiAnPCcsXG4gICAgbmFtZTogJ0AnLFxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG4gICAgZmlsdGVyOiAnQCcsXG4gICAgc2l6ZTogJ0AnLFxuICAgIGRyb3Bkb3duUmlnaHQ6ICdAJyxcbiAgICBkcm9wZG93blVwOiAnQCcsXG4gICAgZHJvcGRvd25XaWR0aDogJ0AnLFxuICAgIGludmVyc2U6ICc8JyxcbiAgICBoaWRlTm90ZTogJ0AnLFxuICAgIGhpZGVTZWNvbmRhcnk6ICdAJyxcbiAgICBoaWRlSWNvbjogJ0AnLFxuICAgIGhpZGVDdXJyZW5jeTogJ0AnLFxuICAgIGhpZGVDaXJjbGU6ICdAJyxcbiAgICBoaWRlTGFiZWw6ICdAJ1xuICB9XG59O1xuXG4vKlxuLy8gVE9ETyBtYXkgYmUgYmV0dGVyIGZvciBhY2Nlc3NpYmlsaXR5IHRvIGhhdmUgaGlkZGVuIHNlbGVjdD9cbjxzZWxlY3QgbmFtZT0ne3skY3RybC5uYW1lfX0nIGNsYXNzPSdzci1vbmx5IHR3LXNlbGVjdC1oaWRkZW4nIFxcXG4gIG5nLW1vZGVsPSckY3RybC5uZ01vZGVsJyBcXFxuICBuZy1vcHRpb25zPSdvcHRpb24udmFsdWUgYXMgb3B0aW9uLmxhYmVsIGZvciBvcHRpb24gaW4gJGN0cmwub3B0aW9ucycgXFxcbiAgbmctZGlzYWJsZWQ9JyRjdHJsLm5nRGlzYWJsZWQnIFxcXG4gIG5nLXJlcXVpcmVkPSckY3RybC5uZ1JlcXVpcmVkJz4gXFxcbjwvc2VsZWN0PlwiXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuY2xhc3MgU2VsZWN0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCAkdHJhbnNjbHVkZSwgJHRpbWVvdXQsICRhdHRycywgVHdEb21TZXJ2aWNlLCAkc2NvcGUpIHtcbiAgICB0aGlzLiRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gICAgdGhpcy4kdHJhbnNjbHVkZSA9ICR0cmFuc2NsdWRlO1xuICAgIHRoaXMuZG9tID0gVHdEb21TZXJ2aWNlO1xuXG4gICAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHRoaXMub25Nb2RlbENoYW5nZShuZXdWYWx1ZSwgb2xkVmFsdWUpKTtcbiAgfVxuXG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy5idXR0b24gPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYnRuJylbMF07XG4gICAgdGhpcy5zZWFyY2ggPSAnJztcblxuICAgIHByZVNlbGVjdE1vZGVsVmFsdWUodGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gICAgc2V0RGVmYXVsdElmUmVxdWlyZWQodGhpcy4kbmdNb2RlbCwgdGhpcywgdGhpcy4kZWxlbWVudCwgdGhpcy4kYXR0cnMpO1xuXG4gICAgYWRkRXZlbnRIYW5kbGVycyh0aGlzLCB0aGlzLiRlbGVtZW50LCB0aGlzLiRuZ01vZGVsLCB0aGlzLm9wdGlvbnMsIHRoaXMuJHRpbWVvdXQpO1xuXG4gICAgY2hlY2tGb3JUcmFuc2NsdWRlZENvbnRlbnQodGhpcy4kdHJhbnNjbHVkZSwgdGhpcyk7XG5cbiAgICB0aGlzLnJlc3BvbnNpdmVDbGFzc2VzID0gcmVzcG9uc2l2ZUNsYXNzZXM7XG5cbiAgICB0aGlzLm9wdGlvbnNQYWdlU2l6ZSA9IDMwMDtcbiAgICB0aGlzLm51bWJlck9mT3B0aW9uc1JldmVhbGVkID0gdGhpcy5vcHRpb25zUGFnZVNpemU7IC8vIEluaXQuXG4gICAgdGhpcy5oYXNNb3JlT3B0aW9uc1RvUmV2ZWFsID0gZmFsc2U7XG5cbiAgICB0aGlzLmZpbHRlclN0cmluZyA9ICcnO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zID0gdGhpcy5nZXRGaWx0ZXJlZE9wdGlvbnMoKTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMpIHtcbiAgICAgIHRoaXMub25PcHRpb25zQ2hhbmdlKFxuICAgICAgICBjaGFuZ2VzLm9wdGlvbnMuY3VycmVudFZhbHVlLFxuICAgICAgICBjaGFuZ2VzLm9wdGlvbnMucHJldmlvdXNWYWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5ld1ZhbHVlIHx8IG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb24gPSBmaW5kT3B0aW9uRnJvbVZhbHVlKHRoaXMub3B0aW9ucywgbmV3VmFsdWUpO1xuICAgIGlmIChvcHRpb24pIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBvcHRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIG9uT3B0aW9uc0NoYW5nZShuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICBwcmVTZWxlY3RNb2RlbFZhbHVlKHRoaXMuJG5nTW9kZWwsIHRoaXMpO1xuICAgICAgc2V0RGVmYXVsdElmUmVxdWlyZWQodGhpcy4kbmdNb2RlbCwgdGhpcywgdGhpcy4kZWxlbWVudCwgdGhpcy4kYXR0cnMpO1xuICAgICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIGNpcmNsZUNsYXNzZXMocmVzcG9uc2l2ZU9wdGlvbikge1xuICAgIGxldCBjbGFzc2VzID0gcmVzcG9uc2l2ZUNsYXNzZXMocmVzcG9uc2l2ZU9wdGlvbik7XG4gICAgY29uc3Qgc2Vjb25kYXJ5Q2xhc3NlcyA9IHJlc3BvbnNpdmVDbGFzc2VzKHRoaXMuaGlkZVNlY29uZGFyeSk7XG4gICAgLy8gSWYgc2Vjb25kYXJ5IHRleHQgbGluZSwgYW5kIGl0IHdvbid0IGJlIGhpZGRlbiBhdCBzb21lIHBvaW50LCB1c2UgbGFyZ2VyIGNpcmNsZVxuICAgIGlmICh0aGlzLnNlbGVjdGVkLnNlY29uZGFyeSAmJiBzZWNvbmRhcnlDbGFzc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2xhc3NlcyArPSAnIGNpcmNsZS1zbSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzZXMgKz0gJyBjaXJjbGUteHMnO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIGJ1dHRvbkZvY3VzKCkge1xuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH1cblxuICBvcHRpb25DbGljayhvcHRpb24sICRldmVudCkge1xuICAgIGlmIChvcHRpb24uZGlzYWJsZWQpIHtcbiAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZWN0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMsIG9wdGlvbik7XG4gICAgdGhpcy5idXR0b24uZm9jdXMoKTtcbiAgfVxuXG4gIG9wdGlvbkZvY3VzKG9wdGlvbikge1xuICAgIHNlbGVjdE9wdGlvbih0aGlzLiRuZ01vZGVsLCB0aGlzLCBvcHRpb24pO1xuICB9XG5cbiAgb3B0aW9uS2V5cHJlc3MoZXZlbnQpIHtcbiAgICAvLyBJZiB3ZSdyZSBpbiB0aGUgZmlsdGVyIGRvbid0IGFsbG93IG5vcm1hbCBiZWhhdmlvdXJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndHctc2VsZWN0LWZpbHRlcicpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJldmVudCBkZWxldGUgdGFraW5nIHVzIGJhY2tcbiAgICBjb25zdCBjaGFyYWN0ZXJDb2RlID0gZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyhldmVudCk7XG4gICAgaWYgKGNoYXJhY3RlckNvZGUgPT09IDgpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2VhcmNoIGZvciBvcHRpb24gYmFzZWQgb24gY2hhcmFjdGVyXG4gICAgY29uc3QgY2hhcmFjdGVyID0gZ2V0Q2hhcmFjdGVyRnJvbUtleXByZXNzKGV2ZW50KTtcbiAgICBjb250aW51ZVNlYXJjaEFuZFNlbGVjdE1hdGNoKFxuICAgICAgdGhpcy4kbmdNb2RlbCxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICBjaGFyYWN0ZXJcbiAgICApO1xuICAgIGZvY3VzT25BY3RpdmVMaW5rKHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICBwbGFjZWhvbGRlckNsaWNrKCkge1xuICAgIHJlc2V0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMpO1xuICAgIHRoaXMuYnV0dG9uLmZvY3VzKCk7XG4gIH1cblxuICBwbGFjZWhvbGRlckZvY3VzKCkge1xuICAgIHJlc2V0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMpO1xuICB9XG5cbiAgZ2V0RmlsdGVyZWRPcHRpb25zKCkge1xuICAgIHRoaXMuaGFzTW9yZU9wdGlvbnNUb1JldmVhbCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5vcHRpb25zIHx8ICF0aGlzLm9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgZmlsdGVyU3RyaW5nTG93ZXIgPSB0aGlzLmZpbHRlclN0cmluZyAmJiBlc2NhcGVSZWdFeHAodGhpcy5maWx0ZXJTdHJpbmcudG9Mb3dlckNhc2UoKSk7XG5cbiAgICBjb25zdCBlbmNvdW50ZXJlZExhYmVsc0FuZFZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3B0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25zW2ldO1xuXG4gICAgICBpZiAob3B0aW9uLmhlYWRlciAmJiAhb3B0aW9uLnZhbHVlICYmICFvcHRpb24ubGFiZWwpIHtcbiAgICAgICAgZmlsdGVyZWRPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgaXNEdXBsaWNhdGUgPSBmYWxzZTtcblxuICAgICAgY29uc3QgZXhpc3RpbmdWYWx1ZXNGb3JMYWJlbCA9IGVuY291bnRlcmVkTGFiZWxzQW5kVmFsdWVzW29wdGlvbi5sYWJlbF07XG4gICAgICBjb25zdCBoYXNFeGlzdGluZ1ZhbHVlcyA9IGFuZ3VsYXIuaXNBcnJheShleGlzdGluZ1ZhbHVlc0ZvckxhYmVsKTtcblxuICAgICAgaWYgKGhhc0V4aXN0aW5nVmFsdWVzKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZXhpc3RpbmdWYWx1ZXNGb3JMYWJlbC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhleGlzdGluZ1ZhbHVlc0ZvckxhYmVsW2pdLCBvcHRpb24udmFsdWUpKSB7XG4gICAgICAgICAgICBpc0R1cGxpY2F0ZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2hvdWxkQWRkT3B0aW9uID0gIWlzRHVwbGljYXRlXG4gICAgICAgICYmICghZmlsdGVyU3RyaW5nTG93ZXIgLy8gZW1wdHkgZmlsdGVyc3RyaW5nIG1lYW5zIHBhc3MgZXZlcnl0aGluZy5cbiAgICAgICAgICB8fCBsYWJlbE1hdGNoZXMob3B0aW9uLCBmaWx0ZXJTdHJpbmdMb3dlcilcbiAgICAgICAgICB8fCBub3RlTWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKVxuICAgICAgICAgIHx8IHNlY29uZGFyeU1hdGNoZXMob3B0aW9uLCBmaWx0ZXJTdHJpbmdMb3dlcilcbiAgICAgICAgICB8fCBzZWFyY2hhYmxlTWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKSk7XG5cbiAgICAgIGlmIChzaG91bGRBZGRPcHRpb24pIHtcbiAgICAgICAgLy8gVG9vIG1hbnkgb3B0aW9ucz8gRG9uJ3QgYWRkIGFueW1vcmUsIGluZGljYXRlIHRoYXQgdGhlcmUncyBtb3JlIGluc3RlYWQuXG4gICAgICAgIGlmIChmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoID49IHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQpIHtcbiAgICAgICAgICB0aGlzLmhhc01vcmVPcHRpb25zVG9SZXZlYWwgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0V4aXN0aW5nVmFsdWVzKSB7XG4gICAgICAgICAgZXhpc3RpbmdWYWx1ZXNGb3JMYWJlbC5wdXNoKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5jb3VudGVyZWRMYWJlbHNBbmRWYWx1ZXNbb3B0aW9uLmxhYmVsXSA9IFtvcHRpb24udmFsdWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsdGVyZWRPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xuICB9XG5cbiAgZm9jdXNPbkZpbHRlcklucHV0KCkge1xuICAgIGNvbnN0IGZpbHRlcklucHV0ID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC1maWx0ZXInKVswXTtcbiAgICBpZiAoZmlsdGVySW5wdXQpIHtcbiAgICAgIGZpbHRlcklucHV0LmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgZmlsdGVyQ2hhbmdlKCkge1xuICAgIHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnNQYWdlU2l6ZTsgLy8gUmVzZXQuXG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpO1xuICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gZmluZFNlbGVjdGVkKHRoaXMuZmlsdGVyZWRPcHRpb25zLCB0aGlzLnNlbGVjdGVkKTtcblxuICAgIC8vIENob29zZSBhIG5ldyBzZWxlY3RlZCB2YWx1ZSBpZiB0aGUgb2xkIG9uZSB3YXMgaGlkZGVuXG4gICAgaWYgKCFzZWxlY3RlZE9wdGlvbiAmJiB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHNlbGVjdE9wdGlvbih0aGlzLiRuZ01vZGVsLCB0aGlzLCB0aGlzLmZpbHRlcmVkT3B0aW9uc1swXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gS2V5ZG93biBhcyBrZXlwcmVzcyBkaWQgbm90IHdvcmsgaW4gY2hyb21lL3NhZmFyaVxuICBmaWx0ZXJLZXlkb3duKGV2ZW50KSB7XG4gICAgY29uc3QgY2hhcmFjdGVyQ29kZSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmNoYXJDb2RlIHx8IGV2ZW50LmtleUNvZGU7XG4gICAgY29uc3QgYWN0aXZlT3B0aW9uID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKTtcbiAgICBjb25zdCBhY3RpdmVMaW5rID0gYWN0aXZlT3B0aW9uID8gYWN0aXZlT3B0aW9uLnF1ZXJ5U2VsZWN0b3IoJ2EnKSA6IGZhbHNlO1xuICAgIGNvbnN0IG9wdGlvbkxpbmtzID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC1vcHRpb24tbGluaycpO1xuXG4gICAgaWYgKGNoYXJhY3RlckNvZGUgPT09IGtleXMuZG93bikge1xuICAgICAgdGhpcy5tb3ZlRG93bk9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgY3Vyc29yIGp1bXBpbmcgYXJvdW5kIGluIGlucHV0XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXJDb2RlID09PSBrZXlzLnVwKSB7XG4gICAgICB0aGlzLm1vdmVVcE9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgY3Vyc29yIGp1bXBpbmcgaW4gaW5wdXRcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlckNvZGUgPT09IGtleXMucmV0dXJuKSB7XG4gICAgICBpZiAoYWN0aXZlT3B0aW9uKSB7XG4gICAgICAgIGFjdGl2ZU9wdGlvbi5jbGljaygpO1xuICAgICAgICB0aGlzLmJ1dHRvbi5mb2N1cygpO1xuICAgICAgfVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBmb3JtIGFjdGlvbiBhcyBpbnB1dCBhY3RpdmVcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzZWxlY3RPcHRpb25Vc2luZ0xpbmsobGluaykge1xuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuZmlsdGVyZWRPcHRpb25zW2xpbmsuZ2V0QXR0cmlidXRlKCdpbmRleCcpXTtcbiAgICBzZWxlY3RPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcywgb3B0aW9uKTtcbiAgfVxuXG4gIG1vdmVVcE9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKSB7XG4gICAgLy8gSWYgbm9uZSBhY3RpdmUsIHNlbGVjdCBsYXN0XG4gICAgaWYgKCFhY3RpdmVPcHRpb24gJiYgb3B0aW9uTGlua3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlbGVjdE9wdGlvblVzaW5nTGluayhvcHRpb25MaW5rc1tvcHRpb25MaW5rcy5sZW5ndGggLSAxXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYWN0aXZlIG9wdGlvbiBub3QgZmlyc3QsIG1vdmUgdXBcbiAgICBpZiAoYWN0aXZlTGluayAhPT0gb3B0aW9uTGlua3NbMF0pIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzT3B0aW9uID0gdGhpcy5kb20uZ2V0UHJldmlvdXNTaWJsaW5nV2l0aENsYXNzTmFtZShcbiAgICAgICAgYWN0aXZlT3B0aW9uLFxuICAgICAgICAndHctc2VsZWN0LW9wdGlvbidcbiAgICAgICk7XG4gICAgICBpZiAocHJldmlvdXNPcHRpb24pIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNPcHRpb25MaW5rID0gcHJldmlvdXNPcHRpb24uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXTtcbiAgICAgICAgdGhpcy5zZWxlY3RPcHRpb25Vc2luZ0xpbmsocHJldmlvdXNPcHRpb25MaW5rKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtb3ZlRG93bk9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKSB7XG4gICAgLy8gSWYgbm9uZSBhY3RpdmUsIHNlbGVjdCBmaXJzdFxuICAgIGlmICghYWN0aXZlT3B0aW9uICYmIG9wdGlvbkxpbmtzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZWxlY3RPcHRpb25Vc2luZ0xpbmsob3B0aW9uTGlua3NbMF0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiBhY3RpdmUgb3B0aW9uIG5vdCBsYXN0LCBtb3ZlIGRvd25cbiAgICBpZiAoYWN0aXZlTGluayAhPT0gb3B0aW9uTGlua3Nbb3B0aW9uTGlua3MubGVuZ3RoIC0gMV0pIHtcbiAgICAgIGNvbnN0IG5leHRPcHRpb24gPSB0aGlzLmRvbS5nZXROZXh0U2libGluZ1dpdGhDbGFzc05hbWUoXG4gICAgICAgIGFjdGl2ZU9wdGlvbixcbiAgICAgICAgJ3R3LXNlbGVjdC1vcHRpb24nXG4gICAgICApO1xuICAgICAgaWYgKG5leHRPcHRpb24pIHtcbiAgICAgICAgY29uc3QgbmV4dE9wdGlvbkxpbmsgPSBuZXh0T3B0aW9uLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF07XG4gICAgICAgIHRoaXMuc2VsZWN0T3B0aW9uVXNpbmdMaW5rKG5leHRPcHRpb25MaW5rKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiBhY3RpdmUgaXMgbGFzdCBhbmQgY3VzdG9tIGFjdGlvbiwgZm9jdXMgb24gaXRcbiAgICBjb25zdCB0cmFuc2NsdWRlZE9wdGlvbiA9IHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0dy1zZWxlY3QtdHJhbnNjbHVkZWQnKTtcblxuICAgIGlmICh0cmFuc2NsdWRlZE9wdGlvbi5sZW5ndGgpIHtcbiAgICAgIHRyYW5zY2x1ZGVkT3B0aW9uWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRTaG93U2VhcmNoKCkge1xuICAgIC8vIEZvciBsb25nZXIgbGlzdCBhdXRvLXNob3cgc2VhcmNoLlxuICAgIC8vIFdlIGNob29zZSB0d2VsdmUgYXMgd2UgZG9uJ3QgbmVlZCBpdCBmb3IgbW9udGggc2VsZWN0b3JcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIgfHwgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMTIpO1xuICB9XG5cbiAgcmV2ZWFsTW9yZU9wdGlvbnMoJGV2ZW50KSB7XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQgKz0gdGhpcy5vcHRpb25zUGFnZVNpemU7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpOyAvLyBSZS1jYWxjIG9wdGlvbnMgYmFzZWQgb24gbGFyZ2VyIGxpc3Qgc2l6ZS5cbiAgfVxufVxuXG5mdW5jdGlvbiBsYWJlbE1hdGNoZXMob3B0aW9uLCBzZWFyY2gpIHtcbiAgcmV0dXJuIG9wdGlvbi5sYWJlbCAmJiBvcHRpb24ubGFiZWwudG9Mb3dlckNhc2UoKS5zZWFyY2goc2VhcmNoKSA+PSAwO1xufVxuZnVuY3Rpb24gbm90ZU1hdGNoZXMob3B0aW9uLCBzZWFyY2gpIHtcbiAgcmV0dXJuIG9wdGlvbi5ub3RlICYmIG9wdGlvbi5ub3RlLnRvTG93ZXJDYXNlKCkuc2VhcmNoKHNlYXJjaCkgPj0gMDtcbn1cbmZ1bmN0aW9uIHNlY29uZGFyeU1hdGNoZXMob3B0aW9uLCBzZWFyY2gpIHtcbiAgcmV0dXJuIG9wdGlvbi5zZWNvbmRhcnkgJiYgb3B0aW9uLnNlY29uZGFyeS50b0xvd2VyQ2FzZSgpLnNlYXJjaChzZWFyY2gpID49IDA7XG59XG5mdW5jdGlvbiBzZWFyY2hhYmxlTWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLnNlYXJjaGFibGUgJiYgb3B0aW9uLnNlYXJjaGFibGUudG9Mb3dlckNhc2UoKS5zZWFyY2goc2VhcmNoKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudEhhbmRsZXJzKCRjdHJsLCAkZWxlbWVudCwgJG5nTW9kZWwsIG9wdGlvbnMsICR0aW1lb3V0KSB7XG4gIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgY29uc3QgYnV0dG9uID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdidG4nKVswXTtcbiAgY29uc3QgYnV0dG9uR3JvdXAgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0bi1ncm91cCcpWzBdO1xuICBjb25zdCBkcm9wZG93biA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZHJvcGRvd24tbWVudScpWzBdO1xuXG4gIGNvbnN0IG9uRm9jdXNPdXQgPSAoKSA9PiB7XG4gICAgJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gSWYgYnV0dG9uIGlzbid0IGZvY3VzZWQgYW5kIGRyb3Bkb3duIG5vdCBvcGVuLCBibHVyXG4gICAgICBpZiAoYnV0dG9uICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICAgICYmICFidXR0b25Hcm91cC5jbGFzc0xpc3QuY29udGFpbnMoJ29wZW4nKSkge1xuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICAgICAgfVxuICAgIH0sIDE1MCk7IC8vIG5lZWQgdGltZW91dCBiZWNhdXNlIHVzaW5nIGRyb3Bkb3duLmpzLFxuICB9O1xuXG4gIGNvbnN0IG9uQnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCRjdHJsLnNob3VsZFNob3dTZWFyY2goKSkge1xuICAgICAgICAvLyBJZiBmaWx0ZXIgaW4gdXNlLCBmb2N1cyBvbiB0aGF0XG4gICAgICAgIGNvbnN0IGZpbHRlcklucHV0ID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0dy1zZWxlY3QtZmlsdGVyJylbMF07XG4gICAgICAgIGZpbHRlcklucHV0LmZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgZm9jdXMgb24gc2VsZWN0ZWQgb3B0aW9uXG4gICAgICAgIGZvY3VzT25BY3RpdmVMaW5rKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IG9uQnV0dG9uS2V5cHJlc3MgPSAoZXZlbnQpID0+IHtcbiAgICAkY3RybC5vcHRpb25LZXlwcmVzcyhldmVudCk7XG4gIH07XG5cbiAgY29uc3Qgb25Ecm9wZG93bktleXByZXNzID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhJykge1xuICAgICAgJGN0cmwub3B0aW9uS2V5cHJlc3MoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkNvbXBvbmVudEJsdXIgPSAoKSA9PiB7XG4gICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgfTtcblxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkNvbXBvbmVudEJsdXIpO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBvbkJ1dHRvbktleXByZXNzKTtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdXR0b25DbGljayk7XG4gIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uRm9jdXNPdXQpO1xuICBkcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uRm9jdXNPdXQpO1xuICBkcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIG9uRHJvcGRvd25LZXlwcmVzcyk7XG59XG5cbmZ1bmN0aW9uIGZvY3VzT25BY3RpdmVMaW5rKGVsZW1lbnQpIHtcbiAgY29uc3QgYWN0aXZlT3B0aW9uID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhY3RpdmUnKVswXTtcbiAgaWYgKGFjdGl2ZU9wdGlvbikge1xuICAgIGFjdGl2ZU9wdGlvbi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdLmZvY3VzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JUcmFuc2NsdWRlZENvbnRlbnQoJHRyYW5zY2x1ZGUsICRjdHJsKSB7XG4gICR0cmFuc2NsdWRlKChjbG9uZSkgPT4ge1xuICAgIGlmIChjbG9uZS5sZW5ndGggPiAxIHx8IGNsb25lLnRleHQoKS50cmltKCkgIT09ICcnKSB7XG4gICAgICAkY3RybC5oYXNUcmFuc2NsdWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyhldmVudCkge1xuICByZXR1cm4gZXZlbnQud2hpY2ggfHwgZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyRnJvbUtleXByZXNzKGV2ZW50KSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGdldENoYXJhY3RlckNvZGVGcm9tS2V5cHJlc3MoZXZlbnQpKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xufVxuXG5mdW5jdGlvbiBwcmVTZWxlY3RNb2RlbFZhbHVlKCRuZ01vZGVsLCAkY3RybCkge1xuICBpZiAoaXNWYWxpZE1vZGVsKCRjdHJsLm5nTW9kZWwpKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gZmluZE9wdGlvbkZyb21WYWx1ZSgkY3RybC5vcHRpb25zLCAkY3RybC5uZ01vZGVsKTtcbiAgICBpZiAob3B0aW9uKSB7XG4gICAgICBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCBvcHRpb24pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kT3B0aW9uRnJvbVZhbHVlKG9wdGlvbnMsIHZhbHVlKSB7XG4gIGxldCBvcHRpb25NYXRjaCA9IGZhbHNlO1xuICBvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgIGlmIChhbmd1bGFyLmVxdWFscyhvcHRpb24udmFsdWUsIHZhbHVlKSkge1xuICAgICAgb3B0aW9uTWF0Y2ggPSBvcHRpb247XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9wdGlvbk1hdGNoO1xufVxuXG5mdW5jdGlvbiBzZXREZWZhdWx0SWZSZXF1aXJlZCgkbmdNb2RlbCwgJGN0cmwsICRlbGVtZW50LCAkYXR0cnMpIHtcbiAgLy8gSWYgcmVxdWlyZWQgYW5kIG1vZGVsIGVtcHR5LCBzZWxlY3QgZmlyc3Qgb3B0aW9uIHdpdGggdmFsdWVcbiAgaWYgKCgkY3RybC5uZ1JlcXVpcmVkIHx8ICRhdHRycy5yZXF1aXJlZCkgJiYgIWlzVmFsaWRNb2RlbCgkY3RybC5uZ01vZGVsKSAmJiAhJGN0cmwucGxhY2Vob2xkZXIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRjdHJsLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpc1ZhbGlkTW9kZWwoJGN0cmwub3B0aW9uc1tpXS52YWx1ZSkpIHtcbiAgICAgICAgc2VsZWN0T3B0aW9uKCRuZ01vZGVsLCAkY3RybCwgJGN0cmwub3B0aW9uc1tpXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCBvcHRpb24pIHtcbiAgaWYgKG9wdGlvbi5kaXNhYmxlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKG9wdGlvbi52YWx1ZSk7XG4gIC8vIEZvcmNlIGNvbW1pdCBzbyB0aGF0IG5nLWNoYW5nZSBhbHdheXMgaGFzIG5ldyB2YWx1ZVxuICAkbmdNb2RlbC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICRjdHJsLnNlbGVjdGVkID0gb3B0aW9uO1xufVxuXG5mdW5jdGlvbiBmaW5kU2VsZWN0ZWQob3B0aW9ucywgc2VsZWN0ZWQpIHtcbiAgLy8gVGhlcmUgY2FuIGJlIHNjZW5hcmlvcyB3aGVuIHRoZSBgZmlsdGVyZWRPcHRpb25zYCBhcmUgbG9hZGVkIGFzeW5jaHJvbm91c2x5XG4gIC8vIHNvIHRoaXMgbWV0aG9kIG1heSBiZSBjYWxsZWQgd2l0aCBhbiB1bmRlZmluZWQgYXMgYG9wdGlvbnNgIGFyZ3VtZW50LCBzb1xuICAvLyB3ZSBzaG91bGQgY2hlY2sgaWYgdGhhdCBwYXNzZWQgYXJndW1lbnQgaXMgcmVhbGx5IGFuIGFycmF5IGJlZm9yZSBjYWxsaW5nXG4gIC8vIGAuZm9yRWFjaGAgb24gaXRcbiAgaWYgKCFhbmd1bGFyLmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gUHJlZmVyIGZvckVhY2ggb3ZlciBmaW5kIGZvciBicm93c2VyIHN1cHBvcnRcbiAgbGV0IHNlbGVjdGVkT3B0aW9uO1xuICBvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgIGlmIChzZWxlY3RlZCAmJiBhbmd1bGFyLmVxdWFscyhzZWxlY3RlZC52YWx1ZSwgb3B0aW9uLnZhbHVlKSkge1xuICAgICAgc2VsZWN0ZWRPcHRpb24gPSBzZWxlY3RlZDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VsZWN0ZWRPcHRpb247XG59XG5cbmZ1bmN0aW9uIHJlc2V0T3B0aW9uKCRuZ01vZGVsLCAkY3RybCkge1xuICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAvLyBGb3JjZSBjb21taXQgc28gdGhhdCBuZy1jaGFuZ2UgYWx3YXlzIGhhcyBuZXcgdmFsdWVcbiAgJG5nTW9kZWwuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAkY3RybC5zZWxlY3RlZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjb250aW51ZVNlYXJjaEFuZFNlbGVjdE1hdGNoKCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgbGV0dGVyKSB7XG4gIGxldCBmb3VuZCA9IHNlYXJjaEFuZFNlbGVjdCgkbmdNb2RlbCwgJGN0cmwsIG9wdGlvbnMsICRjdHJsLnNlYXJjaCArIGxldHRlcik7XG4gIGlmIChmb3VuZCkge1xuICAgICRjdHJsLnNlYXJjaCArPSBsZXR0ZXI7XG4gIH0gZWxzZSB7XG4gICAgJGN0cmwuc2VhcmNoID0gbGV0dGVyO1xuICAgIGZvdW5kID0gc2VhcmNoQW5kU2VsZWN0KCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgJGN0cmwuc2VhcmNoKTtcbiAgfVxuICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIHNlYXJjaEFuZFNlbGVjdCgkbmdNb2RlbCwgJGN0cmwsIG9wdGlvbnMsIHRlcm0pIHtcbiAgbGV0IGZvdW5kID0gZmFsc2U7XG4gIGNvbnN0IHNlYXJjaFRlcm0gPSB0ZXJtLnRvTG93ZXJDYXNlKCk7XG5cbiAgb3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICBpZiAoZm91bmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zU2VhcmNoKG9wdGlvbi5sYWJlbCwgc2VhcmNoVGVybSlcbiAgICAgIHx8IGNvbnRhaW5zU2VhcmNoKG9wdGlvbi5ub3RlLCBzZWFyY2hUZXJtKVxuICAgICAgfHwgY29udGFpbnNTZWFyY2gob3B0aW9uLnNlY29uZGFyeSwgc2VhcmNoVGVybSlcbiAgICAgIHx8IGNvbnRhaW5zU2VhcmNoKG9wdGlvbi5zZWFyY2hhYmxlLCBzZWFyY2hUZXJtKSkge1xuICAgICAgc2VsZWN0T3B0aW9uKCRuZ01vZGVsLCAkY3RybCwgb3B0aW9uKTtcbiAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZm91bmQ7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zU2VhcmNoKHRlcm0sIHNlYXJjaCkge1xuICByZXR1cm4gdGVybSAmJiB0ZXJtLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzZWFyY2gpID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTW9kZWwodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIHx8IHZhbHVlID09PSAwIHx8IHZhbHVlID09PSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVzcG9uc2l2ZUNsYXNzZXModmFsdWUpIHtcbiAgbGV0IGNsYXNzZXMgPSAnJztcbiAgbGV0IGJyZWFrcG9pbnRzID0gW107XG4gIGNvbnN0IHZhbGlkQnJlYWtwb2ludHMgPSB7XG4gICAgeHM6IHRydWUsXG4gICAgc206IHRydWUsXG4gICAgbWQ6IHRydWUsXG4gICAgbGc6IHRydWUsXG4gICAgeGw6IHRydWVcbiAgfTtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgJiYgdmFsdWUpIHtcbiAgICByZXR1cm4gJ2hpZGRlbic7XG4gIH1cblxuICBpZiAodmFsdWUgJiYgdmFsdWUudG9Mb3dlckNhc2UgJiYgdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuICdoaWRkZW4nO1xuICB9XG5cbiAgaWYgKHZhbHVlKSB7XG4gICAgYnJlYWtwb2ludHMgPSB2YWx1ZS5zcGxpdCgnLCcpO1xuICB9XG5cbiAgYnJlYWtwb2ludHMuZm9yRWFjaCgoYnJlYWtwb2ludCkgPT4ge1xuICAgIGlmICh2YWxpZEJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICBjbGFzc2VzICs9IGBoaWRkZW4tJHticmVha3BvaW50fSBgO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNsYXNzZXM7XG59XG5cbmNvbnN0IGtleXMgPSB7XG4gIHVwOiAzOCxcbiAgZG93bjogNDAsXG4gIHJldHVybjogMTNcbn07XG5cblNlbGVjdENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyR0cmFuc2NsdWRlJyxcbiAgJyR0aW1lb3V0JyxcbiAgJyRhdHRycycsXG4gICdUd0RvbVNlcnZpY2UnLFxuICAnJHNjb3BlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0Q29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJidG4tZ3JvdXAgYnRuLWJsb2NrIHR3LXNlbGVjdFxcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgZHJvcGRvd246ICEkY3RybC5kcm9wZG93blVwLFxcbiAgICBkcm9wdXA6ICRjdHJsLmRyb3Bkb3duVXBcXG4gIH1cXFwiIGFyaWEtaGlkZGVuPWZhbHNlPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLWlucHV0IGRyb3Bkb3duLXRvZ2dsZVxcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgICAnYnRuLWlucHV0LWludmVyc2UnOiAkY3RybC5pbnZlcnNlLFxcbiAgICAgICdidG4tYWRkb24nOiAkY3RybC5pbnZlcnNlLFxcbiAgICAgICdidG4tc20nOiAkY3RybC5zaXplID09PSAnc20nLFxcbiAgICAgICdidG4tbGcnOiAkY3RybC5zaXplID09PSAnbGcnXFxuICAgIH1cXFwiIGRhdGEtdG9nZ2xlPWRyb3Bkb3duIGFyaWEtZXhwYW5kZWQ9ZmFsc2UgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1mb2N1cz0kY3RybC5idXR0b25Gb2N1cygpIHR3LWZvY3VzYWJsZT4gPHNwYW4gY2xhc3M9dHctc2VsZWN0LXNlbGVjdGVkIG5nLWlmPSRjdHJsLnNlbGVjdGVkPiA8c3BhbiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1pbnZlcnNlIHB1bGwteHMtbGVmdCBjaXJjbGUtc21cXFwiIG5nLWlmPVxcXCIkY3RybC5zZWxlY3RlZCAmJiAkY3RybC5zZWxlY3RlZC5pY29uICYmICRjdHJsLnNlbGVjdGVkLnNlY29uZGFyeVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIHt7JGN0cmwuc2VsZWN0ZWQuaWNvbn19XFxcIj48L3NwYW4+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImNpcmNsZSBjaXJjbGUtaW52ZXJzZSBwdWxsLXhzLWxlZnRcXFwiIG5nLWNsYXNzPSRjdHJsLmNpcmNsZUNsYXNzZXMoJGN0cmwuaGlkZUNpcmNsZSkgbmctaWY9XFxcIigkY3RybC5zZWxlY3RlZC5jaXJjbGVUZXh0IHx8ICRjdHJsLnNlbGVjdGVkLmNpcmNsZUltYWdlIHx8ICRjdHJsLnNlbGVjdGVkLmNpcmNsZUljb24pXFxcIj4gPHNwYW4gbmctaWY9JGN0cmwuc2VsZWN0ZWQuY2lyY2xlVGV4dD57eyRjdHJsLnNlbGVjdGVkLmNpcmNsZVRleHR9fTwvc3Bhbj4gPGltZyBhbHQ9e3skY3RybC5zZWxlY3RlZC5sYWJlbH19IG5nLWlmPSRjdHJsLnNlbGVjdGVkLmNpcmNsZUltYWdlIHNyYz1cXFwiZGF0YTppbWFnZS9wbmc7YmFzZTY0LFxcbiAgICAgICAgICAgIGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBRUFBQUFCQ0FRQUFBQzFIQXdDQUFBQUMwbEVRVlI0Mm1Oa1lBQUFBQVlBQWpDQjBDOEFBQUFBU1VWT1JLNUNZSUk9XFxcIiBuZy1zcmM9e3skY3RybC5zZWxlY3RlZC5jaXJjbGVJbWFnZX19IC8+IDxzcGFuIG5nLWlmPSRjdHJsLnNlbGVjdGVkLmNpcmNsZUljb24gY2xhc3M9XFxcImljb24ge3skY3RybC5zZWxlY3RlZC5jaXJjbGVJY29ufX1cXFwiPjwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz10ZXh0LWVsbGlwc2lzPiA8c3BhbiBjbGFzcz1cXFwiY3VycmVuY3ktZmxhZyBjdXJyZW5jeS1mbGFnLXt7JGN0cmwuc2VsZWN0ZWQuY3VycmVuY3kgfCBsb3dlcmNhc2V9fVxcXCIgbmctaWY9XFxcIiRjdHJsLnNlbGVjdGVkICYmICRjdHJsLnNlbGVjdGVkLmN1cnJlbmN5XFxcIiBuZy1jbGFzcz0kY3RybC5yZXNwb25zaXZlQ2xhc3NlcygkY3RybC5oaWRlQ3VycmVuY3kpPjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImljb24ge3skY3RybC5zZWxlY3RlZC5pY29ufX1cXFwiIG5nLWlmPVxcXCIkY3RybC5zZWxlY3RlZCAmJiAkY3RybC5zZWxlY3RlZC5pY29uICYmICEkY3RybC5zZWxlY3RlZC5zZWNvbmRhcnlcXFwiIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVJY29uKT48L3NwYW4+IDxzcGFuIGNsYXNzPXR3LXNlbGVjdC1sYWJlbCBuZy1jbGFzcz0kY3RybC5yZXNwb25zaXZlQ2xhc3NlcygkY3RybC5oaWRlTGFiZWwpPiB7eyRjdHJsLnNlbGVjdGVkLmxhYmVsfX0gPC9zcGFuPiA8c3BhbiBuZy1pZj0kY3RybC5zZWxlY3RlZC5ub3RlIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVOb3RlKSBjbGFzcz1cXFwidHctc2VsZWN0LW5vdGUgc21hbGwgbS1sLTFcXFwiPiB7eyRjdHJsLnNlbGVjdGVkLm5vdGV9fSA8L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLnNlbGVjdGVkLnNlY29uZGFyeSBuZy1jbGFzcz0kY3RybC5yZXNwb25zaXZlQ2xhc3NlcygkY3RybC5oaWRlU2Vjb25kYXJ5KSBjbGFzcz1cXFwidHctc2VsZWN0LXNlY29uZGFyeSBzbWFsbCBzZWNvbmRhcnkgdGV4dC1lbGxpcHNpc1xcXCI+IHt7JGN0cmwuc2VsZWN0ZWQuc2Vjb25kYXJ5fX0gPC9zcGFuPiA8L3NwYW4+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9Zm9ybS1jb250cm9sLXBsYWNlaG9sZGVyIG5nLWlmPSEkY3RybC5zZWxlY3RlZD57eyRjdHJsLnBsYWNlaG9sZGVyfX08L3NwYW4+IDxzcGFuIGNsYXNzPWNhcmV0Pjwvc3Bhbj4gPC9idXR0b24+IDx1bCBjbGFzcz1kcm9wZG93bi1tZW51IHJvbGU9bWVudSBuZy1jbGFzcz1cXFwie1xcbiAgICAgICdkcm9wZG93bi1tZW51LXhzLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ3hzJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1zbS1yaWdodCc6ICRjdHJsLmRyb3Bkb3duUmlnaHQgPT09ICdzbScsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtbWQtcmlnaHQnOiAkY3RybC5kcm9wZG93blJpZ2h0ID09PSAnbWQnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LWxnLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ2xnJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS14bC1yaWdodCc6ICRjdHJsLmRyb3Bkb3duUmlnaHQgPT09ICd4bCcsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtc20nOiAkY3RybC5kcm9wZG93bldpZHRoID09PSAnc20nLFxcbiAgICAgICdkcm9wZG93bi1tZW51LW1kJzogJGN0cmwuZHJvcGRvd25XaWR0aCA9PT0gJ21kJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1sZyc6ICRjdHJsLmRyb3Bkb3duV2lkdGggPT09ICdsZydcXG4gICAgfVxcXCI+IDxsaSBuZy1pZj0kY3RybC5zaG91bGRTaG93U2VhcmNoKCk+IDxhIGhyZWY9XFxcIlxcXCIgY2xhc3M9XFxcInR3LXNlbGVjdC1maWx0ZXItbGluayBwLWEtMFxcXCIgdGFiaW5kZXg9LTEgbmctZm9jdXM9JGN0cmwuZm9jdXNPbkZpbHRlcklucHV0KCk+IDxkaXYgY2xhc3M9aW5wdXQtZ3JvdXA+IDxzcGFuIGNsYXNzPWlucHV0LWdyb3VwLWFkZG9uPjxzcGFuIGNsYXNzPVxcXCJpY29uIGljb24tc2VhcmNoXFxcIj48L3NwYW4+IDwvc3Bhbj4gPGlucHV0IHR5cGU9dGV4dCBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHR3LXNlbGVjdC1maWx0ZXJcXFwiIHBsYWNlaG9sZGVyPXt7JGN0cmwuZmlsdGVyfX0gbmctbW9kZWw9JGN0cmwuZmlsdGVyU3RyaW5nIG5nLWNoYW5nZT0kY3RybC5maWx0ZXJDaGFuZ2UoKSBuZy1rZXlkb3duPSRjdHJsLmZpbHRlcktleWRvd24oJGV2ZW50KSAvPiA8L2Rpdj4gPC9hPiA8L2xpPiA8bGkgbmctY2xhc3M9XFxcInthY3RpdmU6ICEkY3RybC5zZWxlY3RlZH1cXFwiIG5nLWlmPVxcXCIkY3RybC5wbGFjZWhvbGRlciAmJiAhJGN0cmwubmdSZXF1aXJlZCAmJiAhJGN0cmwuZmlsdGVyXFxcIj4gPGEgaHJlZj1cXFwiXFxcIiB0YWJpbmRleD0tMSBuZy1jbGljaz0kY3RybC5wbGFjZWhvbGRlckNsaWNrKCkgbmctZm9jdXM9JGN0cmwucGxhY2Vob2xkZXJGb2N1cygpIGNsYXNzPXR3LXNlbGVjdC1wbGFjZWhvbGRlciB0dy1mb2N1c2FibGU+IHt7JGN0cmwucGxhY2Vob2xkZXJ9fSA8L2E+IDwvbGk+IDxsaSBuZy1pZj1cXFwiKCRjdHJsLnBsYWNlaG9sZGVyICYmICEkY3RybC5uZ1JlcXVpcmVkKSB8fCAkY3RybC5maWx0ZXJcXFwiIGNsYXNzPWRpdmlkZXI+PC9saT4gPGxpIG5nLXJlcGVhdD1cXFwib3B0aW9uIGluICRjdHJsLmZpbHRlcmVkT3B0aW9uc1xcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgICAgICdhY3RpdmUnOiAkY3RybC5uZ01vZGVsID09PSBvcHRpb24udmFsdWUsXFxuICAgICAgICAnZGlzYWJsZWQnOiBvcHRpb24uZGlzYWJsZWQsXFxuICAgICAgICAnZHJvcGRvd24taGVhZGVyJzogb3B0aW9uLmhlYWRlcixcXG4gICAgICAgICd0dy1zZWxlY3Qtb3B0aW9uJzogIW9wdGlvbi5oZWFkZXIgJiYgIW9wdGlvbi5kaXNhYmxlZFxcbiAgICAgIH1cXFwiPiA8c3BhbiBuZy1pZj1vcHRpb24uaGVhZGVyIGNsYXNzPXRleHQtZWxsaXBzaXMgbmctY2xpY2s9JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpPnt7b3B0aW9uLmhlYWRlcn19PC9zcGFuPiA8YSBocmVmPVxcXCJcXFwiIG5nLWlmPSFvcHRpb24uaGVhZGVyIG5nLWNsaWNrPVxcXCIkY3RybC5vcHRpb25DbGljayhvcHRpb24sICRldmVudClcXFwiIG5nLWZvY3VzPSRjdHJsLm9wdGlvbkZvY3VzKG9wdGlvbikgbmctY2xhc3M9XFxcInsndHctc2VsZWN0LW9wdGlvbi1saW5rJzogIW9wdGlvbi5kaXNhYmxlZH1cXFwiIGluZGV4PXt7JGluZGV4fX0gdGFiaW5kZXg9LTEgdHctZm9jdXNhYmxlPiA8ZGl2IG5nLWlmPVxcXCJvcHRpb24uaWNvbiAmJiBvcHRpb24uc2Vjb25kYXJ5XFxcIiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1pbnZlcnNlIHB1bGwteHMtbGVmdCBjaXJjbGUtc21cXFwiPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiB7e29wdGlvbi5pY29ufX1cXFwiPjwvc3Bhbj4gPC9kaXY+IDxzcGFuIG5nLWlmPVxcXCJvcHRpb24uaWNvbiAmJiAhb3B0aW9uLnNlY29uZGFyeVxcXCIgY2xhc3M9XFxcImljb24ge3tvcHRpb24uaWNvbn19IHB1bGwteHMtbGVmdFxcXCI+IDwvc3Bhbj4gPHNwYW4gbmctaWY9b3B0aW9uLmN1cnJlbmN5IGNsYXNzPVxcXCJjdXJyZW5jeS1mbGFnIGN1cnJlbmN5LWZsYWcte3tvcHRpb24uY3VycmVuY3kgfCBsb3dlcmNhc2V9fSBwdWxsLXhzLWxlZnRcXFwiPiA8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLWludmVyc2UgcHVsbC14cy1sZWZ0XFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICAgICAgICdjaXJjbGUtc20nOiBvcHRpb24uc2Vjb25kYXJ5LFxcbiAgICAgICAgICAgICdjaXJjbGUteHMnOiAhb3B0aW9uLnNlY29uZGFyeVxcbiAgICAgICAgICB9XFxcIiBuZy1pZj1cXFwib3B0aW9uLmNpcmNsZVRleHQgfHwgb3B0aW9uLmNpcmNsZUltYWdlIHx8IG9wdGlvbi5jaXJjbGVJY29uXFxcIj4gPHNwYW4gY2xhc3M9dHctc2VsZWN0LWNpcmNsZS10ZXh0IG5nLWlmPW9wdGlvbi5jaXJjbGVUZXh0Pnt7b3B0aW9uLmNpcmNsZVRleHR9fTwvc3Bhbj4gPGltZyBhbHQ9e3tvcHRpb24ubGFiZWx9fSBuZy1pZj1vcHRpb24uY2lyY2xlSW1hZ2Ugc3JjPVxcXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsXFxuICAgICAgICAgICAgICBpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQUVBQUFBQkNBUUFBQUMxSEF3Q0FBQUFDMGxFUVZSNDJtTmtZQUFBQUFZQUFqQ0IwQzhBQUFBQVNVVk9SSzVDWUlJPVxcXCIgbmctc3JjPXt7b3B0aW9uLmNpcmNsZUltYWdlfX0gLz4gPHNwYW4gbmctaWY9b3B0aW9uLmNpcmNsZUljb24gY2xhc3M9XFxcImljb24ge3tvcHRpb24uY2lyY2xlSWNvbn19XFxcIj48L3NwYW4+IDwvc3Bhbj57e29wdGlvbi5sYWJlbH19PHNwYW4gbmctaWY9b3B0aW9uLm5vdGUgY2xhc3M9XFxcInR3LXNlbGVjdC1ub3RlIHNtYWxsIG0tbC0xXFxcIj57e29wdGlvbi5ub3RlfX08L3NwYW4+PHNwYW4gbmctaWY9b3B0aW9uLnNlY29uZGFyeSBjbGFzcz1cXFwidHctc2VsZWN0LXNlY29uZGFyeSBzbWFsbCB0ZXh0LWVsbGlwc2lzXFxcIj57e29wdGlvbi5zZWNvbmRhcnl9fTwvc3Bhbj4gPC9hPiA8L2xpPiA8bGkgbmctaWY9JGN0cmwuaGFzTW9yZU9wdGlvbnNUb1JldmVhbD4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC5yZXZlYWxNb3JlT3B0aW9ucygkZXZlbnQpIGNsYXNzPXR3LXNlbGVjdC1sb2FkLW1vcmUgdGFiaW5kZXg9LTEgdHctZm9jdXNhYmxlPiAuLi4gPC9hPiA8L2xpPiA8bGkgbmctaWY9JGN0cmwuaGFzVHJhbnNjbHVkZWQgY2xhc3M9ZGl2aWRlcj48L2xpPiA8bGkgbmctdHJhbnNjbHVkZSBuZy1pZj0kY3RybC5oYXNUcmFuc2NsdWRlZCBjbGFzcz10dy1zZWxlY3QtdHJhbnNjbHVkZWQ+PC9saT4gPC91bD4gPC9kaXY+IDxpbnB1dCB0eXBlPWhpZGRlbiBjbGFzcz10dy1zZWxlY3QtaGlkZGVuIG5hbWU9e3skY3RybC5uYW1lfX0gdmFsdWU9e3skY3RybC5uZ01vZGVsfX0gbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCAvPiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL3VwbG9hZC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3VwbG9hZC5odG1sJztcbmltcG9ydCAnLi91cGxvYWQubGVzcyc7XG5cbmNvbnN0IFVwbG9hZCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ0NoYW5nZTogJyYnLFxuICAgIG5hbWU6ICdAJyxcbiAgICBpY29uOiAnQCcsIC8vIGlsbHVzdHJhdGlvbiBpbiBpY29uIHNob3duIGluIHVwbG9hZCBib3hcbiAgICBoZWxwSW1hZ2U6ICdAJywgLy8gaWxsdXN0cmF0aW9uIGluIGltYWdlIHNob3dpbiBpbiB1cGxvYWQgYm94LCBpZiBzcGVjaWZpZWQsIHJlcGxhY2VzIGljb25cbiAgICBsYWJlbDogJ0AnLFxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG5cbiAgICBidXR0b25UZXh0OiAnQCcsIC8vIEJ1dHRvbiB0ZXh0IHNob3duIGluIGRlZmF1bHQgc3RhdGVcbiAgICBjYW5jZWxUZXh0OiAnQCcsIC8vIFRleHQgaW5zdHJ1Y3RpbmcgdG8gZ28gYmFjayB0byByZS11cGxvYWQgYWZ0ZXIgdXBsb2FkIGlzIGRvbmVcbiAgICBkcm9wcGluZ1RleHQ6ICdAJywgLy8gVGV4dCBzaG93biB3aGVuIGhvdmVyaW5nIHdpdGggYSBmaWxlXG5cbiAgICBwcm9jZXNzaW5nVGV4dDogJ0AnLCAvLyBUZXh0IHNob3duIHdoaWxlIHByb2Nlc3NpbmcvdXBsb2FkaW5nXG4gICAgc3VjY2Vzc1RleHQ6ICdAJywgLy8gVGV4dCBhZnRlciB1cGxvYWQgaXMgc3VjY2Vzc2Z1bCwgc2hvd24gcXVpdGUgYnJpZWZseSBiZWZvcmUgcHJldmlld1xuICAgIGZhaWx1cmVUZXh0OiAnQCcsXG5cbiAgICB0b29MYXJnZU1lc3NhZ2U6ICdAJyxcbiAgICAvLyB3cm9uZ1R5cGVNZXNzYWdlOiAnQCcsXG5cbiAgICB2YWxpZGF0aW9uTWVzc2FnZXM6ICc8JyxcblxuICAgIHNpemU6ICdAJyxcbiAgICBhY2NlcHQ6ICdAJyxcbiAgICBodHRwT3B0aW9uczogJzwnLFxuXG4gICAgb25TdGFydDogJz0nLFxuICAgIG9uU3VjY2VzczogJz0nLFxuICAgIG9uRmFpbHVyZTogJz0nLFxuICAgIG9uQ2FuY2VsOiAnPScsXG5cbiAgICBtYXhTaXplOiAnPCcsIC8vIFRPRE8gbW92ZSB0byBuZ01heD9cblxuICAgIC8vIENhbWVyYSBjYXB0dXJlIHVwbG9hZCBvcHRpb25zXG5cbiAgICAvKiBTb3VyY2Ugb2YgZmlsZSB0byB1cGxvYWRcbiAgICAgKiBQb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBDQU1FUkFfT05MWSAoYWxsb3cgb25seSBjYW1lcmEgdXBsb2FkKVxuICAgICAqIEZJTEVfT05MWSAoYWxsb3cgb25seSB1cGxvYWQgZnJvbSBmaWxlIHN5c3RlbSlcbiAgICAgKiBBTlkgKHdlIGRvbnQgY2FyZSlcbiAgICAgKi9cbiAgICBzb3VyY2U6ICc8JyxcbiAgICBjYW1lcmFPdmVybGF5OiAnQCcsIC8vIE9wdGlvbmFsXG4gICAgY2FtZXJhRGlyZWN0aW9uOiAnQCcsIC8vIGVudmlyb25tZW50L3VzZXJcblxuICAgIGRlc2NyaXB0aW9uOiAnQCcsIC8vIERFUFJFQ0FURUQgZm9yIGxhYmVsXG4gICAgaW5zdHJ1Y3Rpb25zOiAnQCcsIC8vIERFUFJFQ0FURUQgZm9yIHBsYWNlaG9sZGVyXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFVwbG9hZDtcbiIsImNsYXNzIFVwbG9hZENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICAkZWxlbWVudCxcbiAgICAkc2NvcGUsXG4gICAgJGF0dHJzLFxuICAgIEZpbGVWYWxpZGF0aW9uU2VydmljZSxcbiAgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuRmlsZVZhbGlkYXRpb25TZXJ2aWNlID0gRmlsZVZhbGlkYXRpb25TZXJ2aWNlO1xuXG4gICAgdGhpcy5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnNvdXJjZSkge1xuICAgICAgdGhpcy5pc0xpdmVDYW1lcmFVcGxvYWQgPSBjaGFuZ2VzLnNvdXJjZS5jdXJyZW50VmFsdWUgPT09ICdDQU1FUkFfT05MWSc7XG4gICAgfVxuICB9XG5cbiAgb25GaWxlQ2FwdHVyZShmaWxlKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZmlsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcmV0cmlldmUgZmlsZScpO1xuICAgIH1cblxuICAgIHRoaXMuZmlsZSA9IGZpbGU7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIHRoaXMuaXNEb25lID0gZmFsc2U7XG5cbiAgICB0aGlzLmNsZWFySHRtbElucHV0KCk7XG4gICAgdGhpcy5zZXROZ01vZGVsKG51bGwpO1xuXG4gICAgaWYgKHRoaXMub25DYW5jZWwpIHtcbiAgICAgIHRoaXMub25DYW5jZWwoKTtcbiAgICB9XG4gIH1cblxuICBjbGVhckh0bWxJbnB1dCgpIHtcbiAgICBpZiAodGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpKSB7XG4gICAgICB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgaW5wdXQudmFsdWUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2V0TmdNb2RlbCh2YWx1ZSkge1xuICAgIC8vIElmIG5nTW9kZWwgbm90IGFzc2lnbmFibGUsIHdlIGRvbid0IHdhbnQgdG8gZXJyb3IuXG4gICAgaWYgKHR5cGVvZiB0aGlzLiRhdHRycy5uZ01vZGVsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICAgIGlmICghJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBpc0Ryb3BFbGlnaWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2UgIT09ICdDQU1FUkFfT05MWSc7XG4gIH1cblxuICBvbkRyYWdFbnRlcigpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gdGhpcy5pc0Ryb3BFbGlnaWJsZSgpO1xuICB9XG5cbiAgb25EcmFnTGVhdmUoKSB7XG4gICAgdGhpcy5pc0Ryb3BwYWJsZSA9IGZhbHNlO1xuICB9XG5cbiAgb25Ecm9wKGZpbGVzKSB7XG4gICAgdGhpcy5pc0Ryb3BwYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMub25GaWxlQ2FwdHVyZShmaWxlc1swXSk7XG4gIH1cblxuICBvblByb2Nlc3NTdGFydChmaWxlKSB7XG4gICAgdGhpcy5pc0RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5vblN0YXJ0KSB7XG4gICAgICB0aGlzLm9uU3RhcnQoeyBmaWxlIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uUHJvY2Vzc1N1Y2Nlc3MoZmlsZSwgZGF0YVVybCwgaWQsIHJlc3BvbnNlKSB7XG4gICAgdGhpcy5pc0RvbmUgPSB0cnVlO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5kYXRhVXJsID0gZGF0YVVybDtcbiAgICB0aGlzLmlzSW1hZ2UgPSB0aGlzLkZpbGVWYWxpZGF0aW9uU2VydmljZS5pc0ltYWdlKGZpbGUpO1xuXG4gICAgaWYgKHRoaXMuaHR0cE9wdGlvbnMgJiYgaWQpIHtcbiAgICAgIHRoaXMuc2V0TmdNb2RlbChpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0TmdNb2RlbChkYXRhVXJsKTtcbiAgICB9XG5cbiAgICB0aGlzLm9uU3VjY2VzcyhmaWxlLCByZXNwb25zZSk7XG4gIH1cblxuICBvblByb2Nlc3NGYWlsdXJlKGVycm9yKSB7XG4gICAgaWYgKHRoaXMub25GYWlsdXJlKSB7XG4gICAgICB0aGlzLm9uRmFpbHVyZSh7IGVycm9yIH0pO1xuICAgIH1cbiAgfVxufVxuXG5VcGxvYWRDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckZWxlbWVudCcsXG4gICckc2NvcGUnLFxuICAnJGF0dHJzJyxcbiAgJ0ZpbGVWYWxpZGF0aW9uU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IFVwbG9hZENvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUgdHctZHJhZy1lbnRlcj0kY3RybC5vbkRyYWdFbnRlcigpIHR3LWRyYWctbGVhdmU9JGN0cmwub25EcmFnTGVhdmUoKSB0dy1kcm9wPSRjdHJsLm9uRHJvcChmaWxlcykgbmctY2xhc3M9XFxcIntcXG4gICAgJ2Ryb3BwYWJsZS1zbSc6ICRjdHJsLnNpemUgPT09J3NtJyxcXG4gICAgJ2Ryb3BwYWJsZS1tZCc6ICRjdHJsLnNpemUgPT09J21kJyB8fCAhJGN0cmwuc2l6ZSxcXG4gICAgJ2Ryb3BwYWJsZS1sZyc6ICRjdHJsLnNpemUgPT09J2xnJyxcXG4gICAgJ2Ryb3BwYWJsZS1kcm9wcGluZyc6ICRjdHJsLmlzRHJvcHBhYmxlICYmICEkY3RybC5uZ0Rpc2FibGVkLFxcbiAgICAnZHJvcHBhYmxlLXByb2Nlc3NpbmcnOiAhJGN0cmwuaXNEb25lICYmICgkY3RybC5pc1Byb2Nlc3NpbmcgfHwgJGN0cmwuaXNTdWNjZXNzKSxcXG4gICAgJ2Ryb3BwYWJsZS1jb21wbGV0ZSc6ICRjdHJsLmlzRG9uZVxcbiAgfVxcXCI+IDxkaXYgY2xhc3M9ZHJvcHBhYmxlLWRlZmF1bHQtY2FyZCBhcmlhLWhpZGRlbj1cXFwie3skY3RybC5pc0RvbmUgfHwgJGN0cmwuaXNQcm9jZXNzaW5nfX1cXFwiPiA8dHctdXBsb2FkLWNhcHR1cmUgbGFiZWw9JGN0cmwubGFiZWwgaWNvbj0kY3RybC5pY29uIGFjY2VwdD0kY3RybC5hY2NlcHQgaW5wdXQtZmlsZT0kY3RybC5pbnB1dEZpbGUgaGVscC1pbWFnZT0kY3RybC5oZWxwSW1hZ2UgYnV0dG9uLXRleHQ9JGN0cmwuYnV0dG9uVGV4dCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIHBsYWNlaG9sZGVyPVxcXCIkY3RybC5wbGFjZWhvbGRlciB8fCAkY3RybC5kZXNjcmlwdGlvblxcXCIgaXMtbGl2ZS1jYW1lcmEtdXBsb2FkPSRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCBjYW1lcmEtb3ZlcmxheT0kY3RybC5jYW1lcmFPdmVybGF5IGNhbWVyYS1kaXJlY3Rpb249JGN0cmwuY2FtZXJhRGlyZWN0aW9uIG9uLWZpbGUtY2FwdHVyZT0kY3RybC5vbkZpbGVDYXB0dXJlKGZpbGUpPjwvdHctdXBsb2FkLWNhcHR1cmU+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJkcm9wcGFibGUtcHJvY2Vzc2luZy1jYXJkIGRyb3BwYWJsZS1jYXJkXFxcIiBhcmlhLWhpZGRlbj17eyEkY3RybC5pc1Byb2Nlc3Npbmd9fT4gPHR3LXVwbG9hZC1wcm9jZXNzaW5nIG5hbWU9JGN0cmwubmFtZSBmaWxlPSRjdHJsLmZpbGUgb24tc3RhcnQ9JGN0cmwub25Qcm9jZXNzU3RhcnQoZmlsZSkgb24tc3VjY2Vzcz1cXFwiJGN0cmwub25Qcm9jZXNzU3VjY2VzcyhmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UpXFxcIiBvbi1mYWlsdXJlPSRjdHJsLm9uUHJvY2Vzc0ZhaWx1cmUoZXJyb3IpIG1heC1zaXplPSRjdHJsLm1heFNpemUgYWNjZXB0PSRjdHJsLmFjY2VwdCBodHRwLW9wdGlvbnM9JGN0cmwuaHR0cE9wdGlvbnMgcHJvY2Vzc2luZy1tZXNzYWdlPSRjdHJsLnByb2Nlc3NpbmdUZXh0IHN1Y2Nlc3MtbWVzc2FnZT0kY3RybC5zdWNjZXNzVGV4dCBlcnJvci1tZXNzYWdlPSRjdHJsLmZhaWx1cmVUZXh0IHZhbGlkYXRpb24tbWVzc2FnZXM9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzIHRvby1sYXJnZS1tZXNzYWdlPSRjdHJsLnRvb0xhcmdlTWVzc2FnZSBjYW5jZWwtdGV4dD0kY3RybC5jYW5jZWxUZXh0IG9uLWNhbmNlbD0kY3RybC5yZXNldCgpPjwvdHctdXBsb2FkLXByb2Nlc3Npbmc+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJkcm9wcGFibGUtY29tcGxldGUtY2FyZCBkcm9wcGFibGUtY2FyZFxcXCIgYXJpYS1oaWRkZW49e3shJGN0cmwuaXNEb25lfX0+IDx0dy11cGxvYWQtc3VjY2VzcyBsYWJlbD0kY3RybC5sYWJlbCBpcy1pbWFnZT0kY3RybC5pc0ltYWdlIGZpbGU9JGN0cmwuZmlsZSBkYXRhPSRjdHJsLmRhdGFVcmwgc3VjY2Vzcy1tZXNzYWdlPSRjdHJsLnN1Y2Nlc3NUZXh0IGNhbmNlbC10ZXh0PSRjdHJsLmNhbmNlbFRleHQgb24tY2FuY2VsPSRjdHJsLnJlc2V0KCk+PC90dy11cGxvYWQtc3VjY2Vzcz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3BwYWJsZS1kcm9wcGluZy1jYXJkIGRyb3BwYWJsZS1jYXJkXFxcIj4gPHR3LXVwbG9hZC1kcm9wcGluZyBkcm9wcGluZy10ZXh0PSRjdHJsLmRyb3BwaW5nVGV4dD48L3R3LXVwbG9hZC1kcm9wcGluZz4gPC9kaXY+IDwvZGl2PiBcIjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdXBsb2FkLmxlc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3VwbG9hZC5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdXBsb2FkLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImRpdi50cmFuc3BhcmVudC1hcmVhe2JhY2tncm91bmQtY29sb3I6aHNsYSgwLDAlLDk4JSwuOSl9Lmljb24tY2lyY2xlLXNoYWRvd3tiYWNrZ3JvdW5kOiNmZmY7Ym94LXNoYWRvdzowIDRweCAxNnB4IHJnYmEoMCwwLDAsLjA4KTtwYWRkaW5nOjEycHg7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlci1yYWRpdXM6OTlweH0uaWNvbi1jaXJjbGUtc2hhZG93IHN2Z3t0b3A6NHB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5pbmxpbmUtc3Zne3RvcDouMzVlbTtwb3NpdGlvbjpyZWxhdGl2ZX1AbWVkaWEgKG1pbi13aWR0aDo1NzZweCl7cC5maXJzdC1lcnJvcnttaW4taGVpZ2h0OjcycHh9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo1NzVweCl7LmVtcHR5LXByb2Nlc3NpbmctbGlzdHtoZWlnaHQ6MTMwcHh9LnByb2Nlc3NpbmctbGlzdHttaW4taGVpZ2h0OjEzMHB4fX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6NTc1cHgpey5tdWx0aS11cGxvYWR7aGVpZ2h0OjM3NXB4fS5tdWx0aS11cGxvYWQgLmVtcHR5LXNjcmVlbntwYWRkaW5nLXRvcDo0MHB4fS5lbXB0eS1wcm9jZXNzaW5nLWxpc3QsLnByb2Nlc3NpbmctbGlzdHtoZWlnaHQ6MjkwcHh9fS5wcm9jZXNzaW5nLWxpc3R7b3ZlcmZsb3c6YXV0b30ucHJvY2Vzc2luZy1saXN0LC5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtYm9keSwucHJvY2Vzc2luZy1saXN0IC5wcm9jZXNzaW5nLWl0ZW0gLm1lZGlhLXJpZ2h0e2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNlMmU2ZTh9LnByb2Nlc3NpbmctbGlzdCAubGFzdC1pdGVtIC5wcm9jZXNzaW5nLWl0ZW0gLm1lZGlhLWJvZHksLnByb2Nlc3NpbmctbGlzdCAubGFzdC1pdGVtIC5wcm9jZXNzaW5nLWl0ZW0gLm1lZGlhLXJpZ2h0e2JvcmRlci1ib3R0b206MH0ucHJvY2Vzc2luZy1saXN0IC5wcm9jZXNzaW5nLWl0ZW17cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJX0ucHJvY2Vzc2luZy1saXN0IC5wcm9jZXNzaW5nLWl0ZW0gLnZlcnRpY2FsLWNlbnRlcnthbGlnbi1zZWxmOmNlbnRlcn0uZW1wdHktcHJvY2Vzc2luZy1saXN0e2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5lbXB0eS1wcm9jZXNzaW5nLWxpc3QgLmNpcmNsZXtiYWNrZ3JvdW5kLWNvbG9yOiNkOGYxZmF9LmVtcHR5LXByb2Nlc3NpbmctbGlzdCAuZW1wdHktc2NyZWVue2FsaWduLXNlbGY6Y2VudGVyfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ2FwdHVyZUNhcmQgZnJvbSAnLi9jYXB0dXJlLWNhcmQuY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5jYXB0dXJlJywgW10pXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkQ2FwdHVyZScsIENhcHR1cmVDYXJkKVxuICAubmFtZTtcbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NhcHR1cmUtY2FyZC5odG1sJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY2FwdHVyZS1jYXJkLmNvbnRyb2xsZXInO1xuXG5jb25zdCBDYXB0dXJlQ2FyZCA9IHtcbiAgdGVtcGxhdGUsXG4gIGNvbnRyb2xsZXIsXG4gIGJpbmRpbmdzOiB7XG4gICAgbGFiZWw6ICc8JyxcbiAgICBpY29uOiAnPCcsXG4gICAgYWNjZXB0OiAnPCcsXG4gICAgYnV0dG9uVGV4dDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBwbGFjZWhvbGRlcjogJzwnLFxuICAgIGlucHV0RmlsZTogJzwnLFxuICAgIGhlbHBJbWFnZTogJzwnLFxuXG4gICAgaXNMaXZlQ2FtZXJhVXBsb2FkOiAnPCcsXG4gICAgY2FtZXJhT3ZlcmxheTogJzwnLFxuICAgIGNhbWVyYURpcmVjdGlvbjogJzwnLFxuXG4gICAgb25GaWxlQ2FwdHVyZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENhcHR1cmVDYXJkO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9ZHJvcHBhYmxlLWNhcmQtY29udGVudD4gPGRpdiBjbGFzcz1tLWItMj4gPGltZyBuZy1zaG93PSRjdHJsLmhlbHBJbWFnZSBuZy1zcmM9e3skY3RybC5oZWxwSW1hZ2V9fSBhbHQ9e3skY3RybC5sYWJlbH19IGNsYXNzPVxcXCJ0aHVtYm5haWwgdGV4dC14cy1jZW50ZXJcXFwiLz4gPHNwYW4gbmctc2hvdz0hJGN0cmwuaGVscEltYWdlIGNsYXNzPVxcXCJpY29uIGljb24te3skY3RybC52aWV3SWNvbn19IGljb24teHhsXFxcIj48L3NwYW4+IDwvZGl2PiA8aDQgY2xhc3M9bS1iLTEgbmctaWY9XFxcIiRjdHJsLmxhYmVsIHx8ICRjdHJsLmRlc2NyaXB0aW9uXFxcIj4ge3skY3RybC5sYWJlbCB8fCAkY3RybC5kZXNjcmlwdGlvbn19IDwvaDQ+IDxwIGNsYXNzPW0tYi0yIG5nLWlmPVxcXCIkY3RybC5wbGFjZWhvbGRlciB8fCAkY3RybC5pbnN0cnVjdGlvbnNcXFwiPiB7eyRjdHJsLnBsYWNlaG9sZGVyIHx8ICRjdHJsLmluc3RydWN0aW9uc319IDwvcD4gPHR3LXVwbG9hZC1idXR0b24gbmctaWY9ISRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCBuYW1lPSRjdHJsLm5hbWUgbGFiZWw9JGN0cmwuYnV0dG9uVGV4dCBhY2NlcHQ9JGN0cmwuYWNjZXB0IG1vZGVsPSRjdHJsLmlucHV0RmlsZSBkaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG9uLWNhcHR1cmU9JGN0cmwub25CdXR0b25DYXB0dXJlKGZpbGVzKT4gPC90dy11cGxvYWQtYnV0dG9uPiA8dHctY2FtZXJhLWJ1dHRvbiBuZy1pZj0kY3RybC5pc0xpdmVDYW1lcmFVcGxvYWQgbGFiZWw9JGN0cmwuYnV0dG9uVGV4dCBkaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG9uLWNsaWNrPSRjdHJsLm9uQ2FtZXJhQnV0dG9uQ2xpY2soKT4gPC90dy1jYW1lcmEtYnV0dG9uPiA8dHctY2FtZXJhLWNhcHR1cmUgbmctaWY9XFxcIiRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCAmJiAkY3RybC5zaG93TGl2ZUNhcHR1cmVTY3JlZW5cXFwiIG92ZXJsYXk9e3skY3RybC5jYW1lcmFPdmVybGF5fX0gZGlyZWN0aW9uPXt7JGN0cmwuY2FtZXJhRGlyZWN0aW9ufX0gb24tY2FuY2VsPSRjdHJsLm9uQ2FtZXJhQ2FuY2VsKCkgb24tY2FwdHVyZT0kY3RybC5vbkNhbWVyYUNhcHR1cmUoZmlsZSk+IDwvdHctY2FtZXJhLWNhcHR1cmU+IDwvZGl2PiBcIjsiLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy5zaG93TGl2ZUNhcHR1cmVTY3JlZW4gPSBmYWxzZTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmljb24pIHtcbiAgICAgIHRoaXMudmlld0ljb24gPSBjaGFuZ2VzLmljb24uY3VycmVudFZhbHVlID8gY2hhbmdlcy5pY29uLmN1cnJlbnRWYWx1ZSA6ICd1cGxvYWQnO1xuICAgIH1cbiAgfVxuXG4gIG9uQ2FtZXJhQ2FuY2VsKCkge1xuICAgIHRoaXMuc2hvd0xpdmVDYXB0dXJlU2NyZWVuID0gZmFsc2U7XG4gIH1cblxuICBvbkNhbWVyYUNhcHR1cmUoZmlsZSkge1xuICAgIHRoaXMuc2hvd0xpdmVDYXB0dXJlU2NyZWVuID0gZmFsc2U7XG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKHsgZmlsZSB9KTtcbiAgfVxuXG4gIG9uQ2FtZXJhQnV0dG9uQ2xpY2soKSB7XG4gICAgdGhpcy5zaG93TGl2ZUNhcHR1cmVTY3JlZW4gPSB0cnVlO1xuICB9XG5cbiAgb25CdXR0b25DYXB0dXJlKGZpbGVzKSB7XG4gICAgY29uc3QgZmlsZSA9IGZpbGVzWzBdO1xuICAgIHRoaXMub25GaWxlQ2FwdHVyZSh7IGZpbGUgfSk7XG4gIH1cbn1cblxuQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCddO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRHJvcHBpbmdDYXJkIGZyb20gJy4vZHJvcHBpbmctY2FyZC5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmRyb3BwaW5nJywgW10pXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkRHJvcHBpbmcnLCBEcm9wcGluZ0NhcmQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vZHJvcHBpbmctY2FyZC5odG1sJztcblxuY29uc3QgRHJvcHBpbmdDYXJkID0ge1xuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBkcm9wcGluZ1RleHQ6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wcGluZ0NhcmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUtY2FyZC1jb250ZW50PiA8ZGl2IGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLXNtIG0tYi0zXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1hZGRcXFwiPjwvc3Bhbj4gPC9kaXY+IDxoND4ge3sgJGN0cmwuZHJvcHBpbmdUZXh0IHx8ICdEcm9wIGZpbGUgdG8gc3RhcnQgdXBsb2FkJyB9fSA8L2g0PiA8cCBjbGFzcz1cXFwibS10LTIgbS1iLTBcXFwiPjwvcD4gPC9kaXY+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkLmNvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkLmh0bWwnO1xuaW1wb3J0IGJpbmRpbmdzIGZyb20gJy4vcHJvY2Vzc2luZy5iaW5kaW5ncyc7XG5cbmNvbnN0IFByb2Nlc3NpbmdDYXJkID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3Ncbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2Nlc3NpbmdDYXJkO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9ZHJvcHBhYmxlLWNhcmQtY29udGVudD4gPGRpdiBjbGFzcz1tLWItMj4gPHR3LXByb2Nlc3Mgc2l6ZT1zbSBzdGF0ZT0kY3RybC5wcm9jZXNzaW5nU3RhdGU+PC90dy1wcm9jZXNzPiA8L2Rpdj4gPGg0IGNsYXNzPW0tYi0yPiA8c3BhbiBuZy1pZj1cXFwiJGN0cmwuaXNQcm9jZXNzaW5nICYmICRjdHJsLnByb2Nlc3NpbmdNZXNzYWdlXFxcIiBjbGFzcz11cGxvYWQtcHJvY2Vzc2luZy1tZXNzYWdlPiB7eyRjdHJsLnByb2Nlc3NpbmdNZXNzYWdlfX0gPC9zcGFuPiA8c3BhbiBuZy1pZj1cXFwiJGN0cmwuaXNFcnJvciAmJiAkY3RybC5lcnJvck1lc3NhZ2VcXFwiIGNsYXNzPXVwbG9hZC1mYWlsdXJlLW1lc3NhZ2U+IHt7JGN0cmwuZXJyb3JNZXNzYWdlfX0gPC9zcGFuPiA8L2g0PiA8dWwgbmctaWY9XFxcIiRjdHJsLmlzRXJyb3IgJiYgJGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzXFxcIiBjbGFzcz1cXFwidGV4dC14cy1sZWZ0IG0tYi0yXFxcIj4gPGxpIG5nLWlmPSRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1swXT57eyAkY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMF0gfX08L2xpPiA8bGkgbmctaWY9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzFdPnt7ICRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1sxXSB9fTwvbGk+IDxsaSBuZy1pZj0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMl0+e3sgJGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzJdIH19PC9saT4gPC91bD4gPGEgaHJlZj1cXFwiXFxcIiBuZy1pZj0kY3RybC5pc0Vycm9yIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiIG5nLWNsaWNrPSRjdHJsLm9uUmVtb3ZlKCkgcm9sZT1idXR0b24+IDxzcGFuIG5nLWlmPSRjdHJsLmNhbmNlbFRleHQgbmctYmluZD0kY3RybC5jYW5jZWxUZXh0Pjwvc3Bhbj4gPHNwYW4gbmctaWY9ISRjdHJsLmNhbmNlbFRleHQgY2xhc3M9XFxcImljb24gaWNvbi11cGxvYWQgbS1yLTBcXFwiPjwvc3Bhbj4gPC9hPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9wcm9jZXNzaW5nLW1pbmkuaHRtbCc7XG5pbXBvcnQgYmluZGluZ3MgZnJvbSAnLi9wcm9jZXNzaW5nLmJpbmRpbmdzJztcblxuY29uc3QgUHJvY2Vzc2luZ0NhcmQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc2luZ0NhcmQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1wcm9jZXNzaW5nLWl0ZW0+IDxkaXYgY2xhc3M9bWVkaWE+IDxkaXYgY2xhc3M9XFxcIm1lZGlhLWxlZnQgdmVydGljYWwtY2VudGVyIHAtci0yIHAteS0xXFxcIj4gPHR3LXByb2Nlc3Mgc2l6ZT14cyBzdGF0ZT0kY3RybC5wcm9jZXNzaW5nU3RhdGU+PC90dy1wcm9jZXNzPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibWVkaWEtYm9keSB0ZXh0LXhzLWxlZnQgcC15LTFcXFwiIHN0eWxlPW92ZXJmbG93OmF1dG8+IDxkaXY+IDxzbWFsbCBjbGFzcz1cXFwibS1iLTAgdGV4dC1lbGxpcHNpcyBmaWxlLW5hbWVcXFwiPjxzdHJvbmc+e3sgJGN0cmwuZmlsZS5uYW1lIH19PC9zdHJvbmc+PC9zbWFsbD4gPHNtYWxsIGNsYXNzPVxcXCJtLWItMCB0ZXh0LWVsbGlwc2lzIHRpbnlcXFwiPiA8c3BhbiBuZy1pZj0kY3RybC5pc1Byb2Nlc3Npbmc+e3sgJGN0cmwucHJvY2Vzc2luZ01lc3NhZ2UgfX08L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLmlzRXJyb3I+e3sgJGN0cmwuZXJyb3JNZXNzYWdlIH19PC9zcGFuPiA8c3BhbiBuZy1pZj0kY3RybC5pc1N1Y2Nlc3M+e3sgJGN0cmwuc3VjY2Vzc01lc3NhZ2UgfX08L3NwYW4+IDwvc21hbGw+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwibWVkaWEtcmlnaHQgcC1sLTIgcC15LTJcXFwiPiA8YSBocmVmPVxcXCJcXFwiIG5nLWlmPSEkY3RybC5pc1Byb2Nlc3NpbmcgY2xhc3M9Y2xvc2UgbmctY2xpY2s9JGN0cmwub25SZW1vdmUoKSByb2xlPWJ1dHRvbj4mdGltZXM7PC9hPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiBcIjsiLCJcbmNsYXNzIEFzeW5jRmlsZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKCRxKSB7XG4gICAgdGhpcy4kcSA9ICRxO1xuICB9XG5cbiAgcmVhZChmaWxlKSB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcblxuICAgIC8vIFdoZW4gdGhlIHJlYWRlciBmaW5pc2hlcyBsb2FkaW5nIHJlc29sdmUgdGhlIHByb21pc2VcbiAgICByZWFkZXIub25sb2FkID0gKGV2ZW50KSA9PiB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKGV2ZW50LnRhcmdldC5yZXN1bHQpO1xuICAgIH07XG5cbiAgICByZWFkZXIub25lcnJvciA9IChldmVudCkgPT4ge1xuICAgICAgZGVmZXJyZWQucmVqZWN0KGV2ZW50KTtcbiAgICB9O1xuXG4gICAgLy8gTG9hZCB0aGUgZmlsZVxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH1cbn1cblxuQXN5bmNGaWxlUmVhZGVyLiRpbmplY3QgPSBbJyRxJ107XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuZmlsZS1yZWFkZXInLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jRmlsZVJlYWRlcicsIEFzeW5jRmlsZVJlYWRlcilcbiAgLm5hbWU7XG4iLCJcbmNsYXNzIEFzeW5jRmlsZVNhdmVyIHtcbiAgY29uc3RydWN0b3IoJGh0dHApIHtcbiAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gIH1cblxuICBzYXZlKGZpZWxkTmFtZSwgZmlsZSwgaHR0cE9wdGlvbnMpIHtcbiAgICBpZiAoIWh0dHBPcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHN1cHBseSBodHRwT3B0aW9ucycpO1xuICAgIH1cbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGNvbnN0IGtleSA9IGh0dHBPcHRpb25zLnBhcmFtIHx8IGZpZWxkTmFtZTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBmaWxlKTtcblxuICAgIGNvbnN0ICRodHRwT3B0aW9ucyA9IHByZXBhcmVIdHRwT3B0aW9ucyhodHRwT3B0aW9ucyk7XG5cbiAgICBkZWxldGUgJGh0dHBPcHRpb25zLm1ldGhvZDtcblxuICAgIC8vIEZvciB0ZXN0aW5nXG4gICAgcmV0dXJuIHRoaXMuJGh0dHAucG9zdCgkaHR0cE9wdGlvbnMudXJsLCBmb3JtRGF0YSwgJGh0dHBPcHRpb25zKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHByZXBhcmVIdHRwT3B0aW9ucygkaW5wdXRPcHRpb25zKSB7XG4gIGNvbnN0ICRodHRwT3B0aW9ucyA9IGFuZ3VsYXIuY29weSgkaW5wdXRPcHRpb25zKTtcblxuICBpZiAoISRodHRwT3B0aW9ucy51cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHN1cHBseSBhIFVSTCB0byBwb3N0IGltYWdlIGRhdGEgYXN5bmNocm9ub3VzbHknKTtcbiAgfVxuICBpZiAoISRodHRwT3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgJGh0dHBPcHRpb25zLmhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIC8vIENvbnRlbnQtVHlwZSA9IHVuZGVmaW5lZCBhbGxvd3MgdGhlIGJyb3dzZXIgdG8gY2hvb3NlIHRoZSByaWdodCB0eXBlXG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxNjA3NjU2L3B1cnBvc2Utb2YtY29udGVudC10eXBlLXVuZGVmaW5lZC1pbi1hbmd1bGFyanMtZmlsZXVwbG9hZFxuICAkaHR0cE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB1bmRlZmluZWQ7XG4gICRodHRwT3B0aW9ucy50cmFuc2Zvcm1SZXF1ZXN0ID0gYW5ndWxhci5pZGVudGl0eTtcblxuICByZXR1cm4gJGh0dHBPcHRpb25zO1xufVxuXG5Bc3luY0ZpbGVTYXZlci4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmZpbGUtc2F2ZXInLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jRmlsZVNhdmVyJywgQXN5bmNGaWxlU2F2ZXIpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmNsYXNzIEZpbGVWYWxpZGF0aW9uU2VydmljZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpc0ltYWdlKGZpbGUpIHtcbiAgICByZXR1cm4gZmlsZS50eXBlICYmIGZpbGUudHlwZS5pbmRleE9mKCdpbWFnZScpID4gLTE7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaXNTbWFsbGVyVGhhbk1heFNpemUoZmlsZSwgbWF4U2l6ZSkge1xuICAgIHJldHVybiAhYW5ndWxhci5pc051bWJlcihtYXhTaXplKSB8fCBmaWxlLnNpemUgPD0gbWF4U2l6ZTtcbiAgfVxuXG4gIC8qXG4gIC8vIFRPRE8gdmFsaWRhdGUgZmlsZSB0eXBlXG4gIGlzVHlwZVZhbGlkKGZpbGUsIGFjY2VwdCkge1xuICAgIHJldHVybiB0cnVlO1xuICAgIC8vIHRoaXMuaXNXcm9uZ1R5cGUgPSB0cnVlO1xuICB9XG4gICovXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQudmFsaWRhdGlvbi1zZXJ2aWNlJywgW10pXG4gIC5zZXJ2aWNlKCdGaWxlVmFsaWRhdGlvblNlcnZpY2UnLCBGaWxlVmFsaWRhdGlvblNlcnZpY2UpXG4gIC5uYW1lO1xuIiwiY2xhc3MgQXN5bmNUYXNrc0NvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYmFzZVVybCA9ICcnO1xuICAgIHRoaXMuaGVhZGVycyA9IHt9O1xuICB9XG5cbiAgc2V0QmFzZVVybChiYXNlVXJsKSB7XG4gICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgfVxuXG4gIHNldEhlYWRlcihoZWFkZXIsIHZhbHVlKSB7XG4gICAgdGhpcy5oZWFkZXJzW2hlYWRlcl0gPSB2YWx1ZTtcbiAgfVxuXG4gIGV4dGVuZEh0dHBPcHRpb25zKGlucHV0T3B0aW9ucykge1xuICAgIGNvbnN0IGh0dHBPcHRpb25zID0gYW5ndWxhci5jb3B5KGlucHV0T3B0aW9ucyk7XG4gICAgaHR0cE9wdGlvbnMuaGVhZGVycyA9IGh0dHBPcHRpb25zLmhlYWRlcnNcbiAgICAgID8geyAuLi5odHRwT3B0aW9ucy5oZWFkZXJzLCAuLi50aGlzLmhlYWRlcnMgfVxuICAgICAgOiB0aGlzLmhlYWRlcnM7XG4gICAgaWYgKGh0dHBPcHRpb25zLnVybCkge1xuICAgICAgaHR0cE9wdGlvbnMudXJsID0gYCR7dGhpcy5iYXNlVXJsfSR7aHR0cE9wdGlvbnMudXJsfWA7XG4gICAgfVxuICAgIHJldHVybiBodHRwT3B0aW9ucztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBc3luY1Rhc2tzQ29uZmlnO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9wcm9jZXNzLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vcHJvY2Vzcy5odG1sJztcblxuY29uc3QgUHJvY2VzcyA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc3RhdGU6ICc8JywgLy8gbnVsbCAtIHByb2Nlc3NpbmcsIC0xIC0gZmFpbGVkLCAwIC0gaGlkZGVuLCAxIC0gc3VjY2Vzc1xuICAgIHNpemU6ICdAJyxcbiAgICBvblN0b3A6ICcmJyxcbiAgICBwcm9taXNlOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2VzcztcbiIsImNsYXNzIFByb2Nlc3NDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJHNjb3BlLCAkaW50ZXJ2YWwsICR0aW1lb3V0KSB7XG4gICAgdGhpcy4kaW50ZXJ2YWwgPSAkaW50ZXJ2YWw7XG4gICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuXG4gICAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XG4gICAgdGhpcy5wcm9jZXNzaW5nID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnN0YXRlKSB7XG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5zdGF0ZSkge1xuICAgICAgdGhpcy5vblNpemVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBvblN0YXRlQ2hhbmdlKCkge1xuICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIGNhbmNlbCB0aGUgaW50ZXJ2YWwgd2hlbiBub3QgbmVlZGVkLlxuICAgIGlmIChpc1N0b3BwZWQodGhpcy5wcm9jZXNzaW5nKSkge1xuICAgICAgdGhpcy5wcm9jZXNzaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuc3RhcnRQcm9jZXNzKCk7XG4gICAgfVxuICB9XG5cbiAgb25TaXplQ2hhbmdlKCkge1xuICAgIC8vIEtpbGwgdGhlIGludGVydmFsIGFuZCByZXN0YXJ0IG9uIHNpemUgY2hhbmdlIGFzIGFuaW1hdGlvbiB3aWxsIHJlc3RhcnRcbiAgICB0aGlzLnN0b3BQcm9jZXNzKCk7XG4gICAgdGhpcy5zdGFydFByb2Nlc3MoKTtcblxuICAgIGlmICghdGhpcy5zaXplKSB7XG4gICAgICB0aGlzLnNpemUgPSAnc20nO1xuICAgIH1cblxuICAgIC8vIDQ2JSBpcyBvayBmb3IgbW9zdCBjYXNlcywgYnV0IHdlIGNhbiBtYWtlIGl0IHBlcmZlY3QuXG4gICAgc3dpdGNoICh0aGlzLnNpemUpIHtcbiAgICAgIGNhc2UgJ3hzJzpcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAnMTEnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NtJzpcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAnMjInO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3hsJzpcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAnNjEnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMucmFkaXVzID0gJzQ2JSc7XG4gICAgfVxuICB9XG5cbiAgc3RhcnRQcm9jZXNzKCkge1xuICAgIC8vIERvbid0IHN0YXJ0IGEgbmV3IGludGVydmFsIGlmIG9uZSBpcyBydW5uaW5nXG4gICAgaWYgKHRoaXMuaW50ZXJ2YWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSB3YW50IHRvIGNoZWNrIGZvciBzdGF0ZSBjaGFuZ2Ugb25jZSBwZXIgYW5pbWF0aW9uIGN5Y2xlLlxuICAgIHRoaXMuaW50ZXJ2YWwgPSB0aGlzLiRpbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NpbmcgPSB0aGlzLnN0YXRlO1xuICAgICAgaWYgKGlzU3RvcHBlZCh0aGlzLnN0YXRlKSkge1xuICAgICAgICB0aGlzLnN0b3BQcm9jZXNzKCk7XG4gICAgICAgIHRoaXMubm90aWZ5Q29uc3VtZXJzKCk7XG4gICAgICB9XG4gICAgfSwgMTUwMCk7XG4gIH1cblxuICBzdG9wUHJvY2VzcygpIHtcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkge1xuICAgICAgdGhpcy4kaW50ZXJ2YWwuY2FuY2VsKHRoaXMuaW50ZXJ2YWwpO1xuICAgICAgdGhpcy5pbnRlcnZhbCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgbm90aWZ5Q29uc3VtZXJzKCkge1xuICAgIGlmICh0aGlzLm9uU3RvcCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IDApIHtcbiAgICAgICAgdGhpcy5vblN0b3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIDE4MDAgbWF0Y2hlcyAxLjVzIGRlbGF5IGFuZCAwLjNzIGFuaW1hdGlvblxuICAgICAgICB0aGlzLiR0aW1lb3V0KHRoaXMub25TdG9wLCAxODAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTdG9wcGVkKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZSA9PT0gLTEgfHwgc3RhdGUgPT09IDAgfHwgc3RhdGUgPT09IDE7XG59XG5cblByb2Nlc3NDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckaW50ZXJ2YWwnLCAnJHRpbWVvdXQnXTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc0NvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHNwYW4gY2xhc3M9cHJvY2VzcyBuZy1jbGFzcz1cXFwie1xcbiAgICAncHJvY2Vzcy1zdWNjZXNzJzogJGN0cmwucHJvY2Vzc2luZyA9PT0gMSxcXG4gICAgJ3Byb2Nlc3MtZGFuZ2VyJzogJGN0cmwucHJvY2Vzc2luZyA9PT0gLTEsXFxuICAgICdwcm9jZXNzLXN0b3BwZWQnOiAkY3RybC5wcm9jZXNzaW5nID09PSAwLFxcbiAgICAncHJvY2Vzcy14cyc6ICRjdHJsLnNpemUgPT09ICd4cycsXFxuICAgICdwcm9jZXNzLXNtJzogJGN0cmwuc2l6ZSA9PT0gJ3NtJyxcXG4gICAgJ3Byb2Nlc3MtbWQnOiAkY3RybC5zaXplID09PSAnbWQnLFxcbiAgICAncHJvY2Vzcy1sZyc6ICRjdHJsLnNpemUgPT09ICdsZycsXFxuICAgICdwcm9jZXNzLXhsJzogJGN0cmwuc2l6ZSA9PT0gJ3hsJ1xcbiAgfVxcXCI+IDxzcGFuIGNsYXNzPXByb2Nlc3MtaWNvbi1jb250YWluZXI+IDxzcGFuIGNsYXNzPXByb2Nlc3MtaWNvbi1ob3Jpem9udGFsPjwvc3Bhbj4gPHNwYW4gY2xhc3M9cHJvY2Vzcy1pY29uLXZlcnRpY2FsPjwvc3Bhbj4gPC9zcGFuPiA8c3ZnIHZlcnNpb249MS4xIHhtbG5zPWh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIHhtbDpzcGFjZT1wcmVzZXJ2ZT4gPGNpcmNsZSBjbGFzcz1wcm9jZXNzLWNpcmNsZSBjeD01MCUgY3k9NTAlIG5nLWF0dHItcj17eyRjdHJsLnJhZGl1c319IGZpbGwtb3BhY2l0eT0wLjAgLz4gPC9zdmc+IDwvc3Bhbj4gXCI7IiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgU3VjY2Vzc0NhcmQgZnJvbSAnLi9zdWNjZXNzLWNhcmQuY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5zdWNjZXNzJywgW10pXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkU3VjY2VzcycsIFN1Y2Nlc3NDYXJkKVxuICAubmFtZTtcbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3N1Y2Nlc3MtY2FyZC5odG1sJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vc3VjY2Vzcy1jYXJkLmNvbnRyb2xsZXInO1xuXG5jb25zdCBTdWNjZXNzQ2FyZCA9IHtcbiAgdGVtcGxhdGUsXG4gIGNvbnRyb2xsZXIsXG4gIGJpbmRpbmdzOiB7XG4gICAgbGFiZWw6ICc8JyxcbiAgICBmaWxlOiAnPCcsXG4gICAgZGF0YTogJzwnLFxuICAgIGlzSW1hZ2U6ICc8JyxcbiAgICBzdWNjZXNzTWVzc2FnZTogJzwnLFxuICAgIGNhbmNlbFRleHQ6ICc8JyxcbiAgICBvbkNhbmNlbDogJyYnLFxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdWNjZXNzQ2FyZDtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZS1jYXJkLWNvbnRlbnQ+IDxoNCBuZy1pZj1cXFwiJGN0cmwuc3VjY2Vzc01lc3NhZ2UgfHwgJGN0cmwubGFiZWxcXFwiIGNsYXNzPVxcXCJtLWItMiB1cGxvYWQtc3VjY2Vzcy1tZXNzYWdlXFxcIj4ge3sgJGN0cmwuc3VjY2Vzc01lc3NhZ2UgfHwgJGN0cmwubGFiZWwgfX0gPC9oND4gPGltZyBuZy1pZj1cXFwiJGN0cmwuaXNJbWFnZSAmJiAkY3RybC5kYXRhXFxcIiBzcmM9XFxcImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxcXG4gICAgICBpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBQUVBQUFBQkNBUUFBQUMxSEF3Q0FBQUFDMGxFUVZSNDJtTmtZQUFBQUFZQUFqQ0IwQzhBQUFBQVNVVk9SSzVDWUlJPVxcXCIgbmctc3JjPVxcXCJ7eyAkY3RybC5kYXRhIH19XFxcIiBhbHQ9T0sgY2xhc3M9XFxcInRodW1ibmFpbCBtLWItM1xcXCIvPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiBpY29uLXBkZiBpY29uLXh4bFxcXCIgbmctaWY9XFxcIiEkY3RybC5pc0ltYWdlIHx8ICEkY3RybC5kYXRhXFxcIj48L3NwYW4+IDxwIGNsYXNzPVxcXCJtLWItMiB0ZXh0LWVsbGlwc2lzXFxcIj57eyAkY3RybC5maWxlTmFtZSB9fTwvcD4gPHAgY2xhc3M9XFxcIm0tdC0yIG0tYi0wXFxcIj4gPGEgaHJlZj1cXFwiXFxcIiBuZy1jbGljaz0kY3RybC5vbkNhbmNlbCgpPiA8c3BhbiBuZy1pZj0kY3RybC5jYW5jZWxUZXh0IG5nLWJpbmQ9JGN0cmwuY2FuY2VsVGV4dD48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5jYW5jZWxUZXh0IGNsYXNzPVxcXCJpY29uIGljb24tdXBsb2FkIG0tci0wXFxcIj48L3NwYW4+IDwvYT4gPC9wPiA8L2Rpdj4gXCI7IiwiY2xhc3MgU3VjY2Vzc0NhcmRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsIEZpbGVWYWxpZGF0aW9uU2VydmljZSkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLkZpbGVWYWxpZGF0aW9uU2VydmljZSA9IEZpbGVWYWxpZGF0aW9uU2VydmljZTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmZpbGUgJiYgY2hhbmdlcy5maWxlLmN1cnJlbnRWYWx1ZSkge1xuICAgICAgdGhpcy5maWxlTmFtZSA9IGNoYW5nZXMuZmlsZS5jdXJyZW50VmFsdWUubmFtZTtcbiAgICB9XG4gIH1cblxuICBvbk1hbnVhbFJldXBsb2FkKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLiRlbGVtZW50WzBdO1xuICAgIGNvbnN0IHVwbG9hZElucHV0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcudHctZHJvcHBhYmxlLWlucHV0LXJldXBsb2FkJyk7XG4gICAgY29uc3QgZmlsZSA9IHVwbG9hZElucHV0LmZpbGVzWzBdO1xuXG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKGZpbGUpO1xuICB9XG59XG5cblN1Y2Nlc3NDYXJkQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnRmlsZVZhbGlkYXRpb25TZXJ2aWNlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgU3VjY2Vzc0NhcmRDb250cm9sbGVyO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ2FtZXJhQ2FwdHVyZSBmcm9tICcuL2NhbWVyYS1jYXB0dXJlLmNvbXBvbmVudCc7XG5cbmltcG9ydCBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlciBmcm9tICcuL2NhbWVyYS1jYXB0dXJlLXNjcmVlbi1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IENhbWVyYU92ZXJsYXlIYW5kbGVyIGZyb20gJy4vY2FtZXJhLW92ZXJsYXktaGFuZGxlci5zZXJ2aWNlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5jYW1lcmEtY2FwdHVyZScsIFtdKVxuICAuc2VydmljZSgnQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXInLCBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlcilcbiAgLnNlcnZpY2UoJ0NhbWVyYU92ZXJsYXlIYW5kbGVyJywgQ2FtZXJhT3ZlcmxheUhhbmRsZXIpXG4gIC5jb21wb25lbnQoJ3R3Q2FtZXJhQ2FwdHVyZScsIENhbWVyYUNhcHR1cmUpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jYW1lcmEtY2FwdHVyZS5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NhbWVyYS1jYXB0dXJlLmh0bWwnO1xuaW1wb3J0ICcuL2NhbWVyYS1jYXB0dXJlLmxlc3MnO1xuXG5jb25zdCBDYW1lcmFDYXB0dXJlID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBvdmVybGF5OiAnQCcsIC8vIE9wdGlvbmFsXG4gICAgZGlyZWN0aW9uOiAnQCcsIC8vIGVudmlyb25tZW50L3VzZXJcblxuICAgIG9uQ2FuY2VsOiAnJicsXG4gICAgb25DYXB0dXJlOiAnJicsXG5cbiAgICAvKipcbiAgICAgKiBOZWVkIHRoaXMgcGFyYW1ldGVyIHRvIHNraXAgdXNlciBpbnRlcmFjdGlvblxuICAgICAqIGR1cmluZyBjb250cm9sbGVyIGluaXRpYWxpemF0aW9uIGluIHVuaXQgdGVzdHNcbiAgICAgKi9cbiAgICB0ZXN0TW9kZTogJ0AnIC8vIHRydWUvZmFsc2VcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhQ2FwdHVyZTtcbiIsImltcG9ydCBzY3JlZW5mdWxsIGZyb20gJ3NjcmVlbmZ1bGwnOyAvLyBNSVRAaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9zY3JlZW5mdWxsLmpzXG5cbmNsYXNzIENhbWVyYUNhcHR1cmVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJGVsZW1lbnQsXG4gICAgJHNjb3BlLFxuICAgICR3aW5kb3csXG4gICAgJHEsXG4gICAgJGF0dHJzLFxuICAgICRsb2csXG4gICAgQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXJcbiAgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGxvZyA9ICRsb2c7XG4gICAgdGhpcy4kcSA9ICRxO1xuICAgIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG4gICAgdGhpcy5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlciA9IENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyO1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICAvLyBWaWRlbyBwcmV2aWV3IGNvbnRyb2xcbiAgICB0aGlzLnNob3dWaWRlb1ByZXZpZXcgPSBmYWxzZTtcbiAgICB0aGlzLnNob3dWaWRlb0luUHJldmlldyA9IHRydWU7XG4gICAgdGhpcy5zaG93Q2FwdHVyZUluUHJldmlldyA9IGZhbHNlO1xuICAgIHRoaXMubWVkaWFTdHJlYW0gPSBudWxsO1xuXG4gICAgLy8gTGl2ZSBjYW0gZmxvdyBidXR0b24gY29udHJvbFxuICAgIHRoaXMuY2FwdHVyZUJ1dHRvbkRpc2FibGVkID0gdHJ1ZTtcblxuICAgIC8vIERpbWVuc2lvbi9yZXNvbHV0aW9uIGNvbnRyb2xsXG4gICAgdGhpcy5zY3JlZW5IZWlnaHQgPSAwLjA7XG4gICAgdGhpcy5zY3JlZW5XaWR0aCA9IDAuMDtcbiAgICB0aGlzLnZpZGVvUmVzSGVpZ2h0ID0gMC4wO1xuICAgIHRoaXMudmlkZW9SZXNXaWR0aCA9IDAuMDtcblxuICAgIHRoaXMub3ZlcmxheVdpZHRoID0gMDtcbiAgICB0aGlzLm92ZXJsYXlIZWlnaHQgPSAwO1xuICAgIHRoaXMub3ZlcmxheVhPZmZzZXQgPSAwO1xuICAgIHRoaXMub3ZlcmxheVlPZmZzZXQgPSAwO1xuICAgIHRoaXMuZGlzcGxheUNhbnZhc1hPZmZzZXQgPSAwOyAvLyBpbiBweFxuICAgIHRoaXMuZGlzcGxheUNhbnZhc1lPZmZzZXQgPSAwOyAvLyBpbiBweFxuICAgIHRoaXMudmlkZW9YT2Zmc2V0ID0gMDsgLy8gdmlkZW8geCBvZmZzZXQgaW4gcGVyY2VudGFnZVxuICAgIHRoaXMudmlkZW9IZWlnaHQgPSAxMDA7IC8vIHZpZGVvIGhlaWdodCBpbiBwZXJjZW50YWdlXG4gICAgdGhpcy52aWRlb1dpZHRoID0gMTAwOyAvLyB2aWRlbyB3aWR0aCBpbiBwZXJjZW50YWdlXG5cbiAgICB0aGlzLmlzVmlkZW9Ib3Jpem9udGFsbHlGbGlwcGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuaGFzR2V0VXNlck1lZGlhKCkpIHtcbiAgICAgIC8vIFRPRE86IGhhb3l1YW4gaG93IHRvIGhhbmRsZSBnZXQgdXNlciBtZWRpYSBub3QgYmVpbmcgYXZhaWxhYmxlP1xuICAgICAgdGhpcy4kbG9nLndhcm4oJ2dldFVzZXJNZWRpYSgpIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBicm93c2VyJyk7XG4gICAgfVxuXG4gICAgdGhpcy5vdmVybGF5TG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5vdmVybGF5RWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3ZpZGVvLXByZXZpZXcgI292ZXJsYXknKTtcbiAgICB0aGlzLmRpc3BsYXlDYW52YXMgPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyN2aWRlby1wcmV2aWV3ICNkaXNwbGF5LWNhbnZhcycpO1xuICAgIHRoaXMudXBsb2FkQ2FudmFzID0gdGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdmlkZW8tcHJldmlldyAjdXBsb2FkLWNhbnZhcycpO1xuICAgIHRoaXMudmlkZW9QcmV2aWV3RWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI3ZpZGVvLXByZXZpZXcnKTtcbiAgICB0aGlzLnZpZGVvID0gdGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcjdmlkZW8tcHJldmlldyAjdmlkZW8nKTtcbiAgICB0aGlzLnZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBjcmVhdGVWaWRlb1BsYXlDYWxsYmFjayh0aGlzKSk7XG5cbiAgICB0aGlzLiR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBjcmVhdGVPcmllbnRhdGlvbkNoYW5nZUNhbGxiYWNrKHRoaXMpLCBmYWxzZSk7XG5cbiAgICAvLyBUT0RPIGhhb3l1YW4gOiBhZGQgY2hhbmdlIGV2ZW50IGxpc3RlbmVyIHRvIHNjcmVlbmZ1bCxcbiAgICAvLyAgZXhpc3RpbmcgZnVsbCBzY3JlZW4gc2hvdWxkIHF1aXQgY2FwdHVyZSBpbnN0ZWFkIG9mIHNob3dpbmcgbm9uIGZ1bGwgc2NyZWVuIGNhbWVyYVxuICAgIGlmICghdGhpcy50ZXN0TW9kZSB8fCB0aGlzLnRlc3RNb2RlLnRvTG93ZXJDYXNlKCkgIT09ICd0cnVlJykge1xuICAgICAgdGhpcy5zdGFydExpdmVDYW1GbG93KCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWNxdWlyZSBhbmQgYXR0YWNoIHZpZGVvIHN0cmVhbSB0byB2aWRlbyB0YWcuXG4gIHN0YXJ0TGl2ZUNhbUZsb3coKSB7XG4gICAgdGhpcy4kbG9nLmRlYnVnKCctLS0tLSBMaXZlIGNhbSBmbG93IHN0YXJ0IC0tLS0tJyk7XG4gICAgdGhpcy5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMudmlkZW9QbGF5aW5nID0gZmFsc2U7XG5cbiAgICAvLyBEaXNwbGF5IHZpZGVvIGNvbXBvbmVudCBpbiBmdWxsIHNjcmVlblxuICAgIC8vIFRoaXMgcGFydCBvZiBjb2RlIGNhbm5vdCBiZSBpbiBjYWxsYmFjayBkdWUgdG8gYnJvd3NlciBzZWN1cml0eSByZXF1aXJlbWVudFxuICAgIHRoaXMudmlkZW8ucGF1c2UoKTtcblxuICAgIHRoaXMudHJ5QWNxdWlyZUZ1bGxTY3JlZW4oKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ0FjcXVpcmVkIGZ1bGwgc2NyZWVuLicpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIHRoaXMuJGxvZy53YXJuKCdGYWlsZWQgdG8gYWNxdWlyZSBmdWxsIHNjcmVlbi4nKTtcbiAgICAgIH0pXG4gICAgICAuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIC8vIEFmdGVyIHRyeWluZyB0byBhY3F1aXJlIGZ1bGwgc2NyZWVuLCByZXNvbHZlIHZpZGVvIHN0cmVhbVxuICAgICAgICB0aGlzLnNldFNjcmVlbkRpbWVuc2lvbnMoKTtcbiAgICAgICAgaWYgKCF0aGlzLm92ZXJsYXlMb2FkZWQpIHsgLy8gRG9udCB0cmlnZ2VyIG92ZXJsYXkgY29tcHV0YXRpb24gaWYgYWxyZWFkeSBsb2FkZWRcbiAgICAgICAgICBpZiAodGhpcy5vdmVybGF5RWxlbWVudC5uYXR1cmFsSGVpZ2h0ID09PSAwIHx8IHRoaXMub3ZlcmxheUVsZW1lbnQubmF0dXJhbFdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLiRsb2cuZGVidWcoJ092ZXJsYXkgaGFzIG5vdCBsb2FkZWQgYWZ0ZXIgZnVsbCBzY3JlZW4gaXMgYWNxdWlyZWQnKTtcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNyZWF0ZU92ZXJsYXlPbkxvYWRDYWxsYmFjayh0aGlzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnT3ZlcmxheSBoYXMgbG9hZGVkIGJlZm9yZSBmdWxsIHNjcmVlbiBpcyBhY3F1aXJlZCcpO1xuICAgICAgICAgICAgY3JlYXRlT3ZlcmxheU9uTG9hZENhbGxiYWNrKHRoaXMpLmNhbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cnlBY3F1aXJlTWVkaWFTdHJlYW0oKVxuICAgICAgICAgIC50aGVuKChzdHJlYW0pID0+IHtcbiAgICAgICAgICAgIHRoaXMub25WaWRlb1N0cmVhbUFjcXVpc2l0aW9uKHN0cmVhbSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETyBoYW95dWFuIDogU2hvdWxkIHNvbWVob3cgYXNrIHVzZXIgdG8gcmVmcmVzaCBwYWdlIHRvIHJlYXF1aXJlIHBlcm1pc3Npb25cbiAgICAgICAgICAgIHRoaXMuJGxvZy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgdGhpcy5vbkNhbmNlbEJ0bkNsaWNrKCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHRyeUFjcXVpcmVGdWxsU2NyZWVuKCkge1xuICAgIGlmIChzY3JlZW5mdWxsLmVuYWJsZWQpIHtcbiAgICAgIGlmICghc2NyZWVuZnVsbC5pc0Z1bGxzY3JlZW4pIHtcbiAgICAgICAgcmV0dXJuIHNjcmVlbmZ1bGwucmVxdWVzdCh0aGlzLnZpZGVvUHJldmlld0VsZW1lbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHEucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kcS5yZWplY3QoKTtcbiAgfVxuXG4gIG9uVmlkZW9TdHJlYW1BY3F1aXNpdGlvbihzdHJlYW0pIHtcbiAgICB0aGlzLm1lZGlhU3RyZWFtID0gc3RyZWFtO1xuXG4gICAgLypcbiAgICAgVGhpcyBpcyBkb25lIGluc3RlYWQgb2YganVzdCByZWFzc2lnbmluZyB2aWRlbyBzdHJlYW0gZXZlcnl0aW1lXG4gICAgIHRvIHByZXZlbnQgc2NyZWVuIGZyb20gYmxpbmtpbmcgZXhjZXNzaXZlbHkgZHVyaW5nIHN3aXRjaFxuICAgICAgKi9cbiAgICBpZiAodGhpcy52aWRlby5zcmNPYmplY3QgIT09IHRoaXMubWVkaWFTdHJlYW0pIHtcbiAgICAgIHRoaXMudmlkZW8uc3JjT2JqZWN0ID0gdGhpcy5tZWRpYVN0cmVhbTtcbiAgICB9XG5cbiAgICAvLyBUb2dnbGUgY29udHJvbHNcbiAgICB0aGlzLnNob3dWaWRlb1ByZXZpZXcgPSB0cnVlO1xuICAgIHRoaXMuc2hvd1ZpZGVvSW5QcmV2aWV3ID0gdHJ1ZTtcbiAgICB0aGlzLnNob3dDYXB0dXJlSW5QcmV2aWV3ID0gZmFsc2U7XG5cbiAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgfVxuXG4gIHRyeUFjcXVpcmVNZWRpYVN0cmVhbSgpIHtcbiAgICBpZiAoIXRoaXMubWVkaWFTdHJlYW0pIHtcbiAgICAgIHJldHVybiB0aGlzLiR3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkudGhlbigoZGV2aWNlcykgPT4ge1xuICAgICAgICAvLyBJZiBkZXZpY2Ugb25seSBoYXMgb25lIGNhbWVyYSwgYXNzdW1lIGl0IGlzIHNlbGZpZSBjYW1cbiAgICAgICAgY29uc3QgbnVtVmlkZW9EZXZpY2VzID0gZGV2aWNlcy5maWx0ZXIoZGV2aWNlID0+IGRldmljZS5raW5kID09PSAndmlkZW9pbnB1dCcpLmxlbmd0aDtcbiAgICAgICAgdGhpcy4kbG9nLmRlYnVnKGBGb3VuZCAke251bVZpZGVvRGV2aWNlc30gdmlkZW8gZGV2aWNlcy5gKTtcbiAgICAgICAgaWYgKG51bVZpZGVvRGV2aWNlcyA9PT0gMSB8fCAhdGhpcy5kaXJlY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICd1c2VyJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGbGlwIHZpZGVvIGFsb25nIHggYXhpcyBzbyBzZWxmaWUgdmlkZW8gYmVjb21lcyBhIG1pcnJvclxuICAgICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICd1c2VyJykge1xuICAgICAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnQ2hhbmdlZCB1c2VyIHZpZGVvIHRvIG1pcnJvcicpO1xuICAgICAgICAgIHRoaXMudmlkZW8uY2xhc3NMaXN0LmFkZCgnZGlzcGxheS1taXJyb3InKTtcbiAgICAgICAgICB0aGlzLm92ZXJsYXlFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXktbWlycm9yJyk7XG4gICAgICAgICAgdGhpcy5pc1ZpZGVvSG9yaXpvbnRhbGx5RmxpcHBlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbWVyYUNvbnN0cmFpbnRzID0ge1xuICAgICAgICAgIHZpZGVvOiB7XG4gICAgICAgICAgICB3aWR0aDoge1xuICAgICAgICAgICAgICBtaW46IDY0MCxcbiAgICAgICAgICAgICAgaWRlYWw6IDEyODAsXG4gICAgICAgICAgICAgIG1heDogMTI4MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhY2luZ01vZGU6IHtcbiAgICAgICAgICAgICAgaWRlYWw6IHRoaXMuZGlyZWN0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdWRpbzogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh0aGlzLmNhbWVyYUNvbnN0cmFpbnRzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLiRxLnJlc29sdmUodGhpcy5tZWRpYVN0cmVhbSk7XG4gIH1cblxuICBzZXRTY3JlZW5EaW1lbnNpb25zKCkge1xuICAgIC8vIFRPRE8gaGFveXVhbiA6IGZpcmVmb3ggaXMgcmVjb2duaXppbmcgcGl4ZWwncyBidG0gYmFyXG4gICAgdGhpcy4kbG9nLmRlYnVnKGBzY3JlZW4gOiAke3RoaXMuJHdpbmRvdy5zY3JlZW4uaGVpZ2h0fSB4ICR7dGhpcy4kd2luZG93LnNjcmVlbi53aWR0aH1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHNjcmVlbiBhdmFpbGFibGUgOiAke3RoaXMuJHdpbmRvdy5zY3JlZW4uYXZhaWxIZWlnaHR9IHggJHt0aGlzLiR3aW5kb3cuc2NyZWVuLmF2YWlsV2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBzY3JlZW4gaW5uZXIgOiAke3RoaXMuJHdpbmRvdy5pbm5lckhlaWdodH0geCAke3RoaXMuJHdpbmRvdy5pbm5lcldpZHRofWApO1xuICAgIHRoaXMuc2NyZWVuSGVpZ2h0ID0gdGhpcy4kd2luZG93LmlubmVySGVpZ2h0O1xuICAgIHRoaXMuc2NyZWVuV2lkdGggPSB0aGlzLiR3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB0aGlzLiRsb2cuZGVidWcoYCoqc2NyZWVuIHJlc29sdmVkKiogOiAke3RoaXMuc2NyZWVuSGVpZ2h0fSB4ICR7dGhpcy5zY3JlZW5XaWR0aH1gKTtcbiAgfVxuXG4gIGNsb3NlVmlkZW9TdHJlYW0oKSB7XG4gICAgaWYgKHNjcmVlbmZ1bGwuZW5hYmxlZCkge1xuICAgICAgc2NyZWVuZnVsbC5leGl0KCk7XG4gICAgfVxuICAgIHRoaXMudmlkZW8uc3JjT2JqZWN0ID0gbnVsbDtcbiAgICBpZiAodGhpcy5tZWRpYVN0cmVhbSkge1xuICAgICAgdGhpcy5tZWRpYVN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnN0b3AoKSk7XG4gICAgICB0aGlzLm1lZGlhU3RyZWFtID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5zaG93VmlkZW9QcmV2aWV3ID0gZmFsc2U7XG4gICAgdGhpcy5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgb25DYW5jZWxCdG5DbGljaygpIHtcbiAgICB0aGlzLmNsb3NlVmlkZW9TdHJlYW0oKTtcbiAgICB0aGlzLm9uQ2FuY2VsKCk7XG4gIH1cblxuICBvbkNhcHR1cmVCdG5DbGljaygpIHtcbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQsIHdpZHRoLFxuICAgICAgeU9mZnNldCwgeE9mZnNldCxcbiAgICAgIHBhaW50SGVpZ2h0LCBwYWludFdpZHRoXG4gICAgfSA9IHRoaXMuQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIuZ2V0Q2FudmFzU3BlY2lmaWNhdGlvbnMoXG4gICAgICB0aGlzLnZpZGVvSGVpZ2h0LFxuICAgICAgdGhpcy52aWRlb1dpZHRoLFxuICAgICAgdGhpcy5zY3JlZW5IZWlnaHQsXG4gICAgICB0aGlzLnNjcmVlbldpZHRoLFxuICAgICAgdGhpcy52aWRlb1Jlc0hlaWdodCxcbiAgICAgIHRoaXMudmlkZW9SZXNXaWR0aFxuICAgICk7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzWU9mZnNldCA9IHlPZmZzZXQ7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzWE9mZnNldCA9IHhPZmZzZXQ7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5kaXNwbGF5Q2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAvKiBDb25mdXNpbmcgZHJhdyBpbWFnZSBtZXRob2QgZm9yIHZpZGVvXG4gICAgICogRGVzcGl0ZSB2aWRlbyBkaW1lbnNpb24gY2FuIGJlIG1vcmUgdGhhbiAxMDAlLCB0aGUgdmlkZW8gbmV2ZXIgZXh0ZW5kcyBiZXlvbmQgdGhlIHNjcmVlblxuICAgICAqIEluc3RlYWQsIGl0cyByZXNvbHV0aW9uIGdldHMgdHJ1bmNhdGVkIHRvIGZpdCB0aGUgc2NyZWVuIHBlcmZlY3RseVxuICAgICAqIFRodXMgZHJhd2luZyBhbHdheXMgc3RhcnRzIGZyb20gKDAsIDApXG4gICAgICovXG4gICAgY29uc3QgY3R4ID0gdGhpcy5kaXNwbGF5Q2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgY3R4LmRyYXdJbWFnZSh0aGlzLnZpZGVvLCAwLCAwLCBwYWludFdpZHRoLCBwYWludEhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgdGhpcy5zaG93Q2FwdHVyZUluUHJldmlldyA9IHRydWU7XG4gICAgdGhpcy5zaG93VmlkZW9JblByZXZpZXcgPSBmYWxzZTtcbiAgfVxuXG4gIG9uUmVjYXB0dXJlQnRuQ2xpY2soKSB7XG4gICAgdGhpcy5zdGFydExpdmVDYW1GbG93KCk7XG4gIH1cblxuICBvblVwbG9hZEJ0bkNsaWNrKCkge1xuICAgIHRoaXMudXBsb2FkQ2FudmFzLndpZHRoID0gdGhpcy5kaXNwbGF5Q2FudmFzLndpZHRoO1xuICAgIHRoaXMudXBsb2FkQ2FudmFzLmhlaWdodCA9IHRoaXMuZGlzcGxheUNhbnZhcy5oZWlnaHQ7XG4gICAgdGhpcy51cGxvYWRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UodGhpcy5kaXNwbGF5Q2FudmFzLCAwLCAwLCB0aGlzLmRpc3BsYXlDYW52YXMud2lkdGgsIHRoaXMuZGlzcGxheUNhbnZhcy5oZWlnaHQpO1xuICAgIC8vIFN1cHBvcnQgOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvdG9CbG9iXG4gICAgdGhpcy51cGxvYWRDYW52YXMudG9CbG9iKGNyZWF0ZVVwbG9hZENhbGxiYWNrKHRoaXMpLCAnaW1hZ2UvcG5nJywgMS4wKTtcbiAgfVxuXG4gIHNldE5nTW9kZWwodmFsdWUpIHtcbiAgICAvLyBJZiBuZ01vZGVsIG5vdCBhc3NpZ25hYmxlLCB3ZSBkb24ndCB3YW50IHRvIGVycm9yLlxuICAgIGlmICh0eXBlb2YgdGhpcy4kYXR0cnMubmdNb2RlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0ICRuZ01vZGVsID0gdGhpcy4kZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgICBpZiAoISRuZ01vZGVsLiRzZXRWaWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgaGFzR2V0VXNlck1lZGlhKCkge1xuICAgIHJldHVybiAhISh0aGlzLiR3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlc1xuICAgICAgJiYgdGhpcy4kd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKTtcbiAgfVxuXG4gIGdldE92ZXJsYXlTdHlsZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGAke3RoaXMub3ZlcmxheVhPZmZzZXR9cHhgLFxuICAgICAgdG9wOiBgJHt0aGlzLm92ZXJsYXlZT2Zmc2V0fXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLm92ZXJsYXlXaWR0aH1weGAsXG4gICAgICBoZWlnaHQ6IGAke3RoaXMub3ZlcmxheUhlaWdodH1weGAsXG4gICAgfTtcbiAgfVxuXG4gIGdldFZpZGVvU3R5bGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBgJHt0aGlzLnZpZGVvWE9mZnNldH0lYCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy52aWRlb0hlaWdodH0lYCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnZpZGVvV2lkdGh9JWAsXG4gICAgfTtcbiAgfVxuXG4gIGdldENhbnZhc1N0eWxlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogYCR7dGhpcy5kaXNwbGF5Q2FudmFzWE9mZnNldH1weGAsXG4gICAgICB0b3A6IGAke3RoaXMuZGlzcGxheUNhbnZhc1lPZmZzZXR9cHhgLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBOZWVkIHRvIHVzZSB0aGlzIHBhdHRlcm4gaGVyZSBiZWNhdXNlXG4gKiB3ZSBvbmx5IGdldCBoZWlnaHQgYW5kIHdpZHRoIG9mIG92ZXJsYXkgaW1hZ2UgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9hZGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlPbkxvYWRDYWxsYmFjaygkY3RybCkge1xuICByZXR1cm4gZnVuY3Rpb24gb3ZlcmxheU9uTG9hZENhbGxiYWNrKCkge1xuICAgIGlmICghJGN0cmwub3ZlcmxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBoZWlnaHQ6IG92ZXJsYXlIZWlnaHQsXG4gICAgICB3aWR0aDogb3ZlcmxheVdpZHRoLFxuICAgICAgeU9mZnNldDogb3ZlcmxheVlPZmZzZXQsXG4gICAgICB4T2Zmc2V0OiBvdmVybGF5WE9mZnNldFxuICAgIH0gPSAkY3RybC5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlclxuICAgICAgLmdldE92ZXJsYXlTcGVjaWZpY2F0aW9ucyhcbiAgICAgICAgJGN0cmwuc2NyZWVuSGVpZ2h0LCAkY3RybC5zY3JlZW5XaWR0aCxcbiAgICAgICAgJGN0cmwub3ZlcmxheUVsZW1lbnQubmF0dXJhbEhlaWdodCwgJGN0cmwub3ZlcmxheUVsZW1lbnQubmF0dXJhbFdpZHRoXG4gICAgICApO1xuXG4gICAgJGN0cmwuJHNjb3BlLiRhcHBseUFzeW5jKCgpID0+IHtcbiAgICAgICRjdHJsLm92ZXJsYXlZT2Zmc2V0ID0gb3ZlcmxheVlPZmZzZXQ7XG4gICAgICAkY3RybC5vdmVybGF5WE9mZnNldCA9IG92ZXJsYXlYT2Zmc2V0O1xuICAgICAgJGN0cmwub3ZlcmxheUhlaWdodCA9IG92ZXJsYXlIZWlnaHQ7XG4gICAgICAkY3RybC5vdmVybGF5V2lkdGggPSBvdmVybGF5V2lkdGg7XG5cbiAgICAgICRjdHJsLm92ZXJsYXlMb2FkZWQgPSB0cnVlO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIE5lZWQgdG8gdXNlIHRoaXMgcGF0dGVybiBoZXJlIGJlY2F1c2VcbiAqIHdlIG9ubHkgZ2V0IGhlaWdodCBhbmQgd2lkdGggb2YgdmlkZW8gYWZ0ZXIgaXQgaXMgcGxheWluZ1xuICovXG5mdW5jdGlvbiBjcmVhdGVWaWRlb1BsYXlDYWxsYmFjaygkY3RybCkge1xuICByZXR1cm4gZnVuY3Rpb24gdmlkZW9QbGF5Q2FsbGJhY2soKSB7XG4gICAgJGN0cmwuY2FwdHVyZUJ1dHRvbkRpc2FibGVkID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnZpZGVvSGVpZ2h0ID09PSAwIHx8IHRoaXMudmlkZW9XaWR0aCA9PT0gMCkge1xuICAgICAgLy8gVmlkZW8gaXMgbm90IHBsYXlpbmcsIGxpc3RlbiBmb3IgaXQgdG8gc3RhcnRcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsIGZ1bmN0aW9uIHZpZGVvUGxheWluZ0NhbGxiYWNrKCkge1xuICAgICAgICAkY3RybC4kc2NvcGUuJGFwcGx5QXN5bmMoKCkgPT4ge1xuICAgICAgICAgICRjdHJsLnZpZGVvUGxheWluZyA9IHRydWU7XG4gICAgICAgICAgYXNzaWduVmlkZW9EaW1lbnNpb25zKHRoaXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgdmlkZW9QbGF5aW5nQ2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRjdHJsLiRzY29wZS4kYXBwbHlBc3luYygoKSA9PiB7XG4gICAgICAgICRjdHJsLnZpZGVvUGxheWluZyA9IHRydWU7XG4gICAgICAgIGFzc2lnblZpZGVvRGltZW5zaW9ucyh0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2lnblZpZGVvRGltZW5zaW9ucyh2aWRlbykge1xuICAgICAgJGN0cmwudmlkZW9SZXNIZWlnaHQgPSB2aWRlby52aWRlb0hlaWdodDtcbiAgICAgICRjdHJsLnZpZGVvUmVzV2lkdGggPSB2aWRlby52aWRlb1dpZHRoO1xuICAgICAgJGN0cmwuJGxvZy5kZWJ1ZyhgcGxheWluZyB1cGRhdGVkIHZpZGVvIDogJHskY3RybC52aWRlb1Jlc0hlaWdodH0geCAkeyRjdHJsLnZpZGVvUmVzV2lkdGh9YCk7XG4gICAgICBjb25zdCB7IHZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlLCB2aWRlb1dpZHRoSW5QZXJjZW50YWdlIH0gPSAkY3RybC5DYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlclxuICAgICAgICAuZ2V0VmlkZW9TcGVjaWZpY2F0aW9ucyhcbiAgICAgICAgICAkY3RybC5zY3JlZW5IZWlnaHQsICRjdHJsLnNjcmVlbldpZHRoLFxuICAgICAgICAgICRjdHJsLnZpZGVvUmVzSGVpZ2h0LCAkY3RybC52aWRlb1Jlc1dpZHRoXG4gICAgICAgICk7XG4gICAgICAvKipcbiAgICAgICAqIFdoZW4gdmlkZW8gd2lkdGggaXMgbW9yZSB0aGFuIHNjcmVlbiB3aWR0aFxuICAgICAgICogbmF0dXJhbCB2aWRlbyB3aWxsIG92ZXJmbG93IHRvIHJpZ2h0IG9mIHNjcmVlblxuICAgICAgICogQXMgc2VsZmllIGNhbSBpcyBmbGlwcGVkLCB0aGUgb3ZlcmZsb3duIHBhcnQgd2lsbCBiZSBmbGlwcGVkIG9udG8gdGhlIHNjcmVlbiBvbiB0aGUgbGVmdFxuICAgICAgICogV2hlbiBkcmF3aW5nIGNhbnZhcyBmcm9tIHZpZGVvLCB2aWRlbyB0cmFuc2Zvcm1hdGlvbiBpcyBub3QgY29uc2lkZXJlZFxuICAgICAgICogVGh1cyBieSBuYXR1cmFsbHkgZHJhd2luZyB0aGUgc2NyZWVuLCBjYW52YXMgaW1hZ2Ugd2lsbCBtaXNtYXRjaCB3aXRoIHZpZGVvXG4gICAgICAgKiBXZSBuZWVkZWQgdG8gYXBwbHkgYW4gb2Zmc2V0IGhlcmVcbiAgICAgICAqIHRvIG1ha2Ugc3VyZSBvdmVyZmxvd24gcGFydCBpbiB1bmZsaXBwZWQgdmlkZW8gaXMgc3RpbGwgb3ZlcmZsb3duIGluIGZsaXBwZWQgdmlkZW9cbiAgICAgICAqL1xuICAgICAgaWYgKCRjdHJsLmlzVmlkZW9Ib3Jpem9udGFsbHlGbGlwcGVkICYmIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UgPiAxMDAuMCkge1xuICAgICAgICAkY3RybC52aWRlb1hPZmZzZXQgPSAxMDAgLSB2aWRlb1dpZHRoSW5QZXJjZW50YWdlO1xuICAgICAgfVxuICAgICAgJGN0cmwudmlkZW9IZWlnaHQgPSB2aWRlb0hlaWdodEluUGVyY2VudGFnZTtcbiAgICAgICRjdHJsLnZpZGVvV2lkdGggPSB2aWRlb1dpZHRoSW5QZXJjZW50YWdlO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gUmVzaXplIGxpc3RlbmVyIGxpc3RlbnMgdG8gZW5kIG9mIG9yaWVudGF0aW9uIGNoYW5nZSBldmVudFxuZnVuY3Rpb24gY3JlYXRlT3JpZW50YXRpb25DaGFuZ2VDYWxsYmFjaygkY3RybCkge1xuICAvLyBUT0RPIGhhb3l1YW4gOiBzaG91bGQgd2UgY2FuY2VsIHRoZSBjYXB0dXJlIGlmIHNjcmVlbiByb3RhdGVzP1xuICByZXR1cm4gZnVuY3Rpb24gb3JpZW50YXRpb25DaGFuZ2VDYWxsYmFjaygpIHtcbiAgICBjb25zdCBvbk9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24gb25PcmllbnRhdGlvbkNoYW5nZSgpIHtcbiAgICAgIGlmICgkY3RybC5zaG93VmlkZW9QcmV2aWV3KSB7XG4gICAgICAgICRjdHJsLiRsb2cuZGVidWcoJ09yaWVudGF0aW9uIGNoYW5nZSBkZXRlY3RlZCwgcmVjb21wdXRlIHNjcmVlbicpO1xuICAgICAgICAkY3RybC5zdGFydExpdmVDYW1GbG93KCk7XG4gICAgICB9XG4gICAgICAkY3RybC4kd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uT3JpZW50YXRpb25DaGFuZ2UpO1xuICAgIH07XG4gICAgJGN0cmwuJHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbk9yaWVudGF0aW9uQ2hhbmdlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVXBsb2FkQ2FsbGJhY2soJGN0cmwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwbG9hZENhbGxiYWNrKGJsb2IpIHtcbiAgICBpZiAoc2NyZWVuZnVsbC5lbmFibGVkKSB7XG4gICAgICBzY3JlZW5mdWxsLmV4aXQoKTtcbiAgICB9XG4gICAgJGN0cmwuc2hvd1ZpZGVvUHJldmlldyA9IGZhbHNlO1xuICAgICRjdHJsLmNsb3NlVmlkZW9TdHJlYW0oKTtcbiAgICAkY3RybC4kc2NvcGUuJGFwcGx5QXN5bmMoKCkgPT4ge1xuICAgICAgJGN0cmwub25DYXB0dXJlKHsgZmlsZTogYmxvYiB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuQ2FtZXJhQ2FwdHVyZUNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckd2luZG93JyxcbiAgJyRxJyxcbiAgJyRhdHRycycsXG4gICckbG9nJyxcbiAgJ0NhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhQ2FwdHVyZUNvbnRyb2xsZXI7XG4iLCIvKiFcbiogc2NyZWVuZnVsbFxuKiB2NC4yLjAgLSAyMDE5LTA0LTAxXG4qIChjKSBTaW5kcmUgU29yaHVzOyBNSVQgTGljZW5zZVxuKi9cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgZG9jdW1lbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5kb2N1bWVudCA6IHt9O1xuXHR2YXIgaXNDb21tb25qcyA9IHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzO1xuXHR2YXIga2V5Ym9hcmRBbGxvd2VkID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmICdBTExPV19LRVlCT0FSRF9JTlBVVCcgaW4gRWxlbWVudDtcblxuXHR2YXIgZm4gPSAoZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWw7XG5cblx0XHR2YXIgZm5NYXAgPSBbXG5cdFx0XHRbXG5cdFx0XHRcdCdyZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCdleGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCdmdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCdmdWxsc2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdCdmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5lcnJvcidcblx0XHRcdF0sXG5cdFx0XHQvLyBOZXcgV2ViS2l0XG5cdFx0XHRbXG5cdFx0XHRcdCd3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRFeGl0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCd3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5lcnJvcidcblxuXHRcdFx0XSxcblx0XHRcdC8vIE9sZCBXZWJLaXQgKFNhZmFyaSA1LjEpXG5cdFx0XHRbXG5cdFx0XHRcdCd3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdEN1cnJlbnRGdWxsU2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xuXG5cdFx0XHRdLFxuXHRcdFx0W1xuXHRcdFx0XHQnbW96UmVxdWVzdEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHQnbW96Q2FuY2VsRnVsbFNjcmVlbicsXG5cdFx0XHRcdCdtb3pGdWxsU2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCdtb3pGdWxsU2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdCdtb3pmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0J21vemZ1bGxzY3JlZW5lcnJvcidcblx0XHRcdF0sXG5cdFx0XHRbXG5cdFx0XHRcdCdtc1JlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0J21zRXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHQnbXNGdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdCdtc0Z1bGxzY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0J01TRnVsbHNjcmVlbkNoYW5nZScsXG5cdFx0XHRcdCdNU0Z1bGxzY3JlZW5FcnJvcidcblx0XHRcdF1cblx0XHRdO1xuXG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciBsID0gZm5NYXAubGVuZ3RoO1xuXHRcdHZhciByZXQgPSB7fTtcblxuXHRcdGZvciAoOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHR2YWwgPSBmbk1hcFtpXTtcblx0XHRcdGlmICh2YWwgJiYgdmFsWzFdIGluIGRvY3VtZW50KSB7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRyZXRbZm5NYXBbMF1baV1dID0gdmFsW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KSgpO1xuXG5cdHZhciBldmVudE5hbWVNYXAgPSB7XG5cdFx0Y2hhbmdlOiBmbi5mdWxsc2NyZWVuY2hhbmdlLFxuXHRcdGVycm9yOiBmbi5mdWxsc2NyZWVuZXJyb3Jcblx0fTtcblxuXHR2YXIgc2NyZWVuZnVsbCA9IHtcblx0XHRyZXF1ZXN0OiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG5cdFx0XHRcdHZhciByZXF1ZXN0ID0gZm4ucmVxdWVzdEZ1bGxzY3JlZW47XG5cblx0XHRcdFx0dmFyIG9uRnVsbFNjcmVlbkVudGVyZWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0dGhpcy5vZmYoJ2NoYW5nZScsIG9uRnVsbFNjcmVlbkVudGVyZWQpO1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0fS5iaW5kKHRoaXMpO1xuXG5cdFx0XHRcdGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHQvLyBXb3JrIGFyb3VuZCBTYWZhcmkgNS4xIGJ1ZzogcmVwb3J0cyBzdXBwb3J0IGZvclxuXHRcdFx0XHQvLyBrZXlib2FyZCBpbiBmdWxsc2NyZWVuIGV2ZW4gdGhvdWdoIGl0IGRvZXNuJ3QuXG5cdFx0XHRcdC8vIEJyb3dzZXIgc25pZmZpbmcsIHNpbmNlIHRoZSBhbHRlcm5hdGl2ZSB3aXRoXG5cdFx0XHRcdC8vIHNldFRpbWVvdXQgaXMgZXZlbiB3b3JzZS5cblx0XHRcdFx0aWYgKC8gVmVyc2lvblxcLzVcXC4xKD86XFwuXFxkKyk/IFNhZmFyaVxcLy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuXHRcdFx0XHRcdGVsZW1bcmVxdWVzdF0oKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtW3JlcXVlc3RdKGtleWJvYXJkQWxsb3dlZCA/IEVsZW1lbnQuQUxMT1dfS0VZQk9BUkRfSU5QVVQgOiB7fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLm9uKCdjaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FbnRlcmVkKTtcblx0XHRcdH0uYmluZCh0aGlzKSk7XG5cdFx0fSxcblx0XHRleGl0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRcdFx0aWYgKCF0aGlzLmlzRnVsbHNjcmVlbikge1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgb25GdWxsU2NyZWVuRXhpdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR0aGlzLm9mZignY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHR9LmJpbmQodGhpcyk7XG5cblx0XHRcdFx0ZG9jdW1lbnRbZm4uZXhpdEZ1bGxzY3JlZW5dKCk7XG5cblx0XHRcdFx0dGhpcy5vbignY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG5cdFx0XHR9LmJpbmQodGhpcykpO1xuXHRcdH0sXG5cdFx0dG9nZ2xlOiBmdW5jdGlvbiAoZWxlbSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuaXNGdWxsc2NyZWVuID8gdGhpcy5leGl0KCkgOiB0aGlzLnJlcXVlc3QoZWxlbSk7XG5cdFx0fSxcblx0XHRvbmNoYW5nZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLm9uKCdjaGFuZ2UnLCBjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRvbmVycm9yOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHRoaXMub24oJ2Vycm9yJywgY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0b246IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBldmVudE5hbWUgPSBldmVudE5hbWVNYXBbZXZlbnRdO1xuXHRcdFx0aWYgKGV2ZW50TmFtZSkge1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9mZjogZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGV2ZW50TmFtZSA9IGV2ZW50TmFtZU1hcFtldmVudF07XG5cdFx0XHRpZiAoZXZlbnROYW1lKSB7XG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaywgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmF3OiBmblxuXHR9O1xuXG5cdGlmICghZm4pIHtcblx0XHRpZiAoaXNDb21tb25qcykge1xuXHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNjcmVlbmZ1bGwgPSBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY3JlZW5mdWxsLCB7XG5cdFx0aXNGdWxsc2NyZWVuOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVsZW1lbnRdKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGVsZW1lbnQ6IHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbGVtZW50XTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGVuYWJsZWQ6IHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0Ly8gQ29lcmNlIHRvIGJvb2xlYW4gaW4gY2FzZSBvZiBvbGQgV2ViS2l0XG5cdFx0XHRcdHJldHVybiBCb29sZWFuKGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbmFibGVkXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRpZiAoaXNDb21tb25qcykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gc2NyZWVuZnVsbDtcblx0XHQvLyBUT0RPOiByZW1vdmUgdGhpcyBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cdFx0bW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IHNjcmVlbmZ1bGw7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LnNjcmVlbmZ1bGwgPSBzY3JlZW5mdWxsO1xuXHR9XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXY+IDxkaXYgaWQ9dmlkZW8tcHJldmlldyBuZy1zaG93PSRjdHJsLnNob3dWaWRlb1ByZXZpZXcgY2xhc3M9XFxcInctMTAwIGgtMTAwIGZpeGVkLXRvcCBiZy1kYXJrXFxcIj4gPGltZyBpZD1vdmVybGF5IG5nLXNob3c9XFxcIiRjdHJsLnNob3dWaWRlb0luUHJldmlldyAmJiAkY3RybC5vdmVybGF5TG9hZGVkICYmICRjdHJsLnZpZGVvUGxheWluZ1xcXCIgbmctc3R5bGU9JGN0cmwuZ2V0T3ZlcmxheVN0eWxlcygpIG5nLXNyYz17eyRjdHJsLm92ZXJsYXl9fSBjbGFzcz1cXFwiZml4ZWQgemluZGV4LXZpZGVvLW92ZXJsYXlcXFwiLz4gPHZpZGVvIGlkPXZpZGVvIG5nLXNob3c9JGN0cmwuc2hvd1ZpZGVvSW5QcmV2aWV3IG5nLXN0eWxlPSRjdHJsLmdldFZpZGVvU3R5bGVzKCkgY2xhc3M9XFxcImZpeGVkLXRvcCB6aW5kZXgtdmlkZW9cXFwiIHBsYXlzaW5saW5lPjwvdmlkZW8+IDxjYW52YXMgaWQ9ZGlzcGxheS1jYW52YXMgbmctc2hvdz0kY3RybC5zaG93Q2FwdHVyZUluUHJldmlldyBuZy1zdHlsZT0kY3RybC5nZXRDYW52YXNTdHlsZXMoKSBjbGFzcz1cXFwiZml4ZWQgemluZGV4LXZpZGVvXFxcIj48L2NhbnZhcz4gPGNhbnZhcyBpZD11cGxvYWQtY2FudmFzIG5nLXNob3c9ZmFsc2UgY2xhc3M9Zml4ZWQ+PC9jYW52YXM+IDxsYWJlbCBjbGFzcz1cXFwiZml4ZWQtYm90dG9tIGNhbWVyYS1jdHJsLWJhclxcXCI+IDxzcGFuIGNsYXNzPWNhbWVyYS1jdHJsLWJveC1zbWFsbD4gPHNwYW4gaWQ9dmlkZW8tY2FuY2VsIGNsYXNzPVxcXCJjYW1lcmEtY3RybC1idG4tc21hbGwgY2FtZXJhLWN0cmwtYnRuLWNhbmNlbCBpY29uIGljb24tY2xvc2VcXFwiIG5nLWlmPSRjdHJsLnNob3dWaWRlb0luUHJldmlldyBuZy1jbGljaz0kY3RybC5vbkNhbmNlbEJ0bkNsaWNrKCk+PC9zcGFuPiA8c3BhbiBpZD1jYXB0dXJlLWNhbmNlbCBjbGFzcz1cXFwiY2FtZXJhLWN0cmwtYnRuLXNtYWxsIGNhbWVyYS1jdHJsLWJ0bi1jYW5jZWwgaWNvbiBpY29uLWNsb3NlXFxcIiBuZy1pZj0kY3RybC5zaG93Q2FwdHVyZUluUHJldmlldyBuZy1jbGljaz0kY3RybC5vblJlY2FwdHVyZUJ0bkNsaWNrKCk+PC9zcGFuPiA8L3NwYW4+IDxzcGFuIGNsYXNzPWNhbWVyYS1jdHJsLWJveC1iaWc+IDxzcGFuIGlkPXZpZGVvLWNvbmZpcm0gY2xhc3M9Y2FtZXJhLWN0cmwtYnRuLWJpZyBuZy1pZj0kY3RybC5zaG93VmlkZW9JblByZXZpZXcgbmctY2xpY2s9XFxcIiEkY3RybC5jYXB0dXJlQnV0dG9uRGlzYWJsZWQgJiYgJGN0cmwub25DYXB0dXJlQnRuQ2xpY2soKVxcXCI+IDxzcGFuIGNsYXNzPWNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXI+PC9zcGFuPiA8L3NwYW4+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9Y2FtZXJhLWN0cmwtYm94LXNtYWxsPiA8c3BhbiBpZD1jYXB0dXJlLWNvbmZpcm0gY2xhc3M9XFxcImNhbWVyYS1jdHJsLWJ0bi1zbWFsbCBjYW1lcmEtY3RybC1idG4tY29uZmlybSBpY29uIGljb24tY2hlY2tcXFwiIG5nLWlmPSRjdHJsLnNob3dDYXB0dXJlSW5QcmV2aWV3IG5nLWNsaWNrPSRjdHJsLm9uVXBsb2FkQnRuQ2xpY2soKT48L3NwYW4+IDwvc3Bhbj4gPC9sYWJlbD4gPC9kaXY+IDwvZGl2PiBcIjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FtZXJhLWNhcHR1cmUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FtZXJhLWNhcHR1cmUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NhbWVyYS1jYXB0dXJlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jYW1lcmEtY3RybC1ib3gtc21hbGx7ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OjYwcHg7d2lkdGg6NjBweDttYXJnaW4tbGVmdDoxMHB4O21hcmdpbi1yaWdodDoxMHB4O3ZlcnRpY2FsLWFsaWduOmJvdHRvbX0uY2FtZXJhLWN0cmwtYm94LWJpZ3tkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6ODRweDt3aWR0aDo4NHB4O21hcmdpbi1sZWZ0OjM2cHg7bWFyZ2luLXJpZ2h0OjM2cHg7dmVydGljYWwtYWxpZ246Ym90dG9tfS5jYW1lcmEtY3RybC1idG4tY2FuY2Vse2NvbG9yOnJlZDtiYWNrZ3JvdW5kLWNvbG9yOiNmOGY5ZmF9LmNhbWVyYS1jdHJsLWJ0bi1jb25maXJte2NvbG9yOmdyZWVuO2JhY2tncm91bmQtY29sb3I6I2Y4ZjlmYX0uY2FtZXJhLWN0cmwtYnRuLXNtYWxse2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo2MHB4O3dpZHRoOjYwcHg7cGFkZGluZzo0cHg7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZTo1MnB4O2xpbmUtaGVpZ2h0OjE7dGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6bm93cmFwO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTstbXMtdG91Y2gtYWN0aW9uOm1hbmlwdWxhdGlvbjt0b3VjaC1hY3Rpb246bWFuaXB1bGF0aW9uO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyLXJhZGl1czo1MCV9LmNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXJ7aGVpZ2h0OjY0cHg7d2lkdGg6NjRweDtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjojZjhmOWZhO2JvcmRlcjoxcHggc29saWQ7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyLWNvbG9yOiNmOGY5ZmF9LmNhbWVyYS1jdHJsLWJ0bi1iaWcsLmNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTowO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0uY2FtZXJhLWN0cmwtYnRuLWJpZ3toZWlnaHQ6ODRweDt3aWR0aDo4NHB4O3BhZGRpbmc6MnB4Oy1tcy10b3VjaC1hY3Rpb246bWFuaXB1bGF0aW9uO3RvdWNoLWFjdGlvbjptYW5pcHVsYXRpb247Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQtY29sb3I6IzM0M2E0MDtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyOjhweCBzb2xpZDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXItY29sb3I6I2Y4ZjlmYX0uZml4ZWR7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxMDMwfS5maXhlZC10b3B7dG9wOjB9LmZpeGVkLWJvdHRvbSwuZml4ZWQtdG9we3Bvc2l0aW9uOmZpeGVkO3JpZ2h0OjA7bGVmdDowO3otaW5kZXg6MTAzMH0uZml4ZWQtYm90dG9te2JvdHRvbTowfS5jYW1lcmEtY3RybC1iYXJ7cGFkZGluZy10b3A6MTBweDtwYWRkaW5nLWJvdHRvbToxMHB4O3otaW5kZXg6MTAzMiFpbXBvcnRhbnR9LmJnLWRhcmt7YmFja2dyb3VuZC1jb2xvcjojMzQzYTQwIWltcG9ydGFudH0uemluZGV4LXZpZGVve3otaW5kZXg6MTAzMCFpbXBvcnRhbnR9LmRpc3BsYXktbWlycm9yey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgtMSk7dHJhbnNmb3JtOnNjYWxlWCgtMSl9LnppbmRleC12aWRlby1vdmVybGF5e3otaW5kZXg6MTAzMSFpbXBvcnRhbnR9LnctMTAwe3dpZHRoOjEwMCUhaW1wb3J0YW50fS5oLTEwMHtoZWlnaHQ6MTAwJSFpbXBvcnRhbnR9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLy8gU2VydmljZSByZXNvbHZpbmcgdmlkZW8gYW5kIGNhbnZhcyBzY3JlZW4gc2l6ZXNcbmNsYXNzIENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJGxvZyxcbiAgICBDYW1lcmFPdmVybGF5SGFuZGxlclxuICApIHtcbiAgICB0aGlzLiRsb2cgPSAkbG9nO1xuICAgIHRoaXMuQ2FtZXJhT3ZlcmxheUhhbmRsZXIgPSBDYW1lcmFPdmVybGF5SGFuZGxlcjtcbiAgfVxuXG4gIC8qIEdldCBoZWlnaHQgYW5kIHdpZHRoIG9mIHZpZGVvIGluIHBlcmNlbnRhZ2UgKiAxMDBcbiAgICogRnVuY3Rpb24gaXMgYmFzZWQgb2ZmIHRoZSBmYWN0IHRoYXQgdmlkZW8gc3RyZWFtIHdpbGwgZXhwYW5kXG4gICAqIHRvIGZpbGwgb25lIGRpbWVuc2lvbiBvZiB0aGUgc2NyZWVuIGFuZCBiZSBjZW50ZXJlZCB3cnQgdGhlIG90aGVyIGRpbWVuc2lvblxuICAgKiBXZSBuZWVkIHRvIGtub3cgd2hpY2ggZGltZW5zaW9uIGl0IGlzXG4gICAqL1xuICBnZXRWaWRlb1NwZWNpZmljYXRpb25zKFxuICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgKSB7XG4gICAgdGhpcy4kbG9nLmRlYnVnKCdDb21wdXRpbmcgdmlkZW8gc3BlY3MnKTtcbiAgICBsZXQgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgbGV0IHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UgPSAxMDA7XG5cbiAgICBpZiAoaGFzTmFycm93VmlkZW9JblBvcnRyYWl0U2NyZWVuKFxuICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgKSkge1xuICAgICAgdGhpcy4kbG9nLmRlYnVnKCcodmlkZW8pIFBvcnRyYWl0IG5hcnJvdyBzY3JlZW4nKTtcbiAgICAgIGNvbnN0IHZpZGVvUmVzUmF0aW8gPSB2aWRlb1Jlc0hlaWdodCAvIHZpZGVvUmVzV2lkdGg7XG4gICAgICBjb25zdCBzY3JlZW5SZXNSYXRpbyA9IHNjcmVlbkhlaWdodCAvIHNjcmVlbldpZHRoO1xuICAgICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UgPSBwYXJzZUludCgodmlkZW9SZXNSYXRpbyAvIHNjcmVlblJlc1JhdGlvKSAqIDEwMCwgMTApO1xuICAgIH0gZWxzZSBpZiAoaGFzTmFycm93VmlkZW9JbkxhbmRTY2FwZVNjcmVlbihcbiAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICAgICkpIHtcbiAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnKHZpZGVvKSBMYW5kc2NhcGUgbmFycm93IHNjcmVlbicpO1xuICAgICAgY29uc3QgdmlkZW9SZXNSYXRpbyA9IHZpZGVvUmVzV2lkdGggLyB2aWRlb1Jlc0hlaWdodDtcbiAgICAgIGNvbnN0IHNjcmVlblJlc1JhdGlvID0gc2NyZWVuV2lkdGggLyBzY3JlZW5IZWlnaHQ7XG4gICAgICB2aWRlb1dpZHRoSW5QZXJjZW50YWdlID0gcGFyc2VJbnQoKHZpZGVvUmVzUmF0aW8gLyBzY3JlZW5SZXNSYXRpbykgKiAxMDAsIDEwKTtcbiAgICB9XG4gICAgLy8gV2Ugc2hvdWxkIG5vdCBnZXQgYSBcIm5vcm1hbFwiIGNhc2UgaGVyZVxuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgdmlkZW8gd2lkdGggOiAke3ZpZGVvV2lkdGhJblBlcmNlbnRhZ2V9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyBoZWlnaHQgOiAke3ZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlfWApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZpZGVvSGVpZ2h0SW5QZXJjZW50YWdlLFxuICAgICAgdmlkZW9XaWR0aEluUGVyY2VudGFnZVxuICAgIH07XG4gIH1cblxuICAvKiBHZXQgZGltZW5zaW9uLCBvZmZzZXQgYW5kIHJlc29sdXRpb24gb2YgZHJhd2luZyBmb3IgY2FudmFzXG4gICAqIEZ1bmN0aW9uIGlzIGJhc2VkIG9mZiB0aGUgZmFjdCB0aGF0IHZpZGVvIHN0cmVhbSB3aWxsIGV4cGFuZFxuICAgKiB0byBmaWxsIG9uZSBkaW1lbnNpb24gb2YgdGhlIHNjcmVlbiBhbmQgYmUgY2VudGVyZWQgd3J0IHRoZSBvdGhlciBkaW1lbnNpb25cbiAgICogV2UgbmVlZCB0byBrbm93IHdoaWNoIGRpbWVuc2lvbiBpdCBpc1xuICAgKi9cbiAgZ2V0Q2FudmFzU3BlY2lmaWNhdGlvbnMoXG4gICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UsXG4gICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICApIHtcbiAgICB0aGlzLiRsb2cuZGVidWcoJ0NvbXB1dGluZyBjYW52YXMgc3BlY3MnKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHZpZGVvIHdpZHRoIDogJHt2aWRlb1dpZHRoSW5QZXJjZW50YWdlfWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgdmlkZW8gaGVpZ2h0IDogJHt2aWRlb0hlaWdodEluUGVyY2VudGFnZX1gKTtcbiAgICB0aGlzLiRsb2cuZGVidWcoYHNjcmVlbiB3aWR0aCA6ICR7c2NyZWVuV2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGBzY3JlZW4gaGVpZ2h0IDogJHtzY3JlZW5IZWlnaHR9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyByZXMgd2lkdGggOiAke3ZpZGVvUmVzV2lkdGh9YCk7XG4gICAgdGhpcy4kbG9nLmRlYnVnKGB2aWRlbyByZXMgaGVpZ2h0IDogJHt2aWRlb1Jlc0hlaWdodH1gKTtcblxuICAgIGxldCBjYW52YXNEaW1lbnNpb25zID0gbnVsbDtcblxuICAgIC8vIGhhbmRsZSBsYXlvdXQgd2hlcmUgYSBsYW5kc2NhcGUgc2NyZWVuIGhhcyBhIGxvbmcgYW5kIG5hcnJvd2VyIGNhbWVyYSB3aW5kb3cgaW4gaXRcbiAgICBpZiAoaGFzTmFycm93VmlkZW9JblBvcnRyYWl0U2NyZWVuKFxuICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgKSkge1xuICAgICAgdGhpcy4kbG9nLmRlYnVnKCcoY2FudmFzKSBQb3J0cmFpdCBuYXJyb3cgc2NyZWVuJyk7XG4gICAgICBjYW52YXNEaW1lbnNpb25zID0gZ2V0Q2FudmFzU3BlY3NGb3JQb3J0cmFpdFNjcmVlbldpdGhOYXJyb3dWaWRlbyhcbiAgICAgICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UsXG4gICAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaGFzTmFycm93VmlkZW9JbkxhbmRTY2FwZVNjcmVlbihcbiAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuICAgICkpIHtcbiAgICAgIHRoaXMuJGxvZy5kZWJ1ZygnKGNhbnZhcykgTGFuZHNjYXBlIG5hcnJvdyBzY3JlZW4nKTtcbiAgICAgIGNhbnZhc0RpbWVuc2lvbnMgPSBnZXRDYW52YXNTcGVjc0ZvckxhbmRzY2FwZVNjcmVlbldpdGhOYXJyb3dWaWRlbyhcbiAgICAgICAgdmlkZW9IZWlnaHRJblBlcmNlbnRhZ2UsIHZpZGVvV2lkdGhJblBlcmNlbnRhZ2UsXG4gICAgICAgIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsXG4gICAgICAgIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRsb2cuZGVidWcoJyhjYW52YXMpIE5vcm1hbCBzY3JlZW4nKTtcbiAgICAgIGNhbnZhc0RpbWVuc2lvbnMgPSBnZXRDYW52YXNTcGVjcyhcbiAgICAgICAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgICAgICAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgaGVpZ2h0LCB3aWR0aCxcbiAgICAgIHlPZmZzZXQsIHhPZmZzZXQsXG4gICAgICBwYWludEhlaWdodCwgcGFpbnRXaWR0aFxuICAgIH0gPSBjYW52YXNEaW1lbnNpb25zO1xuXG4gICAgdGhpcy4kbG9nLmRlYnVnKGBjYW52YXMgd2lkdGggOiAke3dpZHRofWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIGhlaWdodCA6ICR7aGVpZ2h0fWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIHgtb2Zmc2V0IDogJHt4T2Zmc2V0fWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIHktb2Zmc2V0IDogJHt5T2Zmc2V0fWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIHdpZHRoIHRvIHBhaW50IDogJHtwYWludFdpZHRofWApO1xuICAgIHRoaXMuJGxvZy5kZWJ1ZyhgY2FudmFzIGhlaWdodCB0byBwYWludCA6ICR7cGFpbnRIZWlnaHR9YCk7XG5cbiAgICByZXR1cm4gY2FudmFzRGltZW5zaW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgZGltZW5zaW9uLCBvZmZzZXQgb2YgY2FtZXJhIG92ZXJsYXlcbiAgICovXG4gIGdldE92ZXJsYXlTcGVjaWZpY2F0aW9ucyhcbiAgICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICAgIG92ZXJsYXlOYXR1cmFsSGVpZ2h0LCBvdmVybGF5TmF0dXJhbFdpZHRoXG4gICkge1xuICAgIGNvbnN0IHtcbiAgICAgIGhlaWdodDogY29udGFpbmVySGVpZ2h0LCB3aWR0aDogY29udGFpbmVyV2lkdGgsXG4gICAgICB5T2Zmc2V0OiBjb250YWluZXJZT2Zmc2V0LCB4T2Zmc2V0OiBjb250YWluZXJYT2Zmc2V0LFxuICAgIH0gPSBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlci5nZXRPdmVybGF5Q29udGFpbmVyKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpO1xuXG4gICAgY29uc3Qge1xuICAgICAgaGVpZ2h0OiBvdmVybGF5SGVpZ2h0LCB3aWR0aDogb3ZlcmxheVdpZHRoLFxuICAgICAgeU9mZnNldDogb3ZlcmxheVlPZmZzZXQsIHhPZmZzZXQ6IG92ZXJsYXlYT2Zmc2V0LFxuICAgIH0gPSB0aGlzLkNhbWVyYU92ZXJsYXlIYW5kbGVyLmdldE92ZXJsYXlTcGVjaWZpY2F0aW9uc1dydENvbnRhaW5lcihcbiAgICAgIGNvbnRhaW5lckhlaWdodCwgY29udGFpbmVyV2lkdGgsXG4gICAgICBvdmVybGF5TmF0dXJhbEhlaWdodCwgb3ZlcmxheU5hdHVyYWxXaWR0aFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBvdmVybGF5SGVpZ2h0LFxuICAgICAgd2lkdGg6IG92ZXJsYXlXaWR0aCxcbiAgICAgIHlPZmZzZXQ6IGNvbnRhaW5lcllPZmZzZXQgKyBvdmVybGF5WU9mZnNldCxcbiAgICAgIHhPZmZzZXQ6IGNvbnRhaW5lclhPZmZzZXQgKyBvdmVybGF5WE9mZnNldFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgMToxIGJveCBjb250YWluZXIgYmFzZWQgb24gc2NyZWVuIHNpemUgdG8gcmVuZGVyIG92ZXJsYXlcbiAgICovXG4gIHN0YXRpYyBnZXRPdmVybGF5Q29udGFpbmVyKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpIHtcbiAgICBpZiAoQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIuaXNTY3JlZW5Qb3J0cmFpdChzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaGVpZ2h0OiBzY3JlZW5XaWR0aCxcbiAgICAgICAgd2lkdGg6IHNjcmVlbldpZHRoLFxuICAgICAgICB5T2Zmc2V0OiAoc2NyZWVuSGVpZ2h0IC0gc2NyZWVuV2lkdGgpIC8gMi41LCAvLyBQbGFjZSBjb250YWluZXIgYWJvdmUgbWlkZGxlXG4gICAgICAgIHhPZmZzZXQ6IDAsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIGlzTGFuZHNjYXBlXG4gICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0ICogMC45MDsgLy8gTGVhdmUgdGhlIGJ0bSAxMCUgYmxhbmtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB3aWR0aDogYXZhaWxhYmxlSGVpZ2h0LFxuICAgICAgeU9mZnNldDogMCxcbiAgICAgIHhPZmZzZXQ6IChzY3JlZW5XaWR0aCAtIGF2YWlsYWJsZUhlaWdodCkgLyAyLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgaXNTY3JlZW5Qb3J0cmFpdChzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoKSB7XG4gICAgcmV0dXJuIHNjcmVlbkhlaWdodCA+PSBzY3JlZW5XaWR0aDtcbiAgfVxuXG4gIHN0YXRpYyBpc1NjcmVlbkxhbmRzY2FwZShzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoKSB7XG4gICAgcmV0dXJuIHNjcmVlbldpZHRoID49IHNjcmVlbkhlaWdodDtcbiAgfVxufVxuXG4vKipcbiAqIEZ1bmN0aW9ucyBiZWxvdyBoYW5kbGUgY2FzZXMgd2hlbiBzY3JlZW4gZGltZW5zaW9uIGFuZCB2aWRlbyByZXNvbHV0aW9uXG4gKiByZXNvbHZlIGludG8gYSBuYXJyb3cgdmlkZW8gc2NyZWVuIHdpdGggdGhpbiBhbmQgdWdseSBtYXJnaW5lcyBhdCBzaWRlc1xuICogSW4gdGhpcyBjYXNlIHdlIHRydW5jYXRlIHRoZSBkaW1lbnNpb24gb2YgdmlkZW8gY2F1c2luZyB0aGUgdWdseSBtYXJnaW5lc1xuICogYW5kIGdldCB2aWRlbyB0byBmaWxsIHVwIHRoZSBlbnRpcmUgc2NyZWVuXG4gKi9cblxuZnVuY3Rpb24gaGFzTmFycm93VmlkZW9JblBvcnRyYWl0U2NyZWVuKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsIHZpZGVvUmVzSGVpZ2h0LCB2aWRlb1Jlc1dpZHRoKSB7XG4gIHJldHVybiBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlci5pc1NjcmVlblBvcnRyYWl0KHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpXG4gICAgJiYgdmlkZW9SZXNIZWlnaHQgLyB2aWRlb1Jlc1dpZHRoID4gc2NyZWVuSGVpZ2h0IC8gc2NyZWVuV2lkdGg7XG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc1NwZWNzRm9yUG9ydHJhaXRTY3JlZW5XaXRoTmFycm93VmlkZW8oXG4gIHZpZGVvSGVpZ2h0LCB2aWRlb1dpZHRoLFxuICBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLFxuICB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aFxuKSB7XG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiBzY3JlZW5IZWlnaHQsXG4gICAgd2lkdGg6IHNjcmVlbldpZHRoLFxuICAgIHlPZmZzZXQ6IDAsXG4gICAgeE9mZnNldDogMCxcbiAgICBwYWludEhlaWdodDogcGFyc2VJbnQodmlkZW9SZXNIZWlnaHQgLyAodmlkZW9IZWlnaHQgLyAxMDAuMCksIDEwKSxcbiAgICBwYWludFdpZHRoOiB2aWRlb1Jlc1dpZHRoXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05hcnJvd1ZpZGVvSW5MYW5kU2NhcGVTY3JlZW4oc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCwgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGgpIHtcbiAgcmV0dXJuIENhbWVyYUNhcHR1cmVTY3JlZW5IYW5kbGVyLmlzU2NyZWVuTGFuZHNjYXBlKHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgpXG4gICAgJiYgdmlkZW9SZXNXaWR0aCAvIHZpZGVvUmVzSGVpZ2h0ID4gc2NyZWVuV2lkdGggLyBzY3JlZW5IZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIGdldENhbnZhc1NwZWNzRm9yTGFuZHNjYXBlU2NyZWVuV2l0aE5hcnJvd1ZpZGVvKFxuICB2aWRlb0hlaWdodCwgdmlkZW9XaWR0aCxcbiAgc2NyZWVuSGVpZ2h0LCBzY3JlZW5XaWR0aCxcbiAgdmlkZW9SZXNIZWlnaHQsIHZpZGVvUmVzV2lkdGhcbikge1xuICByZXR1cm4ge1xuICAgIGhlaWdodDogc2NyZWVuSGVpZ2h0LFxuICAgIHdpZHRoOiBzY3JlZW5XaWR0aCxcbiAgICB5T2Zmc2V0OiAwLFxuICAgIHhPZmZzZXQ6IDAsXG4gICAgcGFpbnRIZWlnaHQ6IHZpZGVvUmVzSGVpZ2h0LFxuICAgIHBhaW50V2lkdGg6IHBhcnNlSW50KHZpZGVvUmVzV2lkdGggLyAodmlkZW9XaWR0aCAvIDEwMCksIDEwKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRDYW52YXNTcGVjcyhzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLCB2aWRlb1Jlc0hlaWdodCwgdmlkZW9SZXNXaWR0aCkge1xuICBjb25zdCBoZWlnaHRNdWx0ID0gc2NyZWVuSGVpZ2h0IC8gdmlkZW9SZXNIZWlnaHQ7XG4gIGNvbnN0IHdpZHRoTXVsdCA9IHNjcmVlbldpZHRoIC8gdmlkZW9SZXNXaWR0aDtcbiAgbGV0IGNhbnZhc1dpZHRoID0gMDtcbiAgbGV0IGNhbnZhc0hlaWdodCA9IDA7XG4gIGxldCBjYW52YXNYT2Zmc2V0ID0gMDtcbiAgbGV0IGNhbnZhc1lPZmZzZXQgPSAwO1xuXG4gIGlmIChoZWlnaHRNdWx0ID09PSB3aWR0aE11bHQpIHtcbiAgICBjYW52YXNXaWR0aCA9IHNjcmVlbldpZHRoO1xuICAgIGNhbnZhc0hlaWdodCA9IHNjcmVlbkhlaWdodDtcbiAgICBjYW52YXNYT2Zmc2V0ID0gMDtcbiAgICBjYW52YXNZT2Zmc2V0ID0gMDtcbiAgfSBlbHNlIGlmIChoZWlnaHRNdWx0ID4gd2lkdGhNdWx0KSB7XG4gICAgY2FudmFzV2lkdGggPSBzY3JlZW5XaWR0aDtcbiAgICBjYW52YXNIZWlnaHQgPSBwYXJzZUludCh3aWR0aE11bHQgKiB2aWRlb1Jlc0hlaWdodCwgMTApO1xuICAgIGNhbnZhc1hPZmZzZXQgPSAwO1xuICAgIGNhbnZhc1lPZmZzZXQgPSBwYXJzZUludCgoc2NyZWVuSGVpZ2h0IC0gY2FudmFzSGVpZ2h0KSAvIDIsIDEwKTtcbiAgfSBlbHNlIHtcbiAgICBjYW52YXNXaWR0aCA9IHBhcnNlSW50KGhlaWdodE11bHQgKiB2aWRlb1Jlc1dpZHRoLCAxMCk7XG4gICAgY2FudmFzSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0O1xuICAgIGNhbnZhc1hPZmZzZXQgPSBwYXJzZUludCgoc2NyZWVuV2lkdGggLSBjYW52YXNXaWR0aCkgLyAyLCAxMCk7XG4gICAgY2FudmFzWU9mZnNldCA9IDA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogY2FudmFzSGVpZ2h0LFxuICAgIHdpZHRoOiBjYW52YXNXaWR0aCxcbiAgICB5T2Zmc2V0OiBjYW52YXNZT2Zmc2V0LFxuICAgIHhPZmZzZXQ6IGNhbnZhc1hPZmZzZXQsXG4gICAgcGFpbnRIZWlnaHQ6IHZpZGVvUmVzSGVpZ2h0LFxuICAgIHBhaW50V2lkdGg6IHZpZGVvUmVzV2lkdGhcbiAgfTtcbn1cblxuQ2FtZXJhQ2FwdHVyZVNjcmVlbkhhbmRsZXIuJGluamVjdCA9IFtcbiAgJyRsb2cnLFxuICAnQ2FtZXJhT3ZlcmxheUhhbmRsZXInXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFDYXB0dXJlU2NyZWVuSGFuZGxlcjtcbiIsIi8vIFNlcnZpY2UgcmVzb2x2aW5nIHZpZGVvIGFuZCBjYW52YXMgc2NyZWVuIHNpemVzXG5jbGFzcyBDYW1lcmFPdmVybGF5SGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICApIHtcbiAgICB0aGlzLm92ZXJsYXlYTWFyZ2luID0gMC4wNzU7XG4gICAgdGhpcy5vdmVybGF5WU1hcmdpbiA9IDAuMDc1O1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgYm94IGNvbnRhaW5lciwgcHJvZHVjZSBvdmVybGF5IHdpdGggY2VydGFpbiBkaW1lbnNpb25zXG4gICAqIGFuZCBjZXJ0YWluIG9mZnNldHMgd3J0IHRoZSBjb250YWluZXJcbiAgICovXG4gIGdldE92ZXJsYXlTcGVjaWZpY2F0aW9uc1dydENvbnRhaW5lcihcbiAgICBjb250YWluZXJIZWlnaHQsIGNvbnRhaW5lcldpZHRoLFxuICAgIG92ZXJsYXlOYXR1cmFsSGVpZ2h0LCBvdmVybGF5TmF0dXJhbFdpZHRoXG4gICkge1xuICAgIGNvbnN0IG92ZXJsYXlIZWlnaHRXaWR0aFJhdGlvID0gb3ZlcmxheU5hdHVyYWxIZWlnaHQgLyBvdmVybGF5TmF0dXJhbFdpZHRoO1xuICAgIC8vIE1heCB3aWR0aCBhbmQgaGVpZ2h0IGFyZSBjb250YWluZXIgd2lkdGgvaGVpZ2h0IHdpdGggbWFyZ2lucyBhcHBsaWVkXG4gICAgY29uc3QgbWF4V2lkdGggPSBjb250YWluZXJXaWR0aCAtIDIgKiBjb250YWluZXJXaWR0aCAqIHRoaXMub3ZlcmxheVhNYXJnaW47XG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0IC0gMiAqIGNvbnRhaW5lckhlaWdodCAqIHRoaXMub3ZlcmxheVlNYXJnaW47XG5cbiAgICBsZXQgd2lkdGg7XG4gICAgbGV0IGhlaWdodDtcbiAgICAvLyBPdmVybGF5IGRpbWVuc2lvbiBpcyBiZWluZyByZXN0cmljdGVkIGJ5IHdpZHRoXG4gICAgaWYgKG1heFdpZHRoICogb3ZlcmxheUhlaWdodFdpZHRoUmF0aW8gPj0gbWF4SGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgICB3aWR0aCA9IGhlaWdodCAvIG92ZXJsYXlIZWlnaHRXaWR0aFJhdGlvO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aWR0aCA9IG1heFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gd2lkdGggKiBvdmVybGF5SGVpZ2h0V2lkdGhSYXRpbztcbiAgICB9XG5cbiAgICBjb25zdCB4T2Zmc2V0ID0gKGNvbnRhaW5lcldpZHRoIC0gd2lkdGgpIC8gMjtcbiAgICBjb25zdCB5T2Zmc2V0ID0gKGNvbnRhaW5lckhlaWdodCAtIGhlaWdodCkgLyAyO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodCxcbiAgICAgIHdpZHRoLFxuICAgICAgeU9mZnNldCxcbiAgICAgIHhPZmZzZXRcbiAgICB9O1xuICB9XG59XG5cbkNhbWVyYU92ZXJsYXlIYW5kbGVyLiRpbmplY3QgPSBbXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFPdmVybGF5SGFuZGxlcjtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFVwbG9hZEJ1dHRvbiBmcm9tICcuL3VwbG9hZC1idXR0b24uY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5idXR0b24nLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRCdXR0b24nLCBVcGxvYWRCdXR0b24pXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdXBsb2FkLWJ1dHRvbi5odG1sJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vdXBsb2FkLWJ1dHRvbi5jb250cm9sbGVyJztcblxuY29uc3QgVXBsb2FkQnV0dG9uID0ge1xuICB0ZW1wbGF0ZSxcbiAgY29udHJvbGxlcixcbiAgYmluZGluZ3M6IHtcbiAgICBuYW1lOiAnPCcsXG4gICAgbGFiZWw6ICc8JyxcbiAgICBpc1NlY29uZGFyeTogJzwnLFxuICAgIHNtYWxsOiAnPCcsXG4gICAgYmxvY2s6ICc8JyxcbiAgICBhY2NlcHQ6ICc8JyxcbiAgICBtb2RlbDogJzwnLFxuICAgIG11bHRpcGxlOiAnPCcsXG4gICAgZGlzYWJsZWQ6ICc8JyxcbiAgICBvbkNsaWNrOiAnJicsXG4gICAgb25DYXB0dXJlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkQnV0dG9uO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxsYWJlbCBjbGFzcz1idG4gbmctY2xpY2s9JGN0cmwub25CdXR0b25DbGljaygpIG5nLWNsYXNzPVxcXCJ7ICdkaXNhYmxlZCc6ICRjdHJsLmRpc2FibGVkLFxcbiAgICAgICAgICAgICAgJ2J0bi1wcmltYXJ5JzogISRjdHJsLmlzU2Vjb25kYXJ5LFxcbiAgICAgICAgICAgICAgJ2J0bi1kZWZhdWx0JzogJGN0cmwuaXNTZWNvbmRhcnksXFxuICAgICAgICAgICAgICAnYnRuLWJsb2NrJzogJGN0cmwuYmxvY2ssXFxuICAgICAgICAgICAgICAnYnRuLXNtJzogJGN0cmwuc21hbGxcXG4gICAgICAgICAgICB9XFxcIj4gPHNwYW4gbmctaWY9JGN0cmwubGFiZWwgbmctYmluZD0kY3RybC5sYWJlbD48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5sYWJlbCBjbGFzcz1cXFwiaWNvbiBpY29uLXVwbG9hZCBtLXItMFxcXCI+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkPiA8aW5wdXQgbmctaWY9ISRjdHJsLm11bHRpcGxlIHR3LWZpbGUtaW5wdXQgdHlwZT1maWxlIGFjY2VwdD1cXFwie3sgJGN0cmwuYWNjZXB0IH19XFxcIiBjbGFzcz1cXFwidHctZHJvcHBhYmxlLWlucHV0IGhpZGRlblxcXCIgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuYW1lPVxcXCJ7eyAkY3RybC5uYW1lIH19XFxcIiBvbi11c2VyLWlucHV0PSRjdHJsLm9uQnV0dG9uQ2FwdHVyZSgpIG5nLW1vZGVsPSRjdHJsLm1vZGVsIC8+IDxpbnB1dCBuZy1pZj0kY3RybC5tdWx0aXBsZSB0dy1maWxlLWlucHV0IHR5cGU9ZmlsZSBhY2NlcHQ9XFxcInt7ICRjdHJsLmFjY2VwdCB9fVxcXCIgY2xhc3M9XFxcInR3LWRyb3BwYWJsZS1pbnB1dCBoaWRkZW5cXFwiIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmFtZT1cXFwie3sgJGN0cmwubmFtZSB9fVxcXCIgb24tdXNlci1pbnB1dD0kY3RybC5vbkJ1dHRvbkNhcHR1cmUoKSBuZy1tb2RlbD0kY3RybC5tb2RlbCBtdWx0aXBsZT1tdWx0aXBsZSAvPiA8L3NwYW4+IDwvbGFiZWw+XCI7IiwiY2xhc3MgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICB9XG5cbiAgb25CdXR0b25DbGljaygpIHtcbiAgICBpZiAodGhpcy5vbkNsaWNrKSB7XG4gICAgICB0aGlzLm9uQ2xpY2soKTtcbiAgICB9XG4gIH1cblxuICBvbkJ1dHRvbkNhcHR1cmUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF07XG4gICAgY29uc3QgdXBsb2FkSW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50dy1kcm9wcGFibGUtaW5wdXQnKTtcbiAgICBjb25zdCBmaWxlcyA9IHVwbG9hZElucHV0LmZpbGVzO1xuXG4gICAgdGhpcy5vbkNhcHR1cmUoeyBmaWxlcyB9KTtcbiAgfVxufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDYW1lcmFCdXR0b24gZnJvbSAnLi9jYW1lcmEtYnV0dG9uLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuY2FtZXJhLWJ1dHRvbicsIFtdKVxuICAuY29tcG9uZW50KCd0d0NhbWVyYUJ1dHRvbicsIENhbWVyYUJ1dHRvbilcbiAgLm5hbWU7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9jYW1lcmEtYnV0dG9uLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jYW1lcmEtYnV0dG9uLmNvbnRyb2xsZXInO1xuXG5jb25zdCBDYW1lcmFCdXR0b24gPSB7XG4gIHRlbXBsYXRlLFxuICBjb250cm9sbGVyLFxuICBiaW5kaW5nczoge1xuICAgIGxhYmVsOiAnPCcsXG4gICAgZGlzYWJsZWQ6ICc8JyxcbiAgICBvbkNsaWNrOiAnJicsXG4gICAgb25DYXB0dXJlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhQnV0dG9uO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxsYWJlbCBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBuZy1jbGljaz0kY3RybC5vbkJ1dHRvbkNsaWNrKCkgbmctY2xhc3M9XFxcInsgJ2Rpc2FibGVkJzogJGN0cmwuZGlzYWJsZWQgfVxcXCI+IDxzcGFuIG5nLWlmPSRjdHJsLmxhYmVsIG5nLWJpbmQ9JGN0cmwubGFiZWw+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwubGFiZWwgY2xhc3M9XFxcImljb24gaWNvbi11cGxvYWQgbS1yLTBcXFwiPjwvc3Bhbj4gPC9sYWJlbD4gXCI7IiwiY2xhc3MgQ29udHJvbGxlciB7XG4gIG9uQnV0dG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMub25DbGljaykge1xuICAgICAgdGhpcy5vbkNsaWNrKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJcbmZ1bmN0aW9uIEZpbGVJbnB1dERpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6IEZpbGVJbnB1dENvbnRyb2xsZXIsXG4gICAgY29udHJvbGxlckFzOiAnJGN0cmwnLFxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgc2NvcGU6IHtcbiAgICAgIG9uVXNlcklucHV0OiAnJidcbiAgICB9XG4gIH07XG59XG5cbmNsYXNzIEZpbGVJbnB1dENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcigkZWxlbWVudCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLm9uVXNlcklucHV0XG4gICAgICAgICYmIHR5cGVvZiB0aGlzLm9uVXNlcklucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMub25Vc2VySW5wdXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5GaWxlSW5wdXRDb250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVJbnB1dERpcmVjdGl2ZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IE11bHRpVXBsb2FkIGZyb20gJy4vbXVsdGktdXBsb2FkLmNvbXBvbmVudCc7XG5pbXBvcnQgRHJhZ0FuZERyb3AgZnJvbSAnLi4vLi4vZHJhZy1hbmQtZHJvcCc7XG5pbXBvcnQgUHJvY2Vzc2luZ0NhcmQgZnJvbSAnLi4vcHJvY2Vzc2luZy1jYXJkJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5tdWx0aScsIFtcbiAgICBQcm9jZXNzaW5nQ2FyZCxcbiAgICBEcmFnQW5kRHJvcFxuICBdKVxuICAuY29tcG9uZW50KCd0d011bHRpVXBsb2FkJywgTXVsdGlVcGxvYWQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9tdWx0aS11cGxvYWQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9tdWx0aS11cGxvYWQuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ0NoYW5nZTogJyYnLFxuICAgIG5hbWU6ICdAJyxcbiAgICBsYWJlbDogJ0AnLFxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG4gICAgaWNvbjogJ0AnLCAvLyBpbGx1c3RyYXRpb24gaW4gaWNvbiBzaG93biBpbiB1cGxvYWQgYm94XG5cbiAgICBidXR0b25UZXh0OiAnQCcsIC8vIEJ1dHRvbiB0ZXh0IHNob3duIGluIGRlZmF1bHQgc3RhdGVcbiAgICBhZGRNb3JlQnV0dG9uVGV4dDogJ0AnLCAvLyBCdXR0b24gdGV4dCBzaG93biB3aGVuIGF0IGxlYXN0IG9uZSBmaWxlIGlzIHVwbG9hZGluZ1xuXG4gICAgZHJvcHBpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hlbiBob3ZlcmluZyB3aXRoIGEgZmlsZVxuICAgIHByb2Nlc3NpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hpbGUgcHJvY2Vzc2luZy91cGxvYWRpbmdcbiAgICBzdWNjZXNzVGV4dDogJ0AnLCAvLyBUZXh0IGFmdGVyIHVwbG9hZCBpcyBzdWNjZXNzZnVsLCBzaG93biBxdWl0ZSBicmllZmx5IGJlZm9yZSBwcmV2aWV3XG4gICAgZmFpbHVyZVRleHQ6ICdAJyxcblxuICAgIHRvb0xhcmdlTWVzc2FnZTogJ0AnLFxuICAgIC8vIHdyb25nVHlwZU1lc3NhZ2U6ICdAJyxcblxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuXG4gICAgb25TdGFydDogJyYnLFxuICAgIG9uRmluaXNoOiAnJicsXG4gICAgb25GYWlsdXJlOiAnJicsXG5cbiAgICBhY2NlcHQ6ICdAJyxcbiAgICBodHRwT3B0aW9uczogJzwnLFxuXG4gICAgbWF4U2l6ZTogJzwnLCAvLyBUT0RPIG1vdmUgdG8gbmdNYXg/XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICAkZWxlbWVudCxcbiAgICAkc2NvcGUsXG4gICAgJGF0dHJzLFxuICAgICR0aW1lb3V0LFxuICApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy5maWxlcyA9IFtdO1xuICAgIHRoaXMubW9kZWwgPSBbXTtcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gIH1cblxuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5pY29uKSB7XG4gICAgICB0aGlzLnZpZXdJY29uID0gY2hhbmdlcy5pY29uLmN1cnJlbnRWYWx1ZSA/IGNoYW5nZXMuaWNvbi5jdXJyZW50VmFsdWUgOiAndXBsb2FkJztcbiAgICB9XG4gIH1cblxuICBvbkZpbGVDYXB0dXJlKGZpbGVzKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZmlsZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJldHJpZXZlIGZpbGUnKTtcbiAgICB9XG5cbiAgICBpZiAoZmlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25TdGFydCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25TdGFydCgpO1xuICAgIH1cblxuICAgIHRoaXMuZmlsZXMgPSBbLi4udGhpcy5maWxlcywgLi4uZmlsZXNdO1xuXG4gICAgdGhpcy4kdGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBvYmpEaXYgPSB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5wcm9jZXNzaW5nLWxpc3QnKTtcbiAgICAgIGlmIChvYmpEaXYpIHtcbiAgICAgICAgb2JqRGl2LnNjcm9sbFRvcCA9IG9iakRpdi5zY3JvbGxIZWlnaHQ7XG4gICAgICB9XG4gICAgfSwgNjAwKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc1N1Y2Nlc3MoaW5kZXgsIGZpbGUsIGRhdGFVcmwsIGlkKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5odHRwT3B0aW9ucyA/ICdpZCcgOiAnZGF0YVVybCc7XG5cbiAgICB0aGlzLmZpbGVzW2luZGV4XVtrZXldID0gdGhpcy5odHRwT3B0aW9ucyA/IGlkIDogZGF0YVVybDtcblxuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5maWxlcy5tYXAoZmlsZU9iamVjdCA9PiBmaWxlT2JqZWN0W2tleV0pLmZpbHRlcih2YWx1ZSA9PiAhIXZhbHVlKTtcblxuICAgIHRoaXMuc2V0TmdNb2RlbChtb2RlbCk7XG5cbiAgICBpZiAodGhpcy5vbkZpbmlzaCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25GaW5pc2goKTtcbiAgICB9XG4gIH1cblxuICBhcmVBbGxGaWxlc1Byb2Nlc3NlZCgpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmh0dHBPcHRpb25zID8gJ2lkJyA6ICdkYXRhVXJsJztcblxuICAgIGNvbnN0IHByb2Nlc3NpbmdGaWxlID0gdGhpcy5maWxlcy5zb21lKGZpbGUgPT4gZmlsZVtrZXldID09IG51bGwgJiYgZmlsZS5lcnJvciA9PSBudWxsKTtcblxuICAgIHJldHVybiAhcHJvY2Vzc2luZ0ZpbGU7XG4gIH1cblxuICBvblByb2Nlc3NGYWlsdXJlKGluZGV4LCBmaWxlLCBlcnJvcikge1xuICAgIHRoaXMuZmlsZXNbaW5kZXhdLmVycm9yID0gZXJyb3I7XG5cbiAgICBpZiAodGhpcy5vbkZhaWx1cmUpIHtcbiAgICAgIHRoaXMub25GYWlsdXJlKHsgZXJyb3IgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25GaW5pc2ggJiYgdGhpcy5hcmVBbGxGaWxlc1Byb2Nlc3NlZCgpKSB7XG4gICAgICB0aGlzLm9uRmluaXNoKCk7XG4gICAgfVxuICB9XG5cbiAgb25Qcm9jZXNzQ2FuY2VsKGluZGV4KSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5odHRwT3B0aW9ucyA/ICdpZCcgOiAnZGF0YVVybCc7XG5cbiAgICB0aGlzLmZpbGVzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICBjb25zdCBtb2RlbCA9IHRoaXMuZmlsZXMubWFwKGZpbGVPYmplY3QgPT4gZmlsZU9iamVjdFtrZXldKS5maWx0ZXIodmFsdWUgPT4gISF2YWx1ZSk7XG5cbiAgICB0aGlzLnNldE5nTW9kZWwobW9kZWwpO1xuICB9XG5cbiAgb25EcmFnRW50ZXIoKSB7XG4gICAgdGhpcy5pc0Ryb3BwYWJsZSA9IHRydWU7XG4gIH1cblxuICBvbkRyYWdMZWF2ZSgpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gIH1cblxuICBvbkRyb3AoZmlsZXMpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKGZpbGVzKTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc2V0TmdNb2RlbChudWxsKTtcbiAgfVxuXG4gIHNldE5nTW9kZWwodmFsdWUpIHtcbiAgICAvLyBJZiBuZ01vZGVsIG5vdCBhc3NpZ25hYmxlLCB3ZSBkb24ndCB3YW50IHRvIGVycm9yLlxuICAgIGlmICh0eXBlb2YgdGhpcy4kYXR0cnMubmdNb2RlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0ICRuZ01vZGVsID0gdGhpcy4kZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgICBpZiAoISRuZ01vZGVsLiRzZXRWaWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbkNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckYXR0cnMnLFxuICAnJHRpbWVvdXQnLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJ3ZWxsIGRyb3BwYWJsZSBwLXItMCBwLWwtMCBwLXQtMSBwLWItMCBtdWx0aS11cGxvYWRcXFwiIHR3LWRyb3A9JGN0cmwub25Ecm9wKGZpbGVzKSB0dy1kcmFnLWVudGVyPSRjdHJsLm9uRHJhZ0VudGVyKCkgdHctZHJhZy1sZWF2ZT0kY3RybC5vbkRyYWdMZWF2ZSgpIG5nLWNsYXNzPVxcXCJ7J2Ryb3BwYWJsZS1kcm9wcGluZyc6ICRjdHJsLmlzRHJvcHBhYmxlfVxcXCI+IDxkaXYgY2xhc3M9XFxcImRyb3BwYWJsZS1kcm9wcGluZy1jYXJkIGRyb3BwYWJsZS1jYXJkXFxcIj4gPHR3LXVwbG9hZC1kcm9wcGluZyBkcm9wcGluZy10ZXh0PSRjdHJsLmRyb3BwaW5nVGV4dD48L3R3LXVwbG9hZC1kcm9wcGluZz4gPC9kaXY+IDxkaXYgbmctaWY9XFxcIiRjdHJsLmZpbGVzLmxlbmd0aCA9PT0gMFxcXCIgY2xhc3M9XFxcImVtcHR5LXByb2Nlc3NpbmctbGlzdCBkcm9wcGFibGUtZGVmYXVsdC1jYXJkIHRleHQteHMtY2VudGVyIHAtdC0zXFxcIj4gPGRpdiBjbGFzcz1lbXB0eS1zY3JlZW4+IDxkaXYgY2xhc3M9XFxcImNpcmNsZSBjaXJjbGUtc20gbS1iLTMgbS10LTNcXFwiPiA8aW1nIG5nLWlmPSRjdHJsLmhlbHBJbWFnZSBuZy1zcmM9e3skY3RybC5oZWxwSW1hZ2V9fSBhbHQ9e3skY3RybC5sYWJlbH19IGNsYXNzPVxcXCJ0aHVtYm5haWwgdGV4dC14cy1jZW50ZXJcXFwiLz4gPHNwYW4gbmctaWY9ISRjdHJsLmhlbHBJbWFnZSBjbGFzcz1cXFwiaWNvbiBpY29uLXt7JGN0cmwudmlld0ljb259fSBpY29uLXh4bFxcXCI+PC9zcGFuPiA8L2Rpdj4gPGg0IG5nLWlmPSRjdHJsLmxhYmVsIGNsYXNzPW0tYi0xPnt7JGN0cmwubGFiZWx9fTwvaDQ+IDxwIG5nLWlmPSRjdHJsLnBsYWNlaG9sZGVyIGNsYXNzPVxcXCJwLWwtMyBwLXItM1xcXCI+IHt7JGN0cmwucGxhY2Vob2xkZXJ9fSA8L3A+IDwvZGl2PiA8L2Rpdj4gPGRpdiBuZy1pZj1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID4gMFxcXCIgY2xhc3M9XFxcImRyb3BwYWJsZS1kZWZhdWx0LWNhcmQgcC1sLTMgcHJvY2Vzc2luZy1saXN0XFxcIj4gPGRpdiBuZy1yZXBlYXQ9XFxcIihpbmRleCwgZmlsZSkgaW4gJGN0cmwuZmlsZXNcXFwiIGNsYXNzPXAtci0zIG5nLWNsYXNzPVxcXCJ7J2xhc3QtaXRlbSc6ICRsYXN0fVxcXCI+IDx0dy11cGxvYWQtcHJvY2Vzc2luZy1taW5pIG5hbWU9JGN0cmwubmFtZSBmaWxlPWZpbGUgb24tc3VjY2Vzcz1cXFwiJGN0cmwub25Qcm9jZXNzU3VjY2VzcyhpbmRleCwgZmlsZSwgZGF0YVVybCwgaWQsIHJlc3BvbnNlKVxcXCIgb24tZmFpbHVyZT1cXFwiJGN0cmwub25Qcm9jZXNzRmFpbHVyZShpbmRleCwgZmlsZSwgZXJyb3IpXFxcIiBvbi1jYW5jZWw9JGN0cmwub25Qcm9jZXNzQ2FuY2VsKGluZGV4KSBtYXgtc2l6ZT0kY3RybC5tYXhTaXplIGFjY2VwdD0kY3RybC5hY2NlcHQgaHR0cC1vcHRpb25zPSRjdHJsLmh0dHBPcHRpb25zIHByb2Nlc3NpbmctbWVzc2FnZT0kY3RybC5wcm9jZXNzaW5nVGV4dCBzdWNjZXNzLW1lc3NhZ2U9JGN0cmwuc3VjY2Vzc1RleHQgZXJyb3ItbWVzc2FnZT0kY3RybC5mYWlsdXJlVGV4dCB2YWxpZGF0aW9uLW1lc3NhZ2VzPSRjdHJsLnZhbGlkYXRpb25NZXNzYWdlcyB0b28tbGFyZ2UtbWVzc2FnZT0kY3RybC50b29MYXJnZU1lc3NhZ2UgY2FuY2VsLXRleHQ9JGN0cmwuY2FuY2VsVGV4dD48L3R3LXVwbG9hZC1wcm9jZXNzaW5nLW1pbmk+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1tLWEtMz4gPHR3LXVwbG9hZC1idXR0b24gbmctaWY9ISRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCBuYW1lPSRjdHJsLm5hbWUgbGFiZWw9XFxcIiRjdHJsLmZpbGVzLmxlbmd0aCA9PT0gMCA/ICRjdHJsLmJ1dHRvblRleHQgOiAkY3RybC5hZGRNb3JlQnV0dG9uVGV4dFxcXCIgaXMtc2Vjb25kYXJ5PVxcXCIkY3RybC5maWxlcy5sZW5ndGggPiAwXFxcIiBhY2NlcHQ9JGN0cmwuYWNjZXB0IG1vZGVsPSRjdHJsLmlucHV0RmlsZSBkaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG9uLWNhcHR1cmU9JGN0cmwub25GaWxlQ2FwdHVyZShmaWxlcykgYmxvY2s9dHJ1ZSBzbWFsbD10cnVlIG11bHRpcGxlPXRydWU+PC90dy11cGxvYWQtYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IFwiOyIsImZ1bmN0aW9uIHR3RHJvcCgkcGFyc2UsICRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBjb250cm9sbGVyOiAoKSA9PiB7XG5cbiAgICB9LFxuICAgIGxpbms6IChzY29wZSwgZWxlbSwgYXR0cikgPT4ge1xuICAgICAgc2NvcGUuY291bnRlciA9IDA7XG4gICAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZm4gPSAkcGFyc2UoYXR0ci50d0Ryb3ApO1xuXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgIGZuKHNjb3BlLCB7XG4gICAgICAgICAgICBmaWxlczogZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG4gICAgICB9LCBmYWxzZSk7XG5cbiAgICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG4gIH07XG59XG5cbnR3RHJvcC4kaW5qZWN0ID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlciddO1xuXG5leHBvcnQgZGVmYXVsdCB0d0Ryb3A7XG4iLCJmdW5jdGlvbiB0d0RyYWdFbnRlcigkcGFyc2UsICRyb290U2NvcGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICd0d0Ryb3AnLFxuICAgIGxpbms6IChzY29wZSwgZWxlbSwgYXR0cikgPT4ge1xuICAgICAgZWxlbVswXS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW50ZXInLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZm4gPSAkcGFyc2UoYXR0ci50d0RyYWdFbnRlcik7XG4gICAgICAgIHNjb3BlLmNvdW50ZXIrKztcblxuICAgICAgICBpZiAoc2NvcGUuY291bnRlciA+PSAxKSB7XG4gICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBmbihzY29wZSwgeyAkZXZlbnQ6IGV2ZW50IH0pO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG4gIH07XG59XG5cbnR3RHJhZ0VudGVyLiRpbmplY3QgPSBbJyRwYXJzZScsICckcm9vdFNjb3BlJ107XG5cbmV4cG9ydCBkZWZhdWx0IHR3RHJhZ0VudGVyO1xuIiwiZnVuY3Rpb24gdHdEcmFnTGVhdmUoJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAndHdEcm9wJyxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW0sIGF0dHIpID0+IHtcbiAgICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gJHBhcnNlKGF0dHIudHdEcmFnTGVhdmUpO1xuICAgICAgICBzY29wZS5jb3VudGVyLS07XG5cbiAgICAgICAgaWYgKHNjb3BlLmNvdW50ZXIgPD0gMCkge1xuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgZm4oc2NvcGUsIHsgJGV2ZW50OiBldmVudCB9KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuXG50d0RyYWdMZWF2ZS4kaW5qZWN0ID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZSddO1xuXG5leHBvcnQgZGVmYXVsdCB0d0RyYWdMZWF2ZTtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vZGF0ZS5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2RhdGUuaHRtbCc7XG5cbmNvbnN0IERhdGVDb250cm9sID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZToge1xuICAgICRuZ01vZGVsOiAnbmdNb2RlbCdcbiAgfSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgcmVxdWlyZWQ6ICdAJyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgZGlzYWJsZWQ6ICdAJyxcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgdHdMb2NhbGU6ICc8JyxcbiAgICBtaW46ICdAJyxcbiAgICBuZ01pbjogJzwnLFxuICAgIG1heDogJ0AnLFxuICAgIG5nTWF4OiAnPCcsXG4gICAgbW9kZWxUeXBlOiAnQCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUNvbnRyb2w7XG4iLCJjbGFzcyBEYXRlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCAkbG9nLCAkc2NvcGUsIFR3RGF0ZVNlcnZpY2UpIHtcbiAgICBjb25zdCAkbmdNb2RlbCA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcblxuICAgIHRoaXMuRGF0ZVNlcnZpY2UgPSBUd0RhdGVTZXJ2aWNlO1xuICAgIHRoaXMuaW5pdGlhbGlzZWRXaXRoRGF0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMubmdNb2RlbCkge1xuICAgICAgdGhpcy5hcHBseURhdGVNb2RlbElmVmFsaWRPclRocm93RXJyb3IoKTtcbiAgICAgIHRoaXMuaW5pdGlhbGlzZWRXaXRoRGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm1vZGVsVHlwZSkge1xuICAgICAgICBpZiAodGhpcy5tb2RlbFR5cGUgPT09IFNUUklOR19UWVBFIHx8IHRoaXMubW9kZWxUeXBlID09PSBPQkpFQ1RfVFlQRSkge1xuICAgICAgICAgIHRoaXMuZGF0ZU1vZGVsVHlwZSA9IHRoaXMubW9kZWxUeXBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtb2RlbFR5cGUsIHNob3VsZCBiZSAke1NUUklOR19UWVBFfSBvciAke09CSkVDVF9UWVBFfWApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRhdGVNb2RlbFR5cGUgPSBPQkpFQ1RfVFlQRTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kYXkgPSBudWxsO1xuICAgICAgdGhpcy5tb250aCA9IDA7XG4gICAgICB0aGlzLnllYXIgPSBudWxsO1xuICAgIH1cblxuICAgIHRoaXMuc2V0RGF0ZVJlcXVpcmVkKCk7XG4gICAgdGhpcy5zZXREYXRlRGlzYWJsZWQoKTtcbiAgICB0aGlzLnNldERhdGVMb2NhbGUoKTtcblxuICAgIHRoaXMuc2V0TW9udGhzKCk7XG5cbiAgICB0aGlzLmFkZFZhbGlkYXRvcnMoJG5nTW9kZWwpO1xuICAgIHRoaXMuYWRkV2F0Y2hlcnMoJHNjb3BlLCAkbmdNb2RlbCk7XG4gICAgYWRkRm9jdXNIYW5kbGVycygkZWxlbWVudCk7XG4gICAgYWRkQmx1ckhhbmRsZXJzKCRlbGVtZW50LCAkbmdNb2RlbCk7XG4gIH1cblxuXG4gIGFwcGx5RGF0ZU1vZGVsSWZWYWxpZE9yVGhyb3dFcnJvcigpIHtcbiAgICBpZiAodmFsaWREYXRlKHRoaXMubmdNb2RlbCkpIHtcbiAgICAgIHRoaXMuZGF0ZU1vZGVsVHlwZSA9IHR5cGVvZiB0aGlzLm5nTW9kZWwgPT09ICdzdHJpbmcnID8gU1RSSU5HX1RZUEUgOiBPQkpFQ1RfVFlQRTtcblxuICAgICAgdGhpcy5leHBsb2RlRGF0ZU1vZGVsKHRoaXMubmdNb2RlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGF0ZSBtb2RlbCBwYXNzZWQgc2hvdWxkIGVpdGhlciBiZSBpbnN0YW5jZSBvZiAnXG4gICAgICAgICsgJ0RhdGUgb3IgdmFsaWQgSVNPODYwMSBzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICBzZXRNb250aHMoKSB7XG4gICAgdGhpcy5kYXRlTW9udGhzID0gdGhpcy5nZXRNb250aHNCYXNlZE9uSW50bFN1cHBvcnRGb3JMb2NhbGUoKTtcbiAgfVxuXG4gIHNldERhdGVSZXF1aXJlZCgpIHtcbiAgICB0aGlzLmRhdGVSZXF1aXJlZCA9IHRoaXMubmdSZXF1aXJlZCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IHRoaXMubmdSZXF1aXJlZFxuICAgICAgOiB0aGlzLnJlcXVpcmVkICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBzZXREYXRlRGlzYWJsZWQoKSB7XG4gICAgdGhpcy5kYXRlRGlzYWJsZWQgPSB0aGlzLm5nRGlzYWJsZWQgIT09IHVuZGVmaW5lZFxuICAgICAgPyB0aGlzLm5nRGlzYWJsZWRcbiAgICAgIDogdGhpcy5kaXNhYmxlZCAhPT0gdW5kZWZpbmVkO1xuICB9XG5cbiAgc2V0RGF0ZUxvY2FsZSgpIHtcbiAgICBpZiAoIXRoaXMubG9jYWxlKSB7XG4gICAgICB0aGlzLmxvY2FsZSA9IERFRkFVTFRfTE9DQUxFX0VOO1xuICAgIH1cbiAgICB0aGlzLm1vbnRoQmVmb3JlRGF5ID0gdGhpcy5EYXRlU2VydmljZS5pc01vbnRoQmVmb3JlRGF5KHRoaXMubG9jYWxlKTtcbiAgfVxuXG4gIGV4cGxvZGVEYXRlTW9kZWwoZGF0ZSkge1xuICAgIGNvbnN0IGRhdGVPYmogPSB0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZShkYXRlKSA6IGRhdGU7XG5cbiAgICB0aGlzLmRheSA9IGRhdGVPYmouZ2V0VVRDRGF0ZSgpO1xuICAgIHRoaXMubW9udGggPSBkYXRlT2JqLmdldFVUQ01vbnRoKCk7XG4gICAgdGhpcy55ZWFyID0gZGF0ZU9iai5nZXRVVENGdWxsWWVhcigpO1xuICB9XG5cbiAgYWRkVmFsaWRhdG9ycygkbmdNb2RlbCkge1xuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1pbiA9ICh2YWx1ZSkgPT4ge1xuICAgICAgY29uc3QgbGltaXQgPSBwcmVwRGF0ZUxpbWl0Rm9yQ29tcGFyaXNvbih0aGlzLm5nTWluLCB0aGlzLm1pbik7XG4gICAgICBjb25zdCBkYXRlVmFsdWUgPSBwcmVwRGF0ZVZhbHVlRm9yQ29tcGFyaXNvbih2YWx1ZSk7XG5cbiAgICAgIHJldHVybiAhbGltaXQgfHwgIWRhdGVWYWx1ZSB8fCBkYXRlVmFsdWUgPj0gbGltaXQ7XG4gICAgfTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1heCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgY29uc3QgbGltaXQgPSBwcmVwRGF0ZUxpbWl0Rm9yQ29tcGFyaXNvbih0aGlzLm5nTWF4LCB0aGlzLm1heCk7XG4gICAgICBjb25zdCBkYXRlVmFsdWUgPSBwcmVwRGF0ZVZhbHVlRm9yQ29tcGFyaXNvbih2YWx1ZSk7XG5cbiAgICAgIHJldHVybiAhbGltaXQgfHwgIWRhdGVWYWx1ZSB8fCBkYXRlVmFsdWUgPD0gbGltaXQ7XG4gICAgfTtcbiAgfVxuXG4gIGFkZFdhdGNoZXJzKCRzY29wZSwgJG5nTW9kZWwpIHtcbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5kYXknLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlICYmIHRoaXMuaW5pdGlhbGlzZWRXaXRoRGF0ZSkge1xuICAgICAgICAkbmdNb2RlbC4kc2V0RGlydHkoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm1vbnRoJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLmFkanVzdExhc3REYXkoKTtcbiAgICAgICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTsgLy8gSW5wdXQgd2F0Y2hlciBkb2Vzbid0IHdvcmsgZm9yIG1vbnRoXG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUpIHtcbiAgICAgICAgICAkbmdNb2RlbC4kc2V0RGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwueWVhcicsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgJiYgdGhpcy5pbml0aWFsaXNlZFdpdGhEYXRlKSB7XG4gICAgICAgICRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsaWREYXRlKHRoaXMubmdNb2RlbCkpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICAgIHRoaXMuZXhwbG9kZURhdGVNb2RlbCh0aGlzLm5nTW9kZWwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdSZXF1aXJlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXREYXRlUmVxdWlyZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nRGlzYWJsZWQnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0RGF0ZURpc2FibGVkKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5sb2NhbGUnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0RGF0ZUxvY2FsZSgpO1xuICAgICAgICB0aGlzLnNldE1vbnRocygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0TW9udGhzQmFzZWRPbkludGxTdXBwb3J0Rm9yTG9jYWxlKCkge1xuICAgIGNvbnN0IG1vbnRoTmFtZXMgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldE1vbnRoTmFtZXNGb3JMb2NhbGUodGhpcy5sb2NhbGUpO1xuXG4gICAgcmV0dXJuIGV4dGVuZE1vbnRoc1dpdGhJZHMobW9udGhOYW1lcyk7XG4gIH1cblxuICBjb21iaW5lRGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5EYXRlU2VydmljZS5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgTnVtYmVyKHRoaXMueWVhciksXG4gICAgICBOdW1iZXIodGhpcy5tb250aCksXG4gICAgICBOdW1iZXIodGhpcy5kYXkpXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZURhdGVNb2RlbEFuZFZhbGlkYXRpb25DbGFzc2VzKCkge1xuICAgIHRoaXMuYWRqdXN0TGFzdERheSgpO1xuXG4gICAgaWYgKCFpc0V4cGxvZGVkRGF0ZVBhdHRlcm5Db3JyZWN0KHRoaXMueWVhciwgdGhpcy5tb250aCwgdGhpcy5kYXkpKSB7XG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUobnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGF0ZU9iaiA9IHRoaXMuY29tYmluZURhdGUoKTtcblxuICAgIGlmICh0aGlzLmRhdGVNb2RlbFR5cGUgPT09IFNUUklOR19UWVBFKSB7XG4gICAgICBjb25zdCBpc29TdHJpbmcgPSBkYXRlT2JqLnRvSVNPU3RyaW5nKCk7XG4gICAgICBjb25zdCBkYXRlU3RyaW5nID0gaXNvU3RyaW5nLnN1YnN0cmluZygwLCBpc29TdHJpbmcuaW5kZXhPZignVCcpKTtcblxuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGRhdGVTdHJpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUoZGF0ZU9iaik7XG4gICAgfVxuICB9XG5cbiAgYWRqdXN0TGFzdERheSgpIHtcbiAgICBjb25zdCBkYXkgPSBOdW1iZXIodGhpcy5kYXkpO1xuICAgIGNvbnN0IG1vbnRoID0gTnVtYmVyKHRoaXMubW9udGgpO1xuICAgIGNvbnN0IHllYXIgPSBOdW1iZXIodGhpcy55ZWFyKTtcblxuICAgIGNvbnN0IGxhc3RVVENEYXlGb3JNb250aEFuZFllYXIgPSB0aGlzLkRhdGVTZXJ2aWNlLmdldExhc3REYXlPZk1vbnRoKHllYXIsIG1vbnRoKTtcblxuICAgIGlmIChkYXkgPiBsYXN0VVRDRGF5Rm9yTW9udGhBbmRZZWFyKSB7XG4gICAgICAvLyBVc2luZyBzZXRWaWV3VmFsdWUgZG9lcyBub3QgdXBkYXRlIERPTSwgb25seSBtb2RlbC5cbiAgICAgIHRoaXMuZGF5ID0gcGFyc2VJbnQobGFzdFVUQ0RheUZvck1vbnRoQW5kWWVhciwgMTApO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBERUZBVUxUX0xPQ0FMRV9FTiA9ICdlbic7XG5jb25zdCBTVFJJTkdfVFlQRSA9ICdzdHJpbmcnO1xuY29uc3QgT0JKRUNUX1RZUEUgPSAnb2JqZWN0JztcblxuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtZXJpY1N0cmluZyh2YWx1ZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICFpc05hTihOdW1iZXIodmFsdWUpKTtcbn1cblxuZnVuY3Rpb24gaXNFeHBsb2RlZERhdGVQYXR0ZXJuQ29ycmVjdCh5ZWFyLCBtb250aCwgZGF5KSB7XG4gIHJldHVybiBpc051bWJlcih5ZWFyKVxuICAgICYmIGlzTnVtYmVyKGRheSlcbiAgICAmJiAoaXNOdW1iZXIobW9udGgpIHx8IGlzTnVtZXJpY1N0cmluZyhtb250aCkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZERhdGUoZGF0ZSkge1xuICByZXR1cm4gdmFsaWREYXRlT2JqZWN0KGRhdGUpIHx8IHZhbGlkRGF0ZVN0cmluZyhkYXRlKTtcbn1cblxuZnVuY3Rpb24gdmFsaWREYXRlT2JqZWN0KGRhdGVPYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRlT2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG4gICAgJiYgIWlzTmFOKGRhdGVPYmouZ2V0VGltZSgpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbn1cblxuZnVuY3Rpb24gdmFsaWREYXRlU3RyaW5nKGRhdGVTdHJpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBkYXRlU3RyaW5nID09PSAnc3RyaW5nJyAmJiB2YWxpZERhdGVPYmplY3QobmV3IERhdGUoZGF0ZVN0cmluZykpO1xufVxuXG5mdW5jdGlvbiBwcmVwRGF0ZUxpbWl0Rm9yQ29tcGFyaXNvbihuZ0xpbWl0LCBhdHRyTGltaXQpIHtcbiAgbGV0IGxpbWl0ID0gbmdMaW1pdCB8fCBhdHRyTGltaXQ7XG5cbiAgaWYgKCFsaW1pdCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBsaW1pdCA9IHR5cGVvZiBsaW1pdCA9PT0gJ3N0cmluZycgPyBuZXcgRGF0ZShsaW1pdCkgOiBsaW1pdDtcbiAgaWYgKCF2YWxpZERhdGVPYmplY3QobGltaXQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBsaW1pdDtcbn1cblxuZnVuY3Rpb24gcHJlcERhdGVWYWx1ZUZvckNvbXBhcmlzb24oZGF0ZVZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgZGF0ZVZhbHVlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKGRhdGVWYWx1ZSkgOiBkYXRlVmFsdWU7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZE1vbnRoc1dpdGhJZHMobW9udGhOYW1lcykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyb3ctYm9keS1zdHlsZVxuICByZXR1cm4gbW9udGhOYW1lcy5tYXAoKG1vbnRoTmFtZSwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGluZGV4LFxuICAgICAgbGFiZWw6IG1vbnRoTmFtZVxuICAgIH07XG4gIH0pO1xufVxuXG4vLyBUT0RPIGJlaGF2aW91ciBvZiBmb2N1cy9ibHVyIGNvdWxkIGJlIGltcHJvdmVkIHRvIHByZXZlbnQgbXVsdGlwbGUgZmlyZXNcbmZ1bmN0aW9uIGFkZEZvY3VzSGFuZGxlcnMoJGVsZW1lbnQpIHtcbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBjb25zdCBkYXlJbnB1dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1kYXldJyk7XG4gIGNvbnN0IHllYXJJbnB1dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT15ZWFyXScpO1xuXG4gIGRheUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9KTtcblxuICB5ZWFySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRCbHVySGFuZGxlcnMoJGVsZW1lbnQsICRuZ01vZGVsKSB7XG4gIGxldCBkYXlUb3VjaGVkO1xuICBsZXQgeWVhclRvdWNoZWQ7XG5cbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBjb25zdCBkYXlJbnB1dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT1kYXldJyk7XG4gIGNvbnN0IHllYXJJbnB1dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXRbbmFtZT15ZWFyXScpO1xuXG4gIGRheUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgZGF5VG91Y2hlZCA9IHRydWU7XG4gICAgaWYgKGRheVRvdWNoZWQgJiYgeWVhclRvdWNoZWQpIHtcbiAgICAgICRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICAgIH1cbiAgfSk7XG5cbiAgeWVhcklucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgeWVhclRvdWNoZWQgPSB0cnVlO1xuICAgICRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG4gICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgfSk7XG59XG5cbkRhdGVDb250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckZWxlbWVudCcsXG4gICckbG9nJyxcbiAgJyRzY29wZScsXG4gICdUd0RhdGVTZXJ2aWNlJ1xuXTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUNvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1yb3c+IDxkaXYgY2xhc3M9XFxcImNvbC1zbS01IHR3LWRhdGUtbW9udGgtY29sdW1uXFxcIiBuZy1pZj0kY3RybC5tb250aEJlZm9yZURheT4gPGxhYmVsIGNsYXNzPXNyLW9ubHk+TW9udGg8L2xhYmVsPiA8dHctc2VsZWN0IG5hbWU9bW9udGggY2xhc3M9dHctZGF0ZS1tb250aCBuZy1tb2RlbD0kY3RybC5tb250aCBuZy1jaGFuZ2U9JGN0cmwudXBkYXRlRGF0ZU1vZGVsQW5kVmFsaWRhdGlvbkNsYXNzZXMoKSBuZy1yZXF1aXJlZD0kY3RybC5kYXRlUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwuZGF0ZURpc2FibGVkIG9wdGlvbnM9JGN0cmwuZGF0ZU1vbnRocz4gPC90dy1zZWxlY3Q+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tMyB0dy1kYXRlLWRheS1jb2x1bW5cXFwiPiA8bGFiZWwgY2xhc3M9c3Itb25seT5EYXk8L2xhYmVsPiA8aW5wdXQgdHlwZT1udW1iZXIgbmFtZT1kYXkgY2xhc3M9XFxcImZvcm0tY29udHJvbCB0dy1kYXRlLWRheVxcXCIgbmctbW9kZWw9JGN0cmwuZGF5IG5nLWNoYW5nZT0kY3RybC51cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIHBsYWNlaG9sZGVyPUREIG1pbj0xIG5nLW1pbj0xIG5nLWRpc2FibGVkPSRjdHJsLmRhdGVEaXNhYmxlZCBuZy1yZXF1aXJlZD0kY3RybC5kYXRlUmVxdWlyZWQgdHctZm9jdXNhYmxlLz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbC1zbS01IHR3LWRhdGUtbW9udGgtY29sdW1uXFxcIiBuZy1pZj0hJGN0cmwubW9udGhCZWZvcmVEYXk+IDxsYWJlbCBjbGFzcz1zci1vbmx5Pk1vbnRoPC9sYWJlbD4gPHR3LXNlbGVjdCBuYW1lPW1vbnRoIGNsYXNzPXR3LWRhdGUtbW9udGggbmctbW9kZWw9JGN0cmwubW9udGggbmctY2hhbmdlPSRjdHJsLnVwZGF0ZURhdGVNb2RlbEFuZFZhbGlkYXRpb25DbGFzc2VzKCkgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLmRhdGVEaXNhYmxlZCBvcHRpb25zPSRjdHJsLmRhdGVNb250aHM+IDwvdHctc2VsZWN0PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLXNtLTQgdHctZGF0ZS15ZWFyLWNvbHVtblxcXCI+IDxsYWJlbCBjbGFzcz1zci1vbmx5PlllYXI8L2xhYmVsPiA8aW5wdXQgdHlwZT1udW1iZXIgbmFtZT15ZWFyIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdHctZGF0ZS15ZWFyXFxcIiBwbGFjZWhvbGRlcj1ZWVlZIG5nLW1vZGVsPSRjdHJsLnllYXIgbmctY2hhbmdlPSRjdHJsLnVwZGF0ZURhdGVNb2RlbEFuZFZhbGlkYXRpb25DbGFzc2VzKCkgbmctbWluPSRjdHJsLm1pbi5nZXRGdWxsWWVhcigpIG5nLW1heD0kY3RybC5tYXguZ2V0RnVsbFllYXIoKSBtYXhsZW5ndGg9NCBuZy1tYXhsZW5ndGg9NCBuZy1kaXNhYmxlZD0kY3RybC5kYXRlRGlzYWJsZWQgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIHR3LWZvY3VzYWJsZS8+IDwvZGl2PiA8L2Rpdj4gXCI7IiwiXG5mdW5jdGlvbiBEYXRlU2VydmljZSgpIHtcbiAgdGhpcy5nZXRMb2NhbGVEYXRlID0gKGRhdGUpID0+IHtcbiAgICBpZiAoIWRhdGUpIHsgZGF0ZSA9IG5ldyBEYXRlKCk7IH1cbiAgICByZXR1cm4gZGF0ZS5nZXREYXRlKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRMb2NhbGVNb250aCA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZUZ1bGxZZWFyID0gKGRhdGUpID0+IHtcbiAgICBpZiAoIWRhdGUpIHsgZGF0ZSA9IG5ldyBEYXRlKCk7IH1cbiAgICByZXR1cm4gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB9O1xuXG4gIC8vIGdldCBVVEMgZGF0ZSBmb3IgdXNlcnMgY3VycmVudCBkYXlcbiAgdGhpcy5nZXRMb2NhbGVUb2RheSA9ICgpID0+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIHJldHVybiB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMoXG4gICAgICB0aGlzLmdldExvY2FsZUZ1bGxZZWFyKG5vdyksXG4gICAgICB0aGlzLmdldExvY2FsZU1vbnRoKG5vdyksXG4gICAgICB0aGlzLmdldExvY2FsZURhdGUobm93KVxuICAgICk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENEYXRlID0gKGRhdGUpID0+IHtcbiAgICBpZiAoIWRhdGUpIHsgZGF0ZSA9IG5ldyBEYXRlKCk7IH1cbiAgICByZXR1cm4gZGF0ZS5nZXRVVENEYXRlKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENNb250aCA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ0Z1bGxZZWFyID0gKGRhdGUpID0+IHtcbiAgICBpZiAoIWRhdGUpIHsgZGF0ZSA9IG5ldyBEYXRlKCk7IH1cbiAgICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDVG9kYXkgPSAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgdGhpcy5nZXRVVENGdWxsWWVhcihub3cpLFxuICAgICAgdGhpcy5nZXRVVENNb250aChub3cpLFxuICAgICAgdGhpcy5nZXRVVENEYXRlKG5vdylcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0TGFzdERheU9mTW9udGggPSAoeWVhciwgbW9udGgpID0+IHtcbiAgICBjb25zdCBsYXN0RGF5ID0gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKHllYXIsIG1vbnRoICsgMSwgMCk7XG4gICAgcmV0dXJuIGxhc3REYXkuZ2V0VVRDRGF0ZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyA9ICh5ZWFyLCBtb250aCwgZGF5LCBob3VycywgbWludXRlcywgc2Vjb25kcykgPT4ge1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGgsIGRheSk7XG4gICAgZGF0ZS5zZXRVVENIb3Vycyhob3VycyB8fCAwKTtcbiAgICBkYXRlLnNldFVUQ01pbnV0ZXMobWludXRlcyB8fCAwKTtcbiAgICBkYXRlLnNldFVUQ1NlY29uZHMoc2Vjb25kcyB8fCAwKTtcbiAgICBkYXRlLnNldFVUQ01pbGxpc2Vjb25kcygwKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZURhdGVGcm9tUGFydHMgPSAoeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpID0+IHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXkpO1xuICAgIGRhdGUuc2V0SG91cnMoaG91cnMgfHwgMCk7XG4gICAgZGF0ZS5zZXRNaW51dGVzKG1pbnV0ZXMgfHwgMCk7XG4gICAgZGF0ZS5zZXRTZWNvbmRzKHNlY29uZHMgfHwgMCk7XG4gICAgZGF0ZS5zZXRNaWxsaXNlY29uZHMoMCk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH07XG5cbiAgdGhpcy5nZXREYXRlUGFydHNGcm9tSXNvID0gKGlzb0RhdGUpID0+IHtcbiAgICBsZXQgaG91cnNPZmZzZXQgPSAwO1xuICAgIGxldCBtaW51dGVzT2Zmc2V0ID0gMDtcblxuICAgIGNvbnN0IHllYXIgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigwLCA0KSwgMTApO1xuICAgIGNvbnN0IG1vbnRoID0gcGFyc2VJbnQoaXNvRGF0ZS5zdWJzdHIoNSwgMiksIDEwKSAtIDE7XG4gICAgY29uc3QgZGF5ID0gcGFyc2VJbnQoaXNvRGF0ZS5zdWJzdHIoOCwgMiksIDEwKTtcbiAgICBjb25zdCBob3VycyA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDExLCAyKSwgMTApIHx8IDA7XG4gICAgY29uc3QgbWludXRlcyA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDE0LCAyKSwgMTApIHx8IDA7XG4gICAgY29uc3Qgc2Vjb25kcyA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDE3LCAyKSwgMTApIHx8IDA7XG5cbiAgICAvLyBJdCdzIHBvc3NpYmxlIGZvciB0aGUgZGF0ZSB0byBtYXRjaCB0aGUgb2Zmc2V0IHJlZ2V4XG4gICAgY29uc3Qgc3RyaW5nQWZ0ZXJEYXRlID0gaXNvRGF0ZS5zdWJzdHJpbmcoMTApO1xuICAgIGNvbnN0IG9mZnNldFJlZ2V4ID0gJ1srLV17MX1bMC05XXsyfSg6WzAtOV17Mn0pPyQnO1xuICAgIGNvbnN0IG9mZnNldCA9IHN0cmluZ0FmdGVyRGF0ZS5tYXRjaChvZmZzZXRSZWdleCk7XG5cbiAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAvLyBUT0RPIGlmIHRoZXJlIGFyZSBtaWxsaXNlY29uZHMsIG5lZWQgdG8gYWRqdXN0IHRoaXNcbiAgICAgIGhvdXJzT2Zmc2V0ID0gcGFyc2VJbnQob2Zmc2V0WzBdLnN1YnN0cigxLCAyKSwgMTApIHx8IDA7XG4gICAgICBtaW51dGVzT2Zmc2V0ID0gcGFyc2VJbnQob2Zmc2V0WzBdLnN1YnN0cig0LCAyKSwgMTApIHx8IDA7XG5cbiAgICAgIGlmIChvZmZzZXRbMF0uc3Vic3RyKDAsIDEpID09PSAnLScpIHtcbiAgICAgICAgaG91cnNPZmZzZXQgKj0gLTE7XG4gICAgICAgIG1pbnV0ZXNPZmZzZXQgKj0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFt5ZWFyLCBtb250aCwgZGF5LCBob3VycywgbWludXRlcywgc2Vjb25kcywgaG91cnNPZmZzZXQsIG1pbnV0ZXNPZmZzZXRdO1xuICB9O1xuXG4gIHRoaXMuaXNJc29TdHJpbmdWYWxpZCA9IChpc29EYXRlKSA9PiB7XG4gICAgY29uc3QgZGF0ZVNlY3Rpb24gPSAnWzAtOV17NH0tWzAtOV17Mn0tWzAtOV17Mn0nO1xuICAgIGNvbnN0IHRpbWVTZWN0aW9uID0gJ1RbMC05XXsyfTpbMC05XXsyfTpbMC05XXsyfSc7XG4gICAgY29uc3QgbWlsbGlzZWNvbmRTZWN0aW9uID0gJyguWzAtOV17M30pPyc7XG4gICAgY29uc3Qgem9uZVNlY3Rpb24gPSAnKFp8WyssLV1bMC05XXsyfSg6WzAtOV17Mn0pPyknO1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgXiR7ZGF0ZVNlY3Rpb259KCR7dGltZVNlY3Rpb259JHttaWxsaXNlY29uZFNlY3Rpb259JHt6b25lU2VjdGlvbn0pPyRgKTtcbiAgICByZXR1cm4gcmVnZXgudGVzdChpc29EYXRlKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ0RhdGVGcm9tSXNvID0gKGlzb0RhdGUpID0+IHtcbiAgICBpZiAoIXRoaXMuaXNJc29TdHJpbmdWYWxpZChpc29EYXRlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgW1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZGF5LFxuICAgICAgaG91cnMsXG4gICAgICBtaW51dGVzLFxuICAgICAgc2Vjb25kcyxcbiAgICAgIGhvdXJzT2Zmc2V0LFxuICAgICAgbWludXRlc09mZnNldFxuICAgIF0gPSB0aGlzLmdldERhdGVQYXJ0c0Zyb21Jc28oaXNvRGF0ZSk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgeWVhciwgbW9udGgsIGRheSxcbiAgICAgIGhvdXJzICsgaG91cnNPZmZzZXQsIG1pbnV0ZXMgKyBtaW51dGVzT2Zmc2V0LCBzZWNvbmRzXG4gICAgKTtcbiAgfTtcblxuXG4gIC8vIFN1bmRheSBpcyBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgaW4gSlNcbiAgdGhpcy5nZXREYXlOYW1lc0ZvckxvY2FsZSA9IChsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGNvbnN0IGRheXMgPSBbXTtcbiAgICBjb25zdCB2YWxpZEZvcm1hdCA9IGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpO1xuICAgIGZvciAobGV0IGRheSA9IDA7IGRheSA8IDc7IGRheSsrKSB7XG4gICAgICBkYXlzLnB1c2godGhpcy5nZXREYXlOYW1lRm9yTG9jYWxlKGRheSwgbG9jYWxlLCB2YWxpZEZvcm1hdCkpO1xuICAgIH1cbiAgICByZXR1cm4gZGF5cztcbiAgfTtcblxuICB0aGlzLmdldERheU5hbWVGb3JMb2NhbGUgPSAoZGF5T2ZXZWVrLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHREYXlOYW1lID0gZ2V0RGVmYXVsdERheU5hbWUoZGF5T2ZXZWVrLCBsb2NhbGUsIGZvcm1hdCk7XG4gICAgaWYgKGRlZmF1bHREYXlOYW1lKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdERheU5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRMb2NhbGUgPSBnZXRWYWxpZExvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IHZhbGlkRm9ybWF0ID0gZ2V0VmFsaWREYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgICBjb25zdCBkYXRlID0gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKDIwMDYsIDAsIGRheU9mV2VlayArIDEpOyAvLyAyMDA2IHN0YXJ0ZWQgd2l0aCBhIFN1bmRheVxuXG4gICAgY29uc3QgbG9jYWxEYXRlTmFtZSA9IGdldExvY2FsaXNlZERhdGVOYW1lKGRhdGUsIHZhbGlkTG9jYWxlLCB7IHdlZWtkYXk6ICdsb25nJyB9KTtcblxuICAgIHJldHVybiBsb2NhbERhdGVOYW1lIHx8IGdldERlZmF1bHREYXlOYW1lKGRheU9mV2VlaywgJ2VuLUdCJywgdmFsaWRGb3JtYXQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHREYXlOYW1lKGRheU9mV2VlaywgbG9jYWxlLCBmb3JtYXQpIHtcbiAgICBsZXQgZGVmYXVsdERheU5hbWU7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcblxuICAgIGlmIChERUZBVUxUX0RBWV9OQU1FU19CWV9MQU5HVUFHRVtsYW5ndWFnZV0pIHtcbiAgICAgIGRlZmF1bHREYXlOYW1lID0gREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0VbbGFuZ3VhZ2VdW2RheU9mV2Vla107XG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHREYXlOYW1lKSB7XG4gICAgICBpZiAoZm9ybWF0ID09PSAnc2hvcnQnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF5TmFtZS5zdWJzdHIoMCwgMyk7XG4gICAgICB9XG4gICAgICBpZiAoZm9ybWF0ID09PSAnbmFycm93Jykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERheU5hbWUuc3Vic3RyKDAsIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmF1bHREYXlOYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdGhpcy5nZXRNb250aE5hbWVzRm9yTG9jYWxlID0gKGxvY2FsZSwgZm9ybWF0KSA9PiB7XG4gICAgY29uc3QgbW9udGhzID0gW107XG4gICAgY29uc3QgdmFsaWRGb3JtYXQgPSBnZXRWYWxpZERhdGVGb3JtYXQoZm9ybWF0KTtcblxuICAgIGZvciAobGV0IG1vbnRoID0gMDsgbW9udGggPCAxMjsgbW9udGgrKykge1xuICAgICAgbW9udGhzLnB1c2godGhpcy5nZXRNb250aE5hbWVGb3JMb2NhbGUobW9udGgsIGxvY2FsZSwgdmFsaWRGb3JtYXQpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9udGhzO1xuICB9O1xuXG4gIHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlID0gKG1vbnRoLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRNb250aE5hbWUgPSBnZXREZWZhdWx0TW9udGhOYW1lKG1vbnRoLCBsb2NhbGUsIGZvcm1hdCk7XG5cbiAgICBpZiAoZGVmYXVsdE1vbnRoTmFtZSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRNb250aE5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRMb2NhbGUgPSBnZXRWYWxpZExvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IHZhbGlkRm9ybWF0ID0gZ2V0VmFsaWREYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgICAvLyBEYXkgaW4gbWlkZGxlIG9mIG1vbnRoIGF2b2lkcyB0aW1lem9uZSBpc3N1ZXNcbiAgICBjb25zdCBkYXRlID0gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKDIwMDAsIG1vbnRoLCAxNSk7XG4gICAgaWYgKGZvcm1hdCA9PT0gJ3Nob3J0Jykge1xuICAgICAgbW9udGggPSBnZXRMb2NhbGlzZWREYXRlTmFtZShkYXRlLCB2YWxpZExvY2FsZSwgeyBtb250aDogJ2xvbmcnIH0pO1xuICAgICAgcmV0dXJuIChtb250aC5sZW5ndGggPiA0KSA/IG1vbnRoLnNsaWNlKDAsIDMpIDogbW9udGg7XG4gICAgfVxuICAgIGNvbnN0IGxvY2FsTW9udGhOYW1lID0gZ2V0TG9jYWxpc2VkRGF0ZU5hbWUoZGF0ZSwgdmFsaWRMb2NhbGUsIHsgbW9udGg6ICdsb25nJyB9KTtcblxuICAgIHJldHVybiBsb2NhbE1vbnRoTmFtZSB8fCBnZXREZWZhdWx0TW9udGhOYW1lKG1vbnRoLCAnZW4tR0InLCB2YWxpZEZvcm1hdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdE1vbnRoTmFtZShtb250aCwgbG9jYWxlLCBmb3JtYXQpIHtcbiAgICBjb25zdCBsYW5ndWFnZSA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuXG4gICAgaWYgKGxhbmd1YWdlXG4gICAgICAmJiBERUZBVUxUX01PTlRIX05BTUVTX0JZX0xBTkdVQUdFW2xhbmd1YWdlXVxuICAgICAgJiYgKGZvcm1hdCAhPT0gJ3Nob3J0JyB8fCBsYW5ndWFnZSA9PT0gJ2phJykpIHtcbiAgICAgIHJldHVybiBERUZBVUxUX01PTlRIX05BTUVTX0JZX0xBTkdVQUdFW2xhbmd1YWdlXVttb250aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuXG4gIHRoaXMuZ2V0V2Vla2RheSA9ICh5ZWFyLCBtb250aCwgZGF5KSA9PiB7XG4gICAgY29uc3QgdXRjRGF0ZSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyh5ZWFyLCBtb250aCwgZGF5KTtcbiAgICByZXR1cm4gdXRjRGF0ZS5nZXRVVENEYXkoKTtcbiAgfTtcblxuICB0aGlzLmlzTW9udGhCZWZvcmVEYXkgPSAobG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIHJldHVybiAoKGxhbmcgPT09ICdqYScpIHx8IChsb2NhbGUgJiYgbG9jYWxlLmluZGV4T2YoJ1VTJywgbG9jYWxlLmxlbmd0aCAtIDIpICE9PSAtMSkpO1xuICB9O1xuXG4gIHRoaXMuaXNZZWFyQmVmb3JlTW9udGggPSAobG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIHJldHVybiAobGFuZyA9PT0gJ2phJyk7XG4gIH07XG5cbiAgdGhpcy5hZGRZZWFycyA9IChkYXRlLCB5ZWFycykgPT4gdGhpcy5hZGRUb0RhdGUoZGF0ZSwgeWVhcnMsIDAsIDApO1xuICB0aGlzLmFkZE1vbnRocyA9IChkYXRlLCBtb250aHMpID0+IHRoaXMuYWRkVG9EYXRlKGRhdGUsIDAsIG1vbnRocywgMCk7XG4gIHRoaXMuYWRkRGF5cyA9IChkYXRlLCBkYXlzKSA9PiB0aGlzLmFkZFRvRGF0ZShkYXRlLCAwLCAwLCBkYXlzKTtcblxuICB0aGlzLmFkZFRvRGF0ZSA9IChkYXRlLCB5ZWFycywgbW9udGhzLCBkYXlzKSA9PiB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMoXG4gICAgZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgeWVhcnMsXG4gICAgZGF0ZS5nZXRVVENNb250aCgpICsgbW9udGhzLFxuICAgIGRhdGUuZ2V0VVRDRGF0ZSgpICsgZGF5c1xuICApO1xuXG4gIHRoaXMuZ2V0TG9jYWxlVGltZVN0cmluZyA9IChkYXRlLCBsb2NhbGUpID0+IHRoaXMuZ2V0VGltZVN0cmluZyhcbiAgICBkYXRlLmdldEhvdXJzKCksXG4gICAgZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgZGF0ZS5nZXRTZWNvbmRzKCksXG4gICAgbG9jYWxlXG4gICk7XG5cbiAgdGhpcy5nZXRUaW1lU3RyaW5nID0gKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBsb2NhbGUpID0+IHtcbiAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG5cbiAgICBpZiAoaG91cnMgPCAxMCkge1xuICAgICAgaG91cnMgPSBgMCR7aG91cnN9YDtcbiAgICB9XG4gICAgaWYgKG1pbnV0ZXMgPCAxMCkge1xuICAgICAgbWludXRlcyA9IGAwJHttaW51dGVzfWA7XG4gICAgfVxuXG4gICAgaWYgKGxhbmcgPT09ICdlbicpIHtcbiAgICAgIGNvbnN0IGFtcG0gPSBob3VycyA+PSAxMiA/ICdwbScgOiAnYW0nO1xuICAgICAgaG91cnMgJT0gMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgICAgaG91cnMgPSAxMjtcbiAgICAgIH1cbiAgICAgIGlmIChtaW51dGVzID09PSAnMDAnKSB7XG4gICAgICAgIHJldHVybiBgJHtob3Vyc30ke2FtcG19YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBgJHtob3Vyc306JHttaW51dGVzfSR7YW1wbX1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlc31gO1xuICB9O1xuXG4gIHRoaXMuZ2V0WWVhckFuZE1vbnRoUHJlc2VudGF0aW9uID0gKHllYXIsIG1vbnRoLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGNvbnN0IHllYXJOYW1lID0gZ2V0WWVhck5hbWUoeWVhciwgbG9jYWxlKTtcbiAgICBjb25zdCBtb250aE5hbWUgPSB0aGlzLmdldE1vbnRoTmFtZUZvckxvY2FsZShtb250aCwgbG9jYWxlLCBmb3JtYXQgfHwgJ2xvbmcnKTtcblxuICAgIGNvbnN0IGxhbmd1YWdlID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgY29uc3QgZGVsaW1pdGVyID0gZ2V0RGVsaW1pdGVyKGxhbmd1YWdlKTtcblxuICAgIGlmICh0aGlzLmlzWWVhckJlZm9yZU1vbnRoKGxvY2FsZSkpIHtcbiAgICAgIHJldHVybiBbeWVhck5hbWUsIG1vbnRoTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gW21vbnRoTmFtZSwgeWVhck5hbWVdLmpvaW4oZGVsaW1pdGVyKTtcbiAgfTtcblxuICB0aGlzLmdldFllYXJNb250aERhdGVQcmVzZW50YXRpb24gPSAoeWVhciwgbW9udGgsIGRheSwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCB5ZWFyTmFtZSA9IGdldFllYXJOYW1lKHllYXIsIGxvY2FsZSk7XG4gICAgY29uc3QgbW9udGhOYW1lID0gdGhpcy5nZXRNb250aE5hbWVGb3JMb2NhbGUobW9udGgsIGxvY2FsZSwgZm9ybWF0IHx8ICdsb25nJyk7XG4gICAgY29uc3QgZGF0ZU5hbWUgPSBnZXREYXRlTmFtZShkYXksIGxvY2FsZSk7XG5cbiAgICBjb25zdCBsYW5ndWFnZSA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IGRlbGltaXRlciA9IGdldERlbGltaXRlcihsYW5ndWFnZSk7XG5cbiAgICBpZiAodGhpcy5pc1llYXJCZWZvcmVNb250aChsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gW3llYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lXS5qb2luKGRlbGltaXRlcik7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzTW9udGhCZWZvcmVEYXkobG9jYWxlKSkge1xuICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IFttb250aE5hbWUsIGRhdGVOYW1lXS5qb2luKGRlbGltaXRlcik7XG4gICAgICByZXR1cm4gYCR7ZGF0ZVN0cmluZ30sICR7eWVhck5hbWV9YDtcbiAgICB9XG4gICAgcmV0dXJuIFtkYXRlTmFtZSwgbW9udGhOYW1lLCB5ZWFyTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICB9O1xuXG4gIHRoaXMuZ2V0TG9jYWxlTm93ID0gKCkgPT4gbmV3IERhdGUoKTtcblxuICB0aGlzLmdldFVUQ05vdyA9ICgpID0+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIHJldHVybiB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMoXG4gICAgICBub3cuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIG5vdy5nZXRVVENNb250aCgpLFxuICAgICAgbm93LmdldFVUQ0RhdGUoKSxcbiAgICAgIG5vdy5nZXRVVENIb3VycygpLFxuICAgICAgbm93LmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIG5vdy5nZXRVVENTZWNvbmRzKClcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0TG9jYWxlRGF0ZVN0cmluZyA9IChkYXRlLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIC8vIENoZWNrIHRoYXQgdGhlIGRhdGUgZXhpc3RzXG4gICAgaWYgKCFkYXRlLmdldEZ1bGxZZWFyKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHZhcmlhYmxlc1xuICAgIGNvbnN0IG5vdyA9IHRoaXMuZ2V0TG9jYWxlTm93KCk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXREYXRlU3RyaW5nKFxuICAgICAgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgZGF0ZS5nZXRNb250aCgpLFxuICAgICAgZGF0ZS5nZXREYXRlKCksXG4gICAgICBkYXRlLmdldEhvdXJzKCksXG4gICAgICBkYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgIGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgZGF0ZS5nZXREYXkoKSxcbiAgICAgIGxvY2FsZSxcbiAgICAgIGRhdGUgLSBub3csXG4gICAgICBub3cuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGZvcm1hdFxuICAgICk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENEYXRlU3RyaW5nID0gKGRhdGUsIGxvY2FsZSwgZm9ybWF0KSA9PiB7XG4gICAgLy8gQ2hlY2sgdGhhdCB0aGUgZGF0ZSBleGlzdHNcbiAgICBpZiAoIWRhdGUpIHtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGNvbnN0IG5vdyA9IHRoaXMuZ2V0VVRDTm93KCk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXREYXRlU3RyaW5nKFxuICAgICAgZGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgZGF0ZS5nZXRVVENNb250aCgpLFxuICAgICAgZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgIGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgZGF0ZS5nZXRVVENEYXkoKSxcbiAgICAgIGxvY2FsZSxcbiAgICAgIGRhdGUgLSBub3csXG4gICAgICBub3cuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIGZvcm1hdFxuICAgICk7XG4gIH07XG5cbiAgdGhpcy5nZXREYXRlU3RyaW5nID0gKFxuICAgIHllYXIsXG4gICAgbW9udGgsXG4gICAgZGF5LFxuICAgIGhvdXJzLFxuICAgIG1pbnV0ZXMsXG4gICAgc2Vjb25kcyxcbiAgICBkYXlPZldlZWssXG4gICAgbG9jYWxlLFxuICAgIG9mZnNldCxcbiAgICBjdXJyZW50WWVhcixcbiAgICBmb3JtYXRcbiAgKSA9PiB7XG4gICAgY29uc3Qgc2l4RGF5cyA9IDE0NCAqIDYwICogNjAgKiAxMDAwO1xuICAgIGNvbnN0IGVpZ2h0RGF5cyA9IDggKiAyNCAqIDYwICogNjAgKiAxMDAwO1xuXG4gICAgY29uc3QgaGFzVGltZSA9IE1hdGguYWJzKG9mZnNldCkgPCBzaXhEYXlzICYmIGZvcm1hdCAhPT0gJ2xvbmcnO1xuICAgIGNvbnN0IGhhc0RhdGUgPSAhaGFzVGltZTtcbiAgICBjb25zdCBoYXNXZWVrZGF5ID0gTWF0aC5hYnMob2Zmc2V0KSA8IGVpZ2h0RGF5cyB8fCBmb3JtYXQgPT09ICdsb25nJztcbiAgICBjb25zdCBoYXNNb250aCA9ICFoYXNXZWVrZGF5IHx8IGZvcm1hdCA9PT0gJ2xvbmcnO1xuICAgIGNvbnN0IGhhc1llYXIgPSAoIWhhc1dlZWtkYXkgJiYgY3VycmVudFllYXIgIT09IHllYXIpIHx8IGZvcm1hdCA9PT0gJ2xvbmcnO1xuXG4gICAgY29uc3QgeWVhck5hbWUgPSBoYXNZZWFyID8gZ2V0WWVhck5hbWUoeWVhciwgbG9jYWxlKSA6ICcnO1xuICAgIGNvbnN0IG1vbnRoTmFtZSA9IGhhc01vbnRoID8gdGhpcy5nZXRNb250aE5hbWVGb3JMb2NhbGUoXG4gICAgICBtb250aCxcbiAgICAgIGxvY2FsZSxcbiAgICAgIGZvcm1hdCA9PT0gJ3Nob3J0JyA/ICdzaG9ydCcgOiAnbG9uZydcbiAgICApIDogJyc7XG4gICAgY29uc3QgZGF0ZU5hbWUgPSBoYXNEYXRlID8gZ2V0RGF0ZU5hbWUoZGF5LCBsb2NhbGUpIDogJyc7XG4gICAgY29uc3Qgd2Vla2RheU5hbWUgPSBoYXNXZWVrZGF5ID8gdGhpcy5nZXREYXlOYW1lRm9yTG9jYWxlKFxuICAgICAgZGF5T2ZXZWVrLFxuICAgICAgbG9jYWxlLFxuICAgICAgZm9ybWF0ID09PSAnc2hvcnQnID8gJ3Nob3J0JyA6ICdsb25nJ1xuICAgICkgOiAnJztcbiAgICBjb25zdCB0aW1lTmFtZSA9IGhhc1RpbWUgPyB0aGlzLmdldFRpbWVTdHJpbmcoaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGxvY2FsZSkgOiAnJztcblxuICAgIHJldHVybiB0aGlzLmNvbWJpbmVEYXRlUGFydHMoeWVhck5hbWUsIG1vbnRoTmFtZSwgZGF0ZU5hbWUsIHRpbWVOYW1lLCB3ZWVrZGF5TmFtZSwgbG9jYWxlKTtcbiAgfTtcblxuICB0aGlzLmNvbWJpbmVEYXRlUGFydHMgPSAoeWVhck5hbWUsIG1vbnRoTmFtZSwgZGF0ZU5hbWUsIHRpbWVOYW1lLCBkYXlOYW1lLCBsb2NhbGUpID0+IHtcbiAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgY29uc3QgZGVsaW1pdGVyID0gZ2V0RGVsaW1pdGVyKGxhbmcpO1xuXG4gICAgbGV0IGRhdGVTdHJpbmc7XG5cbiAgICBpZiAodGhpcy5pc1llYXJCZWZvcmVNb250aChsb2NhbGUpKSB7XG4gICAgICBkYXRlU3RyaW5nID0gW3llYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lXS5qb2luKGRlbGltaXRlcikudHJpbSgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc01vbnRoQmVmb3JlRGF5KGxvY2FsZSkpIHtcbiAgICAgIGRhdGVTdHJpbmcgPSBbbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpLnRyaW0oKTtcbiAgICAgIGlmICh5ZWFyTmFtZSkge1xuICAgICAgICBkYXRlU3RyaW5nICs9IGAsICR7eWVhck5hbWV9YDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ZVN0cmluZyA9IFtkYXRlTmFtZSwgbW9udGhOYW1lLCB5ZWFyTmFtZV0uam9pbihkZWxpbWl0ZXIpLnRyaW0oKTtcbiAgICB9XG5cbiAgICBpZiAoZGF5TmFtZSkge1xuICAgICAgaWYgKGxhbmcgPT09ICdqYScpIHtcbiAgICAgICAgcmV0dXJuIGAke2RhdGVTdHJpbmd9ICR7dGltZU5hbWV9ICgke2RheU5hbWV9KWAudHJpbSgpO1xuICAgICAgfVxuICAgICAgLy8gRm9yIGxvbmdlciBkYXRlcyB1c2UgYSBjb21tYVxuICAgICAgaWYgKG1vbnRoTmFtZSB8fCB5ZWFyTmFtZSkge1xuICAgICAgICBkYXRlU3RyaW5nID0gYCR7ZGF5TmFtZX0sICR7ZGF0ZVN0cmluZ31gLnRyaW0oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGVTdHJpbmcgPSBgJHtkYXlOYW1lfSAke2RhdGVTdHJpbmd9YC50cmltKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGRhdGVTdHJpbmcgPSBgJHtkYXRlU3RyaW5nfSAke3RpbWVOYW1lfWA7XG5cbiAgICByZXR1cm4gZGF0ZVN0cmluZy50cmltKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0RGF0ZU5hbWUoZGF5T2ZNb250aCwgbG9jYWxlKSB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IHN1ZmZpeCA9IGdldFN1ZmZpeChEQVlfU1VGRklYRVNfQllfTEFOR1VBR0UsIGRheU9mTW9udGgsIGxhbmcpIHx8ICcnO1xuICAgIHJldHVybiBgJHtkYXlPZk1vbnRofSR7c3VmZml4fWA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRZZWFyTmFtZSh5ZWFyLCBsb2NhbGUpIHtcbiAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgY29uc3Qgc3VmZml4ID0gZ2V0U3VmZml4KFlFQVJfU1VGRklYRVNfQllfTEFOR1VBR0UsIHllYXIsIGxhbmcpO1xuICAgIHJldHVybiBgJHt5ZWFyfSR7c3VmZml4fWA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRMb2NhbGlzZWREYXRlTmFtZShkYXRlLCBsb2NhbGUsIGZvcm1hdHRpbmdPYmplY3QpIHtcbiAgICBpZiAoIWRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgbmFtZSA9IGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKGxvY2FsZSwgZm9ybWF0dGluZ09iamVjdCk7XG5cbiAgICBpZiAoaXNMb2NhbGVUcmFuc2xhdGlvblJlcXVpcmVzU3RyaXBwaW5nKGxvY2FsZSkpIHtcbiAgICAgIC8vIHN0cmlwIG91dCBhbnkgbnVtYmVycywgc3BhY2VzLCBjb21tYXMgYW5kIGRvdHMgaW4gY2FzZSBicm93c2VyIChjb3VnaC4uLlNhZmFyaSlcbiAgICAgIC8vIGRvZXNuJ3QgcmVzcGVjdCBmb3JtYXRcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1swLTldfFxcc3wsfFxcLi9nLCAnJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsaWREYXRlRm9ybWF0KGZvcm1hdCkge1xuICAgIGNvbnN0IHZhbGlkRm9ybWF0cyA9IFsnbmFycm93JywgJ3Nob3J0JywgJ2xvbmcnXTtcbiAgICBpZiAoIWZvcm1hdCB8fCB2YWxpZEZvcm1hdHMuaW5kZXhPZihmb3JtYXQpIDwgMCkge1xuICAgICAgcmV0dXJuICdsb25nJztcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbGlkTG9jYWxlKGxvY2FsZSkge1xuICAgIGlmICghaXNJbnRsU3VwcG9ydGVkRm9yTG9jYWxlKGxvY2FsZSkpIHtcbiAgICAgIHJldHVybiAnZW4tR0InO1xuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNJbnRsU3VwcG9ydGVkRm9yTG9jYWxlKGxvY2FsZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzdXBwb3J0ZWRMb2NhbGVzID0gd2luZG93LkludGwuRGF0ZVRpbWVGb3JtYXQuc3VwcG9ydGVkTG9jYWxlc09mKFtsb2NhbGVdKTtcbiAgICAgIHJldHVybiBzdXBwb3J0ZWRMb2NhbGVzLmxlbmd0aCA+IDA7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc0xvY2FsZVRyYW5zbGF0aW9uUmVxdWlyZXNTdHJpcHBpbmcobG9jYWxlKSB7XG4gICAgaWYgKCFsb2NhbGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICBpZiAobGFuZyA9PT0gJ2phJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSkge1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICByZXR1cm4gJ2VuJztcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZS5zdWJzdHJpbmcoMCwgMik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWxpbWl0ZXIobGFuZykge1xuICAgIHJldHVybiAoREVMSU1JVEVSU19CWV9MQU5HVUFHRVtsYW5nXSAhPT0gdW5kZWZpbmVkKSA/IERFTElNSVRFUlNfQllfTEFOR1VBR0VbbGFuZ10gOiAnICc7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRTdWZmaXgoc3VmZml4ZXMsIHZhbHVlLCBsYW5nKSB7XG4gICAgaWYgKCFzdWZmaXhlc1tsYW5nXSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAoc3VmZml4ZXNbbGFuZ10uZXhhY3RNYXRjaCAmJiBzdWZmaXhlc1tsYW5nXS5leGFjdE1hdGNoW3ZhbHVlXSkge1xuICAgICAgcmV0dXJuIHN1ZmZpeGVzW2xhbmddLmV4YWN0TWF0Y2hbdmFsdWVdO1xuICAgIH1cbiAgICBpZiAoc3VmZml4ZXNbbGFuZ10uZW5kc1dpdGggJiYgc3VmZml4ZXNbbGFuZ10uZW5kc1dpdGhbdmFsdWUgJSAxMF0pIHtcbiAgICAgIHJldHVybiBzdWZmaXhlc1tsYW5nXS5lbmRzV2l0aFt2YWx1ZSAlIDEwXTtcbiAgICB9XG4gICAgcmV0dXJuIHN1ZmZpeGVzW2xhbmddLmRlZmF1bHQ7XG4gIH1cblxuICBjb25zdCBERUZBVUxUX01PTlRIX05BTUVTX0JZX0xBTkdVQUdFID0ge1xuICAgIGVuOiBbXG4gICAgICAnSmFudWFyeScsXG4gICAgICAnRmVicnVhcnknLFxuICAgICAgJ01hcmNoJyxcbiAgICAgICdBcHJpbCcsXG4gICAgICAnTWF5JyxcbiAgICAgICdKdW5lJyxcbiAgICAgICdKdWx5JyxcbiAgICAgICdBdWd1c3QnLFxuICAgICAgJ1NlcHRlbWJlcicsXG4gICAgICAnT2N0b2JlcicsXG4gICAgICAnTm92ZW1iZXInLFxuICAgICAgJ0RlY2VtYmVyJ1xuICAgIF0sXG4gICAgamE6IFtcbiAgICAgICcx5pyIJyxcbiAgICAgICcy5pyIJyxcbiAgICAgICcz5pyIJyxcbiAgICAgICc05pyIJyxcbiAgICAgICc15pyIJyxcbiAgICAgICc25pyIJyxcbiAgICAgICc35pyIJyxcbiAgICAgICc45pyIJyxcbiAgICAgICc55pyIJyxcbiAgICAgICcxMOaciCcsXG4gICAgICAnMTHmnIgnLFxuICAgICAgJzEy5pyIJ1xuICAgIF1cbiAgfTtcblxuICBjb25zdCBERUZBVUxUX0RBWV9OQU1FU19CWV9MQU5HVUFHRSA9IHtcbiAgICBlbjogW1xuICAgICAgJ1N1bmRheScsXG4gICAgICAnTW9uZGF5JyxcbiAgICAgICdUdWVzZGF5JyxcbiAgICAgICdXZWRuZXNkYXknLFxuICAgICAgJ1RodXJzZGF5JyxcbiAgICAgICdGcmlkYXknLFxuICAgICAgJ1NhdHVyZGF5J1xuICAgIF0sXG4gICAgamE6IFtcbiAgICAgICfml6UnLCAn5pyIJywgJ+eBqycsICfmsLQnLCAn5pyoJywgJ+mHkScsICflnJ8nXG4gICAgXVxuICB9O1xuXG4gIGNvbnN0IERBWV9TVUZGSVhFU19CWV9MQU5HVUFHRSA9IHtcbiAgICBlbjoge1xuICAgICAgZXhhY3RNYXRjaDoge1xuICAgICAgICAxMTogJ3RoJyxcbiAgICAgICAgMTI6ICd0aCcsXG4gICAgICAgIDEzOiAndGgnXG4gICAgICB9LFxuICAgICAgZW5kc1dpdGg6IHtcbiAgICAgICAgMTogJ3N0JyxcbiAgICAgICAgMjogJ25kJyxcbiAgICAgICAgMzogJ3JkJ1xuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6ICd0aCdcbiAgICB9LFxuICAgIGRlOiB7XG4gICAgICBkZWZhdWx0OiAnLidcbiAgICB9LFxuICAgIGZpOiB7XG4gICAgICBkZWZhdWx0OiAnLidcbiAgICB9LFxuICAgIGphOiB7XG4gICAgICBkZWZhdWx0OiAn5pelJ1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBZRUFSX1NVRkZJWEVTX0JZX0xBTkdVQUdFID0ge1xuICAgIGphOiB7XG4gICAgICBkZWZhdWx0OiAn5bm0J1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBERUxJTUlURVJTX0JZX0xBTkdVQUdFID0ge1xuICAgIGphOiAnJ1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRlU2VydmljZTtcbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2RhdGUtZm9ybWF0Lmh0bWwnO1xuXG5jb25zdCBEYXRlRGlzcGxheSA9IHtcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgZGF0ZTogJzwnLFxuICAgIGxvY2FsZTogJzwnLFxuICAgIGZvcm1hdDogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVEaXNwbGF5O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxzcGFuIHR3LXRvb2wtdGlwIGRhdGEtb3JpZ2luYWwtdGl0bGU9XFxcInt7ICRjdHJsLmRhdGUgfCB0d0RhdGVGb3JtYXQgOiAkY3RybC5sb2NhbGUgOiAnbG9uZycgfX1cXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGlkZGVuLXhzIGhpZGRlbi1zbVxcXCI+IHt7ICRjdHJsLmRhdGUgfCB0d0RhdGVGb3JtYXQgOiAkY3RybC5sb2NhbGUgOiAkY3RybC5mb3JtYXQgfX0gPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaGlkZGVuLW1kIGhpZGRlbi1sZyBoaWRkZW4teGxcXFwiPiB7eyAkY3RybC5kYXRlIHwgdHdEYXRlRm9ybWF0IDogJGN0cmwubG9jYWxlIDogJ3Nob3J0JyB9fSA8L3NwYW4+IDwvc3Bhbj4gXCI7IiwiXG5mdW5jdGlvbiBEYXRlRm9ybWF0RmlsdGVyKFR3RGF0ZVNlcnZpY2UpIHtcbiAgcmV0dXJuIChkYXRlU3VwcGxpZWQsIGxvY2FsZSwgZm9ybWF0KSA9PiB7XG4gICAgaWYgKCFkYXRlU3VwcGxpZWQpIHtcbiAgICAgIHJldHVybiBkYXRlU3VwcGxpZWQ7XG4gICAgfVxuICAgIGxldCBkYXRlID0gZGF0ZVN1cHBsaWVkO1xuXG4gICAgaWYgKHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJykge1xuICAgICAgZGF0ZSA9IFR3RGF0ZVNlcnZpY2UuZ2V0VVRDRGF0ZUZyb21Jc28oZGF0ZSk7XG5cbiAgICAgIGNvbnN0IGRhdGVPbmx5ID0gbmV3IFJlZ0V4cCgnXlswLTldezR9LVswLTldezJ9LVswLTldezJ9JCcpOyAvLyB5eXl5LW1tLWRkXG4gICAgICBpZiAoZGF0ZU9ubHkudGVzdChkYXRlU3VwcGxpZWQpKSB7XG4gICAgICAgIHJldHVybiBUd0RhdGVTZXJ2aWNlLmdldFVUQ0RhdGVTdHJpbmcoZGF0ZSwgbG9jYWxlLCBmb3JtYXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZGF0ZSkgeyByZXR1cm4gZGF0ZVN1cHBsaWVkOyB9XG4gICAgLy8gVXNlIGxvY2FsZSB0aW1lem9uZVxuICAgIHJldHVybiBUd0RhdGVTZXJ2aWNlLmdldExvY2FsZURhdGVTdHJpbmcoZGF0ZSwgbG9jYWxlLCBmb3JtYXQpO1xuICB9O1xufVxuXG5EYXRlRm9ybWF0RmlsdGVyLiRpbmplY3QgPSBbJ1R3RGF0ZVNlcnZpY2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUZvcm1hdEZpbHRlcjtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vZm9ybS1jb250cm9sLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vZm9ybS1jb250cm9sLmh0bWwnO1xuXG5jb25zdCBGb3JtQ29udHJvbCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6IHtcbiAgICAkbmdNb2RlbDogJ25nTW9kZWwnXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgdHlwZTogJ0AnLFxuICAgIG5hbWU6ICdAJyxcbiAgICBpZDogJ0AnLFxuICAgIGxhYmVsOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICBzdGVwOiAnQCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgdXBsb2FkQWNjZXB0OiAnQCcsXG4gICAgdXBsb2FkSWNvbjogJ0AnLFxuICAgIHVwbG9hZFRvb0xhcmdlTWVzc2FnZTogJ0AnLFxuICAgIG9wdGlvbnM6ICc8JyxcblxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ0NoYW5nZTogJyYnLFxuICAgIG5nRm9jdXM6ICcmJyxcbiAgICBuZ0JsdXI6ICcmJyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuXG4gICAgLy8gbmdNaW5sZW5ndGgvbmdNYXhsZW5ndGggaGF2ZSBkZWZhdWx0IGJlaGF2aW91ciB0aGF0IGNhbm5vdCBiZSBvdmVycmlkZGVuXG4gICAgbmdNaW5sZW5ndGg6ICc8dHdNaW5sZW5ndGgnLFxuICAgIG5nTWF4bGVuZ3RoOiAnPHR3TWF4bGVuZ3RoJyxcbiAgICBuZ01pbjogJzwnLFxuICAgIG5nTWF4OiAnPCcsXG4gICAgbmdQYXR0ZXJuOiAnPCcsXG5cbiAgICB1cGxvYWRPcHRpb25zOiAnPCcsXG4gICAgaGVscE9wdGlvbnM6ICc8JyxcbiAgICB0ZXh0Rm9ybWF0OiAnPCcsXG4gICAgdmFsaWRhdGlvbkFzeW5jOiAnPCcsXG4gICAgcGVyc2lzdEFzeW5jOiAnPCcsXG4gICAgb25Bc3luY0ZhaWx1cmU6ICcmJyxcbiAgICBvbkFzeW5jU3VjY2VzczogJyYnLFxuICAgIC8vIExpdmUgY2FwdHVyZSBwYXJhbWV0ZXJzIGZvciB1cGxvYWQgY29tcG9uZW50XG4gICAgZmlsZVVwbG9hZFNvdXJjZTogJzwnLFxuICAgIGNhbWVyYU9wdGlvbnM6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbDtcbiIsImxldCAkY3RybDtcblxuY2xhc3MgRm9ybUNvbnRyb2xDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnRbMF07XG5cbiAgICAvLyBUaGlzIGlzIGEgYml0IGxhbWUsIGJ1dCBuZWNlc3NhcnkgZHVlIHRvIHRoZSB3YXkgdHdVcGxvYWQncyBjYWxsYmFja3Mgd29ya1xuICAgIC8vIEJlY2F1c2UgdGhleSB1c2UgJz0nLCBub3QgJyYnLCB3ZSBsb3NlIHJlZmVyZW5jZSB0byB0aGlzIGNvbnRyb2xsZXIuXG4gICAgJGN0cmwgPSB0aGlzO1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLiRuZ01vZGVsID0gdGhpcy4kZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgdGhpcy5hZGRWYWxpZGF0b3JzKCk7XG5cbiAgICBpZiAoIXRoaXMudXBsb2FkT3B0aW9ucykge1xuICAgICAgdGhpcy51cGxvYWRPcHRpb25zID0ge307XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlKCkge1xuICAgIHRoaXMuJG5nTW9kZWwuJHNldERpcnR5KCk7XG5cbiAgICAvLyBQYXNzIGludGVybmFsIHZhbHVlIHRocm91Z2ggb3VyIHZhbGlkYXRvcnNcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodGhpcy5pbnRlcm5hbE1vZGVsKTtcbiAgfVxuXG4gIGZvY3VzKCkge1xuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMuJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgb25Bc3luY1VwbG9hZFN1Y2Nlc3MoZmlsZSwgcmVzcG9uc2UpIHtcbiAgICBpZiAoJGN0cmwub25Bc3luY1N1Y2Nlc3MpIHtcbiAgICAgICRjdHJsLm9uQXN5bmNTdWNjZXNzKHsgcmVzcG9uc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIG9uQXN5bmNVcGxvYWRGYWlsdXJlKHJlc3BvbnNlKSB7XG4gICAgaWYgKCRjdHJsLm9uQXN5bmNGYWlsdXJlKSB7XG4gICAgICAkY3RybC5vbkFzeW5jRmFpbHVyZSh7IHJlc3BvbnNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBhdXRvY29tcGxldGUgaGlkZXMgb3VyIGZvcm0gaGVscCBzbyB3ZSBuZWVkIHRvIGRpc2FibGUgaXQgd2hlbiBoZWxwIHRleHRcbiAgICogaXMgcHJlc2VudC4gQ2hyb21lIGlnbm9yZXMgYXV0b2NvbXBsZXRlPW9mZiwgdGhlIG9ubHkgd2F5IHRvIGRpc2FibGUgaXQgaXNcbiAgICogdG8gcHJvdmlkZSBhbiAnaW52YWxpZCcgdmFsdWUsIGZvciB3aGljaCAnZGlzYWJsZWQnIHNlcnZlcy5cbiAgICovXG4gIGdldEF1dG9jb21wbGV0ZVN0YXR1cygpIHtcbiAgICByZXR1cm4gKHRoaXMuaGVscE9wdGlvbnMgJiYgdGhpcy5oZWxwT3B0aW9ucy5tZXNzYWdlKSA/ICdkaXNhYmxlZCcgOiAnb24nO1xuICB9XG5cbiAgYWRkVmFsaWRhdG9ycygpIHtcbiAgICBjb25zdCAkbmdNb2RlbCA9IHRoaXMuJG5nTW9kZWw7XG5cbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5yZXF1aXJlZCA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgICByZXR1cm4gIXZhbHVlIHx8ICF0aGlzLm5nUmVxdWlyZWQ7XG4gICAgfTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IChtb2RlbFZhbHVlLCB2aWV3VmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgICBpZiAodGhpcy50eXBlICE9PSAndGV4dCcgfHwgIXRoaXMubmdNaW5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA+PSB0aGlzLm5nTWlubGVuZ3RoO1xuICAgIH07XG5cbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5tYXhsZW5ndGggPSAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ3RleHQnIHx8ICF0aGlzLm5nTWF4bGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPD0gdGhpcy5uZ01heGxlbmd0aDtcbiAgICB9O1xuXG4gICAgLy8gTWluIGFuZCBtYXggZG8gbm90IHdvcmsgb24gY3VzdG9tIGVsZW1lbnRzLCBhZGQgbWFudWFsIHZhbGlkYXRvcnNcbiAgICAkbmdNb2RlbC4kdmFsaWRhdG9ycy5taW4gPSAobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLm5nTWluID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInXG4gICAgICAgICYmIHR5cGVvZiB0aGlzLm5nTWluID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gdGhpcy5uZ01pbjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdkYXRlJ1xuICAgICAgICAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnXG4gICAgICAgICYmIHR5cGVvZiB0aGlzLm5nTWluID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gdGhpcy5uZ01pbjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdkYXRlJ1xuICAgICAgICAmJiB2YWx1ZSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICAgJiYgdGhpcy5uZ01pbiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID49IHRoaXMubmdNaW47XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWF4ID0gKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5uZ01heCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJ1xuICAgICAgICAmJiB0eXBlb2YgdGhpcy5uZ01heCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDw9IHRoaXMubmdNYXg7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnZGF0ZSdcbiAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiB0eXBlb2YgdGhpcy5uZ01heCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDw9IHRoaXMubmdNYXg7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnZGF0ZSdcbiAgICAgICAgJiYgdmFsdWUgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAgICYmIHRoaXMubmdNYXggaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8PSB0aGlzLm5nTWF4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgICRuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goKG1vZGVsVmFsdWUpID0+IHtcbiAgICAgIHRoaXMuaW50ZXJuYWxNb2RlbCA9IG1vZGVsVmFsdWU7XG4gICAgICByZXR1cm4gbW9kZWxWYWx1ZTtcbiAgICB9KTtcbiAgfVxufVxuXG5Gb3JtQ29udHJvbENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnXTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2xDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgbmctc3dpdGNoPSRjdHJsLnR5cGU+IDxkaXYgbmctc3dpdGNoLXdoZW49cmFkaW8gY2xhc3M9cmFkaW8gbmctY2xhc3M9XFxcIntkaXNhYmxlZDogJGN0cmwubmdEaXNhYmxlZCwgJ3JhZGlvLWxnJzogb3B0aW9uLnNlY29uZGFyeX1cXFwiIG5nLXJlcGVhdD1cXFwib3B0aW9uIGluICRjdHJsLm9wdGlvbnNcXFwiPiA8bGFiZWw+IDx0dy1yYWRpbyBuYW1lPXt7JGN0cmwubmFtZX19IG5nLXZhbHVlPW9wdGlvbi52YWx1ZSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKG9wdGlvbi52YWx1ZSkgbmctY2xpY2s9JGN0cmwuY2hhbmdlKG9wdGlvbi52YWx1ZSkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKT48L3R3LXJhZGlvPiB7e29wdGlvbi5sYWJlbH19IDxzbWFsbCBuZy1pZj1vcHRpb24uc2Vjb25kYXJ5Pnt7b3B0aW9uLnNlY29uZGFyeX19PC9zbWFsbD4gPC9sYWJlbD4gPC9kaXY+IDxkaXYgbmctc3dpdGNoLXdoZW49Y2hlY2tib3ggY2xhc3M9Y2hlY2tib3ggbmctY2xhc3M9XFxcIntkaXNhYmxlZDogJGN0cmwubmdEaXNhYmxlZH1cXFwiPiA8bGFiZWw+IDx0dy1jaGVja2JveCBuYW1lPXt7JGN0cmwubmFtZX19IG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgbmctcmVxdWlyZWQ9JGN0cmwubmdSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctY2xpY2s9JGN0cmwuY2hhbmdlKCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKT48L3R3LWNoZWNrYm94PiB7eyRjdHJsLnBsYWNlaG9sZGVyfX0gPC9sYWJlbD4gPC9kaXY+IDxkaXYgbmctc3dpdGNoLXdoZW49c2VsZWN0PiA8dHctc2VsZWN0IG5hbWU9e3skY3RybC5uYW1lfX0gb3B0aW9ucz0kY3RybC5vcHRpb25zIGZpbHRlcj1cXFwie3sgJGN0cmwub3B0aW9ucy5sZW5ndGggPiA5ID8gJyAnIDogJycgfX1cXFwiIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCk+PC90dy1zZWxlY3Q+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPWZpbGU+IDx0dy11cGxvYWQgbmFtZT17eyRjdHJsLm5hbWV9fSBsYWJlbD17eyRjdHJsLmxhYmVsfX0gaWNvbj17eyRjdHJsLnVwbG9hZEljb259fSBoZWxwLWltYWdlPXt7JGN0cmwuaGVscE9wdGlvbnMuaW1hZ2V9fSBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gYWNjZXB0PXt7JGN0cmwudXBsb2FkQWNjZXB0fX0gY29tcGxldGUtdGV4dD17eyRjdHJsLmxhYmVsfX0gYnV0dG9uLXRleHQ9e3skY3RybC51cGxvYWRPcHRpb25zLmJ1dHRvblRleHR9fSBjYW5jZWwtdGV4dD17eyRjdHJsLnVwbG9hZE9wdGlvbnMuY2FuY2VsVGV4dH19IHByb2Nlc3NpbmctdGV4dD1cXFwie3sgJGN0cmwudXBsb2FkT3B0aW9ucy5wcm9jZXNzaW5nVGV4dCB9fVxcXCIgc3VjY2Vzcy10ZXh0PVxcXCJ7eyAkY3RybC51cGxvYWRPcHRpb25zLnN1Y2Nlc3NUZXh0IH19XFxcIiBmYWlsdXJlLXRleHQ9XFxcInt7ICRjdHJsLnVwbG9hZE9wdGlvbnMuZmFpbHVyZVRleHQgfX1cXFwiIHZhbGlkYXRpb24tbWVzc2FnZXM9JGN0cmwudXBsb2FkT3B0aW9ucy52YWxpZGF0aW9uTWVzc2FnZXMgdmlldy1pbWFnZS10ZXh0PXt7JGN0cmwudXBsb2FkT3B0aW9ucy52aWV3SW1hZ2VUZXh0fX0gdG9vLWxhcmdlLW1lc3NhZ2U9e3skY3RybC51cGxvYWRUb29MYXJnZU1lc3NhZ2V9fSBtYXgtc2l6ZT0kY3RybC5uZ01heCBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgaHR0cC1vcHRpb25zPSRjdHJsLnBlcnNpc3RBc3luYyBzb3VyY2U9JGN0cmwuZmlsZVVwbG9hZFNvdXJjZSBjYW1lcmEtb3ZlcmxheT17eyRjdHJsLmNhbWVyYU9wdGlvbnMub3ZlcmxheX19IGNhbWVyYS1kaXJlY3Rpb249e3skY3RybC5jYW1lcmFPcHRpb25zLmRpcmVjdGlvbn19IG9uLXN1Y2Nlc3M9JGN0cmwub25Bc3luY1VwbG9hZFN1Y2Nlc3Mgb24tZmFpbHVyZT0kY3RybC5vbkFzeW5jVXBsb2FkRmFpbHVyZT48L3R3LXVwbG9hZD4gPC9kaXY+IDxkaXYgbmctc3dpdGNoLXdoZW49ZGF0ZXxkYXRlLXRpbWUgbmctc3dpdGNoLXdoZW4tc2VwYXJhdG9yPXw+IDx0dy1kYXRlIG5hbWU9e3skY3RybC5uYW1lfX0gbG9jYWxlPXt7JGN0cmwubG9jYWxlfX0gbmctbWluPSRjdHJsLm5nTWluIG5nLW1heD0kY3RybC5uZ01heCBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbW9kZWwtdHlwZT1zdHJpbmc+PC90dy1kYXRlPiA8L2Rpdj4gPGRpdiBuZy1zd2l0Y2gtd2hlbj10ZWw+IDx0dy10ZWxlcGhvbmUgbmFtZT1cXFwie3sgJGN0cmwubmFtZSB9fVxcXCIgcGxhY2Vob2xkZXI9XFxcInt7ICRjdHJsLnBsYWNlaG9sZGVyIH19XFxcIiBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbG9jYWxlPVxcXCJ7eyAkY3RybC5sb2NhbGUgfX1cXFwiIHNlYXJjaC1wbGFjZWhvbGRlcj1cXFwiIFxcXCI+PC90dy10ZWxlcGhvbmU+IDwvZGl2PiA8aW5wdXQgbmctc3dpdGNoLXdoZW49bnVtYmVyIG5hbWU9e3skY3RybC5uYW1lfX0gdHlwZT1udW1iZXIgc3RlcD17eyRjdHJsLnN0ZXB9fSBjbGFzcz1mb3JtLWNvbnRyb2wgcGxhY2Vob2xkZXI9e3skY3RybC5wbGFjZWhvbGRlcn19IG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgbmctbW9kZWwtb3B0aW9ucz1cXFwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAzMDAgfVxcXCIgbmctcmVxdWlyZWQ9JGN0cmwubmdSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKSBuZy1taW49JGN0cmwubmdNaW4gbmctbWF4PSRjdHJsLm5nTWF4IGF1dG9jb21wbGV0ZT1cXFwie3sgJGN0cmwuZ2V0QXV0b2NvbXBsZXRlU3RhdHVzKCkgfX1cXFwiLz4gPGlucHV0IG5nLXN3aXRjaC13aGVuPWhpZGRlbiBuYW1lPXt7JGN0cmwubmFtZX19IHR5cGU9aGlkZGVuIG5nLW1vZGVsPSRjdHJsLm5nTW9kZWwgLz4gPGlucHV0IG5nLXN3aXRjaC13aGVuPXBhc3N3b3JkIG5hbWU9e3skY3RybC5uYW1lfX0gdHlwZT1wYXNzd29yZCBjbGFzcz1mb3JtLWNvbnRyb2wgcGxhY2Vob2xkZXI9e3skY3RybC5wbGFjZWhvbGRlcn19IG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgbmctbW9kZWwtb3B0aW9ucz1cXFwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAzMDAgfVxcXCIgbmctcmVxdWlyZWQ9JGN0cmwubmdSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKSBuZy1taW5sZW5ndGg9JGN0cmwubmdNaW5sZW5ndGggbmctbWF4bGVuZ3RoPSRjdHJsLm5nTWF4bGVuZ3RoIGF1dG9jb21wbGV0ZT1cXFwie3sgJGN0cmwuZ2V0QXV0b2NvbXBsZXRlU3RhdHVzKCkgfX1cXFwiLz4gPHRleHRhcmVhIG5nLXN3aXRjaC13aGVuPXRleHRhcmVhIG5hbWU9e3skY3RybC5uYW1lfX0gY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctcGF0dGVybj0kY3RybC5uZ1BhdHRlcm4gbmctbWlubGVuZ3RoPSRjdHJsLm5nTWlubGVuZ3RoIG5nLW1heGxlbmd0aD0kY3RybC5uZ01heGxlbmd0aCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBhdXRvY29tcGxldGU9XFxcInt7ICRjdHJsLmdldEF1dG9jb21wbGV0ZVN0YXR1cygpIH19XFxcIj48L3RleHRhcmVhPiA8aW5wdXQgbmctc3dpdGNoLWRlZmF1bHQgbmFtZT17eyRjdHJsLm5hbWV9fSB0eXBlPXRleHQgY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctcGF0dGVybj0kY3RybC5uZ1BhdHRlcm4gbmctbWlubGVuZ3RoPSRjdHJsLm5nTWlubGVuZ3RoIG5nLW1heGxlbmd0aD0kY3RybC5uZ01heGxlbmd0aCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCkgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCB0dy10ZXh0LWZvcm1hdD1cXFwie3sgJGN0cmwudGV4dEZvcm1hdCB9fVxcXCIgYXV0b2NvbXBsZXRlPVxcXCJ7eyAkY3RybC5nZXRBdXRvY29tcGxldGVTdGF0dXMoKSB9fVxcXCIvPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9maWVsZC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2ZpZWxkLmh0bWwnO1xuXG5jb25zdCBGaWVsZCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbmFtZTogJ0AnLFxuICAgIG1vZGVsOiAnPScsXG4gICAgaW5pdGlhbEZpZWxkOiAnPGZpZWxkJyxcbiAgICBsb2NhbGU6ICdAJyxcbiAgICByZXF1aXJlZDogJzwnLFxuICAgIHVwbG9hZE9wdGlvbnM6ICc8JyxcbiAgICBjaGFuZ2VIYW5kbGVyOiAnJj9vbkNoYW5nZScsXG4gICAgZm9jdXNIYW5kbGVyOiAnJj9vbkZvY3VzJyxcbiAgICBibHVySGFuZGxlcjogJyY/b25CbHVyJyxcbiAgICBlcnJvck1lc3NhZ2U6ICc8JyxcbiAgICB3YXJuaW5nTWVzc2FnZTogJzwnLFxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkO1xuIiwiY2xhc3MgRmllbGRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoUmVxdWlyZW1lbnRzU2VydmljZSkge1xuICAgIHRoaXMuUmVxdWlyZW1lbnRzU2VydmljZSA9IFJlcXVpcmVtZW50c1NlcnZpY2U7XG4gIH1cblxuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5pbml0aWFsRmllbGQpIHtcbiAgICAgIHRoaXMuZmllbGQgPSBjb3B5SlNPTih0aGlzLmluaXRpYWxGaWVsZCk7XG5cbiAgICAgIHRoaXMuY29udHJvbCA9IHRoaXMuZmllbGQuY29udHJvbCA/IHRoaXMuZmllbGQuY29udHJvbFxuICAgICAgICA6IHRoaXMuUmVxdWlyZW1lbnRzU2VydmljZS5nZXRDb250cm9sVHlwZShjaGFuZ2VzLmluaXRpYWxGaWVsZC5jdXJyZW50VmFsdWUpO1xuXG4gICAgICAvLyBUT0RPIHdlIHNob3VsZCBwcm9iYWJseSBkbyB0aGlzIGF0IGZpZWxkc2V0IGxldmVsLCBzbyB0aGUgbW9kZWwgaXMgYXZhaWxhYmxlXG4gICAgICBpZiAodGhpcy5maWVsZC52YWx1ZXNBc3luYykge1xuICAgICAgICB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UucHJlcFZhbHVlc0FzeW5jKHRoaXMuZmllbGQsIHt9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpZWxkIGlzIHJlcXVpcmVkLCBhbmQgb25seSBhbGxvd3Mgb25lIHZhbHVlLCBzZXQgaXQgdG8gdGhhdFxuICAgICAgaWYgKHRoaXMucmVxdWlyZWQgJiYgdGhpcy5maWVsZC5lbnVtICYmIHRoaXMuZmllbGQuZW51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMuZmllbGQuZW51bVswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmllbGQuZGVmYXVsdCAmJiAhdGhpcy5tb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gdGhpcy5maWVsZC5kZWZhdWx0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy52YWxpZGF0aW9uTWVzc2FnZXMgJiYgIXRoaXMuZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzKSB7XG4gICAgICAgIHRoaXMuZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzID0gdGhpcy52YWxpZGF0aW9uTWVzc2FnZXM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25Gb2N1cygpIHtcbiAgICBpZiAodGhpcy5mb2N1c0hhbmRsZXIpIHtcbiAgICAgIHRoaXMuZm9jdXNIYW5kbGVyKCk7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKCkge1xuICAgIGlmICh0aGlzLmJsdXJIYW5kbGVyKSB7XG4gICAgICB0aGlzLmJsdXJIYW5kbGVyKCk7XG4gICAgfVxuICB9XG5cbiAgb25DaGFuZ2UobmV3VmFsdWUpIHtcbiAgICBpZiAodGhpcy5jaGFuZ2VIYW5kbGVyKSB7XG4gICAgICB0aGlzLmNoYW5nZUhhbmRsZXIoeyB2YWx1ZTogbmV3VmFsdWUgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmVycm9yTWVzc2FnZSkge1xuICAgICAgZGVsZXRlIHRoaXMuZXJyb3JNZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIG9uUGVyc2lzdEFzeW5jRmFpbHVyZShyZXNwb25zZSkge1xuICAgIC8vIEludGVycm9nYXRlIHJlc3BvbnNlIGFuZCBleHRyYWN0IGVycm9yIG1lc3NhZ2VcbiAgICBpZiAoIXRoaXMudXBsb2FkT3B0aW9ucykge1xuICAgICAgdGhpcy51cGxvYWRPcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgIC8vIFdoZW4gd2UgZG8gaWQgcHJlIGV2YWwsIHdlIGdldCBlcnJvciBtZXNzYWdlcyBhbmQgdmFsaWRhdGlvbnMgYmFjayBpblxuICAgICAgLy8gdGhlIHJlc3BvbnNlLCBleHRyYWN0IHRoZW0gYW5kIHBhc3MgYmFjayB0byBiZSBzaG93biBpbiB0aGUgdXBsb2FkLlxuICAgICAgdGhpcy5leHRyYWN0RXJyb3JzKHJlc3BvbnNlLmRhdGEpO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uub3JpZ2luYWxEYXRhKSB7XG4gICAgICAvLyBmcm9udGVuZC1jb21tb24gaGFzIGFuIGludGVyY2VwdG9yIHRoYXQgc29tZXRpbWVzIGNoYW5nZXMgdGhlIHJlc3BvbnNlXG4gICAgICAvLyBmb3JtYXQsIG1vdmluZyB0aGUgcmVzcG9uc2UgZGF0YSB1bmRlciBhIG5ldyBrZXkgJ29yaWdpbmFsRGF0YSdcbiAgICAgIHRoaXMuZXh0cmFjdEVycm9ycyhyZXNwb25zZS5vcmlnaW5hbERhdGEpO1xuICAgIH1cbiAgfVxuXG4gIGV4dHJhY3RFcnJvcnMoZGF0YSkge1xuICAgIC8vIE5vdGU6IGVycm9yIGRhdGEgY2FuIG1hbmlwdWxhdGVkIGJ5IGludGVyY2VwdG9ycywgdGhpcyBlbnN1cmVzIHdlIHN0aWxsIGdldCBkYXRhIG5lZWRlZFxuICAgIGlmIChkYXRhLm1lc3NhZ2UpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucy5mYWlsdXJlVGV4dCA9IGRhdGEubWVzc2FnZTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhLmVycm9ycykpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucy52YWxpZGF0aW9uTWVzc2FnZXMgPSBkYXRhLmVycm9ycy5tYXAoZXJyb3IgPT4gZXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgb25QZXJzaXN0QXN5bmNTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgaWYgKCF0aGlzLnVwbG9hZE9wdGlvbnMpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIC8vIFRoZXNlIGFyZSB0b28gc3BlY2lmaWMgdG8gb25lIHVzZSBjYXNlLlxuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgdGhpcy51cGxvYWRPcHRpb25zLnN1Y2Nlc3NUZXh0ID0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBzaXplT2Yob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA/IE9iamVjdC5rZXlzKG9iaikubGVuZ3RoIDogMDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpc0ZlZWRiYWNrRGV0YWNoZWQoY29udHJvbFR5cGUpIHtcbiAgICBpZiAoY29udHJvbFR5cGUgPT09ICdkYXRlJ1xuICAgICAgICB8fCBjb250cm9sVHlwZSA9PT0gJ2ZpbGUnXG4gICAgICAgIHx8IGNvbnRyb2xUeXBlID09PSAncmFkaW8nXG4gICAgICAgIHx8IGNvbnRyb2xUeXBlID09PSAndGVsJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5SlNPTihvYmopIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59XG5cbkZpZWxkQ29udHJvbGxlci4kaW5qZWN0ID0gWydUd1JlcXVpcmVtZW50c1NlcnZpY2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgRmllbGRDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXAgdHctZmllbGQte3sgJGN0cmwubmFtZSB9fVxcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgJ2hhcy1lcnJvcic6ICRjdHJsLmZpZWxkLmVycm9yTWVzc2FnZSB8fCAkY3RybC5lcnJvck1lc3NhZ2UsXFxuICAgICdoYXMtd2FybmluZyc6ICRjdHJsLmZpZWxkLndhcm5pbmdNZXNzYWdlIHx8ICRjdHJsLndhcm5pbmdNZXNzYWdlLFxcbiAgICAnaGlkZGVuJzogJGN0cmwuZmllbGQuaGlkZGVuXFxuICB9XFxcIj4gPGxhYmVsIGNsYXNzPWNvbnRyb2wtbGFiZWwgbmctaWY9XFxcIiRjdHJsLmNvbnRyb2wgIT09ICdmaWxlJ1xcXCI+IHt7JGN0cmwuZmllbGQudGl0bGV9fSA8L2xhYmVsPiA8dHctZm9ybS1jb250cm9sIG5hbWU9XFxcInt7ICRjdHJsLm5hbWUgfX1cXFwiIGxhYmVsPVxcXCJ7eyAkY3RybC5maWVsZC50aXRsZSB9fVxcXCIgdHlwZT1cXFwie3sgJGN0cmwuY29udHJvbCB8IGxvd2VyY2FzZSB9fVxcXCIgcGxhY2Vob2xkZXI9XFxcInt7ICRjdHJsLmZpZWxkLnBsYWNlaG9sZGVyIH19XFxcIiBoZWxwLW9wdGlvbnM9JGN0cmwuZmllbGQuaGVscCBsb2NhbGU9XFxcInt7ICRjdHJsLmxvY2FsZSB9fVxcXCIgdXBsb2FkLWFjY2VwdD1cXFwie3sgJGN0cmwuZmllbGQuYWNjZXB0IH19XFxcIiB1cGxvYWQtaWNvbj1cXFwie3sgJGN0cmwuZmllbGQuaWNvbiB9fVxcXCIgdXBsb2FkLXRvby1sYXJnZS1tZXNzYWdlPVxcXCJ7eyAkY3RybC5maWVsZC50b29MYXJnZU1lc3NhZ2UgfX1cXFwiIG9wdGlvbnM9JGN0cmwuZmllbGQudmFsdWVzIHVwbG9hZC1vcHRpb25zPSRjdHJsLnVwbG9hZE9wdGlvbnMgbmctbW9kZWw9JGN0cmwubW9kZWwgbmctZm9jdXM9JGN0cmwub25Gb2N1cygpIG5nLWJsdXI9JGN0cmwub25CbHVyKCkgbmctY2hhbmdlPSRjdHJsLm9uQ2hhbmdlKCRjdHJsLm1vZGVsKSBuZy1yZXF1aXJlZD0kY3RybC5yZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5maWVsZC5kaXNhYmxlZCB0dy1taW5sZW5ndGg9XFxcIiRjdHJsLmZpZWxkLm1pbmxlbmd0aCB8fCAkY3RybC5maWVsZC5taW5MZW5ndGhcXFwiIHR3LW1heGxlbmd0aD1cXFwiJGN0cmwuZmllbGQubWF4bGVuZ3RoIHx8ICRjdHJsLmZpZWxkLm1heExlbmd0aFxcXCIgbmctbWluPSRjdHJsLmZpZWxkLm1pbmltdW0gbmctbWF4PSRjdHJsLmZpZWxkLm1heGltdW0gbmctcGF0dGVybj0kY3RybC5maWVsZC5wYXR0ZXJuIHRleHQtZm9ybWF0PSRjdHJsLmZpZWxkLmRpc3BsYXlGb3JtYXQgdmFsaWRhdGlvbi1hc3luYz0kY3RybC5maWVsZC52YWxpZGF0aW9uQXN5bmMgcGVyc2lzdC1hc3luYz0kY3RybC5maWVsZC5wZXJzaXN0QXN5bmMgZmlsZS11cGxvYWQtc291cmNlPSRjdHJsLmZpZWxkLnNvdXJjZVR5cGUgY2FtZXJhLW9wdGlvbnM9JGN0cmwuZmllbGQuY2FtZXJhIG9uLWFzeW5jLXN1Y2Nlc3M9JGN0cmwub25QZXJzaXN0QXN5bmNTdWNjZXNzKHJlc3BvbnNlKSBvbi1hc3luYy1mYWlsdXJlPSRjdHJsLm9uUGVyc2lzdEFzeW5jRmFpbHVyZShyZXNwb25zZSkgdHctdmFsaWRhdGlvbj48L3R3LWZvcm0tY29udHJvbD4gPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyIGVycm9yLW1lc3NhZ2VzXFxcIiBuZy1pZj1cXFwiJGN0cmwuc2l6ZU9mKCRjdHJsLmZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcykgPiAwIHx8ICRjdHJsLmVycm9yTWVzc2FnZVxcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgICAnYWxlcnQtZGV0YWNoJzogJGN0cmwuaXNGZWVkYmFja0RldGFjaGVkKCRjdHJsLmNvbnRyb2wpXFxuICAgIH1cXFwiPiA8ZGl2IG5nLXJlcGVhdD1cXFwiKHZhbGlkYXRpb25UeXBlLCB2YWxpZGF0aW9uTWVzc2FnZSkgaW4gJGN0cmwuZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzIHRyYWNrIGJ5ICRpbmRleFxcXCIgY2xhc3M9XFxcImVycm9yLXt7IHZhbGlkYXRpb25UeXBlIHwgbG93ZXJjYXNlIH19XFxcIj4ge3t2YWxpZGF0aW9uTWVzc2FnZX19IDwvZGl2PiA8ZGl2IGNsYXNzPWVycm9yLXByb3ZpZGVkIG5nLWlmPSRjdHJsLmVycm9yTWVzc2FnZT4ge3sgJGN0cmwuZXJyb3JNZXNzYWdlIH19IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtd2FybmluZ1xcXCIgbmctaWY9JGN0cmwud2FybmluZ01lc3NhZ2UgbmctY2xhc3M9XFxcIntcXG4gICAgICAnYWxlcnQtZGV0YWNoJzogJGN0cmwuaXNGZWVkYmFja0RldGFjaGVkKCRjdHJsLmNvbnRyb2wpXFxuICAgIH1cXFwiPiB7eyAkY3RybC53YXJuaW5nTWVzc2FnZSB9fSA8L2Rpdj4gPGRpdiBuZy1pZj0kY3RybC5maWVsZC5oZWxwIGNsYXNzPVxcXCJhbGVydCBhbGVydC1mb2N1c1xcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgICAnYWxlcnQtZGV0YWNoJzogJGN0cmwuaXNGZWVkYmFja0RldGFjaGVkKCRjdHJsLmNvbnRyb2wpXFxuICAgIH1cXFwiPiA8c3BhbiBuZy1pZj0kY3RybC5maWVsZC5oZWxwLm1lc3NhZ2U+IHt7ICRjdHJsLmZpZWxkLmhlbHAubWVzc2FnZSB9fSA8L3NwYW4+IDx1bCBuZy1pZj0kY3RybC5maWVsZC5oZWxwLmxpc3QgY2xhc3M9bGlzdC11bnN0eWxlZD4gPGxpIG5nLXJlcGVhdD1cXFwiaGVscE1lc3NhZ2UgaW4gJGN0cmwuZmllbGQuaGVscC5saXN0XFxcIj57eyBoZWxwTWVzc2FnZSB9fTwvbGk+IDwvdWw+IDxpbWcgbmctaWY9XFxcIiRjdHJsLmZpZWxkLmhlbHAuaW1hZ2UgJiYgJGN0cmwuY29udHJvbCAhPT0gJ2ZpbGUnXFxcIiBuZy1zcmM9e3skY3RybC5maWVsZC5oZWxwLmltYWdlfX0gYWx0PVxcXCJ7eyAkY3RybC5maWVsZC50aXRsZSB9fVxcXCIgY2xhc3M9XFxcInRodW1ibmFpbCBtLXktMlxcXCIvPiA8L2Rpdj4gPC9kaXY+IFwiOyIsImZ1bmN0aW9uIFJlcXVpcmVtZW50c1NlcnZpY2UoJGh0dHApIHtcbiAgdGhpcy5wcmVwUmVxdWlyZW1lbnRzID0gKGFsdGVybmF0aXZlcykgPT4ge1xuICAgIGlmICghYWx0ZXJuYXRpdmVzIHx8ICFhbHRlcm5hdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgcHJlcHBlZEFsdGVybmF0aXZlcyA9IGNvcHlPZihhbHRlcm5hdGl2ZXMpO1xuXG4gICAgcHJlcHBlZEFsdGVybmF0aXZlcy5mb3JFYWNoKChhbHRlcm5hdGl2ZSkgPT4ge1xuICAgICAgaWYgKGFsdGVybmF0aXZlLnByZXBhcmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmVwTGVnYWN5QWx0ZXJuYXRpdmVzKGFsdGVybmF0aXZlKTtcblxuICAgICAgYWx0ZXJuYXRpdmUucHJvcGVydGllcyA9IHRoaXMucHJlcEZpZWxkcyhhbHRlcm5hdGl2ZS5wcm9wZXJ0aWVzIHx8IGFsdGVybmF0aXZlLmZpZWxkcyk7XG5cbiAgICAgIC8vIElmIHdlJ3JlIHN0aWxsIHRyZWF0aW5nIHR5cGUgYXMgYSBzcGVjaWFsIGNhc2UsIG1vdmUgaXQgdG8gYSBoaWRkZW4gdmFsdWVcbiAgICAgIGlmIChhbHRlcm5hdGl2ZS50eXBlXG4gICAgICAgICAgJiYgYWx0ZXJuYXRpdmUudHlwZSAhPT0gJ29iamVjdCdcbiAgICAgICAgICAmJiAhYWx0ZXJuYXRpdmUudHlwZXMpIHtcbiAgICAgICAgYWx0ZXJuYXRpdmUucHJvcGVydGllcy50eXBlID0ge1xuICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIGVudW06IFthbHRlcm5hdGl2ZS50eXBlXSxcbiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICBoaWRkZW46IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICBhbHRlcm5hdGl2ZS50eXBlID0gJ29iamVjdCc7XG4gICAgICB9XG5cbiAgICAgIGFsdGVybmF0aXZlLnByZXBhcmVkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBwcmVwcGVkQWx0ZXJuYXRpdmVzO1xuICB9O1xuXG4gIHRoaXMucHJlcEZpZWxkcyA9IChmaWVsZHMsIG1vZGVsLCB2YWxpZGF0aW9uTWVzc2FnZXMpID0+IHtcbiAgICBpZiAoIWZpZWxkcykge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGxldCBwcmVwYXJlZEZpZWxkcyA9IGNvcHlPZihmaWVsZHMpO1xuXG4gICAgcHJlcGFyZWRGaWVsZHMgPSBmbGF0dGVuRmllbGRzV2l0aEdyb3VwcyhwcmVwYXJlZEZpZWxkcyk7XG4gICAgcHJlcGFyZWRGaWVsZHMgPSB0cmFuc2Zvcm1GaWVsZEFycmF5VG9NYXAocHJlcGFyZWRGaWVsZHMpO1xuICAgIHByZXBhcmVkRmllbGRzID0gdHJhbnNmb3JtTmVzdGVkS2V5c1RvTmVzdGVkU3BlY3MocHJlcGFyZWRGaWVsZHMpO1xuXG4gICAgT2JqZWN0LmtleXMocHJlcGFyZWRGaWVsZHMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcHJlcGFyZWRGaWVsZHNba2V5XSA9IHRoaXMucHJlcEZpZWxkKHByZXBhcmVkRmllbGRzW2tleV0sIG1vZGVsLCB2YWxpZGF0aW9uTWVzc2FnZXMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByZXBhcmVkRmllbGRzO1xuICB9O1xuXG4gIHRoaXMucHJlcEZpZWxkID0gKGZpZWxkLCBtb2RlbCwgdmFsaWRhdGlvbk1lc3NhZ2VzKSA9PiB7XG4gICAgY29uc3QgcHJlcGFyZWRGaWVsZCA9IGNvcHlPZihmaWVsZCk7XG5cbiAgICB0aGlzLnByZXBMZWdhY3lQcm9wcyhwcmVwYXJlZEZpZWxkKTtcbiAgICB0aGlzLnByZXBUeXBlKHByZXBhcmVkRmllbGQpO1xuICAgIHRoaXMucHJlcFBhdHRlcm4ocHJlcGFyZWRGaWVsZCk7XG4gICAgdGhpcy5wcmVwVmFsdWVzQXN5bmMocHJlcGFyZWRGaWVsZCwgbW9kZWwpO1xuICAgIHRoaXMucHJlcFZhbGlkYXRpb25NZXNzYWdlcyhwcmVwYXJlZEZpZWxkLCB2YWxpZGF0aW9uTWVzc2FnZXMpO1xuICAgIHRoaXMucHJlcEhlbHAocHJlcGFyZWRGaWVsZCk7XG5cbiAgICByZXR1cm4gcHJlcGFyZWRGaWVsZDtcbiAgfTtcblxuICAvKipcbiAgICogSW4gYW4gb2xkZXIgZm9ybWF0IHdlIGhhZCBhbiBleHRyYSBmaWVsZEdyb3VwIGxldmVsLCBoZXJlIHdlIGZsYXR0ZW4gdGhhdCBvdXRcbiAgICogU28gdGhlIGlubmVyIGFycmF5cyBvZiBmaWVsZHMgd2l0aGluIHRoZSBkaWZmZXJlbnQgZmllbGQgZ3JvdXBzIGFyZSBmbGF0dGVuZWRcbiAgICogdG8gYSBzaW5nbGUgYXJyYXksIHdoaWNoIGlzIHJldHVybmVkLlxuICAgKi9cbiAgZnVuY3Rpb24gZmxhdHRlbkZpZWxkc1dpdGhHcm91cHMoZmllbGRzKSB7XG4gICAgaWYgKGZpZWxkcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBsZXQgZmxhdHRlbmVkRmllbGRzID0gW107XG4gICAgICBmaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgLy8gSWYgd2UndmUgYmVlbiBnaXZlbiBhIGdyb3VwIHdpdGggbmVzdGVkIGZpZWxkcywgYnJlYWsgdGhlbSBvdXQuXG4gICAgICAgIGlmIChmaWVsZC5maWVsZHMpIHtcbiAgICAgICAgICBmbGF0dGVuZWRGaWVsZHMgPSBmbGF0dGVuZWRGaWVsZHMuY29uY2F0KGZsYXR0ZW5GaWVsZFdpdGhHcm91cChmaWVsZCwgZmllbGQuZmllbGRzKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQuZ3JvdXApIHtcbiAgICAgICAgICBmbGF0dGVuZWRGaWVsZHMgPSBmbGF0dGVuZWRGaWVsZHMuY29uY2F0KGZsYXR0ZW5GaWVsZFdpdGhHcm91cChmaWVsZCwgZmllbGQuZ3JvdXApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgaXQncyBhIHJlZ3VsYXIgZmllbGQsIGp1c3QgYWRkIGl0LlxuICAgICAgICAgIGZsYXR0ZW5lZEZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmxhdHRlbmVkRmllbGRzO1xuICAgIH1cbiAgICByZXR1cm4gZmllbGRzO1xuICB9XG5cbiAgZnVuY3Rpb24gZmxhdHRlbkZpZWxkV2l0aEdyb3VwKGZpZWxkLCBzdWJGaWVsZHMpIHtcbiAgICAvLyBJZiBmaXJzdCBmaWVsZCBkb2Vzbid0IGhhdmUgYSBsYWJlbCwgdXNlIHRoZSBvbmUgZnJvbSB0aGUgZ3JvdXBcbiAgICBpZiAoZmllbGQubmFtZSAmJiBzdWJGaWVsZHMubGVuZ3RoICYmICFzdWJGaWVsZHNbMF0ubmFtZSkge1xuICAgICAgc3ViRmllbGRzWzBdLm5hbWUgPSBmaWVsZC5uYW1lO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC53aWR0aCAmJiBzdWJGaWVsZHMubGVuZ3RoICYmICFzdWJGaWVsZHNbMF0ud2lkdGgpIHtcbiAgICAgIHN1YkZpZWxkc1swXS53aWR0aCA9IGZpZWxkLndpZHRoO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIHdhcyBhIHRvb2x0aXAgYXQgZmllbGRHcm91cCBsZXZlbCBtb3ZlIGl0IHRvIGZpcnN0IGZpZWxkLlxuICAgIGlmIChmaWVsZC50b29sdGlwICYmIHN1YkZpZWxkcy5sZW5ndGggJiYgIXN1YkZpZWxkc1swXS5oZWxwVGV4dCkge1xuICAgICAgc3ViRmllbGRzWzBdLmhlbHBUZXh0ID0gZmllbGQudG9vbHRpcDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQuaW5mbyAmJiBzdWJGaWVsZHMubGVuZ3RoICYmICFzdWJGaWVsZHNbMF0uaGVscFRleHQpIHtcbiAgICAgIHN1YkZpZWxkc1swXS5oZWxwVGV4dCA9IGZpZWxkLmluZm87XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgYXJlIHR3byBwYXJ0cyBvZiB0aGlzIGdyb3VwLCByZW5kZXIgdGhlbSBzaWRlIGJ5IHNpZGVcbiAgICBpZiAoc3ViRmllbGRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgc3ViRmllbGRzLmZvckVhY2goKG5lc3RlZEZpZWxkKSA9PiB7XG4gICAgICAgIG5lc3RlZEZpZWxkLndpZHRoID0gJ21kJztcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGFyZSB0aHJlZSBwYXJ0cywgcmVuZGVyIHRoZSBmaXJzdCB0d28gc2lkZSBieSBzaWRlXG4gICAgaWYgKHN1YkZpZWxkcy5sZW5ndGggPT09IDMpIHtcbiAgICAgIHN1YkZpZWxkc1swXS53aWR0aCA9ICdtZCc7XG4gICAgICBzdWJGaWVsZHNbMV0ud2lkdGggPSAnbWQnO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJGaWVsZHM7XG4gIH1cblxuICAvKlxuICAgKiBTb21lIG9sZGVyIHJlcXVpcmVtZW50cyByZXR1cm4gYW4gYXJyYXkgb2YgZmllbGRzLCB3aGVyZSBpdCBzaG91bGQgYmUgYSBtYXBcbiAgICogZnJvbSB0aGUgcHJvcGVydHkgbmFtZSB0byB0aGUgc3BlYy4gIFRoaXMgY29udmVydHMgYXJyYXlzIHRvIG1hcHMuXG4gICAqL1xuICBmdW5jdGlvbiB0cmFuc2Zvcm1GaWVsZEFycmF5VG9NYXAoZmllbGRzKSB7XG4gICAgaWYgKGZpZWxkcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBjb25zdCBmaWVsZE1hcCA9IHt9O1xuICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IGtleSA9IGZpZWxkLmtleSB8fCBmaWVsZC5uYW1lO1xuICAgICAgICBkZWxldGUgZmllbGQua2V5O1xuXG4gICAgICAgIGZpZWxkTWFwW2tleV0gPSBjb3B5T2YoZmllbGQpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmllbGRNYXA7XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHM7XG4gIH1cblxuICAvKlxuICAgKiBTb21lIG9sZGVyIGZvcm1hdCByZXR1cm4ga2V5cyBsaWtlICdhZGRyZXNzLmNpdHknLCBleHBlY3RpbmcgdGhlIHZhbHVlIG9mXG4gICAqIGNpdHkgdG8gYmUgbmVzdGVkIGluc2lkZSBhbiBhZGRyZXNzIG9iamVjdC4gIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIHNwZWMgb2ZcbiAgICogdHlwZSAnb2JqZWN0JywgYW5kIG5lc3RzIHN1Y2ggZmllbGRzIGluc2lkZSBvZiBpdC4gIFdoZW4gd2UgcmVuZGVyIHdlIHBhc3NcbiAgICogdGhpcyBvYmplY3Qgc3BlYyB0byBhIG5lc3RlZCBmaWVsZHNldC5cbiAgICovXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybU5lc3RlZEtleXNUb05lc3RlZFNwZWNzKGZpZWxkTWFwKSB7XG4gICAgaWYgKGZpZWxkTWFwIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0aW5nIGEgbWFwIG9mIGZpZWxkcywgbm90IGFuIGFycmF5Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgbmVzdGVkRmllbGRzID0ge307XG4gICAgT2JqZWN0LmtleXMoZmllbGRNYXApLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKGtleS5pbmRleE9mKCcuJykgPiAwKSB7XG4gICAgICAgIC8vIElmIHRoZSBrZXkgY29udGFpbnMgYSBwZXJpb2Qgd2UgbmVlZCB0byBuZXN0IHRoZSBmaWVsZHMgaW4gYW5vdGhlciBvYmplY3RcbiAgICAgICAgY29uc3QgcGF0aFNlY3Rpb25zID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgICAgIGNvbnN0IG5lc3RlZEtleSA9IHBhdGhTZWN0aW9uc1swXTtcblxuICAgICAgICAvLyBJZiB0aGlzIHN1YiBvYmplY3QgZG9lc24ndCBleGlzdCB5ZXQsIGNyZWF0ZSBpdFxuICAgICAgICBpZiAoIW5lc3RlZEZpZWxkc1tuZXN0ZWRLZXldKSB7XG4gICAgICAgICAgbmVzdGVkRmllbGRzW25lc3RlZEtleV0gPSB7XG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHt9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBuZXN0ZWRGaWVsZHNbbmVzdGVkS2V5XS5wcm9wZXJ0aWVzW3BhdGhTZWN0aW9uc1sxXV0gPSBmaWVsZE1hcFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmVzdGVkRmllbGRzW2tleV0gPSBmaWVsZE1hcFtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXN0ZWRGaWVsZHM7XG4gIH1cblxuICB0aGlzLnByZXBUeXBlID0gKGZpZWxkKSA9PiB7XG4gICAgY29uc3QgdHlwZSA9IGZpZWxkLnR5cGUgJiYgZmllbGQudHlwZS50b0xvd2VyQ2FzZSAmJiBmaWVsZC50eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuZm9ybWF0ID0gJ2RhdGUnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgICAgZmllbGQudHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICBmaWVsZC5jb250cm9sID0gJ3Bhc3N3b3JkJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnYm9vbGVhbic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgaWYgKCFmaWVsZC5jb250cm9sKSB7XG4gICAgICAgICAgZmllbGQuY29udHJvbCA9ICdzZWxlY3QnO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBmaWVsZC50eXBlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgZmllbGQuY29udHJvbCA9ICdyYWRpbyc7XG4gICAgICAgIGRlbGV0ZSBmaWVsZC50eXBlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VwbG9hZCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuZm9ybWF0ID0gJ2Jhc2U2NHVybCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGVsJzpcbiAgICAgICAgZmllbGQudHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICBmaWVsZC5mb3JtYXQgPSAncGhvbmUnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgZmllbGQudHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICBmaWVsZC5jb250cm9sID0gJ3RleHRhcmVhJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgIH1cblxuICAgIGlmICghZmllbGQuY29udHJvbCAmJiBmaWVsZC50eXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgZmllbGQuY29udHJvbCA9IHRoaXMuZ2V0Q29udHJvbFR5cGUoZmllbGQpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnByZXBMZWdhY3lBbHRlcm5hdGl2ZXMgPSAoYWx0ZXJuYXRpdmUpID0+IHtcbiAgICBpZiAoIWFsdGVybmF0aXZlLnRpdGxlICYmIGFsdGVybmF0aXZlLmxhYmVsKSB7XG4gICAgICBhbHRlcm5hdGl2ZS50aXRsZSA9IGFsdGVybmF0aXZlLmxhYmVsO1xuICAgIH1cbiAgICBpZiAoIWFsdGVybmF0aXZlLnRpdGxlKSB7XG4gICAgICBhbHRlcm5hdGl2ZS50aXRsZSA9IGdldE5hbWVGcm9tVHlwZShhbHRlcm5hdGl2ZS50eXBlKTtcbiAgICB9XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS50eXBlICYmIGFsdGVybmF0aXZlLm5hbWUpIHtcbiAgICAgIGFsdGVybmF0aXZlLnR5cGUgPSBhbHRlcm5hdGl2ZS5uYW1lO1xuICAgIH1cbiAgICBpZiAoIWFsdGVybmF0aXZlLmRlc2NyaXB0aW9uICYmIGFsdGVybmF0aXZlLnRvb2x0aXApIHtcbiAgICAgIGFsdGVybmF0aXZlLmRlc2NyaXB0aW9uID0gYWx0ZXJuYXRpdmUudG9vbHRpcDtcbiAgICB9XG4gICAgaWYgKGFsdGVybmF0aXZlLmZpZWxkR3JvdXBzICYmICFhbHRlcm5hdGl2ZS5maWVsZHMpIHtcbiAgICAgIGFsdGVybmF0aXZlLmZpZWxkcyA9IGZsYXR0ZW5GaWVsZHNXaXRoR3JvdXBzKGFsdGVybmF0aXZlLmZpZWxkR3JvdXBzKTtcbiAgICAgIGRlbGV0ZSBhbHRlcm5hdGl2ZS5maWVsZEdyb3VwcztcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwTGVnYWN5UHJvcHMgPSAoZmllbGQpID0+IHtcbiAgICBpZiAoZmllbGQubmFtZSAmJiAhZmllbGQudGl0bGUpIHtcbiAgICAgIGZpZWxkLnRpdGxlID0gZmllbGQubmFtZTtcbiAgICAgIGRlbGV0ZSBmaWVsZC5uYW1lO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC52YWxpZGF0aW9uUmVnZXhwKSB7XG4gICAgICBmaWVsZC5wYXR0ZXJuID0gZmllbGQudmFsaWRhdGlvblJlZ2V4cDtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWxpZGF0aW9uUmVnZXhwO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5taW4pIHtcbiAgICAgIGZpZWxkLm1pbmltdW0gPSBmaWVsZC5taW47XG4gICAgICBkZWxldGUgZmllbGQubWluO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5tYXgpIHtcbiAgICAgIGZpZWxkLm1heGltdW0gPSBmaWVsZC5tYXg7XG4gICAgICBkZWxldGUgZmllbGQubWF4O1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5leGFtcGxlICYmICFmaWVsZC5wbGFjZWhvbGRlcikge1xuICAgICAgZmllbGQucGxhY2Vob2xkZXIgPSBmaWVsZC5leGFtcGxlO1xuICAgICAgZGVsZXRlIGZpZWxkLmV4YW1wbGU7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnRvb2x0aXAgJiYgIWZpZWxkLmhlbHBUZXh0KSB7XG4gICAgICBmaWVsZC5oZWxwVGV4dCA9IGZpZWxkLnRvb2x0aXA7XG4gICAgICBkZWxldGUgZmllbGQudG9vbHRpcDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsdWVzQWxsb3dlZCAmJiAhZmllbGQudmFsdWVzKSB7XG4gICAgICBmaWVsZC52YWx1ZXMgPSBmaWVsZC52YWx1ZXNBbGxvd2VkO1xuICAgICAgZGVsZXRlIGZpZWxkLnZhbHVlc0FsbG93ZWQ7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlcyAmJiBmaWVsZC52YWx1ZXMubWFwKSB7XG4gICAgICBmaWVsZC52YWx1ZXMgPSB0aGlzLnByZXBMZWdhY3lWYWx1ZXMoZmllbGQudmFsdWVzKTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsdWUgJiYgIWZpZWxkLmRlZmF1bHQpIHtcbiAgICAgIGZpZWxkLmRlZmF1bHQgPSBmaWVsZC52YWx1ZTtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsdWVzKSB7XG4gICAgICAvLyBJbiBzb21lIGxlZ2FjeSBhcnJheXMgdGhlIGZpcnN0IHZhbHVlIGlzIGEgcGxhY2Vob2xkZXIsIGV4dHJhY3QgaXQuXG4gICAgICBpZiAoZmllbGQudmFsdWVzXG4gICAgICAgICYmIGZpZWxkLnZhbHVlcy5sZW5ndGhcbiAgICAgICAgJiYgZmllbGQudmFsdWVzWzBdXG4gICAgICAgICYmICFmaWVsZC52YWx1ZXNbMF0udmFsdWVcbiAgICAgICAgJiYgZmllbGQudmFsdWVzWzBdLmxhYmVsXG4gICAgICAgICYmICFmaWVsZC5wbGFjZWhvbGRlcikge1xuICAgICAgICBmaWVsZC5wbGFjZWhvbGRlciA9IGZpZWxkLnZhbHVlc1swXS5sYWJlbDtcbiAgICAgICAgZmllbGQudmFsdWVzID0gZmllbGQudmFsdWVzLnNsaWNlKDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB0aGlzLnByZXBMZWdhY3lWYWx1ZXMgPSB2YWx1ZXMgPT4gdmFsdWVzLm1hcChwcmVwTGVnYWN5VmFsdWUpO1xuXG4gIGZ1bmN0aW9uIHByZXBMZWdhY3lWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUubGFiZWwgJiYgdmFsdWUudGl0bGUpIHtcbiAgICAgIHZhbHVlLmxhYmVsID0gdmFsdWUudGl0bGU7XG4gICAgICBkZWxldGUgdmFsdWUudGl0bGU7XG4gICAgfVxuICAgIGlmICghdmFsdWUubGFiZWwgJiYgdmFsdWUubmFtZSkge1xuICAgICAgdmFsdWUubGFiZWwgPSB2YWx1ZS5uYW1lO1xuICAgICAgZGVsZXRlIHZhbHVlLm5hbWU7XG4gICAgfVxuXG4gICAgaWYgKCF2YWx1ZS52YWx1ZSAmJiB2YWx1ZS5jb2RlKSB7XG4gICAgICB2YWx1ZS52YWx1ZSA9IHZhbHVlLmNvZGU7XG4gICAgICBkZWxldGUgdmFsdWUuY29kZTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZS52YWx1ZSAmJiB2YWx1ZS5rZXkpIHtcbiAgICAgIHZhbHVlLnZhbHVlID0gdmFsdWUua2V5O1xuICAgICAgZGVsZXRlIHZhbHVlLmtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICB0aGlzLnByZXBQYXR0ZXJuID0gKGZpZWxkKSA9PiB7XG4gICAgaWYgKGZpZWxkLnBhdHRlcm4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIFJlZ0V4cChmaWVsZC5wYXR0ZXJuKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignQVBJIHJlZ2V4cCBpcyBpbnZhbGlkJyk7XG4gICAgICAgIGRlbGV0ZSBmaWVsZC5wYXR0ZXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgZmllbGQucGF0dGVybjtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwVmFsdWVzQXN5bmMgPSAoZmllbGQsIG1vZGVsKSA9PiB7XG4gICAgaWYgKCFmaWVsZC52YWx1ZXNBc3luYykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwb3N0RGF0YSA9IHt9O1xuICAgIGlmIChmaWVsZC52YWx1ZXNBc3luYy5wYXJhbXNcbiAgICAgICYmIGZpZWxkLnZhbHVlc0FzeW5jLnBhcmFtcy5sZW5ndGgpIHtcbiAgICAgIHBvc3REYXRhID0gdGhpcy5nZXRQYXJhbVZhbHVlc0Zyb21Nb2RlbChtb2RlbCwgZmllbGQudmFsdWVzQXN5bmMucGFyYW1zKTtcbiAgICB9XG5cbiAgICAvLyBSZXRyeSBvbmNlIG9uIGZhaWx1cmVcbiAgICB0aGlzLmZldGNoVmFsdWVzQXN5bmMoZmllbGQsIHBvc3REYXRhKVxuICAgICAgLmNhdGNoKCgpID0+IHRoaXMuZmV0Y2hWYWx1ZXNBc3luYyhmaWVsZCwgcG9zdERhdGEpKTtcbiAgfTtcblxuICB0aGlzLmZldGNoVmFsdWVzQXN5bmMgPSAoZmllbGQsIHBvc3REYXRhKSA9PiAkaHR0cCh7XG4gICAgbWV0aG9kOiBmaWVsZC52YWx1ZXNBc3luYy5tZXRob2QgfHwgJ0dFVCcsXG4gICAgdXJsOiBmaWVsZC52YWx1ZXNBc3luYy51cmwsXG4gICAgZGF0YTogcG9zdERhdGEgfHwge31cbiAgfSkudGhlbihcbiAgICAocmVzcG9uc2UpID0+IHsgZmllbGQudmFsdWVzID0gdGhpcy5wcmVwTGVnYWN5VmFsdWVzKHJlc3BvbnNlLmRhdGEpOyB9XG4gICk7XG5cbiAgdGhpcy5nZXRQYXJhbVZhbHVlc0Zyb21Nb2RlbCA9IChtb2RlbCwgcGFyYW1zKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHt9O1xuICAgIHBhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgaWYgKG1vZGVsW3BhcmFtLmtleV0pIHtcbiAgICAgICAgZGF0YVtwYXJhbS5wYXJhbWV0ZXJOYW1lXSA9IG1vZGVsW3BhcmFtLmtleV07XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtLnJlcXVpcmVkKSB7XG4gICAgICAgIC8vIFRPRE8gUHJvYmxlbSwgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLCBidXQgZGF0YSBpcyBtaXNzaW5nLlxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHRoaXMucHJlcFZhbGlkYXRpb25NZXNzYWdlcyA9IChmaWVsZCkgPT4ge1xuICAgIGlmIChmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMgJiYgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1pbmltdW0pIHtcbiAgICAgIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5taW4gPSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWluaW11bTtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWluaW11bTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyAmJiBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4aW11bSkge1xuICAgICAgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1heCA9IGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXhpbXVtO1xuICAgICAgZGVsZXRlIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXhpbXVtO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnByZXBIZWxwID0gKGZpZWxkKSA9PiB7XG4gICAgaWYgKCFmaWVsZC5oZWxwXG4gICAgICAmJiAoZmllbGQuaGVscFRleHQgfHwgZmllbGQuaGVscEltYWdlIHx8IGZpZWxkLmhlbHBMaXN0IHx8IGZpZWxkLnVwbG9hZFBsYWNlaG9sZGVySW1hZ2UpKSB7XG4gICAgICBmaWVsZC5oZWxwID0ge307XG4gICAgfVxuICAgIGlmIChmaWVsZC5oZWxwVGV4dCkge1xuICAgICAgZmllbGQuaGVscC5tZXNzYWdlID0gZmllbGQuaGVscFRleHQ7XG4gICAgICBkZWxldGUgZmllbGQuaGVscFRleHQ7XG4gICAgfVxuICAgIGlmIChmaWVsZC5oZWxwSW1hZ2UpIHtcbiAgICAgIGZpZWxkLmhlbHAuaW1hZ2UgPSBmaWVsZC5oZWxwSW1hZ2U7XG4gICAgICBkZWxldGUgZmllbGQuaGVscEltYWdlO1xuICAgIH1cbiAgICAvLyBoZWxwSW1hZ2UgZG9lcyBub3QgaGF2ZSBzYW1lIGxpbmVhZ2UgcGxhY2Vob2xkZXIgaW1hZ2VcbiAgICAvLyAyIGZpZWxkcyBjYW4gb3ZlcndyaXRlIGVhY2ggb3RoZXIgc2FmZWx5IChvbmx5IG9uZSB3aWxsIGJlIHByZXNlbnQgYXQgYSB0aW1lKVxuICAgIGlmIChmaWVsZC51cGxvYWRQbGFjZWhvbGRlckltYWdlKSB7XG4gICAgICBmaWVsZC5oZWxwLmltYWdlID0gZmllbGQudXBsb2FkUGxhY2Vob2xkZXJJbWFnZTtcbiAgICAgIGRlbGV0ZSBmaWVsZC51cGxvYWRQbGFjZWhvbGRlckltYWdlO1xuICAgIH1cbiAgICBpZiAoZmllbGQubGlzdCkge1xuICAgICAgZmllbGQuaGVscC5saXN0ID0gZmllbGQuaGVscExpc3Q7XG4gICAgICBkZWxldGUgZmllbGQuaGVscExpc3Q7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0UmVxdWlyZWRGaWVsZHMgPSBnZXRSZXF1aXJlZEZpZWxkcztcbiAgdGhpcy5nZXRDb250cm9sVHlwZSA9IGdldENvbnRyb2xUeXBlO1xufVxuXG4vKipcbiAqIE9sZGVyIHN0eWxlIGZvcm1hdCBoYWQgcmVxdWlyZWQgYXMgYSBwcm9wZXJ0eSBvZiBmaWVsZHMsIGluIEpTT04gc2NoZW1hIGl0XG4gKiBzaG91bGQgYmUgYSBzZXBhcmF0ZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lc1xuICovXG5mdW5jdGlvbiBnZXRSZXF1aXJlZEZpZWxkcyhmaWVsZHMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGRzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZmllbGQgbWFwJyk7XG4gIH1cbiAgLy8gUmV0dXJuIGFycmF5IG9mIGtleXMgdGhhdCBoYXZlIHJlcXVpcmVkIHNldFxuICByZXR1cm4gT2JqZWN0LmtleXMoZmllbGRzKS5maWx0ZXIocHJvcGVydHkgPT4gZmllbGRzW3Byb3BlcnR5XS5yZXF1aXJlZCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbnRyb2xUeXBlKGZpZWxkKSB7XG4gIGlmIChmaWVsZC5jb250cm9sKSB7XG4gICAgcmV0dXJuIGZpZWxkLmNvbnRyb2wudG9Mb3dlckNhc2UoKTtcbiAgfVxuICBpZiAoZmllbGQuaGlkZGVuKSB7XG4gICAgcmV0dXJuICdoaWRkZW4nO1xuICB9XG4gIGlmIChmaWVsZC52YWx1ZXNBc3luYykge1xuICAgIHJldHVybiAnc2VsZWN0JztcbiAgfVxuICBpZiAoZmllbGQudmFsdWVzICYmIGZpZWxkLnZhbHVlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZ2V0U2VsZWN0aW9uVHlwZShmaWVsZCk7XG4gIH1cblxuICBzd2l0Y2ggKGZpZWxkLnR5cGUpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIGdldENvbnRyb2xGb3JTdHJpbmdGb3JtYXQoZmllbGQuZm9ybWF0KTtcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuICdjaGVja2JveCc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAndGV4dCc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q29udHJvbEZvclN0cmluZ0Zvcm1hdChmb3JtYXQpIHtcbiAgc3dpdGNoIChmb3JtYXQpIHtcbiAgICBjYXNlICdkYXRlJzpcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgY2FzZSAnYmFzZTY0dXJsJzpcbiAgICAgIHJldHVybiAnZmlsZSc7XG4gICAgY2FzZSAncGFzc3dvcmQnOlxuICAgICAgcmV0dXJuICdwYXNzd29yZCc7XG4gICAgY2FzZSAndXJpJzpcbiAgICAgIHJldHVybiAndGV4dCc7IC8vICd1cmwnOyAtIG5vdCBpbXBsZW1lbnRlZFxuICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgIHJldHVybiAndGV4dCc7IC8vICdlbWFpbCc7IC0gbm90IGltcGxlbWVudGVkXG4gICAgY2FzZSAncGhvbmUnOlxuICAgICAgcmV0dXJuICd0ZWwnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ3RleHQnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGlvblR5cGUoZmllbGQpIHtcbiAgaWYgKGZpZWxkLmNvbnRyb2wpIHtcbiAgICByZXR1cm4gZmllbGQuY29udHJvbDtcbiAgfVxuXG4gIGlmIChmaWVsZC50eXBlID09PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiAnc2VsZWN0JztcbiAgfVxuXG4gIGlmIChmaWVsZC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgcmV0dXJuICdyYWRpbyc7XG4gIH1cblxuICBjb25zdCB2YWx1ZXMgPSBmaWVsZC5lbnVtIHx8IGZpZWxkLnZhbHVlcztcbiAgaWYgKHZhbHVlcykge1xuICAgIHJldHVybiB2YWx1ZXMubGVuZ3RoID4gMyA/ICdzZWxlY3QnIDogJ3JhZGlvJztcbiAgfVxuICByZXR1cm4gJ3NlbGVjdCc7XG59XG5cbmZ1bmN0aW9uIGNvcHlPZihvYmopIHtcbiAgLy8gT2JqZWN0LmFzc2lnbiBpcyBuaWNlciwgYnV0IGxhY2tzIGllIHN1cHBvcnRcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSk7XG59XG5cbi8qKlxuICogU29tZSBvbGRlciByZXF1aXJtZW50cyBmb3JtYXRzIGRvIG5vdCBpbmNsdWRlIGEgbGFiZWwgZm9yIGFsdGVybmF0aXZlc1xuICovXG5mdW5jdGlvbiBnZXROYW1lRnJvbVR5cGUodGFiVHlwZSkge1xuICBpZiAodGFiVHlwZSAmJiB0YWJUeXBlLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB0YWJOYW1lV2l0aFNwYWNlcyA9IHRhYlR5cGUudG9Mb3dlckNhc2UoKS5zcGxpdCgnXycpLmpvaW4oJyAnKTsgLy8gU3RyaW5nLnJlcGxhY2UgbWV0aG9kIG9ubHkgcmVwbGFjZXMgZmlyc3QgaW5zdGFuY2VcbiAgICByZXR1cm4gdGFiTmFtZVdpdGhTcGFjZXMuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0YWJOYW1lV2l0aFNwYWNlcy5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cblxuUmVxdWlyZW1lbnRzU2VydmljZS4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG5leHBvcnQgZGVmYXVsdCBSZXF1aXJlbWVudHNTZXJ2aWNlO1xuIiwiaW1wb3J0IFZhbGlkYXRpb25Db250cm9sbGVyIGZyb20gJy4vY29udHJvbC12YWxpZGF0aW9uLmNvbnRyb2xsZXIuanMnO1xuXG5mdW5jdGlvbiBUd1ZhbGlkYXRpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiB7XG4gICAgICAkbmdNb2RlbDogJ25nTW9kZWwnLFxuICAgIH0sXG4gICAgY29udHJvbGxlcjogVmFsaWRhdGlvbkNvbnRyb2xsZXJcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVHdWYWxpZGF0aW9uO1xuIiwiXG5jbGFzcyBWYWxpZGF0aW9uQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRzY29wZSwgJGVsZW1lbnQsIFR3RG9tU2VydmljZSkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICBjb25zdCBmb3JtR3JvdXAgPSBUd0RvbVNlcnZpY2UuZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGVsZW1lbnQsICdmb3JtLWdyb3VwJyk7XG4gICAgY29uc3QgJG5nTW9kZWwgPSAkZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG5cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ludmFsaWQnLCAoZXZlbnQpID0+IHtcbiAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCB2YWxpZGF0aW9uIHRvb2x0aXBzXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMudmFsaWRhdGlvbiA9ICgpID0+IHtcbiAgICAgIC8vIEV2YWx1YXRlIGFmdGVyIG5nTW9kZWwgdXBkYXRlcywgd2UgYXJlIHN0aWxsIGluIHZhbGlkYXRpb24gY2hhaW5cbiAgICAgICRzY29wZS4kZXZhbEFzeW5jKCgpID0+IHtcbiAgICAgICAgY2hlY2tNb2RlbEFuZFVwZGF0ZSgkbmdNb2RlbCwgZm9ybUdyb3VwLCBlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIC8vIFRoZSBmaXJzdCB0aW1lIHdlIGJsdXIsIG1vZGVsIGlzIHN0aWxsIHByaXN0aW5lIHdoZW4gdmFsaWRhdGlvbiBvY2N1cnMsIHNvIHBlcmZvcm0gYWdhaW4uXG4gICAgY29uc3Qgb25CbHVyID0gKCkgPT4ge1xuICAgICAgLy8gQ3VzdG9tIGVsZW1lbnRzIG11c3QgdHJpZ2dlciBibHVyIG1hbnVhbGx5IGZvciBjb3JyZWN0IGJlaGF2aW91clxuICAgICAgJHNjb3BlLiRldmFsQXN5bmMoKCkgPT4ge1xuICAgICAgICBjaGVja01vZGVsQW5kVXBkYXRlKCRuZ01vZGVsLCBmb3JtR3JvdXAsIGVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uQmx1cik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tNb2RlbEFuZFVwZGF0ZShuZ01vZGVsLCBmb3JtR3JvdXAsIGVsZW1lbnQpIHtcbiAgaWYgKG5nTW9kZWwuJHZhbGlkKSB7XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5nTW9kZWwuJHRvdWNoZWQgJiYgbmdNb2RlbC4kZGlydHkpIHtcbiAgICBpZiAoZm9ybUdyb3VwKSB7XG4gICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnaGFzLWVycm9yJyk7XG4gICAgfVxuICAgIC8vIFNldCBhcmlhIGludmFsaWQgZm9yIHNjcmVlbiByZWFkZXJzXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcsICd0cnVlJyk7XG4gIH1cbn1cblxuVmFsaWRhdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBWYWxpZGF0aW9uQ29udHJvbGxlcjtcbiIsImltcG9ydCB7IGlzT2JqZWN0LCBpc0FycmF5IH0gZnJvbSAnLi4vdHlwZS12YWxpZGF0b3JzJztcblxuaW1wb3J0IHtcbiAgZ2V0U3RyaW5nVmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXROdW1iZXJWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldEludGVnZXJWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldEJvb2xlYW5WYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldEFycmF5VmFsaWRhdGlvbkZhaWx1cmVzXG59IGZyb20gJy4uL3ZhbGlkYXRpb24tZmFpbHVyZXMnO1xuXG5mdW5jdGlvbiBpc1ZhbGlkU3RyaW5nU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgcmV0dXJuICFnZXRTdHJpbmdWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSkubGVuZ3RoO1xufVxuZnVuY3Rpb24gaXNWYWxpZE51bWJlclNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIHJldHVybiAhZ2V0TnVtYmVyVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRJbnRlZ2VyU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgcmV0dXJuICFnZXRJbnRlZ2VyVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRCb29sZWFuU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgcmV0dXJuICFnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE9iamVjdFNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHNjaGVtYS50eXBlICE9PSAnb2JqZWN0JyB8fCAhaXNPYmplY3Qoc2NoZW1hLnByb3BlcnRpZXMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKVxuICAgIC5tYXAocHJvcGVydHlOYW1lID0+IGlzT2JqZWN0UHJvcGVydHlWYWxpZChcbiAgICAgIHZhbHVlW3Byb3BlcnR5TmFtZV0sXG4gICAgICBzY2hlbWEucHJvcGVydGllc1twcm9wZXJ0eU5hbWVdLFxuICAgICAgc2NoZW1hLnJlcXVpcmVkICYmIHNjaGVtYS5yZXF1aXJlZC5pbmRleE9mKHByb3BlcnR5TmFtZSkgPj0gMFxuICAgICkpXG4gICAgLnJlZHVjZSgodmFsaWRTb0ZhciwgdmFsaWRQcm9wZXJ0eSkgPT4gdmFsaWRTb0ZhciAmJiB2YWxpZFByb3BlcnR5LCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RQcm9wZXJ0eVZhbGlkKHByb3BlcnR5VmFsdWUsIHByb3BlcnR5U2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIGlmICh0eXBlb2YgcHJvcGVydHlWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gIWlzUmVxdWlyZWQ7XG4gIH1cbiAgcmV0dXJuIGlzVmFsaWRTY2hlbWEocHJvcGVydHlWYWx1ZSwgcHJvcGVydHlTY2hlbWEpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlTY2hlbWEodmFsdWUsIHNjaGVtYSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGlmIChzY2hlbWEudHlwZSAhPT0gJ2FycmF5JyB8fCAhaXNPYmplY3Qoc2NoZW1hLml0ZW1zKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChnZXRBcnJheVZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdmFsdWUucmVkdWNlKCh2YWxpZFNvRmFyLCBpdGVyKSA9PiBpc1ZhbGlkU2NoZW1hKGl0ZXIsIHNjaGVtYS5pdGVtcyksIHRydWUpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkT25lT2ZTY2hlbWEodmFsdWUsIHNjaGVtYSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGlmICghaXNBcnJheShzY2hlbWEub25lT2YpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBzY2hlbWEub25lT2YucmVkdWNlKCh2YWxpZFNvRmFyLCBpdGVyKSA9PiB2YWxpZFNvRmFyIHx8IGlzVmFsaWRTY2hlbWEodmFsdWUsIGl0ZXIpLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRBbGxPZlNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKCFpc0FycmF5KHNjaGVtYS5hbGxPZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHNjaGVtYS5hbGxPZi5yZWR1Y2UoKHZhbGlkU29GYXIsIGl0ZXIpID0+IHZhbGlkU29GYXIgJiYgaXNWYWxpZFNjaGVtYSh2YWx1ZSwgaXRlciksIHRydWUpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIGFueSB2YWx1ZSBhZ2FpbnN0IGEgZ2l2ZW4gc2NoZW1hXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRTY2hlbWEodmFsdWUsIHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLm9uZU9mKSB7XG4gICAgcmV0dXJuIGlzVmFsaWRPbmVPZlNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgfVxuXG4gIGlmIChzY2hlbWEuYWxsT2YpIHtcbiAgICByZXR1cm4gaXNWYWxpZEFsbE9mU2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICB9XG5cbiAgc3dpdGNoIChzY2hlbWEudHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gaXNWYWxpZFN0cmluZ1NjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzVmFsaWROdW1iZXJTY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gICAgY2FzZSAnaW50ZWdlcic6XG4gICAgICByZXR1cm4gaXNWYWxpZEludGVnZXJTY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gaXNWYWxpZEJvb2xlYW5TY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gICAgY2FzZSAnYXJyYXknOlxuICAgICAgcmV0dXJuIGlzVmFsaWRBcnJheVNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGlzVmFsaWRPYmplY3RTY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgeyBpc1ZhbGlkU2NoZW1hIH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiIsIlxuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbn1cbmZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG59XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbmV4cG9ydCB7XG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNJbnRlZ2VyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc0FycmF5XG59O1xuIiwiaW1wb3J0IHtcbiAgaXNPYmplY3QsXG4gIGlzQXJyYXksXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNJbnRlZ2VyLFxuICBpc0Jvb2xlYW5cbn0gZnJvbSAnLi4vdHlwZS12YWxpZGF0b3JzJztcblxuaW1wb3J0IHtcbiAgaXNWYWxpZFJlcXVpcmVkLFxuICBpc1ZhbGlkTWluTGVuZ3RoLFxuICBpc1ZhbGlkTWF4TGVuZ3RoLFxuICBpc1ZhbGlkUGF0dGVybixcbiAgaXNWYWxpZE1heCxcbiAgaXNWYWxpZE1pbixcbiAgaXNWYWxpZE1pbkl0ZW1zLFxuICBpc1ZhbGlkTWF4SXRlbXNcbn0gZnJvbSAnLi4vcnVsZS12YWxpZGF0b3JzJztcblxuZnVuY3Rpb24gZ2V0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpIHtcbiAgc3dpdGNoIChzY2hlbWEudHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gZ2V0U3RyaW5nVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gZ2V0TnVtYmVyVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpO1xuICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgcmV0dXJuIGdldEludGVnZXJWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCk7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKTtcbiAgICBjYXNlICdhcnJheSc6XG4gICAgICByZXR1cm4gZ2V0QXJyYXlWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSk7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiBnZXRPYmplY3RWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdHJpbmdWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCkge1xuICBpZiAoIWlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGNvbnN0IGZhaWx1cmVzID0gW107XG4gIGlmICghaXNWYWxpZFJlcXVpcmVkKHZhbHVlLCBpc1JlcXVpcmVkKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ3JlcXVpcmVkJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkTWluTGVuZ3RoKHZhbHVlLCBzY2hlbWEubWluTGVuZ3RoKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21pbkxlbmd0aCcpO1xuICB9XG4gIGlmICghaXNWYWxpZE1heExlbmd0aCh2YWx1ZSwgc2NoZW1hLm1heExlbmd0aCkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtYXhMZW5ndGgnKTtcbiAgfVxuICBpZiAoIWlzVmFsaWRQYXR0ZXJuKHZhbHVlLCBzY2hlbWEucGF0dGVybikpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdwYXR0ZXJuJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkTWluKHZhbHVlLCBzY2hlbWEubWluKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21pbicpO1xuICB9XG4gIGlmICghaXNWYWxpZE1heCh2YWx1ZSwgc2NoZW1hLm1heCkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtYXgnKTtcbiAgfVxuICByZXR1cm4gZmFpbHVyZXM7XG59XG5cbmZ1bmN0aW9uIGdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgcmV0dXJuIFsndHlwZSddO1xuICB9XG5cbiAgY29uc3QgZmFpbHVyZXMgPSBbXTtcbiAgaWYgKCFpc1ZhbGlkUmVxdWlyZWQodmFsdWUsIGlzUmVxdWlyZWQpKSB7XG4gICAgZmFpbHVyZXMucHVzaCgncmVxdWlyZWQnKTtcbiAgfVxuICBpZiAoIWlzVmFsaWRNaW4odmFsdWUsIHNjaGVtYS5taW4pKSB7XG4gICAgZmFpbHVyZXMucHVzaCgnbWluJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkTWF4KHZhbHVlLCBzY2hlbWEubWF4KSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21heCcpO1xuICB9XG4gIHJldHVybiBmYWlsdXJlcztcbn1cblxuZnVuY3Rpb24gZ2V0SW50ZWdlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIGlmICghaXNJbnRlZ2VyKHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuICByZXR1cm4gZ2V0TnVtYmVyVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpO1xufVxuXG5mdW5jdGlvbiBnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpIHtcbiAgaWYgKCFpc0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgcmV0dXJuIFsndHlwZSddO1xuICB9XG5cbiAgY29uc3QgZmFpbHVyZXMgPSBbXTtcbiAgaWYgKCFpc1ZhbGlkUmVxdWlyZWQodmFsdWUsIGlzUmVxdWlyZWQpKSB7XG4gICAgZmFpbHVyZXMucHVzaCgncmVxdWlyZWQnKTtcbiAgfVxuICByZXR1cm4gZmFpbHVyZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFycmF5VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpIHtcbiAgaWYgKCFpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGNvbnN0IGZhaWx1cmVzID0gW107XG4gIGlmICghaXNWYWxpZE1pbkl0ZW1zKHZhbHVlLCBzY2hlbWEubWluSXRlbXMpKSB7XG4gICAgZmFpbHVyZXMucHVzaCgnbWluSXRlbXMnKTtcbiAgfVxuICBpZiAoIWlzVmFsaWRNYXhJdGVtcyh2YWx1ZSwgc2NoZW1hLm1heEl0ZW1zKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21heEl0ZW1zJyk7XG4gIH1cbiAgcmV0dXJuIGZhaWx1cmVzO1xufVxuXG4vKipcbiAqIFdoZW4gdmFsaWRhdGluZyBhbiBvYmplY3Qgd2Ugb25seSBjaGVja2luZyB0aGF0IGl0IGlzIGFuIG9iamVjdCBhbmQgdGhhdCBpdFxuICogaGFzIHRoZSByZXF1aXJlZCBwcm9wZXJ0aWVzLCB3ZSBkbyBub3QgY2hlY2sgaWYgdGhlIHByb3BlcnRpZXMgYXJlIHZhbGlkLlxuICovXG5mdW5jdGlvbiBnZXRPYmplY3RWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGlmICghaXNBcnJheShzY2hlbWEucmVxdWlyZWQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgYWxsUHJlc2VudCA9IHNjaGVtYS5yZXF1aXJlZFxuICAgIC5tYXAocHJvcCA9PiB0eXBlb2YgdmFsdWVbcHJvcF0gIT09ICd1bmRlZmluZWQnKVxuICAgIC5yZWR1Y2UoKHByb3BJbk1vZGVsLCB2YWxpZFNvRmFyKSA9PiBwcm9wSW5Nb2RlbCAmJiB2YWxpZFNvRmFyLCB0cnVlKTtcblxuICByZXR1cm4gYWxsUHJlc2VudCA/IFtdIDogWydyZXF1aXJlZCddO1xufVxuXG5leHBvcnQge1xuICBnZXRWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldFN0cmluZ1ZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0TnVtYmVyVmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRJbnRlZ2VyVmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRBcnJheVZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0T2JqZWN0VmFsaWRhdGlvbkZhaWx1cmVzXG59O1xuIiwiXG5mdW5jdGlvbiBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWwsIHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLmFsbE9mKSB7XG4gICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoQWxsT2ZTY2hlbWEobW9kZWwsIHNjaGVtYSk7XG4gIH1cblxuICBpZiAoc2NoZW1hLm9uZU9mKSB7XG4gICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoT25lT2ZTY2hlbWEobW9kZWwsIHNjaGVtYSk7XG4gIH1cblxuICBpZiAoc2NoZW1hLnR5cGUpIHtcbiAgICBzd2l0Y2ggKHNjaGVtYS50eXBlKSB7XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICByZXR1cm4gY2xlYW5Nb2RlbFdpdGhPYmplY3RTY2hlbWEobW9kZWwsIHNjaGVtYSk7XG4gICAgICBjYXNlICdhcnJheSc6XG4gICAgICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aEFycmF5U2NoZW1hKG1vZGVsLCBzY2hlbWEpO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoU3RyaW5nU2NoZW1hKG1vZGVsKTtcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoTnVtYmVyU2NoZW1hKG1vZGVsKTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gY2xlYW5Nb2RlbFdpdGhCb29sZWFuU2NoZW1hKG1vZGVsKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzY2hlbWEuZW51bSAmJiBzY2hlbWEuZW51bS5pbmRleE9mKG1vZGVsKSA+PSAwKSB7XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG4gIC8vIFVucmVjb2duaXNlZCBzY2hlbWFcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNsZWFuTW9kZWxXaXRoT2JqZWN0U2NoZW1hKG1vZGVsLCBzY2hlbWEpIHtcbiAgY29uc3QgY2xlYW5lZE1vZGVsID0ge307XG4gIE9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgIC8vIElmIHRoZSBwcm9wZXJ0eSBleGlzdHMgaW4gdGhlIG1vZGVsLCBjbGVhbiBpdCwgYW5kIGFkZCBpdFxuICAgIGlmIChtb2RlbCAmJiB0eXBlb2YgbW9kZWxbcHJvcGVydHldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWxbcHJvcGVydHldLCBzY2hlbWEucHJvcGVydGllc1twcm9wZXJ0eV0pO1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIGNsZWFuZWRNb2RlbFtwcm9wZXJ0eV0gPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xlYW5lZE1vZGVsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aEFycmF5U2NoZW1hKG1vZGVsLCBzY2hlbWEpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobW9kZWwpKSB7XG4gICAgcmV0dXJuIG1vZGVsLm1hcChjaGlsZE1vZGVsID0+IGdldFZhbGlkTW9kZWxQYXJ0cyhjaGlsZE1vZGVsLCBzY2hlbWEpKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhTdHJpbmdTY2hlbWEobW9kZWwpIHtcbiAgaWYgKHR5cGVvZiBtb2RlbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbW9kZWw7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNsZWFuTW9kZWxXaXRoTnVtYmVyU2NoZW1hKG1vZGVsKSB7XG4gIGlmICh0eXBlb2YgbW9kZWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aEJvb2xlYW5TY2hlbWEobW9kZWwpIHtcbiAgaWYgKHR5cGVvZiBtb2RlbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aEFsbE9mU2NoZW1hKG1vZGVsLCBzY2hlbWEpIHtcbiAgY29uc3QgY2xlYW5lZE1vZGVsID0ge307XG4gIGxldCB2YWxpZFN1YnNldE9mTW9kZWw7XG5cbiAgc2NoZW1hLmFsbE9mLmZvckVhY2goKG5lc3RlZFNjaGVtYSkgPT4ge1xuICAgIHZhbGlkU3Vic2V0T2ZNb2RlbCA9IGdldFZhbGlkTW9kZWxQYXJ0cyhtb2RlbCwgbmVzdGVkU2NoZW1hKTtcblxuICAgIGlmICh0eXBlb2YgdmFsaWRTdWJzZXRPZk1vZGVsID09PSAnb2JqZWN0Jykge1xuICAgICAgYW5ndWxhci5leHRlbmQoY2xlYW5lZE1vZGVsLCB2YWxpZFN1YnNldE9mTW9kZWwpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjbGVhbmVkTW9kZWw7XG59XG5cbmZ1bmN0aW9uIGNsZWFuTW9kZWxXaXRoT25lT2ZTY2hlbWEobW9kZWwsIHNjaGVtYSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHJldHVybiBtb2RlbDtcbn1cblxuZXhwb3J0IHsgZ2V0VmFsaWRNb2RlbFBhcnRzIH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiIsIlxuZnVuY3Rpb24gaXNWYWxpZFJlcXVpcmVkKHZhbHVlLCBpc1JlcXVpcmVkKSB7XG4gIHJldHVybiAhaXNSZXF1aXJlZCB8fCB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWluTGVuZ3RoKHZhbHVlLCBtaW5MZW5ndGgpIHtcbiAgcmV0dXJuIHR5cGVvZiBtaW5MZW5ndGggPT09ICd1bmRlZmluZWQnIHx8ICghIXZhbHVlICYmIHZhbHVlLmxlbmd0aCA+PSBtaW5MZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWF4TGVuZ3RoKHZhbHVlLCBtYXhMZW5ndGgpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXhMZW5ndGggPT09ICd1bmRlZmluZWQnIHx8ICghIXZhbHVlICYmIHZhbHVlLmxlbmd0aCA8PSBtYXhMZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUGF0dGVybih2YWx1ZSwgcGF0dGVybikge1xuICB0cnkge1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiAhIXJlZ2V4LnRlc3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNYXgodmFsdWUsIG1heCkge1xuICByZXR1cm4gdHlwZW9mIG1heCA9PT0gJ3VuZGVmaW5lZCcgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgPD0gbWF4KTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1pbih2YWx1ZSwgbWluKSB7XG4gIHJldHVybiB0eXBlb2YgbWluID09PSAndW5kZWZpbmVkJyB8fCAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSA+PSBtaW4pO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWluSXRlbXModmFsdWUsIG1pbkl0ZW1zKSB7XG4gIHJldHVybiAhbWluSXRlbXMgfHwgKCEhdmFsdWUgJiYgdmFsdWUubGVuZ3RoID49IG1pbkl0ZW1zKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1heEl0ZW1zKHZhbHVlLCBtYXhJdGVtcykge1xuICByZXR1cm4gIW1heEl0ZW1zIHx8ICghIXZhbHVlICYmIHZhbHVlLmxlbmd0aCA8PSBtYXhJdGVtcyk7XG59XG5cbmV4cG9ydCB7XG4gIGlzVmFsaWRSZXF1aXJlZCxcbiAgaXNWYWxpZE1pbkxlbmd0aCxcbiAgaXNWYWxpZE1heExlbmd0aCxcbiAgaXNWYWxpZFBhdHRlcm4sXG4gIGlzVmFsaWRNYXgsXG4gIGlzVmFsaWRNaW4sXG4gIGlzVmFsaWRNaW5JdGVtcyxcbiAgaXNWYWxpZE1heEl0ZW1zXG59O1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5hbGwtb2YnLCBbXSlcbiAgLmNvbXBvbmVudCgnYWxsT2ZTY2hlbWEnLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hLmFycmF5JywgW10pXG4gIC5jb21wb25lbnQoJ2FycmF5U2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcbmltcG9ydCBGaWVsZCBmcm9tICcuLi8uLi9mb3Jtcy9maWVsZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEuYmFzaWMtdHlwZScsIFtcbiAgICBGaWVsZFxuICBdKVxuICAuY29tcG9uZW50KCdiYXNpY1R5cGVTY2hlbWEnLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hLm9iamVjdCcsIFtdKVxuICAuY29tcG9uZW50KCdvYmplY3RTY2hlbWEnLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IFJhZGlvIGZyb20gJy4uLy4uL2Zvcm1zL3JhZGlvJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5vbmUtb2YnLCBbXG4gICAgUmFkaW9cbiAgXSlcbiAgLmNvbXBvbmVudCgnb25lT2ZTY2hlbWEnLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuaW1wb3J0IEZvcm0gZnJvbSAnLi9mb3JtJztcbmltcG9ydCBBbGxPZlNjaGVtYSBmcm9tICcuL2FsbC1vZi1zY2hlbWEnO1xuaW1wb3J0IEFycmF5U2NoZW1hIGZyb20gJy4vYXJyYXktc2NoZW1hJztcbmltcG9ydCBCYXNpY1R5cGVTY2hlbWEgZnJvbSAnLi9iYXNpYy10eXBlLXNjaGVtYSc7XG5pbXBvcnQgR2VuZXJpY1NjaGVtYSBmcm9tICcuL2dlbmVyaWMtc2NoZW1hJztcbmltcG9ydCBPYmplY3RTY2hlbWEgZnJvbSAnLi9vYmplY3Qtc2NoZW1hJztcbmltcG9ydCBPbmVPZlNjaGVtYSBmcm9tICcuL29uZS1vZi1zY2hlbWEnO1xuaW1wb3J0IFZhbGlkYXRpb24gZnJvbSAnLi92YWxpZGF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhci5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hJywgW1xuICBGb3JtLFxuICBBbGxPZlNjaGVtYSxcbiAgQXJyYXlTY2hlbWEsXG4gIEJhc2ljVHlwZVNjaGVtYSxcbiAgR2VuZXJpY1NjaGVtYSxcbiAgT2JqZWN0U2NoZW1hLFxuICBPbmVPZlNjaGVtYSxcbiAgVmFsaWRhdGlvblxuXSkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEuZm9ybScsIFtdKVxuICAuY29tcG9uZW50KCdqc29uU2NoZW1hRm9ybScsIENvbXBvbmVudCkubmFtZTtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5odG1sJztcblxuY29uc3QgQ29tcG9uZW50ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBzY2hlbWE6ICc8JyxcbiAgICBtb2RlbDogJzwnLFxuICAgIGVycm9yczogJzwnLFxuICAgIGxvY2FsZTogJzwnLFxuICAgIHRyYW5zbGF0aW9uczogJzwnLFxuICAgIG9uQ2hhbmdlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuIiwiaW1wb3J0IHsgaXNWYWxpZFNjaGVtYSB9IGZyb20gJy4uL3ZhbGlkYXRpb24vc2NoZW1hLXZhbGlkYXRvcnMnO1xuXG5jbGFzcyBDb250cm9sbGVyIHtcbiAgb25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKSB7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSBpc1ZhbGlkU2NoZW1hKG1vZGVsLCB0aGlzLnNjaGVtYSk7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgbW9kZWwsIGlzVmFsaWQsIHNjaGVtYSB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8Z2VuZXJpYy1zY2hlbWEgc2NoZW1hPSRjdHJsLnNjaGVtYSBtb2RlbD0kY3RybC5tb2RlbCBlcnJvcnM9JGN0cmwuZXJyb3JzIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSlcXFwiPiA8L2dlbmVyaWMtc2NoZW1hPiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc2NoZW1hOiAnPCcsXG4gICAgbW9kZWw6ICc8JyxcbiAgICBlcnJvcnM6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICB0cmFuc2xhdGlvbnM6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImltcG9ydCB7IGdldFZhbGlkTW9kZWxQYXJ0cyB9IGZyb20gJy4uL3ZhbGlkYXRpb24vdmFsaWQtbW9kZWwnO1xuXG5jbGFzcyBDb250cm9sbGVyIHtcbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc2NoZW1hIHx8IGNoYW5nZXMubW9kZWwpIHtcbiAgICAgIC8vIFdlIGtlZXAgZWFjaCBtb2RlbCBzZXBhcmF0ZWx5LCBhbmQgY29tYmluZSB0aGVtIGZvciBicm9hZGNhc3QsIHRoaXMgZ2l2ZXNcbiAgICAgIC8vIGJldHRlciBjb250cm9sIG92ZXIgY2xlYW5pbmcgdXAgdGhlIG1vZGVsIGFzIHdlIGRlYWwgd2l0aCB2YWx1ZXMgdGhhdCBhcmVcbiAgICAgIC8vIHJlbW92ZWQuXG4gICAgICB0aGlzLm1vZGVscyA9IHNwbGl0TW9kZWwodGhpcy5tb2RlbCwgdGhpcy5zY2hlbWEgPyB0aGlzLnNjaGVtYS5hbGxPZiA6IFtdKTtcbiAgICB9XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKGluZGV4LCBtb2RlbCwgc2NoZW1hKSB7XG4gICAgY29uc3Qgc2NoZW1hRm9ySW5kZXggPSB0aGlzLnNjaGVtYS5hbGxPZltpbmRleF07XG5cbiAgICB0aGlzLm1vZGVsc1tpbmRleF0gPSBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWwsIHNjaGVtYUZvckluZGV4KTtcblxuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgbW9kZWw6IGNvbWJpbmVNb2RlbHModGhpcy5tb2RlbHMpLCBzY2hlbWEgfSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0TW9kZWwobW9kZWwsIHNjaGVtYXMpIHtcbiAgLy8gSWYgd2UgcmVjZWl2ZSBhIG1vZGVsLCBicmVhayBpdCBkb3duIHRvIHBhcnRzIHZhbGlkIGZvciBlYWNoIHNjaGVtYVxuICBjb25zdCBtb2RlbHMgPSBbXTtcbiAgaWYgKG1vZGVsICYmIHNjaGVtYXMpIHtcbiAgICBzY2hlbWFzLmZvckVhY2goKHNjaGVtYSkgPT4ge1xuICAgICAgbW9kZWxzLnB1c2goZ2V0VmFsaWRNb2RlbFBhcnRzKG1vZGVsLCBzY2hlbWEpIHx8IHt9KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbW9kZWxzO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lTW9kZWxzKG1vZGVscykge1xuICByZXR1cm4gbW9kZWxzLnJlZHVjZSgoY3VycmVudCwgY29tYmluZWQpID0+IGFuZ3VsYXIuZXh0ZW5kKGNvbWJpbmVkLCBjdXJyZW50KSwge30pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxoMyBuZy1pZj0kY3RybC5zY2hlbWEudGl0bGUgY2xhc3M9cGFnZS1oZWFkZXI+IHt7ICRjdHJsLnNjaGVtYS50aXRsZSB9fSA8L2gzPiA8cCBuZy1pZj0kY3RybC5zY2hlbWEuZGVzY3JpcHRpb24+IHt7ICRjdHJsLnNjaGVtYS5kZXNjcmlwdGlvbiB9fSA8L3A+IDxkaXYgbmctaWY9JGN0cmwuc2NoZW1hLmhlbHAud2FybmluZyBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtd2FybmluZ1xcXCI+IHt7ICRjdHJsLnNjaGVtYS5oZWxwLndhcm5pbmcgfX0gPC9kaXY+IDxkaXYgY2xhc3M9cm93PiA8ZGl2IG5nLXJlcGVhdD1cXFwiKGluZGV4LCBuZXN0ZWRTY2hlbWEpIGluICRjdHJsLnNjaGVtYS5hbGxPZlxcXCIgY2xhc3M9Y29sLXhzLTEyIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2NvbC1zbS00JzogISRjdHJsLm5hcnJvdyAgJiYgbmVzdGVkU2NoZW1hLndpZHRoID09PSAnc20nLFxcbiAgICAgICdjb2wtc20tNic6ICEkY3RybC5uYXJyb3cgICYmIG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ21kJyxcXG4gICAgICAnY29sLXNtLTEyJzogJGN0cmwubmFycm93IHx8IG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ2xnJ1xcbiAgICB9XFxcIj4gPGdlbmVyaWMtc2NoZW1hIHNjaGVtYT1uZXN0ZWRTY2hlbWEgbW9kZWw9JGN0cmwubW9kZWxzW2luZGV4XSBlcnJvcnM9JGN0cmwuZXJyb3JzIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UoaW5kZXgsIG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9nZW5lcmljLXNjaGVtYT4gPC9kaXY+IDwvZGl2PiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc2NoZW1hOiAnPCcsXG4gICAgbW9kZWw6ICc8JyxcbiAgICBlcnJvcnM6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICB0cmFuc2xhdGlvbnM6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImNvbnN0IHNpbXBsZVR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2ludGVnZXInLCAnYm9vbGVhbiddO1xuXG5jbGFzcyBDb250cm9sbGVyIHtcbiAgJG9uSW5pdCgpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5tb2RlbCkpIHtcbiAgICAgIGNvbnN0IGFycmF5VHlwZSA9IGdldEFycmF5VHlwZSh0aGlzLnNjaGVtYSk7XG4gICAgICBjb25zdCBuZXdJdGVtID0gZ2V0TmV3SXRlbShhcnJheVR5cGUpO1xuXG4gICAgICB0aGlzLm1vZGVsID0gW107XG4gICAgICBpZiAobmV3SXRlbSkge1xuICAgICAgICAvLyBTZWVkIHRoZSBhcnJheSB3aXRoIGEgbmV3SXRlbSB0byBzaG93IG9uZSBlbXB0eSBmb3JtXG4gICAgICAgIHRoaXMubW9kZWwucHVzaChuZXdJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKGluZGV4LCBtb2RlbCwgc2NoZW1hKSB7XG4gICAgdGhpcy5tb2RlbFtpbmRleF0gPSBtb2RlbDtcbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh7IG1vZGVsOiB0aGlzLm1vZGVsLCBzY2hlbWEgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlKGluZGV4KSB7XG4gICAgaWYgKHRoaXMubW9kZWxbaW5kZXhdKSB7XG4gICAgICB0aGlzLm1vZGVsLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgYWRkKCkge1xuICAgIGNvbnN0IGFycmF5VHlwZSA9IGdldEFycmF5VHlwZSh0aGlzLnNjaGVtYSk7XG4gICAgY29uc3QgbmV3SXRlbSA9IGdldE5ld0l0ZW0oYXJyYXlUeXBlKTtcbiAgICBpZiAobmV3SXRlbSkge1xuICAgICAgdGhpcy5tb2RlbC5wdXNoKG5ld0l0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIGlzU2ltcGxlVHlwZSh0eXBlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gc2ltcGxlVHlwZXMuaW5kZXhPZih0eXBlKSA+PSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFycmF5VHlwZShzY2hlbWEpIHtcbiAgcmV0dXJuIHNjaGVtYSAmJiBzY2hlbWEuaXRlbXMgJiYgc2NoZW1hLml0ZW1zLnR5cGU7XG59XG5cbmZ1bmN0aW9uIGdldE5ld0l0ZW0oYXJyYXlUeXBlKSB7XG4gIGlmIChhcnJheVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGlmIChhcnJheVR5cGUgPT09ICdhcnJheScpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IG5nLWlmPSRjdHJsLmlzU2ltcGxlVHlwZSgkY3RybC5zY2hlbWEuaXRlbXMudHlwZSk+IFVuc3VwcG9ydGVkIDwvZGl2PiA8ZGl2IG5nLWlmPSEkY3RybC5pc1NpbXBsZVR5cGUoJGN0cmwuc2NoZW1hLml0ZW1zLnR5cGUpPiA8aDQgY2xhc3M9cGFnZS1oZWFkZXIgbmctaWY9JGN0cmwuc2NoZW1hLnRpdGxlPiB7eyAkY3RybC5zY2hlbWEudGl0bGUgfX0gPC9oND4gPHAgbmctaWY9JGN0cmwuc2NoZW1hLmRlc2NyaXB0aW9uPiB7eyAkY3RybC5zY2hlbWEuZGVzY3JpcHRpb24gfX0gPC9wPiA8ZGl2IG5nLXJlcGVhdD1cXFwiKGluZGV4LCBjaGlsZE1vZGVsKSBpbiAkY3RybC5tb2RlbFxcXCI+IDxociBuZy1pZj1cXFwiaW5kZXggPiAwXFxcIiBjbGFzcz1cXFwibS10LTEgbS1iLTJcXFwiLz4gPGRpdiBjbGFzcz1yb3c+IDxkaXYgY2xhc3M9Y29sLXNtLTk+IDxnZW5lcmljLXNjaGVtYSBzY2hlbWE9JGN0cmwuc2NoZW1hLml0ZW1zIG1vZGVsPWNoaWxkTW9kZWwgZXJyb3JzPSRjdHJsLmVycm9yc1tpbmRleF0gbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShpbmRleCwgbW9kZWwsIHNjaGVtYSlcXFwiPiA8L2dlbmVyaWMtc2NoZW1hPiA8L2Rpdj4gPGRpdiBjbGFzcz1jb2wtc20tMz4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kYW5nZXIgYnRuLWJsb2NrIG0tdC0zXFxcIiBuZy1jbGljaz0kY3RybC5yZW1vdmUoaW5kZXgpIG5nLWRpc2FibGVkPVxcXCJpbmRleCA8ICRjdHJsLnNjaGVtYS5taW5JdGVtc1xcXCI+IHt7ICRjdHJsLnRyYW5zbGF0aW9ucy5hcnJheS5yZW1vdmUgfX0gPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgbmctZGlzYWJsZWQ9XFxcIiRjdHJsLnNjaGVtYS5tYXhJdGVtcyAmJiAkY3RybC5tb2RlbC5sZW5ndGggPj0gJGN0cmwuc2NoZW1hLm1heEl0ZW1zXFxcIiBuZy1jbGljaz0kY3RybC5hZGQoKT4ge3sgJGN0cmwudHJhbnNsYXRpb25zLmFycmF5LmFkZCB9fSA8L2J1dHRvbj4gPC9kaXY+IFwiOyIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5odG1sJztcblxuY29uc3QgQ29tcG9uZW50ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBzY2hlbWE6ICc8JyxcbiAgICBtb2RlbDogJzwnLFxuICAgIGVycm9yczogJzwnLFxuICAgIGxvY2FsZTogJzwnLFxuICAgIHRyYW5zbGF0aW9uczogJzwnLFxuICAgIHJlcXVpcmVkOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgeyBnZXRWYWxpZGF0aW9uRmFpbHVyZXMgfSBmcm9tICcuLi92YWxpZGF0aW9uL3ZhbGlkYXRpb24tZmFpbHVyZXMnO1xuXG5jbGFzcyBDb250cm9sbGVyIHtcbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLmtleSA9IE1hdGguZmxvb3IoMTAwMDAwMDAwICogTWF0aC5yYW5kb20oKSk7XG5cbiAgICBpZiAoIXRoaXMubW9kZWwgJiYgdGhpcy5zY2hlbWEuZGVmYXVsdCkge1xuICAgICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHRoaXMuc2NoZW1hLmRlZmF1bHQpO1xuICAgIH1cbiAgfVxuXG4gIG9uTW9kZWxDaGFuZ2UobW9kZWwpIHtcbiAgICB0aGlzLnZhbGlkYXRpb25LZXlzID0gZ2V0VmFsaWRhdGlvbkZhaWx1cmVzKG1vZGVsLCB0aGlzLnNjaGVtYSwgdGhpcy5yZXF1aXJlZCk7XG5cbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh7IG1vZGVsLCBzY2hlbWE6IHRoaXMuc2NoZW1hIH0pO1xuICAgIH1cbiAgfVxuXG4gIGdldFZhbGlkYXRpb25NZXNzYWdlcygpIHtcbiAgICByZXR1cm4gKHRoaXMuc2NoZW1hICYmIHRoaXMuc2NoZW1hLnZhbGlkYXRpb25NZXNzYWdlcylcbiAgICAgIHx8ICh0aGlzLnRyYW5zbGF0aW9ucyAmJiB0aGlzLnRyYW5zbGF0aW9ucy52YWxpZGF0aW9uKSB8fCBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPHR3LWZpZWxkIG5hbWU9XFxcInt7ICRjdHJsLmtleSB9fVxcXCIgbW9kZWw9JGN0cmwubW9kZWwgZmllbGQ9JGN0cmwuc2NoZW1hIHJlcXVpcmVkPSRjdHJsLnJlcXVpcmVkIGxvY2FsZT1cXFwie3sgJGN0cmwubG9jYWxlIH19XFxcIiBvbi1jaGFuZ2U9JGN0cmwub25Nb2RlbENoYW5nZSh2YWx1ZSkgZXJyb3ItbWVzc2FnZT0kY3RybC5lcnJvcnMgd2FybmluZy1tZXNzYWdlPSRjdHJsLnNjaGVtYS5oZWxwLndhcm5pbmcgdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC5nZXRWYWxpZGF0aW9uTWVzc2FnZXMoKSB1cGxvYWQtb3B0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMudXBsb2FkIGNsYXNzPWJ0bi1ibG9jaz4gPC90dy1maWVsZD4gXCI7IiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuaW1wb3J0IEJhc2ljVHlwZVNjaGVtYSBmcm9tICcuLi9iYXNpYy10eXBlLXNjaGVtYSc7XG5pbXBvcnQgT2JqZWN0U2NoZW1hIGZyb20gJy4uL29iamVjdC1zY2hlbWEnO1xuaW1wb3J0IEFycmF5U2NoZW1hIGZyb20gJy4uL2FycmF5LXNjaGVtYSc7XG5pbXBvcnQgQWxsT2ZTY2hlbWEgZnJvbSAnLi4vYWxsLW9mLXNjaGVtYSc7XG5pbXBvcnQgT25lT2ZTY2hlbWEgZnJvbSAnLi4vb25lLW9mLXNjaGVtYSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEuZ2VuZXJpYycsIFtcbiAgICBCYXNpY1R5cGVTY2hlbWEsXG4gICAgT2JqZWN0U2NoZW1hLFxuICAgIEFycmF5U2NoZW1hLFxuICAgIEFsbE9mU2NoZW1hLFxuICAgIE9uZU9mU2NoZW1hXG4gIF0pXG4gIC5jb21wb25lbnQoJ2dlbmVyaWNTY2hlbWEnLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc2NoZW1hOiAnPCcsXG4gICAgbW9kZWw6ICc8JyxcbiAgICBlcnJvcnM6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICB0cmFuc2xhdGlvbnM6ICc8JyxcbiAgICByZXF1aXJlZDogJzwnLFxuICAgIGhpZGVUaXRsZTogJzwnLFxuICAgIG9uQ2hhbmdlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuIiwiY2xhc3MgQ29udHJvbGxlciB7XG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnNjaGVtYSkge1xuICAgICAgY29uc3QgbmV3U2NoZW1hID0gY2hhbmdlcy5zY2hlbWEuY3VycmVudFZhbHVlO1xuXG4gICAgICAvLyBJZiB0aGlzIHNjaGVtYSBpcyBqdXN0IGEgc2luZ2xlIGVudW0sIHNldCB0aGUgdmFsdWVcbiAgICAgIGlmIChuZXdTY2hlbWEgJiYgbmV3U2NoZW1hLmVudW0gJiYgbmV3U2NoZW1hLmVudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMub25Nb2RlbENoYW5nZShuZXdTY2hlbWEuZW51bVswXSwgbmV3U2NoZW1hKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpIHtcbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh7IG1vZGVsLCBzY2hlbWEgfSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPG9uZS1vZi1zY2hlbWEgbmctaWY9JGN0cmwuc2NoZW1hLm9uZU9mIG1vZGVsPSRjdHJsLm1vZGVsIHNjaGVtYT0kY3RybC5zY2hlbWEgZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9vbmUtb2Ytc2NoZW1hPiA8YWxsLW9mLXNjaGVtYSBuZy1pZj0kY3RybC5zY2hlbWEuYWxsT2YgbW9kZWw9JGN0cmwubW9kZWwgc2NoZW1hPSRjdHJsLnNjaGVtYSBlcnJvcnM9JGN0cmwuZXJyb3JzIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSlcXFwiPiA8L2FsbC1vZi1zY2hlbWE+IDxiYXNpYy10eXBlLXNjaGVtYSBuZy1pZj1cXFwiJGN0cmwuc2NoZW1hLnR5cGUgJiYgKCRjdHJsLnNjaGVtYS50eXBlICE9PSAnb2JqZWN0JyAmJiAkY3RybC5zY2hlbWEudHlwZSAhPT0gJ2FycmF5JylcXFwiIG1vZGVsPSRjdHJsLm1vZGVsIHNjaGVtYT0kY3RybC5zY2hlbWEgZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgcmVxdWlyZWQ9JGN0cmwucmVxdWlyZWQgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9iYXNpYy10eXBlLXNjaGVtYT4gPG9iamVjdC1zY2hlbWEgbmctaWY9XFxcIiRjdHJsLnNjaGVtYS50eXBlID09PSAnb2JqZWN0J1xcXCIgbW9kZWw9JGN0cmwubW9kZWwgc2NoZW1hPSRjdHJsLnNjaGVtYSBlcnJvcnM9JGN0cmwuZXJyb3JzIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSlcXFwiIGhpZGUtdGl0bGU9JGN0cmwuaGlkZVRpdGxlPiA8L29iamVjdC1zY2hlbWE+IDxhcnJheS1zY2hlbWEgbmctaWY9XFxcIiRjdHJsLnNjaGVtYS50eXBlID09PSAnYXJyYXknXFxcIiBtb2RlbD0kY3RybC5tb2RlbCBzY2hlbWE9JGN0cmwuc2NoZW1hIGVycm9ycz0kY3RybC5lcnJvcnMgbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKVxcXCI+IDwvYXJyYXktc2NoZW1hPiBcIjsiLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc2NoZW1hOiAnPCcsXG4gICAgbW9kZWw6ICc8JyxcbiAgICBlcnJvcnM6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICB0cmFuc2xhdGlvbnM6ICc8JyxcbiAgICBoaWRlVGl0bGU6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICAkb25Jbml0KCkge1xuICAgIHRoaXMub3V0cHV0TW9kZWwgPSBhbmd1bGFyLmV4dGVuZCh7fSwgdGhpcy5tb2RlbCB8fCB7fSk7XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKHByb3BlcnR5LCBtb2RlbCwgc2NoZW1hKSB7XG4gICAgdGhpcy5vdXRwdXRNb2RlbFtwcm9wZXJ0eV0gPSBtb2RlbDtcblxuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgbW9kZWw6IHRoaXMub3V0cHV0TW9kZWwsIHNjaGVtYSB9KTtcbiAgICB9XG4gIH1cblxuICBpc1JlcXVpcmVkKHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hLnJlcXVpcmVkICYmIHRoaXMuc2NoZW1hLnJlcXVpcmVkLmluY2x1ZGVzKHByb3BlcnR5KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxmaWVsZHNldD4gPGxlZ2VuZCBuZy1pZj1cXFwiJGN0cmwuc2NoZW1hLnRpdGxlICYmICEkY3RybC5oaWRlVGl0bGVcXFwiPiB7eyAkY3RybC5zY2hlbWEudGl0bGUgfX0gPC9sZWdlbmQ+IDxwIG5nLWlmPSRjdHJsLnNjaGVtYS5kZXNjcmlwdGlvbj4ge3sgJGN0cmwuc2NoZW1hLmRlc2NyaXB0aW9uIH19IDwvcD4gPGRpdiBuZy1pZj0kY3RybC5zY2hlbWEuaGVscC53YXJuaW5nIGNsYXNzPVxcXCJhbGVydCBhbGVydC13YXJuaW5nXFxcIj4ge3sgJGN0cmwuc2NoZW1hLmhlbHAud2FybmluZyB9fSA8L2Rpdj4gPGRpdiBjbGFzcz1yb3c+IDxkaXYgbmctcmVwZWF0PVxcXCIocHJvcGVydHksIG5lc3RlZFNjaGVtYSkgaW4gJGN0cmwuc2NoZW1hLnByb3BlcnRpZXNcXFwiIGNsYXNzPWNvbC14cy0xMiBuZy1oaWRlPW5lc3RlZFNjaGVtYS5oaWRkZW4gbmctY2xhc3M9XFxcIntcXG4gICAgICAgICdjb2wtc20tNCc6ICEkY3RybC5uYXJyb3cgICYmIG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ3NtJyxcXG4gICAgICAgICdjb2wtc20tNic6ICEkY3RybC5uYXJyb3cgICYmIG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ21kJyxcXG4gICAgICAgICdjb2wtc20tMTInOiAkY3RybC5uYXJyb3cgfHwgbmVzdGVkU2NoZW1hLndpZHRoID09PSAnbGcnXFxuICAgICAgfVxcXCI+IDxnZW5lcmljLXNjaGVtYSBzY2hlbWE9bmVzdGVkU2NoZW1hIG1vZGVsPSRjdHJsLm1vZGVsW3Byb3BlcnR5XSBlcnJvcnM9JGN0cmwuZXJyb3JzW3Byb3BlcnR5XSBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgcmVxdWlyZWQ9JGN0cmwuaXNSZXF1aXJlZChwcm9wZXJ0eSkgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKHByb3BlcnR5LCBtb2RlbCwgc2NoZW1hKVxcXCI+IDwvZ2VuZXJpYy1zY2hlbWE+IDwvZGl2PiA8L2Rpdj4gPC9maWVsZHNldD4gXCI7IiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgeyBnZXRWYWxpZE1vZGVsUGFydHMgfSBmcm9tICcuLi92YWxpZGF0aW9uL3ZhbGlkLW1vZGVsJztcbmltcG9ydCB7IGlzVmFsaWRTY2hlbWEgfSBmcm9tICcuLi92YWxpZGF0aW9uL3NjaGVtYS12YWxpZGF0b3JzJztcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICAgIHRoaXMuYWN0aXZlSW5kZXggPSAxO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc2NoZW1hIHx8IGNoYW5nZXMubW9kZWwpIHtcbiAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVTY2hlbWFJbmRleCh0aGlzLnNjaGVtYSwgdGhpcy5tb2RlbCk7XG4gICAgICB0aGlzLnByZWZpbGxNb2RlbHMoKTtcbiAgICB9XG4gIH1cblxuICBwcmVmaWxsTW9kZWxzKCkge1xuICAgIGlmICghdGhpcy5zY2hlbWEgfHwgIXRoaXMuc2NoZW1hLm9uZU9mKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubW9kZWxzID0gZ2V0TW9kZWxQYXJ0c0ZvclNjaGVtYXModGhpcy5tb2RlbCwgdGhpcy5zY2hlbWEub25lT2YpO1xuICB9XG5cbiAgb25TY2hlbWFDaGFuZ2UobmV3U2NoZW1hLCBpbmRleCkge1xuICAgIHRoaXMubW9kZWxzW2luZGV4XSA9IGdldFZhbGlkTW9kZWxQYXJ0cyh0aGlzLm1vZGVsc1tpbmRleF0sIG5ld1NjaGVtYSk7XG4gICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHRoaXMubW9kZWxzW2luZGV4XSwgbmV3U2NoZW1hKTtcbiAgfVxuXG4gIG9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSwgaW5kZXgpIHtcbiAgICB0aGlzLm1vZGVsc1tpbmRleF0gPSBtb2RlbDtcbiAgICBpZiAodGhpcy5vbkNoYW5nZSkge1xuICAgICAgdGhpcy5vbkNoYW5nZSh7IG1vZGVsLCBzY2hlbWEgfSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoaWNoIHNjaGVtYSB0byBzaG93IGludGl0aWFsbHkgYmFzZWQgb24gdmFsaWRpdHkgb2YgbW9kZWxcbiAqIERlZmF1bHQgdG8gMSAoYWN0aXZlIGlzIDEtaW5kZXhlZClcbiAqL1xuZnVuY3Rpb24gZ2V0QWN0aXZlU2NoZW1hSW5kZXgoc2NoZW1hLCBtb2RlbCkge1xuICBpZiAoIXNjaGVtYSB8fCAhc2NoZW1hLm9uZU9mKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYS5vbmVPZi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc1ZhbGlkU2NoZW1hKG1vZGVsLCBzY2hlbWEub25lT2ZbaV0pKSB7XG4gICAgICByZXR1cm4gaSArIDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDE7XG59XG5cbmZ1bmN0aW9uIGdldE1vZGVsUGFydHNGb3JTY2hlbWFzKG1vZGVsLCBzY2hlbWFzKSB7XG4gIHJldHVybiBzY2hlbWFzLm1hcChzY2hlbWEgPT4gZ2V0VmFsaWRNb2RlbFBhcnRzKG1vZGVsLCBzY2hlbWEpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8bGFiZWwgY2xhc3M9Y29udHJvbC1sYWJlbCBuZy1pZj0kY3RybC5zY2hlbWEudGl0bGU+IHt7ICRjdHJsLnNjaGVtYS50aXRsZSB9fSA8L2xhYmVsPiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIG0tYi01XFxcIj4gPGRpdiBjbGFzcz1yYWRpbyBuZy1yZXBlYXQ9XFxcIihpbmRleCwgc2NoZW1hKSBpbiAkY3RybC5zY2hlbWEub25lT2ZcXFwiIG5nLWNsYXNzPVxcXCJ7J3JhZGlvLWxnJzogc2NoZW1hLmRlc2NyaXB0aW9ufVxcXCI+IDxsYWJlbD4gPHR3LXJhZGlvIG5nLW1vZGVsPSRjdHJsLmFjdGl2ZUluZGV4IG5nLXZhbHVlPVxcXCIoaW5kZXggKyAxKVxcXCIgbmctY2hhbmdlPVxcXCIkY3RybC5vblNjaGVtYUNoYW5nZShzY2hlbWEsIGluZGV4KVxcXCI+PC90dy1yYWRpbz4ge3sgc2NoZW1hLnRpdGxlIH19IDxwIG5nLWlmPXNjaGVtYS5kZXNjcmlwdGlvbiBjbGFzcz1cXFwic2Vjb25kYXJ5IG0tYi0wXFxcIj4ge3sgc2NoZW1hLmRlc2NyaXB0aW9uIH19IDwvcD4gPC9sYWJlbD4gPC9kaXY+IDwvZGl2PiA8ZGl2IG5nLXJlcGVhdD1cXFwiKGluZGV4LCBzY2hlbWEpIGluICRjdHJsLnNjaGVtYS5vbmVPZlxcXCI+IDxnZW5lcmljLXNjaGVtYSBuZy1pZj1cXFwiJGN0cmwuYWN0aXZlSW5kZXggPT09IChpbmRleCArIDEpXFxcIiBzY2hlbWE9c2NoZW1hIG1vZGVsPSRjdHJsLm1vZGVsc1tpbmRleF0gZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEsIGluZGV4KVxcXCIgaGlkZS10aXRsZT10cnVlPiA8L2dlbmVyaWMtc2NoZW1hPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmltcG9ydCB7IGdldFZhbGlkTW9kZWxQYXJ0cyB9IGZyb20gJy4vdmFsaWQtbW9kZWwnO1xuaW1wb3J0IHsgZ2V0VmFsaWRhdGlvbkZhaWx1cmVzIH0gZnJvbSAnLi92YWxpZGF0aW9uLWZhaWx1cmVzJztcbmltcG9ydCB7IGlzVmFsaWRTY2hlbWEgfSBmcm9tICcuL3NjaGVtYS12YWxpZGF0b3JzJztcbmltcG9ydCAqIGFzIHJ1bGVWYWxpZGF0b3JzIGZyb20gJy4vcnVsZS12YWxpZGF0b3JzJztcbmltcG9ydCAqIGFzIHR5cGVWYWxpZGF0b3JzIGZyb20gJy4vdHlwZS12YWxpZGF0b3JzJztcblxuZnVuY3Rpb24gVmFsaWRhdGlvbigpIHtcbiAgdGhpcy5nZXRWYWxpZE1vZGVsUGFydHMgPSBnZXRWYWxpZE1vZGVsUGFydHM7XG4gIHRoaXMuZ2V0VmFsaWRhdGlvbkZhaWx1cmVzID0gZ2V0VmFsaWRhdGlvbkZhaWx1cmVzO1xuICB0aGlzLmlzVmFsaWRTY2hlbWEgPSBpc1ZhbGlkU2NoZW1hO1xuICB0aGlzLnJ1bGVWYWxpZGF0b3JzID0gcnVsZVZhbGlkYXRvcnM7XG4gIHRoaXMudHlwZVZhbGlkYXRvcnMgPSB0eXBlVmFsaWRhdG9ycztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS52YWxpZGF0aW9uJywgW10pXG4gIC5zZXJ2aWNlKCdTY2hlbWFWYWxpZGF0aW9uJywgVmFsaWRhdGlvbikubmFtZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=